/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestUtil,
  TestUtilInterface,
} from "../../../contracts/test/TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "encodeUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "initCode",
        type: "bytes",
      },
    ],
    name: "isEip7702InitCode",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610393908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081632d9bd99b14610234575063a124062e14610032575f80fd5b346102305760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102305760043567ffffffffffffffff81116102305780600401906101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126102305781359173ffffffffffffffffffffffffffffffffffffffff83168093036102305760c46100d5604484018361030c565b908160405191823720926101036100ef606483018561030c565b9081604051918237209360e483019061030c565b908160405191823720926040519460208601967f29a0bca4af4be3421398da00295e58e6d7de38cb492214754cb6a47507dd6f8e8852604087015260248301356060870152608086015260a0850152608481013560c085015260a481013560e08501520135610100830152610120820152610120815261014081019181831067ffffffffffffffff841117610203577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f61018093866040526020875283518091816101608701528686015e5f8582860101520116810103010190f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f80fd5b346102305760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610230576004359067ffffffffffffffff821161023057366023830112156102305781600401359167ffffffffffffffff83116102305736602484830101116102305760209260246102b192016102b7565b15158152f35b9060021161030757357fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167f77020000000000000000000000000000000000000000000000000000000000001490565b505f90565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610230570180359067ffffffffffffffff8211610230576020019181360383136102305756fea2646970667358221220e8274a426c0efc890a2dced1f800b1394865c3bbb9bf8cf9685e3a262ced672b64736f6c634300081c0033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  override connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
