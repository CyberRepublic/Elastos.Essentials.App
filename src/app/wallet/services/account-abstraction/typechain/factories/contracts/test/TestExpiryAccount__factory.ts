/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestExpiryAccount,
  TestExpiryAccountInterface,
} from "../../../contracts/test/TestExpiryAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "anEntryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "ERC1967InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC1967NonPayable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "error",
        type: "bytes",
      },
    ],
    name: "ExecuteError",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedCall",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [],
    name: "UUPSUnauthorizedCallContext",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "slot",
        type: "bytes32",
      },
    ],
    name: "UUPSUnsupportedProxiableUUID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "SimpleAccountInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "addDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "_after",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "_until",
        type: "uint48",
      },
    ],
    name: "addTemporaryOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct BaseAccount.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "executeBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "anOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ownerAfter",
    outputs: [
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ownerUntil",
    outputs: [
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawDepositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c0346100af57601f611cba38819003918201601f19168301916001600160401b038311848410176100b3578084926020946040528339810103126100af57516001600160a01b03811681036100af573060805260a052604051611bf290816100c88239608051818181610aab0152610b9f015260a0518181816102110152818161051a0152818161077d0152818161096d01528181610edc01528181610fb1015281816112e3015261182b0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe608080604052600436101561001c575b50361561001a575f80fd5b005b5f905f3560e01c90816301ffc9a7146114e157508063150b7a021461145457806319822f7c1461125b57806334fcd5be1461110b5780633e476951146110a05780633fb5a7a1146110355780634a58db1914610f705780634d44560d14610e6b5780634f1ef28614610b2357806352d1902d14610a655780638da5cb5b14610a14578063ad3cb1cc14610991578063b0d691fe14610922578063b61d27f614610888578063bc197c81146107b6578063c399ec8814610704578063c4d66de8146103e4578063cf6dca551461028e578063d087d288146101925763f23a6e610361000f573461018f5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f576101376115ce565b506101406115f1565b5060843567ffffffffffffffff811161018d57610161903690600401611614565b505060206040517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b505b80fd5b503461018f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f57604051907f35567e1a00000000000000000000000000000000000000000000000000000000825230600483015280602483015260208260448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610282579061024b575b602090604051908152f35b506020813d60201161027a575b8161026560209383611673565b810103126102765760209051610240565b5f80fd5b3d9150610258565b604051903d90823e3d90fd5b503461018f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f576102c66115ce565b60243565ffffffffffff81168091036103e0576044359165ffffffffffff83168093036103dc576102f56118f3565b8183111561037e5773ffffffffffffffffffffffffffffffffffffffff1690818452600160205260408420907fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000008254161790558252600260205260408220907fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000082541617905580f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f77726f6e6720756e74696c2f61667465720000000000000000000000000000006044820152fd5b8380fd5b8280fd5b503461018f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f5761041c6115ce565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549060ff8260401c16159167ffffffffffffffff8116801590816106fc575b60011490816106f2575b1590816106e9575b506106c15790818360017fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000073ffffffffffffffffffffffffffffffffffffffff9516177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005561066c575b5016807fffffffffffffffffffffffff00000000000000000000000000000000000000008454161783558073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de8580a36105666118f3565b8083526001602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000008154169055825260026020526040822065ffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000008254161790556105d85780f35b7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b7fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000001668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00555f6104d8565b6004847ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b9050155f61046e565b303b159150610466565b84915061045c565b503461018f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f57604051907f70a0823100000000000000000000000000000000000000000000000000000000825230600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610282579061024b57602090604051908152f35b503461018f5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f576107ee6115ce565b506107f76115f1565b5060443567ffffffffffffffff811161018d57610818903690600401611642565b505060643567ffffffffffffffff811161018d5761083a903690600401611642565b505060843567ffffffffffffffff811161018d5761085c903690600401611614565b505060206040517fbc197c81000000000000000000000000000000000000000000000000000000008152f35b503461018f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f57806108c16115ce565b60443567ffffffffffffffff811161091e5782916108e66108f9923690600401611614565b92906108f0611814565b5a93369161171b565b916020835193019160243591f11561090e5780f35b6109166118d9565b602081519101fd5b5050fd5b503461018f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461018f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f5750610a106040516109d2604082611673565b600581527f352e302e300000000000000000000000000000000000000000000000000000006020820152604051918291602083526020830190611751565b0390f35b503461018f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b503461018f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610afb5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b807fe07c8dba0000000000000000000000000000000000000000000000000000000060049252fd5b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f57610b566115ce565b9060243567ffffffffffffffff811161018d573660238201121561018d57610b8890369060248160040135910161171b565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803014908115610e29575b50610e0157610bd76118f3565b73ffffffffffffffffffffffffffffffffffffffff831690604051937f52d1902d000000000000000000000000000000000000000000000000000000008552602085600481865afa80958596610dc9575b50610c5957602484847f4c9c8ce3000000000000000000000000000000000000000000000000000000008252600452fd5b9091847f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8103610d9e5750813b15610d7357807fffffffffffffffffffffffff00000000000000000000000000000000000000007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416177f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28151839015610d405780836020610d3c95519101845af4610d366117e5565b91611b23565b5080f35b50505034610d4b5780f35b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b7f4c9c8ce3000000000000000000000000000000000000000000000000000000008452600452602483fd5b7faa1d49a4000000000000000000000000000000000000000000000000000000008552600452602484fd5b9095506020813d602011610df9575b81610de560209383611673565b81010312610df55751945f610c28565b8480fd5b3d9150610dd8565b6004827fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b905073ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614155f610bca565b503461018f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018f578060043573ffffffffffffffffffffffffffffffffffffffff8116809103610f6d57610ec56118f3565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561091e5782916044839260405194859384927f205c2878000000000000000000000000000000000000000000000000000000008452600484015260243560248401525af18015610f6257610f515750f35b81610f5b91611673565b61018f5780f35b6040513d84823e3d90fd5b50fd5b505f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102765773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b15610276575f602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af1801561102a5761101e575080f35b61001a91505f90611673565b6040513d5f823e3d90fd5b346102765760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102765773ffffffffffffffffffffffffffffffffffffffff6110816115ce565b165f526001602052602065ffffffffffff60405f205416604051908152f35b346102765760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102765773ffffffffffffffffffffffffffffffffffffffff6110ec6115ce565b165f526002602052602065ffffffffffff60405f205416604051908152f35b346102765760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102765760043567ffffffffffffffff81116102765761115a903690600401611642565b611162611814565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301905b8281101561001a578060051b8401358281121561027657840180359073ffffffffffffffffffffffffffffffffffffffff82168203610276575f91816111e26111d7604086950183611794565b91905a92369161171b565b926020808551950193013591f1156111fc5760010161118a565b6001830361120c576109166118d9565b6112146118d9565b906112576040519283927f5a1546750000000000000000000000000000000000000000000000000000000084526004840152604060248401526044830190611751565b0390fd5b346102765760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102765760043567ffffffffffffffff8111610276576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126102765760443573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036113f65773ffffffffffffffffffffffffffffffffffffffff61135361134a61134261133b866101046020980190600401611794565b369161171b565b602435611982565b909291926119bc565b16805f526002835260405f2054905f526001835260405f20549165ffffffffffff8216155f146113ef576001905b806113d7575b5079ffffffffffff00000000000000000000000000000000000000007fffffffffffff00000000000000000000000000000000000000000000000000006040519460d01b169260a01b1617178152f35b5f80808093335af1506113e86117e5565b5084611387565b5f90611381565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152fd5b346102765760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102765761148b6115ce565b506114946115f1565b5060643567ffffffffffffffff8111610276576114b5903690600401611614565b505060206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b346102765760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027657600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361027657817f150b7a0200000000000000000000000000000000000000000000000000000000602093149081156115a4575b811561157a575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483611573565b7f4e2312e0000000000000000000000000000000000000000000000000000000008114915061156c565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361027657565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361027657565b9181601f840112156102765782359167ffffffffffffffff8311610276576020838186019501011161027657565b9181601f840112156102765782359167ffffffffffffffff8311610276576020808501948460051b01011161027657565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116b457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff81116116b457601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611727826116e1565b916117356040519384611673565b829481845281830111610276578281602093845f960137010152565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610276570180359067ffffffffffffffff82116102765760200191813603831361027657565b3d1561180f573d906117f6826116e1565b916118046040519384611673565b82523d5f602084013e565b606090565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016331480156118b9575b1561185b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e746044820152fd5b5073ffffffffffffffffffffffffffffffffffffffff5f54163314611854565b3d604051906020818301016040528082525f602083013e90565b73ffffffffffffffffffffffffffffffffffffffff5f541633148015611979575b1561191b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152fd5b50303314611914565b81519190604183036119b2576119ab9250602082015190606060408401519301515f1a90611a94565b9192909190565b50505f9160029190565b6004811015611a6757806119ce575050565b600181036119fe577ff645eedf000000000000000000000000000000000000000000000000000000005f5260045ffd5b60028103611a3257507ffce698f7000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b600314611a3c5750565b7fd78bce0c000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411611b18579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa1561102a575f5173ffffffffffffffffffffffffffffffffffffffff811615611b0e57905f905f90565b505f906001905f90565b5050505f9160039190565b90611b605750805115611b3857805190602001fd5b7fd6bda275000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580611bb3575b611b71575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b15611b6956fea26469706673582212204b120ebb4ea61f4b4744880d1999edcf21e185848ddd5b54fc6002a9350a837364736f6c634300081c0033";

type TestExpiryAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExpiryAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExpiryAccount__factory extends ContractFactory {
  constructor(...args: TestExpiryAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    anEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestExpiryAccount> {
    return super.deploy(
      anEntryPoint,
      overrides || {}
    ) as Promise<TestExpiryAccount>;
  }
  override getDeployTransaction(
    anEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(anEntryPoint, overrides || {});
  }
  override attach(address: string): TestExpiryAccount {
    return super.attach(address) as TestExpiryAccount;
  }
  override connect(signer: Signer): TestExpiryAccount__factory {
    return super.connect(signer) as TestExpiryAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExpiryAccountInterface {
    return new utils.Interface(_abi) as TestExpiryAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExpiryAccount {
    return new Contract(address, _abi, signerOrProvider) as TestExpiryAccount;
  }
}
