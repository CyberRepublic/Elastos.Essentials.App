/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GasCalcPaymasterWithPostOp,
  GasCalcPaymasterWithPostOpInterface,
} from "../../../contracts/test/GasCalcPaymasterWithPostOp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actualUserOpFeePerGas",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0806040523461015e57602081610ef2803803809161001f8285610188565b83398101031261015e57516001600160a01b03811680820361015e57331561017557602060249161004f336101bf565b6040516301ffc9a760e01b8152631313998b60e31b600482015292839182905afa90811561016a575f9161012b575b50156100e6576080523332036100d8575b604051610cde9081610214823960805181818161020e01528181610311015281816103da015281816104af0152818161055f015281816109bf01528181610aa40152610c220152f35b6100e1326101bf565b61008f565b60405162461bcd60e51b815260206004820152601e60248201527f49456e747279506f696e7420696e74657266616365206d69736d6174636800006044820152606490fd5b90506020813d602011610162575b8161014660209383610188565b8101031261015e5751801515810361015e575f61007e565b5f80fd5b3d9150610139565b6040513d5f823e3d90fd5b631e4fbdf760e01b5f525f60045260245ffd5b601f909101601f19168101906001600160401b038211908210176101ab57604052565b634e487b7160e01b5f52604160045260245ffd5b600180546001600160a01b03199081169091555f80546001600160a01b03938416928116831782559192909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe60806040526004361015610011575f80fd5b5f5f3560e01c80630396cb6014610a49578063205c28781461096757806352b7512c14610828578063715018a61461076457806379ba50971461065a5780637c627b21146105d45780638da5cb5b14610583578063b0d691fe14610514578063bb9fe6bf14610460578063c23a5cea14610382578063c399ec8814610299578063d0e30db0146101cc578063e30c39781461017a5763f2fde38b146100b4575f80fd5b346101775760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101775760043573ffffffffffffffffffffffffffffffffffffffff81168091036101755761010c610bbf565b807fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015573ffffffffffffffffffffffffffffffffffffffff8254167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b505b80fd5b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017757602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b50807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610177578073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b156102965781602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af1801561028b5761027a5750f35b8161028491610b51565b6101775780f35b6040513d84823e3d90fd5b50fd5b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610177576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561028b57829161034c575b602082604051908152f35b90506020813d60201161037a575b8161036760209383610b51565b810103126101755760209150515f610341565b3d915061035a565b50346101775760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017757806103bb610b2e565b6103c3610bbf565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561045c5773ffffffffffffffffffffffffffffffffffffffff602484928360405195869485937fc23a5cea0000000000000000000000000000000000000000000000000000000085521660048401525af1801561028b5761027a5750f35b5050fd5b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017757610497610bbf565b8073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b15610296578180916004604051809481937fbb9fe6bf0000000000000000000000000000000000000000000000000000000083525af1801561028b5761027a5750f35b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101775773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b50346101775760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017757600360043510156101775760243567ffffffffffffffff8111610175573660238201121561017557806004013567ffffffffffffffff8111610656573691016024011161017757610653610c0b565b80f35b8280fd5b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610177573373ffffffffffffffffffffffffffffffffffffffff6001541603610738577fffffffffffffffffffffffff0000000000000000000000000000000000000000600154166001558054337fffffffffffffffffffffffff0000000000000000000000000000000000000000821617825573ffffffffffffffffffffffffffffffffffffffff3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b807f118cdaa7000000000000000000000000000000000000000000000000000000006024925233600452fd5b503461017757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101775761079b610bbf565b7fffffffffffffffffffffffff0000000000000000000000000000000000000000600154166001558073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101775760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101775760043567ffffffffffffffff8111610175577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc61012091360301126101775761089f610c0b565b6040516040810181811067ffffffffffffffff82111761093a5790606091604052600181527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602083017f31000000000000000000000000000000000000000000000000000000000000008152604051958694604086525180928160408801528787015e80868387010152602085015201168101030190f35b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50346101775760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017757806109a0610b2e565b6109a8610bbf565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561045c5773ffffffffffffffffffffffffffffffffffffffff604484928360405195869485937f205c287800000000000000000000000000000000000000000000000000000000855216600484015260243560248401525af1801561028b5761027a5750f35b5060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b2a5760043563ffffffff8116809103610b2a57610a8d610bbf565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610b2a575f906024604051809481937f0396cb60000000000000000000000000000000000000000000000000000000008352600483015234905af18015610b1f57610b11575080f35b610b1d91505f90610b51565b005b6040513d5f823e3d90fd5b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610b2a57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b9257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff5f54163303610bdf57565b7f118cdaa7000000000000000000000000000000000000000000000000000000005f523360045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610c4a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f53656e646572206e6f7420456e747279506f696e7400000000000000000000006044820152fdfea26469706673582212208c03abf13403a2f9055a9924627ba278ec52148b623291d90610cb79c8c5949764736f6c634300081c0033";

type GasCalcPaymasterWithPostOpConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasCalcPaymasterWithPostOpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasCalcPaymasterWithPostOp__factory extends ContractFactory {
  constructor(...args: GasCalcPaymasterWithPostOpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasCalcPaymasterWithPostOp> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<GasCalcPaymasterWithPostOp>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): GasCalcPaymasterWithPostOp {
    return super.attach(address) as GasCalcPaymasterWithPostOp;
  }
  override connect(signer: Signer): GasCalcPaymasterWithPostOp__factory {
    return super.connect(signer) as GasCalcPaymasterWithPostOp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasCalcPaymasterWithPostOpInterface {
    return new utils.Interface(_abi) as GasCalcPaymasterWithPostOpInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasCalcPaymasterWithPostOp {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GasCalcPaymasterWithPostOp;
  }
}
