/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../contracts/test/TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "sudoApprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "sudoMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "sudoTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052346103c557610f596020813803918261001c816103c9565b9384928339810103126103c5575160ff811681036103c55761003e60406103c9565b90600982526805465737445524332360bc1b602083015261005f60406103c9565b600381526205432360ec1b602082015282519091906001600160401b0381116102d657600354600181811c911680156103bb575b60208210146102b857601f8111610358575b506020601f82116001146102f557819293945f926102ea575b50508160011b915f199060031b1c1916176003555b81516001600160401b0381116102d657600454600181811c911680156102cc575b60208210146102b857601f8111610255575b50602092601f82116001146101f457928192935f926101e9575b50508160011b915f199060031b1c1916176004555b33156101d65760025469d3c21bcecceda100000081018091116101c257600255335f525f60205260405f2069d3c21bcecceda1000000815401905560405169d3c21bcecceda100000081525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3608052604051610b6a90816103ef8239608051816104740152f35b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b015190505f80610120565b601f1982169360045f52805f20915f5b86811061023d5750836001959610610225575b505050811b01600455610135565b01515f1960f88460031b161c191690555f8080610217565b91926020600181928685015181550194019201610204565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102ae575b601f0160051c01905b8181106102a35750610106565b5f8155600101610296565b909150819061028d565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100f4565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100be565b601f1982169060035f52805f20915f5b81811061034057509583600195969710610328575b505050811b016003556100d3565b01515f1960f88460031b161c191690555f808061031a565b9192602060018192868b015181550194019201610305565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103b1575b601f0160051c01905b8181106103a657506100a5565b5f8155600101610399565b9091508190610390565b90607f1690610093565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102d65760405256fe60806040526004361015610011575f80fd5b5f3560e01c806305ea5c22146108aa57806306fdde0314610776578063095ea7b31461073257806318160ddd146106f757806323b872dd146105975780632d688ca814610498578063313ce5671461043d57806370a08231146103db57806395d89b41146101e8578063a9059cbb14610199578063dd62ed3e1461010d5763fb4dcefa1461009d575f80fd5b346101095760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576101076100d76108c1565b6100df6108e4565b73ffffffffffffffffffffffffffffffffffffffff82165f525f60205260405f2054916109c1565b005b5f80fd5b346101095760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576101446108c1565b73ffffffffffffffffffffffffffffffffffffffff6101616108e4565b91165f52600160205273ffffffffffffffffffffffffffffffffffffffff60405f2091165f52602052602060405f2054604051908152f35b346101095760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576101dd6101d36108c1565b60243590336109c1565b602060405160018152f35b34610109575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576040515f600454908160011c600183169283156103d1575b6020821084146103a457818552849390811561034457506001146102ca575b5003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681019067ffffffffffffffff82118183101761029d5761029982918260405282610979565b0390f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60045f90815291507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b81831061032857505081016020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061024d565b60209193508060019154838588010152019101909183926102f4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208581019190915291151560051b840190910191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0905061024d565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f169061022e565b346101095760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101095773ffffffffffffffffffffffffffffffffffffffff6104276108c1565b165f525f602052602060405f2054604051908152f35b34610109575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010957602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101095760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576104cf6108c1565b73ffffffffffffffffffffffffffffffffffffffff16602435811561056b576002549080820180921161053e5760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915f9360025584845283825260408420818154019055604051908152a3005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7fec442f05000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b34610109576105a536610907565b9073ffffffffffffffffffffffffffffffffffffffff831692835f52600160205260405f2073ffffffffffffffffffffffffffffffffffffffff33165f5260205260405f20547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361061e575b506101dd93506109c1565b8381106106c357841561069757331561066b576101dd945f52600160205260405f2073ffffffffffffffffffffffffffffffffffffffff33165f526020528360405f209103905584610613565b7f94280d62000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7fe602df05000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b83907ffb8f41b2000000000000000000000000000000000000000000000000000000005f523360045260245260445260645ffd5b34610109575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576020600254604051908152f35b346101095760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576101dd61076c6108c1565b6024359033610ab7565b34610109575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576040515f600354908160011c600183169283156108a0575b6020821084146103a45781855284939081156103445750600114610826575003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681019067ffffffffffffffff82118183101761029d5761029982918260405282610979565b60035f90815291507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b81831061088457505081016020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061024d565b6020919350806001915483858801015201910190918392610850565b90607f16906107bc565b34610109576101076108bb36610907565b91610ab7565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010957565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361010957565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126101095760043573ffffffffffffffffffffffffffffffffffffffff81168103610109579060243573ffffffffffffffffffffffffffffffffffffffff81168103610109579060443590565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b73ffffffffffffffffffffffffffffffffffffffff16908115610a8b5773ffffffffffffffffffffffffffffffffffffffff1691821561056b57815f525f60205260405f2054818110610a5957817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b827fe450d38c000000000000000000000000000000000000000000000000000000005f5260045260245260445260645ffd5b7f96c6fd1e000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff169081156106975773ffffffffffffffffffffffffffffffffffffffff1691821561066b5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526001825260405f20855f5282528060405f2055604051908152a356fea2646970667358221220d5e5552abd6426ba631d3dc40c2d3b77cad0f05f980146c92508a2ea6ef154fa64736f6c634300081c0033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(_decimals, overrides || {}) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_decimals, overrides || {});
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
