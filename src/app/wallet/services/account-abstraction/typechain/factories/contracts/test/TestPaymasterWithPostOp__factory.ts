/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestPaymasterWithPostOp,
  TestPaymasterWithPostOpInterface,
} from "../../../contracts/test/TestPaymasterWithPostOp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isSame",
        type: "bool",
      },
    ],
    name: "PostOpActualGasCost",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actualUserOpFeePerGas",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_context",
        type: "bytes",
      },
    ],
    name: "setContext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "theContext",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0806040523461025257602081611473803803809161001f828561027c565b83398101031261025257516001600160a01b03811680820361025257331561026957602060249161004f3361029f565b6040516301ffc9a760e01b8152631313998b60e31b600482015292839182905afa90811561025e575f9161021f575b50156101da576080523332036101cc575b60408051908101906001600160401b038211818310176101b8576020916040526001815201603160f81b8152600254600181811c911680156101ae575b602082101461019a57601f8111610152575b81517fff00000000000000000000000000000000000000000000000000000000000000166002908117905560405161117f90816102f4823960805181818161022401528181610327015281816103f0015281816104c50152818161057501528181610c9301528181610d7801526110c30152f35b60025f52601f0160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908101905b81811061018f57506100de565b5f8155600101610182565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100cc565b634e487b7160e01b5f52604160045260245ffd5b6101d53261029f565b61008f565b60405162461bcd60e51b815260206004820152601e60248201527f49456e747279506f696e7420696e74657266616365206d69736d6174636800006044820152606490fd5b90506020813d602011610256575b8161023a6020938361027c565b8101031261025257518015158103610252575f61007e565b5f80fd5b3d915061022d565b6040513d5f823e3d90fd5b631e4fbdf760e01b5f525f60045260245ffd5b601f909101601f19168101906001600160401b038211908210176101b857604052565b600180546001600160a01b03199081169091555f80546001600160a01b03938416928116831782559192909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe60806040526004361015610011575f80fd5b5f5f3560e01c80630396cb6014610d1d578063205c287814610c3b5780632f7482be146109d257806352b7512c14610930578063715018a61461086c57806379ba5097146107625780637c627b211461063c5780638da5cb5b146105eb578063ae1df29014610599578063b0d691fe1461052a578063bb9fe6bf14610476578063c23a5cea14610398578063c399ec88146102af578063d0e30db0146101e2578063e30c3978146101905763f2fde38b146100ca575f80fd5b3461018d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d5760043573ffffffffffffffffffffffffffffffffffffffff811680910361018b57610122611060565b807fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015573ffffffffffffffffffffffffffffffffffffffff8254167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b505b80fd5b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d57602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b50807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d578073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b156102ac5781602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af180156102a1576102905750f35b8161029a91610e25565b61018d5780f35b6040513d84823e3d90fd5b50fd5b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156102a1578291610362575b602082604051908152f35b90506020813d602011610390575b8161037d60209383610e25565b8101031261018b5760209150515f610357565b3d9150610370565b503461018d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d57806103d1610e02565b6103d9611060565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b156104725773ffffffffffffffffffffffffffffffffffffffff602484928360405195869485937fc23a5cea0000000000000000000000000000000000000000000000000000000085521660048401525af180156102a1576102905750f35b5050fd5b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d576104ad611060565b8073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b156102ac578180916004604051809481937fbb9fe6bf0000000000000000000000000000000000000000000000000000000083525af180156102a1576102905750f35b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d576105e76105d3610f8b565b604051918291602083526020830190610ef7565b0390f35b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b503461018d5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d576003600435101561018d5760243567ffffffffffffffff811161018b573660238201121561018b57806004013567ffffffffffffffff811161075e576024820191602482369201011161075e5760807ff81adbe9c321ca1427177a26886e2691f9450366d6828f585f8218113bd7522b926106e56110ac565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84610714368286610e93565b60208151910120610723610f8b565b60208151910120146040519687956044358752606060208801528160608801528787013788868387010152604085015201168101030190a180f35b8280fd5b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d573373ffffffffffffffffffffffffffffffffffffffff6001541603610840577fffffffffffffffffffffffff0000000000000000000000000000000000000000600154166001558054337fffffffffffffffffffffffff0000000000000000000000000000000000000000821617825573ffffffffffffffffffffffffffffffffffffffff3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b807f118cdaa7000000000000000000000000000000000000000000000000000000006024925233600452fd5b503461018d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d576108a3611060565b7fffffffffffffffffffffffff0000000000000000000000000000000000000000600154166001558073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461018d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d5760043567ffffffffffffffff811161018b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc610120913603011261018d576109c8906109ab6110ac565b6109b3610f8b565b90604051928392604084526040840190610ef7565b9060208301520390f35b503461018d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d5760043567ffffffffffffffff811161018b573660238201121561018b57610a33903690602481600401359101610e93565b90815167ffffffffffffffff8111610c0e57610a50600254610f3a565b601f8111610b6d575b50602092601f8211600114610ab357928293829392610aa8575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760025580f35b015190505f80610a73565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0821693600284527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace91845b868110610b555750836001959610610b1e575b505050811b0160025580f35b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690555f8080610b12565b91926020600181928685015181550194019201610aff565b60028352601f820160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace019060208310610be6575b601f0160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905b818110610bdb5750610a59565b838155600101610bce565b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9150610ba4565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b503461018d5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018d5780610c74610e02565b610c7c611060565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b156104725773ffffffffffffffffffffffffffffffffffffffff604484928360405195869485937f205c287800000000000000000000000000000000000000000000000000000000855216600484015260243560248401525af180156102a1576102905750f35b5060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610dfe5760043563ffffffff8116809103610dfe57610d61611060565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610dfe575f906024604051809481937f0396cb60000000000000000000000000000000000000000000000000000000008352600483015234905af18015610df357610de5575080f35b610df191505f90610e25565b005b6040513d5f823e3d90fd5b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610dfe57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e6657604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b92919267ffffffffffffffff8211610e665760405191610edb60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610e25565b829481845281830111610dfe578281602093845f960137010152565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b90600182811c92168015610f81575b6020831014610f5457565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b91607f1691610f49565b604051905f8260025491610f9e83610f3a565b80835292600181169081156110235750600114610fc4575b610fc292500383610e25565b565b5060025f90815290917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b818310611007575050906020610fc292820101610fb6565b6020919350806001915483858901015201910190918492610fef565b60209250610fc29491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b820101610fb6565b73ffffffffffffffffffffffffffffffffffffffff5f5416330361108057565b7f118cdaa7000000000000000000000000000000000000000000000000000000005f523360045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036110eb57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f53656e646572206e6f7420456e747279506f696e7400000000000000000000006044820152fdfea264697066735822122056d2ed05fb63f7c88cacc6dc52773f1ba3dd9a85171cf2d71e643eec399f86f564736f6c634300081c0033";

type TestPaymasterWithPostOpConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPaymasterWithPostOpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPaymasterWithPostOp__factory extends ContractFactory {
  constructor(...args: TestPaymasterWithPostOpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestPaymasterWithPostOp> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestPaymasterWithPostOp>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestPaymasterWithPostOp {
    return super.attach(address) as TestPaymasterWithPostOp;
  }
  override connect(signer: Signer): TestPaymasterWithPostOp__factory {
    return super.connect(signer) as TestPaymasterWithPostOp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPaymasterWithPostOpInterface {
    return new utils.Interface(_abi) as TestPaymasterWithPostOpInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPaymasterWithPostOp {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPaymasterWithPostOp;
  }
}
