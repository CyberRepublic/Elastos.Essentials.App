/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestWarmColdAccount,
  TestWarmColdAccountInterface,
} from "../../../contracts/test/TestWarmColdAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
    ],
    name: "touchPaymaster",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "touchStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080601f6104c938819003918201601f19168301916001600160401b03831184841017607357808492602094604052833981010312606f57516001600160a01b03811690819003606f57600180555f80546001600160a01b03191691909117905560405161044190816100888239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816319822f7c1461012457508063c19d93fb146100e8578063f115d40d146100885763fb0c24251461004a575f80fd5b3461008557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610085576020600154604051908152f35b80fd5b50346100855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100855760043573ffffffffffffffffffffffffffffffffffffffff811681036100e4576020903b604051908152f35b5080fd5b503461008557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610085576020600154604051908152f35b90503461038a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038a5760043567ffffffffffffffff811161038a57803603916101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc84011261038a5773ffffffffffffffffffffffffffffffffffffffff5f5416803b1561038a57816024815f937fb760faf9000000000000000000000000000000000000000000000000000000008252306004830152604435905af1801561037f5761036a575b5060248101356001810361028b57505050604051907ffb0c2425000000000000000000000000000000000000000000000000000000008252602082600481306103e8fa91821561027e57602092610251575b505b604051908152f35b61027090833d8511610277575b610268818361038e565b8101906103fc565b505f610247565b503d61025e565b50604051903d90823e3d90fd5b60021461029d575b5050602090610249565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd60e4820135920182121561036657019060048201359167ffffffffffffffff83116100e4576024019180360383136100e45760141161008557604051917ff115d40d0000000000000000000000000000000000000000000000000000000083523560601c6004830152602082602481306103e8fa91821561027e57602092610349575b819250610293565b61035f90833d851161027757610268818361038e565b505f610341565b8280fd5b6103779193505f9061038e565b5f915f6101f5565b6040513d5f823e3d90fd5b5f80fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103cf57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261038a57519056fea2646970667358221220f1167ff85860c7958ad45e600f76ce69e276083ef39319ee7774e81d0e7c074b64736f6c634300081c0033";

type TestWarmColdAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWarmColdAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWarmColdAccount__factory extends ContractFactory {
  constructor(...args: TestWarmColdAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWarmColdAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<TestWarmColdAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): TestWarmColdAccount {
    return super.attach(address) as TestWarmColdAccount;
  }
  override connect(signer: Signer): TestWarmColdAccount__factory {
    return super.connect(signer) as TestWarmColdAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWarmColdAccountInterface {
    return new utils.Interface(_abi) as TestWarmColdAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWarmColdAccount {
    return new Contract(address, _abi, signerOrProvider) as TestWarmColdAccount;
  }
}
