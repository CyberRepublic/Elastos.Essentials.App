/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestUniswap,
  TestUniswapInterface,
} from "../../../contracts/test/TestUniswap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TestWrappedNativeToken",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    name: "StubUniswapExchangeEvent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "unwrapWETH9",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "contract TestWrappedNativeToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608034606f57601f6108d538819003918201601f19168301916001600160401b03831184841017607357808492602094604052833981010312606f57516001600160a01b03811690819003606f575f80546001600160a01b03191691909117905560405161084d90816100888239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe608080604052600436101561001c575b50361561001a575f80fd5b005b5f905f3560e01c9081633fc8cef3146106db57508063414bf389146104af57806349404b7c146102bb5763db3e21980361000f57346102b8576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b85760c4357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb810190811161028b5760a4357f29a1b057b49189ad91f5d92216fc55e37caf33e398f9e914469523c9aa5f6a036100d9610728565b6100e161074b565b604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff9384169181019190915291166060820152608090a173ffffffffffffffffffffffffffffffffffffffff610136610728565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529291602091849160649183918991165af19081156102805761021392602092610265575b5073ffffffffffffffffffffffffffffffffffffffff6101b161074b565b166101ba61076e565b866040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561025a576020935061022f575b50604051908152f35b61024e90833d8511610253575b6102468183610791565b8101906107ff565b610226565b503d61023c565b6040513d85823e3d90fd5b61027b90833d8511610253576102468183610791565b610193565b6040513d86823e3d90fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b80fd5b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610419576024359073ffffffffffffffffffffffffffffffffffffffff82168092036104195773ffffffffffffffffffffffffffffffffffffffff5f541691604051927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152602084602481845afa93841561040e575f9461047b575b50600435841061041d57831590811561037c578380f35b803b15610419575f80916024604051809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528a60048401525af1801561040e576103f7575b508280948193829383906103ee575bf1156103e257805f80808380f35b604051903d90823e3d90fd5b506108fc6103d4565b610405919293505f90610791565b5f91905f6103c5565b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420574554483900000000000000000000000000006044820152fd5b9093506020813d6020116104a7575b8161049760209383610791565b810103126104195751925f610365565b3d915061048a565b34610419576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104195760c435600581018091116106ae575f9060206105df60a4357f29a1b057b49189ad91f5d92216fc55e37caf33e398f9e914469523c9aa5f6a03610520610728565b61052861074b565b604080518581526020810189905273ffffffffffffffffffffffffffffffffffffffff9384169181019190915291166060820152608090a173ffffffffffffffffffffffffffffffffffffffff61057d610728565b16906040519586809481937f23b872dd00000000000000000000000000000000000000000000000000000000835230336004850173ffffffffffffffffffffffffffffffffffffffff6040929594938160608401971683521660208201520152565b03925af191821561040e5761067692610691575b5060208173ffffffffffffffffffffffffffffffffffffffff61061461074b565b1661061d61076e565b5f6040518097819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af191821561040e5760209261022f5750604051908152f35b6106a99060203d602011610253576102468183610791565b6105f3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b34610419575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104195760209073ffffffffffffffffffffffffffffffffffffffff5f54168152f35b60043573ffffffffffffffffffffffffffffffffffffffff811681036104195790565b60243573ffffffffffffffffffffffffffffffffffffffff811681036104195790565b60643573ffffffffffffffffffffffffffffffffffffffff811681036104195790565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176107d257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261041957518015158103610419579056fea26469706673582212201c46378ed433a996d8f711d8fb10ce3635892de98b33de0bde943485d47c50b864736f6c634300081c0033";

type TestUniswapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUniswapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUniswap__factory extends ContractFactory {
  constructor(...args: TestUniswapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUniswap> {
    return super.deploy(_weth, overrides || {}) as Promise<TestUniswap>;
  }
  override getDeployTransaction(
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_weth, overrides || {});
  }
  override attach(address: string): TestUniswap {
    return super.attach(address) as TestUniswap;
  }
  override connect(signer: Signer): TestUniswap__factory {
    return super.connect(signer) as TestUniswap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUniswapInterface {
    return new utils.Interface(_abi) as TestUniswapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUniswap {
    return new Contract(address, _abi, signerOrProvider) as TestUniswap;
  }
}
