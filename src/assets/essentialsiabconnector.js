!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";const e=new class{};const t=new class{constructor(){this.callbacks=new Map}postMessage(e,t){let s=Date.now()+Math.floor(1e5*Math.random());return console.log("EssentialsBridge: postMessage",e,s,t),new Promise(((n,r)=>{this.callbacks.set(s,{resolve:n,reject:r});let i={id:s,name:e,object:t};window.webkit.messageHandlers.essentialsExtractor.postMessage(JSON.stringify(i))}))}sendResponse(e,t){console.log("EssentialsBridge: sendResponse",e,t),this.callbacks.get(e).resolve(t)}sendError(e,t){console.log("EssentialsBridge: sendError",e,t),this.callbacks.get(e)&&(this.callbacks.get(e).reject(t),this.callbacks.delete(e))}};class s{static async getCredentials(s){console.log("getCredentials request received",s);let n=await t.postMessage("elastos_getCredentials",s);return console.log("getCredentials response received",n),e.didSdk.VerifiablePresentation.parse(JSON.stringify(n))}static async requestCredentials(t){console.log("requestCredentials request received",t);let s=await this.postEssentialsUrlIntent("https://did.elastos.net/requestcredentials",{request:t});return console.log("requestCredentials response received",s),e.didSdk.VerifiablePresentation.parse(s.presentation)}static async importCredentials(t,s){console.log("importCredentials request received",t,s);let n={credentials:t.map((e=>JSON.parse(e.toString())))};s&&s.forceToPublishCredentials&&(n.forceToPublishCredentials=!0);let r,i=await this.postEssentialsUrlIntent("https://did.elastos.net/credimport",n);return r=i.importedcredentials.map((t=>({id:e.didSdk.DIDURL.from(t)}))),console.log("importCredentials response received",i),r}static async signData(e,s,n){console.log("signData request received",e,s,n);let r=await t.postMessage("elastos_signData",{data:e,jwtExtra:s,signatureFieldName:n});return console.log("signData response received",r),r}static async deleteCredentials(e,t){console.log("deleteCredentials request received",e,t);let s=await this.postEssentialsUrlIntent("https://did.elastos.net/creddelete",{credentialsids:e,options:t});return console.log("deleteCredentials response received",s),s&&s.deletedcredentialsids?s.deletedcredentialsids:null}static async generateAppIdCredential(t,s){console.log("generateAppIdCredential request received",t,s);let n=await this.postEssentialsUrlIntent("https://did.elastos.net/appidcredissue",{appinstancedid:t,appdid:s});return console.log("generateAppIdCredential response received",n),n&&n.credential?e.didSdk.VerifiableCredential.parse(n.credential):null}static async updateHiveVaultAddress(e,t){console.log("updateHiveVaultAddress request received",e,t);let s=await this.postEssentialsUrlIntent("https://did.elastos.net/sethiveprovider",{address:e,name:t});return console.log("updateHiveVaultAddress response received",s),s&&s.status?s.status:null}static async issueCredential(t,s,n,r,i){console.log("issueCredential request received",t,s,n,r,i);let a=await this.postEssentialsUrlIntent("https://did.elastos.net/credissue",{subjectdid:t,types:s,properties:n,identifier:r,expirationDate:i});return console.log("issueCredential response received",a),a&&a.credential?e.didSdk.VerifiableCredential.parse(a.credential):null}static async generateHiveBackupCredential(t,s,n){console.log("generateHiveBackupCredential request received",t,s,n);let r=await this.postEssentialsUrlIntent("https://did.elastos.net/hivebackupcredissue",{sourceHiveNodeDID:t,targetHiveNodeDID:s,targetNodeURL:n});return console.log("generateHiveBackupCredential response received",r),r&&r.credential?e.didSdk.VerifiableCredential.parse(r.credential):null}static async postEssentialsUrlIntent(s,n){try{n.caller=e.connectivity.getApplicationDID()}catch{}return t.postMessage("elastos_essentials_url_intent",{url:s,params:n})}}class n{static async onBoard(e,t,s,n){console.log("onBoard request received",e,t,s,n),await this.postEssentialsUrlIntent("https://essentials.elastos.net/onboard",{feature:e,title:t,introduction:s,button:n})}static async postEssentialsUrlIntent(s,n){try{n.caller=e.connectivity.getApplicationDID()}catch{}return t.postMessage("elastos_essentials_url_intent",{url:s,params:n})}}window.EssentialsDABConnector=class{constructor(){this.name="essentialsiab"}async getDisplayName(){return"Elastos Essentials In App Browser"}getWeb3Provider(){return window.ethereum}async setModuleContext(t,s){e.didSdk=t,e.connectivity=s}ensureContextSet(){if(!e.didSdk||!e.connectivity)throw new Error("This dApp uses a old version of the elastos connectivity SDK and must be upgraded to be able to run inside Elastos Essentials")}getCredentials(e){return this.ensureContextSet(),s.getCredentials(e)}requestCredentials(e){return this.ensureContextSet(),s.requestCredentials(e)}issueCredential(e,t,n,r,i){return this.ensureContextSet(),s.issueCredential(e,t,n,r,i)}importCredentials(e,t){return this.ensureContextSet(),s.importCredentials(e,t)}signData(e,t,n){return this.ensureContextSet(),s.signData(e,t,n)}deleteCredentials(e,t){return this.ensureContextSet(),s.deleteCredentials(e,t)}requestPublish(){throw new Error("Method not implemented.")}generateAppIdCredential(e,t){return this.ensureContextSet(),s.generateAppIdCredential(e,t)}updateHiveVaultAddress(e,t){return this.ensureContextSet(),s.updateHiveVaultAddress(e,t)}importCredentialContext(e,t){throw new Error("importCredentialContext(): Method not implemented.")}generateHiveBackupCredential(e,t,n){return this.ensureContextSet(),s.generateHiveBackupCredential(e,t,n)}pay(e){throw new Error("Method not implemented.")}voteForDPoS(){throw new Error("Method not implemented.")}voteForCRCouncil(){throw new Error("Method not implemented.")}voteForCRProposal(){throw new Error("Method not implemented.")}sendSmartContractTransaction(e){throw new Error("Method not implemented.")}onBoard(e,t,s,r){return n.onBoard(e,t,s,r)}sendResponse(e,s){t.sendResponse(e,s)}sendError(e,s){t.sendError(e,s)}}}));
