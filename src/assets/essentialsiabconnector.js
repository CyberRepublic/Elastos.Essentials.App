(function () {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	var byteLength_1 = byteLength$2;
	var toByteArray_1 = toByteArray$2;
	var fromByteArray_1 = fromByteArray$2;

	var lookup$2 = [];
	var revLookup$2 = [];
	var Arr$2 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var code$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i$1 = 0, len$1 = code$1.length; i$1 < len$1; ++i$1) {
	  lookup$2[i$1] = code$1[i$1];
	  revLookup$2[code$1.charCodeAt(i$1)] = i$1;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup$2['-'.charCodeAt(0)] = 62;
	revLookup$2['_'.charCodeAt(0)] = 63;

	function getLens$1 (b64) {
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4);

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength$2 (b64) {
	  var lens = getLens$1(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength$1 (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray$2 (b64) {
	  var tmp;
	  var lens = getLens$1(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];

	  var arr = new Arr$2(_byteLength$1(b64, validLen, placeHoldersLen));

	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen;

	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup$2[b64.charCodeAt(i)] << 18) |
	      (revLookup$2[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup$2[b64.charCodeAt(i + 2)] << 6) |
	      revLookup$2[b64.charCodeAt(i + 3)];
	    arr[curByte++] = (tmp >> 16) & 0xFF;
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup$2[b64.charCodeAt(i)] << 2) |
	      (revLookup$2[b64.charCodeAt(i + 1)] >> 4);
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup$2[b64.charCodeAt(i)] << 10) |
	      (revLookup$2[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup$2[b64.charCodeAt(i + 2)] >> 2);
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64$2 (num) {
	  return lookup$2[num >> 18 & 0x3F] +
	    lookup$2[num >> 12 & 0x3F] +
	    lookup$2[num >> 6 & 0x3F] +
	    lookup$2[num & 0x3F]
	}

	function encodeChunk$2 (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64$2(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray$2 (uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk$2(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(
	      lookup$2[tmp >> 2] +
	      lookup$2[(tmp << 4) & 0x3F] +
	      '=='
	    );
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(
	      lookup$2[tmp >> 10] +
	      lookup$2[(tmp >> 4) & 0x3F] +
	      lookup$2[(tmp << 2) & 0x3F] +
	      '='
	    );
	  }

	  return parts.join('')
	}

	var base64Js$1 = {
		byteLength: byteLength_1,
		toByteArray: toByteArray_1,
		fromByteArray: fromByteArray_1
	};

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	var read$1 = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	var write$1 = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

	var ieee754$1 = {
		read: read$1,
		write: write$1
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	var buffer$3 = createCommonjsModule(function (module, exports) {



	var customInspectSymbol =
	  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
	    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
	    : null;

	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;

	var K_MAX_LENGTH = 0x7fffffff;
	exports.kMaxLength = K_MAX_LENGTH;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	  console.error(
	    'This browser lacks typed array (Uint8Array) support which is required by ' +
	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  );
	}

	function typedArraySupport () {
	  // Can typed array instances can be augmented?
	  try {
	    var arr = new Uint8Array(1);
	    var proto = { foo: function () { return 42 } };
	    Object.setPrototypeOf(proto, Uint8Array.prototype);
	    Object.setPrototypeOf(arr, proto);
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}

	Object.defineProperty(Buffer.prototype, 'parent', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.buffer
	  }
	});

	Object.defineProperty(Buffer.prototype, 'offset', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.byteOffset
	  }
	});

	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
	    throw new RangeError('The value "' + length + '" is invalid for option "size"')
	  }
	  // Return an augmented `Uint8Array` instance
	  var buf = new Uint8Array(length);
	  Object.setPrototypeOf(buf, Buffer.prototype);
	  return buf
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new TypeError(
	        'The "string" argument must be of type string. Received type number'
	      )
	    }
	    return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset)
	  }

	  if (ArrayBuffer.isView(value)) {
	    return fromArrayView(value)
	  }

	  if (value == null) {
	    throw new TypeError(
	      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	      'or Array-like Object. Received type ' + (typeof value)
	    )
	  }

	  if (isInstance(value, ArrayBuffer) ||
	      (value && isInstance(value.buffer, ArrayBuffer))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }

	  if (typeof SharedArrayBuffer !== 'undefined' &&
	      (isInstance(value, SharedArrayBuffer) ||
	      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }

	  if (typeof value === 'number') {
	    throw new TypeError(
	      'The "value" argument must not be of type number. Received type number'
	    )
	  }

	  var valueOf = value.valueOf && value.valueOf();
	  if (valueOf != null && valueOf !== value) {
	    return Buffer.from(valueOf, encodingOrOffset, length)
	  }

	  var b = fromObject(value);
	  if (b) return b

	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
	      typeof value[Symbol.toPrimitive] === 'function') {
	    return Buffer.from(
	      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
	    )
	  }

	  throw new TypeError(
	    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	    'or Array-like Object. Received type ' + (typeof value)
	  )
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	};

	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
	Object.setPrototypeOf(Buffer, Uint8Array);

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be of type number')
	  } else if (size < 0) {
	    throw new RangeError('The value "' + size + '" is invalid for option "size"')
	  }
	}

	function alloc (size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpreted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(size).fill(fill, encoding)
	      : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	};

	function allocUnsafe (size) {
	  assertSize(size);
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	};

	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('Unknown encoding: ' + encoding)
	  }

	  var length = byteLength(string, encoding) | 0;
	  var buf = createBuffer(length);

	  var actual = buf.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    buf = buf.slice(0, actual);
	  }

	  return buf
	}

	function fromArrayLike (array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  var buf = createBuffer(length);
	  for (var i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255;
	  }
	  return buf
	}

	function fromArrayView (arrayView) {
	  if (isInstance(arrayView, Uint8Array)) {
	    var copy = new Uint8Array(arrayView);
	    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
	  }
	  return fromArrayLike(arrayView)
	}

	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('"offset" is outside of buffer bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('"length" is outside of buffer bounds')
	  }

	  var buf;
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array);
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset);
	  } else {
	    buf = new Uint8Array(array, byteOffset, length);
	  }

	  // Return an augmented `Uint8Array` instance
	  Object.setPrototypeOf(buf, Buffer.prototype);

	  return buf
	}

	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    var buf = createBuffer(len);

	    if (buf.length === 0) {
	      return buf
	    }

	    obj.copy(buf, 0, 0, len);
	    return buf
	  }

	  if (obj.length !== undefined) {
	    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	      return createBuffer(0)
	    }
	    return fromArrayLike(obj)
	  }

	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	    return fromArrayLike(obj.data)
	  }
	}

	function checked (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true &&
	    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
	};

	Buffer.compare = function compare (a, b) {
	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError(
	      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
	    )
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (isInstance(buf, Uint8Array)) {
	      if (pos + buf.length > buffer.length) {
	        Buffer.from(buf).copy(buffer, pos);
	      } else {
	        Uint8Array.prototype.set.call(
	          buffer,
	          buf,
	          pos
	        );
	      }
	    } else if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    } else {
	      buf.copy(buffer, pos);
	    }
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    throw new TypeError(
	      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
	      'Received type ' + typeof string
	    )
	  }

	  var len = string.length;
	  var mustMatch = (arguments.length > 2 && arguments[2] === true);
	  if (!mustMatch && len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) {
	          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
	        }
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = exports.INSPECT_MAX_BYTES;
	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
	  if (this.length > max) str += ' ... ';
	  return '<Buffer ' + str + '>'
	};
	if (customInspectSymbol) {
	  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (isInstance(target, Uint8Array)) {
	    target = Buffer.from(target, target.offset, target.byteLength);
	  }
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError(
	      'The "target" argument must be one of type Buffer or Uint8Array. ' +
	      'Received type ' + (typeof target)
	    )
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset; // Coerce to Number.
	  if (numberIsNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  var strLen = string.length;

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (numberIsNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset >>> 0;
	    if (isFinite(length)) {
	      length = length >>> 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return asciiWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64Js$1.fromByteArray(buf)
	  } else {
	    return base64Js$1.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF)
	      ? 4
	      : (firstByte > 0xDF)
	          ? 3
	          : (firstByte > 0xBF)
	              ? 2
	              : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += hexSliceLookupTable[buf[i]];
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
	  for (var i = 0; i < bytes.length - 1; i += 2) {
	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf = this.subarray(start, end);
	  // Return an augmented `Uint8Array` instance
	  Object.setPrototypeOf(newBuf, Buffer.prototype);

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUintLE =
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUintBE =
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUint8 =
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUint16LE =
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUint16BE =
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUint32LE =
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUint32BE =
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUintLE =
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUintBE =
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUint8 =
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeUint16LE =
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};

	Buffer.prototype.writeUint16BE =
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};

	Buffer.prototype.writeUint32LE =
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset + 3] = (value >>> 24);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 1] = (value >>> 8);
	  this[offset] = (value & 0xff);
	  return offset + 4
	};

	Buffer.prototype.writeUint32BE =
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 3] = (value >>> 24);
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;

	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
	    // Use built-in when available, missing from IE11
	    this.copyWithin(targetStart, start, end);
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, end),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if ((encoding === 'utf8' && code < 128) ||
	          encoding === 'latin1') {
	        // Fast path: If `val` fits into a single byte, use that numeric value.
	        val = code;
	      }
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  } else if (typeof val === 'boolean') {
	    val = Number(val);
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : Buffer.from(val, encoding);
	    var len = bytes.length;
	    if (len === 0) {
	      throw new TypeError('The value "' + val +
	        '" is invalid for argument "value"')
	    }
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node takes equal signs as end of the Base64 encoding
	  str = str.split('=')[0];
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = str.trim().replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64Js$1.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
	// the `instanceof` check but they should be treated as of that type.
	// See: https://github.com/feross/buffer/issues/166
	function isInstance (obj, type) {
	  return obj instanceof type ||
	    (obj != null && obj.constructor != null && obj.constructor.name != null &&
	      obj.constructor.name === type.name)
	}
	function numberIsNaN (obj) {
	  // For IE11 support
	  return obj !== obj // eslint-disable-line no-self-compare
	}

	// Create lookup table for `toString('hex')`
	// See: https://github.com/feross/buffer/issues/219
	var hexSliceLookupTable = (function () {
	  var alphabet = '0123456789abcdef';
	  var table = new Array(256);
	  for (var i = 0; i < 16; ++i) {
	    var i16 = i * 16;
	    for (var j = 0; j < 16; ++j) {
	      table[i16 + j] = alphabet[i] + alphabet[j];
	    }
	  }
	  return table
	})();
	});

	var buffer$3$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		'default': buffer$3
	}, [buffer$3]));

	/*
	  @license
	    DID.js v2.1.3
	    Mon, 27 Sep 2021 08:41:58 GMT - commit unknown

	    Released under the MIT License.
	*/

	class LogLevel {
	    constructor(id, name) {
	        this.id = id;
	        this.name = name;
	    }
	}
	class Logger {
	    constructor(context) {
	        this.context = context ? context : "";
	    }
	    static setLevel(level) {
	        if (level <= Logger.TRACE && level >= Logger.INFO) {
	            Logger.logLevel = level;
	        }
	    }
	    static getLevel() {
	        return Logger.logLevel;
	    }
	    static levelIs(level) {
	        return level <= Logger.logLevel;
	    }
	    log(...data) {
	        if (Logger.logLevel.id >= Logger.INFO.id) {
	            console.log(this.format(Logger.INFO, data));
	        }
	    }
	    info(...data) {
	        if (Logger.logLevel.id >= Logger.INFO.id) {
	            console.log(this.format(Logger.INFO, data));
	        }
	    }
	    debug(...data) {
	        if (Logger.logLevel.id >= Logger.DEBUG.id) {
	            console.log(this.format(Logger.DEBUG, data));
	        }
	    }
	    trace(...data) {
	        if (Logger.logLevel.id >= Logger.TRACE.id) {
	            console.log(this.format(Logger.TRACE, data));
	        }
	    }
	    warn(...data) {
	        if (Logger.logLevel.id >= Logger.WARNING.id) {
	            console.log(this.format(Logger.WARNING, data));
	        }
	    }
	    error(...data) {
	        if (Logger.logLevel.id >= Logger.ERROR.id) {
	            console.log(this.format(Logger.ERROR, data));
	        }
	    }
	    format(level, data) {
	        let logLine = (new Date()).toISOString() + " " + level.name.toUpperCase() + " " + this.context + " ";
	        if (!data || data.length < 1)
	            return logLine;
	        let content = String(data[0]);
	        for (let i = 1; i < data.length; i++) {
	            content = content.replace(/\{\}/, String(data[i]));
	        }
	        return logLine + " " + content;
	    }
	}
	Logger.TRACE = new LogLevel(0, "TRACE");
	Logger.DEBUG = new LogLevel(1, "DEBUG");
	Logger.INFO = new LogLevel(2, "INFO");
	Logger.WARNING = new LogLevel(3, "WARN");
	Logger.ERROR = new LogLevel(4, "ERROR");
	Logger.logLevel = Logger.TRACE;

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	function __awaiter$9(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	class ParentException extends Error {
	    constructor(message, causedBy) {
	        super(message + (causedBy ? "\nCaused by: " + causedBy.message + (causedBy.stack ? "\nCaused by: " + causedBy.stack : "") : ""));
	        this.causedBy = causedBy;
	        Object.setPrototypeOf(this, new.target.prototype);
	    }
	    from(e) {
	        this.message += (" Caused by " + e.message);
	        return this;
	    }
	}
	class IllegalArgumentException extends ParentException {
	}
	class WrongPasswordException extends ParentException {
	}
	class DIDStoreException extends ParentException {
	}
	class DIDResolveException extends ParentException {
	}
	class MnemonicException extends ParentException {
	}
	class DIDDeactivatedException extends ParentException {
	}
	class DIDAlreadyExistException extends ParentException {
	}
	class RootIdentityAlreadyExistException extends ParentException {
	}
	class UnknownInternalException extends ParentException {
	}
	class DIDStoreCryptoException extends ParentException {
	}
	class MalformedDocumentException extends ParentException {
	}
	class NotCustomizedDIDException extends ParentException {
	}
	class NotAttachedWithStoreException extends ParentException {
	}
	class NotPrimitiveDIDException extends ParentException {
	}
	class NoEffectiveControllerException extends ParentException {
	}
	class NotControllerException extends ParentException {
	}
	class AlreadySignedException extends ParentException {
	}
	class MalformedTransferTicketException extends ParentException {
	}
	class MalformedCredentialException extends ParentException {
	}
	class MalformedIDChainRequestException extends ParentException {
	}
	class InvalidKeyException extends ParentException {
	}
	class MalformedIDChainTransactionException extends ParentException {
	}
	class MalformedResolveResultException extends ParentException {
	}
	class DIDSyntaxException extends ParentException {
	}
	class MalformedResolveRequestException extends ParentException {
	}
	class MalformedResolveResponseException extends ParentException {
	}
	class DIDNotFoundException extends ParentException {
	}
	class MalformedDIDURLException extends ParentException {
	}
	class AlreadySealedException extends ParentException {
	}
	class CredentialNotGenuineException extends ParentException {
	}
	class CredentialExpiredException extends ParentException {
	}
	class CredentialRevokedException extends ParentException {
	}
	class CredentialAlreadyExistException extends ParentException {
	}
	class DIDNotGenuineException extends ParentException {
	}
	class DIDExpiredException extends ParentException {
	}
	class DIDNotUpToDateException extends ParentException {
	}
	class DIDObjectAlreadyExistException extends ParentException {
	}
	class IllegalUsage extends ParentException {
	}
	class DIDObjectNotExistException extends ParentException {
	}
	class CanNotRemoveEffectiveController extends ParentException {
	}
	class DIDObjectHasReference extends ParentException {
	}
	class MalformedPresentationException extends ParentException {
	}
	class UnsupportedOperationException extends ParentException {
	}
	class NetworkException extends ParentException {
	}
	class ResolveException extends ParentException {
	}
	class DIDStorageException extends ParentException {
	}
	class InvalidDateFormat extends ParentException {
	}
	class OutOfBoundException extends ParentException {
	}
	class MalformedExportDataException extends ParentException {
	}
	class DIDControllersChangedException extends ParentException {
	}
	class MalformedMetadataException extends ParentException {
	}
	class JWTException extends ParentException {
	}
	class MalformedDIDException extends ParentException {
	}
	class IOException extends ParentException {
	}

	class DIDEntity {
	    getSerializeContextDid() {
	        return null;
	    }
	    clone() {
	        const clone = Object.assign({}, this);
	        Object.setPrototypeOf(clone, Object.getPrototypeOf(this));
	        return clone;
	    }
	    static deserialize(source, type, context = null) {
	        checkArgument(source && source !== "", "Invalid JSON content");
	        let content;
	        if (typeof source === "string") {
	            content = JSON.parse(source);
	        }
	        else {
	            content = source;
	        }
	        let obj = new type();
	        obj.fromJSON(content, context);
	        return obj;
	    }
	    static deserializeAsync(source, type, context = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(source && source !== "", "Invalid JSON content");
	            let content;
	            if (typeof source === "string") {
	                content = JSON.parse(source);
	            }
	            else {
	                content = source;
	            }
	            let obj = new type();
	            yield obj.fromJSON(content, context);
	            return obj;
	        });
	    }
	    serialize(normalized = DIDEntity.NORMALIZED_DEFAULT) {
	        var _a;
	        try {
	            let key = (normalized) ? null : (_a = this.getSerializeContextDid()) === null || _a === void 0 ? void 0 : _a.toString();
	            return JSON.stringify(this.toJSON(key));
	        }
	        catch (e) {
	            throw new UnknownInternalException(e);
	        }
	        return null;
	    }
	    toString(normalized = DIDEntity.NORMALIZED_DEFAULT) {
	        return this.serialize(normalized);
	    }
	    dateToString(dateObj) {
	        return dateObj ? dateObj.toISOString().split('.')[0] + "Z" : null;
	    }
	    dateFromString(dateStr) {
	        if (dateStr && isNaN(Date.parse(dateStr)))
	            throw new InvalidDateFormat(dateStr);
	        return dateStr ? new Date(dateStr + (dateStr.slice(dateStr.length - 1) == 'Z' ? '' : 'Z')) : null;
	    }
	    getString(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value !== 'string')
	            throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	        return value;
	    }
	    getNumber(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value !== 'number')
	            throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	        return value;
	    }
	    getBoolean(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value !== 'boolean')
	            throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	        return value;
	    }
	    getStrings(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value === 'string')
	            return [value];
	        if (Array.isArray(value)) {
	            let strings = Array.from(value, (s) => {
	                if (typeof s !== 'string')
	                    new DIDSyntaxException("Invalid property value: " + name + ", type error");
	                return s;
	            });
	            return strings.sort();
	        }
	        throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	    }
	    getDids(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value === 'string') {
	            try {
	                return [new DID(value)];
	            }
	            catch (e) {
	                new DIDSyntaxException("Invalid property value: " + name + ", " + e, e);
	            }
	        }
	        if (Array.isArray(value)) {
	            let dids = Array.from(value, (s) => {
	                if (typeof s !== 'string')
	                    new DIDSyntaxException("Invalid property value: " + name + ", type error");
	                try {
	                    return new DID(s);
	                }
	                catch (e) {
	                    new DIDSyntaxException("Invalid property value: " + name + ", " + e, e);
	                }
	            });
	            return dids.sort((a, b) => a.compareTo(b));
	        }
	        throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	    }
	    getDate(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value !== 'string')
	            throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	        try {
	            return this.dateFromString(value);
	        }
	        catch (e) {
	            throw new DIDSyntaxException("Invalid property value: " + name + ", " + e, e);
	        }
	    }
	    getDid(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value !== 'string')
	            throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	        try {
	            return new DID(value);
	        }
	        catch (e) {
	            throw new DIDSyntaxException("Invalid property value: " + name + ", " + e, e);
	        }
	    }
	    getDidUrl(name, value, option = {}) {
	        if (typeof value === 'undefined') {
	            if (option.mandatory)
	                throw new DIDSyntaxException("Missing property: " + name);
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (value === null) {
	            if (!option.defaultValue && !option.nullable)
	                throw new DIDSyntaxException("Invalid property: " + name + ", can not be null");
	            return option.defaultValue ? option.defaultValue : null;
	        }
	        if (typeof value !== 'string')
	            throw new DIDSyntaxException("Invalid property value: " + name + ", type error");
	        try {
	            return new DIDURL(value, option.context);
	        }
	        catch (e) {
	            throw new DIDSyntaxException("Invalid property value: " + name + ", " + e, e);
	        }
	    }
	}
	DIDEntity.NORMALIZED_DEFAULT = true;

	function sortJSONArray(value) {
	    if (!value || value.length == 0)
	        return value;
	    return Array.from(value, (v) => {
	        if (typeof v === "object" && Object.keys(v).length > 0 && !Array.isArray(v))
	            return sortJSONObject(v);
	        else if (Array.isArray(v) && value.length > 0)
	            return sortJSONArray(v);
	        else
	            return v;
	    });
	}
	function sortJSONObject(obj) {
	    let keys = Object.keys(obj);
	    keys.sort((key1, key2) => {
	        if (key1 < key2)
	            return -1;
	        if (key1 > key2)
	            return 1;
	        return 0;
	    });
	    let sortedObj = {};
	    for (var index in keys) {
	        let key = keys[index];
	        let value = obj[key];
	        if (typeof value === "object" && Object.keys(value).length > 0 && !Array.isArray(value)) {
	            sortedObj[key] = sortJSONObject(value);
	        }
	        else if (Array.isArray(value) && value.length > 0) {
	            sortedObj[key] = sortJSONArray(value);
	        }
	        else {
	            sortedObj[key] = value;
	        }
	    }
	    return sortedObj;
	}

	class AbstractMetadata extends DIDEntity {
	    constructor(store) {
	        super();
	        this.props = {};
	        this.store = store;
	        this.props = {};
	    }
	    attachStore(store) {
	        checkArgument(store != null, "Invalid store");
	        this.store = store;
	    }
	    detachStore() {
	        this.store = null;
	    }
	    getStore() {
	        return this.store;
	    }
	    attachedStore() {
	        return this.store != null;
	    }
	    get(name) {
	        return this.props[name];
	    }
	    put(name, value) {
	        if (value === null || value === undefined)
	            delete this.props[name];
	        else
	            this.props[name] = value instanceof Date ? value.toISOString() : value;
	        this.save();
	    }
	    getBoolean(name, defaultValue = false) {
	        let strValue = this.get(name);
	        return strValue != null ? new Boolean(strValue).valueOf() : defaultValue;
	    }
	    getInteger(name, defaultValue = -1) {
	        let strValue = this.get(name);
	        let value = defaultValue;
	        if (strValue != null) {
	            try {
	                value = new Number(strValue).valueOf();
	            }
	            catch (ignore) {
	            }
	        }
	        return value;
	    }
	    getDate(name, defaultValue = null) {
	        let strValue = this.get(name);
	        let value = defaultValue;
	        if (strValue != null) {
	            try {
	                value = new Date(strValue);
	            }
	            catch (ignore) {
	            }
	        }
	        return value;
	    }
	    remove(name) {
	        let value = this.props[name];
	        delete this.props[name];
	        this.save();
	        return value;
	    }
	    isEmpty() {
	        return this.props.size == 0;
	    }
	    setAlias(alias) {
	        this.put(AbstractMetadata.ALIAS, alias);
	    }
	    getAlias() {
	        return this.get(AbstractMetadata.ALIAS);
	    }
	    setExtra(key, value) {
	        checkArgument(key != null && key != "", "Invalid key");
	        this.put(AbstractMetadata.USER_EXTRA_PREFIX + key, value);
	    }
	    getExtra(key) {
	        checkArgument(key && key != null, "Invalid key");
	        return this.get(AbstractMetadata.USER_EXTRA_PREFIX + key);
	    }
	    getExtraBoolean(key, defaultValue = false) {
	        checkArgument(key && key != null, "Invalid key");
	        return this.getBoolean(AbstractMetadata.USER_EXTRA_PREFIX + key, defaultValue);
	    }
	    getExtraInteger(key, defaultValue = -1) {
	        checkArgument(key && key != null, "Invalid key");
	        return this.getInteger(AbstractMetadata.USER_EXTRA_PREFIX + key, defaultValue);
	    }
	    getExtraDate(key, defaultValue = null) {
	        checkArgument(key && key != null, "Invalid key");
	        return this.getDate(AbstractMetadata.USER_EXTRA_PREFIX + key, defaultValue);
	    }
	    removeExtra(key) {
	        checkArgument(key && key != null, "Invalid key");
	        return this.remove(AbstractMetadata.USER_EXTRA_PREFIX + key);
	    }
	    merge(metadata) {
	        if (metadata == this || metadata == null)
	            return;
	        this.props = Object.assign(Object.assign({}, metadata.props), this.props);
	    }
	    clone() {
	        let result = super.clone();
	        result.store = this.store;
	        result.props = this.props;
	        return result;
	    }
	    toJSON(key = null) {
	        return sortJSONObject(this.props);
	    }
	    fromJSON(json, context = null) {
	        this.props = JSON.parse(JSON.stringify(json));
	    }
	}
	AbstractMetadata.ALIAS = "alias";
	AbstractMetadata.USER_EXTRA_PREFIX = "UX-";

	class DIDMetadata extends AbstractMetadata {
	    constructor(did = null, store = null) {
	        super(store);
	        this.did = null;
	        this.did = did;
	    }
	    setDid(did) {
	        this.did = did;
	    }
	    setRootIdentityId(id) {
	        this.put(DIDMetadata.ROOT_IDENTITY, id);
	    }
	    getRootIdentityId() {
	        return this.get(DIDMetadata.ROOT_IDENTITY);
	    }
	    setIndex(index) {
	        this.put(DIDMetadata.INDEX, index);
	    }
	    getIndex() {
	        return this.getInteger(DIDMetadata.INDEX, -1);
	    }
	    setTransactionId(txid) {
	        this.put(DIDMetadata.TXID, txid);
	    }
	    getTransactionId() {
	        return this.get(DIDMetadata.TXID);
	    }
	    setPreviousSignature(signature) {
	        this.put(DIDMetadata.PREV_SIGNATURE, signature);
	    }
	    getPreviousSignature() {
	        return this.get(DIDMetadata.PREV_SIGNATURE);
	    }
	    setSignature(signature) {
	        this.put(DIDMetadata.SIGNATURE, signature);
	    }
	    getSignature() {
	        return this.get(DIDMetadata.SIGNATURE);
	    }
	    setPublished(timestamp) {
	        this.put(DIDMetadata.PUBLISHED, timestamp);
	    }
	    getPublished() {
	        try {
	            return this.getDate(DIDMetadata.PUBLISHED, null);
	        }
	        catch (e) {
	            return null;
	        }
	    }
	    setDeactivated(deactivated) {
	        this.put(DIDMetadata.DEACTIVATED, deactivated);
	    }
	    isDeactivated() {
	        return this.getBoolean(DIDMetadata.DEACTIVATED, false);
	    }
	    clone() {
	        let clonedData = new DIDMetadata();
	        clonedData.props = this.props;
	        clonedData.did = this.did;
	        clonedData.store = this.store;
	        return clonedData;
	    }
	    save() {
	        if (this.attachedStore()) {
	            try {
	                this.getStore().storeDidMetadata(this.did, this);
	            }
	            catch (e) {
	                if (e instanceof DIDStoreException)
	                    console.log("INTERNAL - error store metadata for DID {}", this.did);
	                throw e;
	            }
	        }
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDMetadata, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedMetadataException)
	                throw e;
	            else
	                throw new MalformedMetadataException(e);
	        }
	    }
	}
	DIDMetadata.ROOT_IDENTITY = "rootIdentity";
	DIDMetadata.INDEX = "index";
	DIDMetadata.TXID = "txid";
	DIDMetadata.PREV_SIGNATURE = "prevSignature";
	DIDMetadata.SIGNATURE = "signature";
	DIDMetadata.PUBLISHED = "published";
	DIDMetadata.DEACTIVATED = "deactivated";

	class DIDStoreMetadata extends AbstractMetadata {
	    constructor(store = null) {
	        super(store);
	        this.put(DIDStoreMetadata.TYPE, DIDStoreMetadata.DID_STORE_TYPE);
	        this.put(DIDStoreMetadata.VERSION, DIDStoreMetadata.DID_STORE_VERSION);
	    }
	    getType() {
	        return this.get(DIDStoreMetadata.TYPE);
	    }
	    getVersion() {
	        return this.getInteger(DIDStoreMetadata.VERSION, -1);
	    }
	    setFingerprint(fingerprint) {
	        checkArgument(fingerprint != null && fingerprint != "", "Invalid fingerprint");
	        this.put(DIDStoreMetadata.FINGERPRINT, fingerprint);
	    }
	    getFingerprint() {
	        return this.get(DIDStoreMetadata.FINGERPRINT);
	    }
	    setDefaultRootIdentity(id) {
	        this.put(DIDStoreMetadata.DEFAULT_ROOT_IDENTITY, id);
	    }
	    getDefaultRootIdentity() {
	        return this.get(DIDStoreMetadata.DEFAULT_ROOT_IDENTITY);
	    }
	    save() {
	        if (this.attachedStore()) {
	            try {
	                this.getStore().storage.storeMetadata(this);
	            }
	            catch (e) {
	                if (e instanceof DIDStoreException)
	                    DIDStoreMetadata.log.error("INTERNAL - error store metadata for DIDStore");
	                throw e;
	            }
	        }
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDStoreMetadata, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedMetadataException)
	                throw e;
	            else
	                throw new MalformedMetadataException(e);
	        }
	    }
	}
	DIDStoreMetadata.DID_STORE_TYPE = "did:elastos:store";
	DIDStoreMetadata.DID_STORE_VERSION = 3;
	DIDStoreMetadata.TYPE = "type";
	DIDStoreMetadata.VERSION = "version";
	DIDStoreMetadata.FINGERPRINT = "fingerprint";
	DIDStoreMetadata.DEFAULT_ROOT_IDENTITY = "defaultRootIdentity";
	DIDStoreMetadata.log = new Logger("DIDStoreMetadata");

	function checkArgument(condition, errorMessage) {
	    if (!condition)
	        throw new Error(errorMessage);
	}
	function checkEmpty(value, errorMessage) {
	    checkArgument(value != null && value !== "", errorMessage);
	}
	function checkNotNull(value, errorMessage) {
	    if (value === null) {
	        throw new Error(errorMessage);
	    }
	}
	function hashCode(input) {
	    if (typeof input === 'string') {
	        var h = 0, i = input.length;
	        while (i > 0) {
	            h = (h << 5) - h + input.charCodeAt(--i) | 0;
	        }
	        return h;
	    }
	    if (typeof input === 'number') {
	        return input;
	    }
	    if (typeof input === 'boolean') {
	        return input === true ? 1231 : 1237;
	    }
	    throw new IllegalArgumentException("Unsupported type " + typeof input);
	}
	function base64Decode(input) {
	    return BASE64.decode(input);
	}
	function runningInBrowser() {
	    return process === undefined || process.platform === "browser" || process.title === "browser";
	}

	class DID {
	    constructor(methodOrDID, methodSpecificId = null, start, limit) {
	        this.repr = null;
	        this.parser = new class {
	            constructor(superThis) {
	                this.superThis = superThis;
	            }
	            isTokenChar(ch, start) {
	                if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') ||
	                    (ch >= '0' && ch <= '9'))
	                    return true;
	                if (start)
	                    return false;
	                else
	                    return (ch == '.' || ch == '_' || ch == '-');
	            }
	            scanNextPart(did, start, limit, delimiter) {
	                let nextPart = limit;
	                let tokenStart = true;
	                for (let i = start; i < limit; i++) {
	                    let ch = did.charAt(i);
	                    if (typeof ch == 'string') {
	                        if (ch == delimiter) {
	                            nextPart = i;
	                            break;
	                        }
	                    }
	                    else {
	                        for (let i = 0; i < delimiter.length; i++) {
	                            if (ch == delimiter[i]) {
	                                nextPart = i;
	                                break;
	                            }
	                        }
	                    }
	                    if (this.isTokenChar(ch, tokenStart)) {
	                        tokenStart = false;
	                        continue;
	                    }
	                    throw new MalformedDIDException("Invalid char at: " + i);
	                }
	                return nextPart;
	            }
	            parse(did, start = 0, limit) {
	                if (did == null)
	                    throw new MalformedDIDException("null DID string");
	                if (limit == undefined)
	                    limit = did.length;
	                while ((limit > start) && (did.charAt(limit - 1) <= ' '))
	                    limit--;
	                while ((start < limit) && (did.charAt(start) <= ' '))
	                    start++;
	                if (start == limit)
	                    throw new MalformedDIDException("empty DID string");
	                let pos = start;
	                let nextPart = this.scanNextPart(did, pos, limit, ':');
	                let schema = did.substring(pos, nextPart);
	                if (schema != DID.SCHEMA)
	                    throw new MalformedDIDException("Invalid DID schema: '" + schema + "', at: " + pos);
	                pos = nextPart;
	                if (pos + 1 >= limit || did.charAt(pos) != ':')
	                    throw new MalformedDIDException("Missing method and id string at: " + pos);
	                nextPart = this.scanNextPart(did, ++pos, limit, ':');
	                let method = did.substring(pos, nextPart);
	                if (method != DID.METHOD)
	                    throw new MalformedDIDException("Unknown DID method: '" + method + "', at: " + pos);
	                this.superThis.method = DID.METHOD;
	                pos = nextPart;
	                if (pos + 1 >= limit || did.charAt(pos) != ':')
	                    throw new MalformedDIDException("Missing id string at: " +
	                        (pos + 1 > limit ? pos : pos + 1));
	                nextPart = this.scanNextPart(did, ++pos, limit, "\x00");
	                this.superThis.methodSpecificId = did.substring(pos, nextPart);
	            }
	        }(this);
	        this.metadata = null;
	        if (methodSpecificId) {
	            let method = methodOrDID;
	            checkEmpty(method, "Invalid method");
	            checkEmpty(methodSpecificId, "Invalid methodSpecificId");
	            this.method = method;
	            this.methodSpecificId = methodSpecificId;
	        }
	        else {
	            if (!start)
	                start = 0;
	            if (!limit)
	                limit = methodOrDID.length;
	            checkEmpty(methodOrDID, "Invalid DID string");
	            this.parser.parse(methodOrDID, start, limit);
	        }
	    }
	    static createFrom(methodOrDID, start, limit) {
	        checkArgument(methodOrDID != null && methodOrDID != "", "Invalid DID string");
	        checkArgument(start < limit, "Invalid offsets");
	        return new DID(methodOrDID, null, start, limit);
	    }
	    static from(did) {
	        if (!did)
	            return null;
	        if (did instanceof DID)
	            return did;
	        return did.length == 0 ? null : new DID(did);
	    }
	    getMethod() {
	        return this.method;
	    }
	    getMethodSpecificId() {
	        return this.methodSpecificId;
	    }
	    setMetadata(metadata) {
	        this.metadata = metadata;
	    }
	    toJSON(key = null) {
	        return this.toString();
	    }
	    getMetadata() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.metadata == null) {
	                try {
	                    let resolved = yield this.resolve();
	                    this.metadata = resolved != null ? resolved.getMetadata() : new DIDMetadata(this);
	                }
	                catch (e) {
	                    this.metadata = new DIDMetadata(this);
	                }
	            }
	            return this.metadata;
	        });
	    }
	    isDeactivated() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            return (yield this.getMetadata()).isDeactivated();
	        });
	    }
	    resolve(force = false) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let doc = yield DIDBackend.getInstance().resolveDid(this, force);
	            if (doc != null)
	                this.setMetadata(doc.getMetadata());
	            return doc;
	        });
	    }
	    resolveBiography() {
	        return DIDBackend.getInstance().resolveDidBiography(this);
	    }
	    toString() {
	        if (this.repr == null)
	            this.repr = "did:" + this.method + ":" + this.methodSpecificId;
	        return this.repr;
	    }
	    hashCode() {
	        return 0x0D1D + hashCode(this.toString());
	    }
	    equals(obj) {
	        if (obj == this)
	            return true;
	        if (obj instanceof DID) {
	            let did = obj;
	            let eq = this.method === did.method;
	            return eq ? this.methodSpecificId === did.methodSpecificId : eq;
	        }
	        if (typeof obj === "string") {
	            let did = obj;
	            return this.toString() === did;
	        }
	        return false;
	    }
	    compareTo(did) {
	        checkNotNull(did, "did is null");
	        let strcmp = (s1, s2) => {
	            if (s1 < s2)
	                return -1;
	            if (s1 > s2)
	                return 1;
	            return 0;
	        };
	        let rc = strcmp(this.method, did.method);
	        return rc == 0 ? strcmp(this.methodSpecificId, did.methodSpecificId) : rc;
	    }
	}
	DID.SCHEMA = "did";
	DID.METHOD = "elastos";
	DID.METADATA = "metadata";

	class DIDURL {
	    constructor(url, context) {
	        this.did = null;
	        this.path = null;
	        this.fragment = null;
	        this.parser = new class {
	            constructor(superThis) {
	                this.superThis = superThis;
	            }
	            isHexChar(ch) {
	                return ((ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f') ||
	                    (ch >= '0' && ch <= '9'));
	            }
	            isTokenChar(ch, start) {
	                if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') ||
	                    (ch >= '0' && ch <= '9'))
	                    return true;
	                if (start)
	                    return false;
	                else
	                    return (ch == '.' || ch == '_' || ch == '-');
	            }
	            scanNextPart(url, start, limit, partSeps, tokenSeps) {
	                let nextPart = limit;
	                let tokenStart = true;
	                for (let i = start; i < limit; i++) {
	                    let ch = url.charAt(i);
	                    if (partSeps != null && partSeps.indexOf(ch) >= 0) {
	                        nextPart = i;
	                        break;
	                    }
	                    if (tokenSeps != null && tokenSeps.indexOf(ch) >= 0) {
	                        if (tokenStart)
	                            throw new MalformedDIDURLException("Invalid char at: " + i);
	                        tokenStart = true;
	                        continue;
	                    }
	                    if (this.isTokenChar(ch, tokenStart)) {
	                        tokenStart = false;
	                        continue;
	                    }
	                    if (ch == '%') {
	                        if (i + 2 >= limit)
	                            throw new MalformedDIDURLException("Invalid char at: " + i);
	                        let seq = url.charAt(++i);
	                        if (!this.isHexChar(seq))
	                            throw new MalformedDIDURLException("Invalid hex char at: " + i);
	                        seq = url.charAt(++i);
	                        if (!this.isHexChar(seq))
	                            throw new MalformedDIDURLException("Invalid hex char at: " + i);
	                        tokenStart = false;
	                        continue;
	                    }
	                    throw new MalformedDIDURLException("Invalid char at: " + i);
	                }
	                return nextPart;
	            }
	            parse(context, url) {
	                if (context == undefined)
	                    context = null;
	                this.superThis.did = context;
	                if (url == null)
	                    throw new MalformedDIDURLException("null DIDURL string");
	                let start = 0;
	                let limit = url.length;
	                let nextPart;
	                while ((limit > 0) && (url.charAt(limit - 1) <= ' '))
	                    limit--;
	                while ((start < limit) && (url.charAt(start) <= ' '))
	                    start++;
	                if (start == limit)
	                    throw new MalformedDIDURLException("empty DIDURL string");
	                let pos = start;
	                if (pos < limit && url.substr(pos, 4) == "did:") {
	                    nextPart = this.scanNextPart(url, pos, limit, "/?#", ":");
	                    try {
	                        this.superThis.did = DID.createFrom(url.toString(), pos, nextPart);
	                    }
	                    catch (e) {
	                        throw new MalformedDIDURLException("Invalid did at: " + pos, e);
	                    }
	                    pos = nextPart;
	                }
	                if (pos < limit && url.charAt(pos) == '/') {
	                    nextPart = this.scanNextPart(url, pos + 1, limit, "?#", "/");
	                    this.superThis.path = url.substring(pos, nextPart);
	                    pos = nextPart;
	                }
	                if (pos < limit && url.charAt(pos) == '?') {
	                    nextPart = this.scanNextPart(url, pos + 1, limit, "#", "&=");
	                    let queryString = url.substring(pos + 1, nextPart);
	                    pos = nextPart;
	                    if (queryString != "") {
	                        let query = new Map();
	                        let pairs = queryString.split("&");
	                        for (let pair of pairs) {
	                            let parts = pair.split("=");
	                            if (parts.length > 0 && parts[0] != "") {
	                                let name = parts[0];
	                                let value = parts.length == 2 ? parts[1] : null;
	                                query.set(name, value);
	                            }
	                        }
	                        this.superThis.query = query;
	                    }
	                }
	                else {
	                    this.superThis.query = new Map();
	                }
	                if ((pos < limit && url.charAt(pos) == '#') || (pos == start)) {
	                    if (url.charAt(pos) == '#')
	                        pos++;
	                    nextPart = this.scanNextPart(url, pos, limit, "", null);
	                    let fragment = url.substring(pos, nextPart);
	                    if (fragment != "")
	                        this.superThis.fragment = fragment;
	                }
	            }
	        }(this);
	        checkArgument(!!url || !!context, "Invalid context and url");
	        if (!url) {
	            this.did = context;
	            this.query = new Map();
	            return this;
	        }
	        if (typeof url === 'string') {
	            this.parser.parse(context, url);
	        }
	        else {
	            if (url.did != null)
	                this.did = url.did;
	            this.path = url.path;
	            this.query = url.query;
	            this.queryString = url.queryString;
	            this.fragment = url.fragment;
	            this.repr = url.repr;
	            this.metadata = url.metadata;
	        }
	    }
	    static fromDID(did) {
	        return new DIDURL(null, did);
	    }
	    static from(url, context) {
	        if (!url)
	            return null;
	        let base;
	        if (context == null) {
	            base = null;
	        }
	        else {
	            if (context instanceof DID)
	                base = context;
	            else
	                base = DID.from(context);
	        }
	        if (url instanceof DIDURL)
	            return base ? new DIDURL(url, base) : url;
	        else
	            return new DIDURL(url, base);
	    }
	    clone(readonly) {
	        let newInstance = new DIDURL();
	        newInstance.did = this.did;
	        newInstance.path = this.path;
	        newInstance.query = (this.query.size == 0 && readonly) ? new Map() :
	            new Map(this.query);
	        newInstance.queryString = this.queryString;
	        newInstance.fragment = this.fragment;
	        newInstance.repr = this.repr;
	        return newInstance;
	    }
	    getDid() {
	        return this.did;
	    }
	    setDid(did) {
	        this.did = did;
	    }
	    mapToString(map, sep) {
	        let init = true;
	        let str = "";
	        map.forEach((value, key) => {
	            if (init)
	                init = false;
	            else
	                str += sep;
	            str += key;
	            if (value != null)
	                str += "=" + value;
	        });
	        return str;
	    }
	    getPath() {
	        return this.path;
	    }
	    setPath(path) {
	        this.path = path;
	    }
	    getQueryString() {
	        if (this.query.size == 0)
	            return null;
	        if (this.queryString == null)
	            this.queryString = this.mapToString(this.query, "&");
	        return this.queryString;
	    }
	    getQuery() {
	        return this.query;
	    }
	    setQuery(query) {
	        this.query = new Map(query);
	    }
	    getQueryParameter(name) {
	        checkArgument(name != null && name !== "", "Invalid parameter name");
	        let value = this.query.get(name);
	        return value == undefined ? null : value;
	    }
	    hasQueryParameter(name) {
	        checkArgument(name != null && name != "", "Invalid parameter name");
	        return this.query.has(name);
	    }
	    getFragment() {
	        return this.fragment;
	    }
	    setFragment(fragment) {
	        this.fragment = fragment;
	    }
	    setMetadata(metadata) {
	        this.metadata = metadata;
	    }
	    getMetadata() {
	        return this.metadata;
	    }
	    toJSON(key = null) {
	        let base = null;
	        if (key)
	            base = new DID(key);
	        return this.toString(base);
	    }
	    toString(context = null) {
	        if (!context && this.repr)
	            return this.repr;
	        let result = "";
	        if (this.did != null && (context == null || !this.did.equals(context)))
	            result += this.did;
	        if (this.path != null && this.path !== "")
	            result += this.path;
	        if (this.query != null && this.query.size != 0)
	            result += "?" + this.getQueryString();
	        if (this.fragment != null && this.fragment !== "")
	            result += "#" + this.getFragment();
	        if (!context)
	            this.repr = result;
	        return result;
	    }
	    equals(obj) {
	        if (obj == this)
	            return true;
	        if (obj instanceof DIDURL) {
	            let id = obj;
	            return this.toString() === id.toString();
	        }
	        if (typeof obj === "string") {
	            let url = obj;
	            return this.toString() === url;
	        }
	        return false;
	    }
	    compareTo(id) {
	        checkNotNull(id, "id is null");
	        let strcmp = (s1, s2) => {
	            if (s1 < s2)
	                return -1;
	            if (s1 > s2)
	                return 1;
	            return 0;
	        };
	        return strcmp(this.toString(), id.toString());
	    }
	    hashCode() {
	        return hashCode(this.toString());
	    }
	}
	DIDURL.SEPS = [':', ';', '/', '?', '#'];
	(function (DIDURL) {
	    class Builder {
	        constructor(didOrDidUrl) {
	            if (didOrDidUrl instanceof DID) {
	                this.url = DIDURL.fromDID(didOrDidUrl);
	            }
	            else {
	                this.url = didOrDidUrl.clone(false);
	            }
	        }
	        setDid(didOrString) {
	            checkArgument(didOrString != null, "Invalid did");
	            if (didOrString instanceof DID)
	                this.url.setDid(didOrString);
	            else
	                this.url.setDid(DID.from(didOrString));
	            return this;
	        }
	        clearDid() {
	            this.url.setDid(null);
	            return this;
	        }
	        setPath(path) {
	            this.url.setPath(path);
	            return this;
	        }
	        clearPath() {
	            this.url.setPath("");
	            return this;
	        }
	        setQueryParameter(name, value) {
	            checkArgument(name != null && name !== "", "Invalid parameter name");
	            this.url.getQuery().set(name, value);
	            return this;
	        }
	        setQueryParameters(params) {
	            this.url.getQuery().clear();
	            if (params != null && params.size > 0)
	                params.forEach((v, k) => this.url.getQuery().set(k, v));
	            return this;
	        }
	        removeQueryParameter(name) {
	            checkArgument(name != null && name !== "", "Invalid parameter name");
	            this.url.getQuery().delete(name);
	            return this;
	        }
	        clearQueryParameters() {
	            this.url.getQuery().clear();
	            return this;
	        }
	        setFragment(fragment) {
	            this.url.setFragment(fragment);
	            return this;
	        }
	        clearFragment() {
	            this.url.setFragment("");
	            return this;
	        }
	        build() {
	            return this.url.clone(true);
	        }
	    }
	    DIDURL.Builder = Builder;
	})(DIDURL || (DIDURL = {}));

	class JWTHeader {
	    constructor(header) {
	        this.header = header ? header : {};
	    }
	    setAlgorithm(algorithm) {
	        this.header.alg = algorithm;
	        return this;
	    }
	    getAlgorithm() {
	        return this.header.alg;
	    }
	    setKeyId(kid) {
	        this.header.kid = kid;
	        return this;
	    }
	    getKeyId() {
	        return this.header.kid;
	    }
	    setType(type) {
	        this.header.typ = type;
	        return this;
	    }
	    getType() {
	        return this.header.typ;
	    }
	    setContentType(cty) {
	        this.header.cty = cty;
	        return this;
	    }
	    getContentType() {
	        return this.header.cty;
	    }
	    put(name, value) {
	        if (name != JWTHeader.ALG && name != JWTHeader.KID) {
	            if (this.header[name])
	                delete this.header[name];
	            this.header[name] = value;
	        }
	        return this;
	    }
	    get(name) {
	        if (this.header)
	            return this.header[name];
	        return null;
	    }
	    getJWSHeaderParameters() {
	        return this.header;
	    }
	}
	JWTHeader.JWT_TYPE = "JWT";
	JWTHeader.TYPE = "typ";
	JWTHeader.CONTENT_TYPE = "cty";
	JWTHeader.ALG = "alg";
	JWTHeader.KID = "kid";

	class Claims {
	    constructor(payload) {
	        this.payload = payload ? payload : {};
	    }
	    put(name, value) {
	        if (this.payload[name])
	            delete this.payload[name];
	        this.payload[name] = value;
	        return this;
	    }
	    putWithObject(value) {
	        this.payload = Object.assign(Object.assign({}, this.payload), value);
	        return this;
	    }
	    putWithJson(json) {
	        let object = JSON.parse(json);
	        this.putWithObject(object);
	        return this;
	    }
	    get(name) {
	        return this.payload[name];
	    }
	    getAsObject(name) {
	        let value = this.payload[name];
	        if (value != null)
	            return value;
	        return null;
	    }
	    getAsJson(name) {
	        let value = this.payload[name];
	        if (value == null)
	            return null;
	        return JSON.stringify(value);
	    }
	    setId(jti) {
	        this.payload.jti = jti;
	        return this;
	    }
	    getId() {
	        return this.payload.jti;
	    }
	    setAudience(audience) {
	        this.payload.aud = audience;
	        return this;
	    }
	    getAudience() {
	        return this.payload.aud;
	    }
	    setExpiration(expire) {
	        this.payload.exp = expire;
	        return this;
	    }
	    getExpiration() {
	        return this.payload.exp;
	    }
	    setIssuedAt(iat) {
	        this.payload.iat = iat;
	        return this;
	    }
	    getIssuedAt() {
	        return this.payload.iat;
	    }
	    setIssuer(issuer) {
	        this.payload.iss = issuer;
	        return this;
	    }
	    getIssuer() {
	        return this.payload.iss;
	    }
	    setJti(jwtid) {
	        this.payload.jti = jwtid;
	        return this;
	    }
	    getJti() {
	        return this.payload.jti;
	    }
	    setNotBefore(nbf) {
	        this.payload.nbf = nbf;
	        return this;
	    }
	    getNotBefore() {
	        return this.payload.nbf;
	    }
	    setSubject(subject) {
	        this.payload.sub = subject;
	        return this;
	    }
	    getSubject() {
	        return this.payload.sub;
	    }
	    getJWTPayload() {
	        return this.payload;
	    }
	}

	const encoder$2 = new TextEncoder();
	const decoder = new TextDecoder();
	function concat$1(...buffers) {
	    const size = buffers.reduce((acc, { length }) => acc + length, 0);
	    const buf = new Uint8Array(size);
	    let i = 0;
	    buffers.forEach((buffer) => {
	        buf.set(buffer, i);
	        i += buffer.length;
	    });
	    return buf;
	}

	function getGlobal() {
	    if (typeof globalThis !== 'undefined')
	        return globalThis;
	    if (typeof self !== 'undefined')
	        return self;
	    if (typeof window !== 'undefined')
	        return window;
	    throw new Error('unable to locate global object');
	}
	var globalThis$1 = getGlobal();
	function isCloudflareWorkers() {
	    try {
	        return getGlobal().WebSocketPair !== undefined;
	    }
	    catch (_a) {
	        return false;
	    }
	}
	function isNodeJs() {
	    var _a, _b;
	    try {
	        return ((_b = (_a = getGlobal().process) === null || _a === void 0 ? void 0 : _a.versions) === null || _b === void 0 ? void 0 : _b.node) !== undefined;
	    }
	    catch (_c) {
	        return false;
	    }
	}

	const encodeBase64 = (input) => {
	    let unencoded = input;
	    if (typeof unencoded === 'string') {
	        unencoded = encoder$2.encode(unencoded);
	    }
	    const CHUNK_SIZE = 0x8000;
	    const arr = [];
	    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
	        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
	    }
	    return globalThis$1.btoa(arr.join(''));
	};
	const encode$1 = (input) => {
	    return encodeBase64(input).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
	};
	const decodeBase64 = (encoded) => {
	    return new Uint8Array(globalThis$1
	        .atob(encoded)
	        .split('')
	        .map((c) => c.charCodeAt(0)));
	};
	const decode$1 = (input) => {
	    let encoded = input;
	    if (encoded instanceof Uint8Array) {
	        encoded = decoder.decode(encoded);
	    }
	    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
	    try {
	        return decodeBase64(encoded);
	    }
	    catch (_a) {
	        throw new TypeError('The input to be decoded is not correctly encoded.');
	    }
	};

	class JOSEError extends Error {
	    constructor(message) {
	        super(message);
	        this.code = JOSEError.code;
	        this.name = this.constructor.name;
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        }
	    }
	}
	JOSEError.code = 'ERR_JOSE_GENERIC';
	class JWTClaimValidationFailed extends JOSEError {
	    constructor(message, claim = 'unspecified', reason = 'unspecified') {
	        super(message);
	        this.code = JWTClaimValidationFailed.code;
	        this.claim = claim;
	        this.reason = reason;
	    }
	}
	JWTClaimValidationFailed.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
	class JOSEAlgNotAllowed extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JOSEAlgNotAllowed.code;
	    }
	}
	JOSEAlgNotAllowed.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
	class JOSENotSupported extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JOSENotSupported.code;
	    }
	}
	JOSENotSupported.code = 'ERR_JOSE_NOT_SUPPORTED';
	class JWEDecryptionFailed extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWEDecryptionFailed.code;
	        this.message = 'decryption operation failed';
	    }
	}
	JWEDecryptionFailed.code = 'ERR_JWE_DECRYPTION_FAILED';
	class JWEInvalid extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWEInvalid.code;
	    }
	}
	JWEInvalid.code = 'ERR_JWE_INVALID';
	class JWSInvalid extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWSInvalid.code;
	    }
	}
	JWSInvalid.code = 'ERR_JWS_INVALID';
	class JWTInvalid extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWTInvalid.code;
	    }
	}
	JWTInvalid.code = 'ERR_JWT_INVALID';
	class JWKInvalid extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWKInvalid.code;
	    }
	}
	JWKInvalid.code = 'ERR_JWK_INVALID';
	class JWKSInvalid extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWKSInvalid.code;
	    }
	}
	JWKSInvalid.code = 'ERR_JWKS_INVALID';
	class JWKSNoMatchingKey extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWKSNoMatchingKey.code;
	        this.message = 'no applicable key found in the JSON Web Key Set';
	    }
	}
	JWKSNoMatchingKey.code = 'ERR_JWKS_NO_MATCHING_KEY';
	class JWKSMultipleMatchingKeys extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWKSMultipleMatchingKeys.code;
	        this.message = 'multiple matching keys found in the JSON Web Key Set';
	    }
	}
	JWKSMultipleMatchingKeys.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
	class JWSSignatureVerificationFailed extends JOSEError {
	    constructor() {
	        super(...arguments);
	        this.code = JWSSignatureVerificationFailed.code;
	        this.message = 'signature verification failed';
	    }
	}
	JWSSignatureVerificationFailed.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
	class JWTExpired extends JWTClaimValidationFailed {
	    constructor() {
	        super(...arguments);
	        this.code = JWTExpired.code;
	    }
	}
	JWTExpired.code = 'ERR_JWT_EXPIRED';

	function subtleDsa(alg, crv) {
	    switch (alg) {
	        case 'HS256':
	            return { hash: { name: 'SHA-256' }, name: 'HMAC' };
	        case 'HS384':
	            return { hash: { name: 'SHA-384' }, name: 'HMAC' };
	        case 'HS512':
	            return { hash: { name: 'SHA-512' }, name: 'HMAC' };
	        case 'PS256':
	            return {
	                hash: { name: 'SHA-256' },
	                name: 'RSA-PSS',
	                saltLength: 256 >> 3,
	            };
	        case 'PS384':
	            return {
	                hash: { name: 'SHA-384' },
	                name: 'RSA-PSS',
	                saltLength: 384 >> 3,
	            };
	        case 'PS512':
	            return {
	                hash: { name: 'SHA-512' },
	                name: 'RSA-PSS',
	                saltLength: 512 >> 3,
	            };
	        case 'RS256':
	            return { hash: { name: 'SHA-256' }, name: 'RSASSA-PKCS1-v1_5' };
	        case 'RS384':
	            return { hash: { name: 'SHA-384' }, name: 'RSASSA-PKCS1-v1_5' };
	        case 'RS512':
	            return { hash: { name: 'SHA-512' }, name: 'RSASSA-PKCS1-v1_5' };
	        case 'ES256':
	            return { hash: { name: 'SHA-256' }, name: 'ECDSA', namedCurve: 'P-256' };
	        case 'ES384':
	            return { hash: { name: 'SHA-384' }, name: 'ECDSA', namedCurve: 'P-384' };
	        case 'ES512':
	            return { hash: { name: 'SHA-512' }, name: 'ECDSA', namedCurve: 'P-521' };
	        case (isCloudflareWorkers() || isNodeJs()) && 'EdDSA':
	            return { name: crv, namedCurve: crv };
	        default:
	            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
	    }
	}

	var crypto$4 = globalThis$1.crypto;
	function isCryptoKey(key) {
	    if (typeof globalThis$1.CryptoKey === 'undefined') {
	        return false;
	    }
	    return key != null && key instanceof globalThis$1.CryptoKey;
	}

	var checkKeyLength = (alg, key) => {
	    if (alg.startsWith('HS')) {
	        const bitlen = parseInt(alg.substr(-3), 10);
	        const { length } = key.algorithm;
	        if (typeof length !== 'number' || length < bitlen) {
	            throw new TypeError(`${alg} requires symmetric keys to be ${bitlen} bits or larger`);
	        }
	    }
	    if (alg.startsWith('RS') || alg.startsWith('PS')) {
	        const { modulusLength } = key.algorithm;
	        if (typeof modulusLength !== 'number' || modulusLength < 2048) {
	            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
	        }
	    }
	};

	var invalidKeyInput = (actual, ...types) => {
	    let msg = 'Key must be ';
	    if (types.length > 2) {
	        const last = types.pop();
	        msg += `one of type ${types.join(', ')}, or ${last}.`;
	    }
	    else if (types.length === 2) {
	        msg += `one of type ${types[0]} or ${types[1]}.`;
	    }
	    else {
	        msg += `of type ${types[0]}.`;
	    }
	    if (actual == null) {
	        msg += ` Received ${actual}`;
	    }
	    else if (typeof actual === 'function' && actual.name) {
	        msg += ` Received function ${actual.name}`;
	    }
	    else if (typeof actual === 'object' && actual != null) {
	        if (actual.constructor && actual.constructor.name) {
	            msg += ` Received an instance of ${actual.constructor.name}`;
	        }
	    }
	    return msg;
	};

	function getCryptoKey(alg, key, usage) {
	    if (isCryptoKey(key)) {
	        return key;
	    }
	    if (key instanceof Uint8Array) {
	        if (!alg.startsWith('HS')) {
	            throw new TypeError(invalidKeyInput(key, 'CryptoKey'));
	        }
	        return crypto$4.subtle.importKey('raw', key, { hash: { name: `SHA-${alg.substr(-3)}` }, name: 'HMAC' }, false, [usage]);
	    }
	    throw new TypeError(invalidKeyInput(key, 'CryptoKey', 'Uint8Array'));
	}

	const sign$5 = async (alg, key, data) => {
	    const cryptoKey = await getCryptoKey(alg, key, 'sign');
	    checkKeyLength(alg, cryptoKey);
	    const signature = await crypto$4.subtle.sign(subtleDsa(alg, cryptoKey.algorithm.namedCurve), cryptoKey, data);
	    return new Uint8Array(signature);
	};
	var sign$6 = sign$5;

	const isDisjoint = (...headers) => {
	    const sources = headers.filter(Boolean);
	    if (sources.length === 0 || sources.length === 1) {
	        return true;
	    }
	    let acc;
	    for (const header of sources) {
	        const parameters = Object.keys(header);
	        if (!acc || acc.size === 0) {
	            acc = new Set(parameters);
	            continue;
	        }
	        for (const parameter of parameters) {
	            if (acc.has(parameter)) {
	                return false;
	            }
	            acc.add(parameter);
	        }
	    }
	    return true;
	};
	var isDisjoint$1 = isDisjoint;

	const checkKeyType = (alg, key, usage) => {
	    if (!(key instanceof Uint8Array) && !(key === null || key === void 0 ? void 0 : key.type)) {
	        throw new TypeError(invalidKeyInput(key, 'KeyObject', 'CryptoKey', 'Uint8Array'));
	    }
	    if (alg.startsWith('HS') ||
	        alg === 'dir' ||
	        alg.startsWith('PBES2') ||
	        alg.match(/^A\d{3}(?:GCM)?KW$/)) {
	        if (key instanceof Uint8Array || key.type === 'secret') {
	            return;
	        }
	        throw new TypeError('CryptoKey or KeyObject instances for symmetric algorithms must be of type "secret"');
	    }
	    if (key instanceof Uint8Array) {
	        throw new TypeError(invalidKeyInput(key, 'KeyObject', 'CryptoKey'));
	    }
	    if (key.type === 'secret') {
	        throw new TypeError('CryptoKey or KeyObject instances for asymmetric algorithms must not be of type "secret"');
	    }
	    if (usage === 'sign' && key.type === 'public') {
	        throw new TypeError('CryptoKey or KeyObject instances for asymmetric algorithm signing must be of type "private"');
	    }
	    if (usage === 'decrypt' && key.type === 'public') {
	        throw new TypeError('CryptoKey or KeyObject instances for asymmetric algorithm decryption must be of type "private"');
	    }
	};
	var checkKeyType$1 = checkKeyType;

	function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
	    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {
	        throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
	    }
	    if (!protectedHeader || protectedHeader.crit === undefined) {
	        return new Set();
	    }
	    if (!Array.isArray(protectedHeader.crit) ||
	        protectedHeader.crit.length === 0 ||
	        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) {
	        throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
	    }
	    let recognized;
	    if (recognizedOption !== undefined) {
	        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
	    }
	    else {
	        recognized = recognizedDefault;
	    }
	    for (const parameter of protectedHeader.crit) {
	        if (!recognized.has(parameter)) {
	            throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
	        }
	        if (joseHeader[parameter] === undefined) {
	            throw new Err(`Extension Header Parameter "${parameter}" is missing`);
	        }
	        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
	            throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
	        }
	    }
	    return new Set(protectedHeader.crit);
	}

	const checkExtensions$1 = validateCrit.bind(undefined, JWSInvalid, new Map([['b64', true]]));
	class FlattenedSign {
	    constructor(payload) {
	        if (!(payload instanceof Uint8Array)) {
	            throw new TypeError('payload must be an instance of Uint8Array');
	        }
	        this._payload = payload;
	    }
	    setProtectedHeader(protectedHeader) {
	        if (this._protectedHeader) {
	            throw new TypeError('setProtectedHeader can only be called once');
	        }
	        this._protectedHeader = protectedHeader;
	        return this;
	    }
	    setUnprotectedHeader(unprotectedHeader) {
	        if (this._unprotectedHeader) {
	            throw new TypeError('setUnprotectedHeader can only be called once');
	        }
	        this._unprotectedHeader = unprotectedHeader;
	        return this;
	    }
	    async sign(key, options) {
	        if (!this._protectedHeader && !this._unprotectedHeader) {
	            throw new JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');
	        }
	        if (!isDisjoint$1(this._protectedHeader, this._unprotectedHeader)) {
	            throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
	        }
	        const joseHeader = {
	            ...this._protectedHeader,
	            ...this._unprotectedHeader,
	        };
	        const extensions = checkExtensions$1(options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
	        let b64 = true;
	        if (extensions.has('b64')) {
	            b64 = this._protectedHeader.b64;
	            if (typeof b64 !== 'boolean') {
	                throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
	            }
	        }
	        const { alg } = joseHeader;
	        if (typeof alg !== 'string' || !alg) {
	            throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
	        }
	        checkKeyType$1(alg, key, 'sign');
	        let payload = this._payload;
	        if (b64) {
	            payload = encoder$2.encode(encode$1(payload));
	        }
	        let protectedHeader;
	        if (this._protectedHeader) {
	            protectedHeader = encoder$2.encode(encode$1(JSON.stringify(this._protectedHeader)));
	        }
	        else {
	            protectedHeader = encoder$2.encode('');
	        }
	        const data = concat$1(protectedHeader, encoder$2.encode('.'), payload);
	        const signature = await sign$6(alg, key, data);
	        const jws = {
	            signature: encode$1(signature),
	            payload: '',
	        };
	        if (b64) {
	            jws.payload = decoder.decode(payload);
	        }
	        if (this._unprotectedHeader) {
	            jws.header = this._unprotectedHeader;
	        }
	        if (this._protectedHeader) {
	            jws.protected = decoder.decode(protectedHeader);
	        }
	        return jws;
	    }
	}
	var FlattenedSign$1 = FlattenedSign;

	class CompactSign {
	    constructor(payload) {
	        this._flattened = new FlattenedSign$1(payload);
	    }
	    setProtectedHeader(protectedHeader) {
	        this._flattened.setProtectedHeader(protectedHeader);
	        return this;
	    }
	    async sign(key, options) {
	        const jws = await this._flattened.sign(key, options);
	        if (jws.payload === undefined) {
	            throw new TypeError('use the flattened module for creating JWS with b64: false');
	        }
	        return `${jws.protected}.${jws.payload}.${jws.signature}`;
	    }
	}
	var CompactSign$1 = CompactSign;

	var epoch = (date) => Math.floor(date.getTime() / 1000);

	function isObjectLike(value) {
	    return typeof value === 'object' && value !== null;
	}
	function isObject$1(input) {
	    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {
	        return false;
	    }
	    if (Object.getPrototypeOf(input) === null) {
	        return true;
	    }
	    let proto = input;
	    while (Object.getPrototypeOf(proto) !== null) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    return Object.getPrototypeOf(input) === proto;
	}

	const minute = 60;
	const hour = minute * 60;
	const day = hour * 24;
	const week = day * 7;
	const year = day * 365.25;
	const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
	var secs = (str) => {
	    const matched = REGEX.exec(str);
	    if (!matched) {
	        throw new TypeError('Invalid time period format');
	    }
	    const value = parseFloat(matched[1]);
	    const unit = matched[2].toLowerCase();
	    switch (unit) {
	        case 'sec':
	        case 'secs':
	        case 'second':
	        case 'seconds':
	        case 's':
	            return Math.round(value);
	        case 'minute':
	        case 'minutes':
	        case 'min':
	        case 'mins':
	        case 'm':
	            return Math.round(value * minute);
	        case 'hour':
	        case 'hours':
	        case 'hr':
	        case 'hrs':
	        case 'h':
	            return Math.round(value * hour);
	        case 'day':
	        case 'days':
	        case 'd':
	            return Math.round(value * day);
	        case 'week':
	        case 'weeks':
	        case 'w':
	            return Math.round(value * week);
	        default:
	            return Math.round(value * year);
	    }
	};

	class ProduceJWT {
	    constructor(payload) {
	        if (!isObject$1(payload)) {
	            throw new TypeError('JWT Claims Set MUST be an object');
	        }
	        this._payload = payload;
	    }
	    setIssuer(issuer) {
	        this._payload = { ...this._payload, iss: issuer };
	        return this;
	    }
	    setSubject(subject) {
	        this._payload = { ...this._payload, sub: subject };
	        return this;
	    }
	    setAudience(audience) {
	        this._payload = { ...this._payload, aud: audience };
	        return this;
	    }
	    setJti(jwtId) {
	        this._payload = { ...this._payload, jti: jwtId };
	        return this;
	    }
	    setNotBefore(input) {
	        if (typeof input === 'number') {
	            this._payload = { ...this._payload, nbf: input };
	        }
	        else {
	            this._payload = { ...this._payload, nbf: epoch(new Date()) + secs(input) };
	        }
	        return this;
	    }
	    setExpirationTime(input) {
	        if (typeof input === 'number') {
	            this._payload = { ...this._payload, exp: input };
	        }
	        else {
	            this._payload = { ...this._payload, exp: epoch(new Date()) + secs(input) };
	        }
	        return this;
	    }
	    setIssuedAt(input) {
	        if (typeof input === 'undefined') {
	            this._payload = { ...this._payload, iat: epoch(new Date()) };
	        }
	        else {
	            this._payload = { ...this._payload, iat: input };
	        }
	        return this;
	    }
	}

	class SignJWT extends ProduceJWT {
	    setProtectedHeader(protectedHeader) {
	        this._protectedHeader = protectedHeader;
	        return this;
	    }
	    async sign(key, options) {
	        var _a;
	        const sig = new CompactSign$1(encoder$2.encode(JSON.stringify(this._payload)));
	        sig.setProtectedHeader(this._protectedHeader);
	        if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) &&
	            this._protectedHeader.crit.includes('b64') &&
	            this._protectedHeader.b64 === false) {
	            throw new JWTInvalid('JWTs MUST NOT use unencoded payload');
	        }
	        return sig.sign(key, options);
	    }
	}

	class JWTBuilder {
	    constructor(issuer, keyProvider) {
	        this.header = null;
	        this.payload = null;
	        checkArgument(issuer != null, "Invalid issuer");
	        this.header = new JWTHeader();
	        this.payload = new Claims();
	        this.payload.setIssuer(issuer.toString());
	        this.keyprovider = keyProvider;
	        this.issuer = issuer;
	    }
	    static createHeader() {
	        return new JWTHeader();
	    }
	    static createClaims() {
	        return new Claims();
	    }
	    setHeader(header) {
	        this.header = header;
	        return this;
	    }
	    setClaims(claims) {
	        this.payload = claims;
	        if (!claims.getIssuer())
	            this.payload.setIssuer(this.issuer.toString());
	        return this;
	    }
	    setClaimsWithJson(json) {
	        this.payload = new Claims();
	        this.payload.putWithJson(json);
	        if (!this.payload.getIssuer())
	            this.payload.setIssuer(this.issuer.toString());
	        return this;
	    }
	    setClaimsWithObject(object) {
	        this.payload = new Claims();
	        this.payload.putWithObject(object);
	        if (!this.payload.getIssuer())
	            this.payload.setIssuer(this.issuer.toString());
	        return this;
	    }
	    addClaims(claims) {
	        this.payload.putWithObject(claims);
	        return this;
	    }
	    addClaimsWithJson(json) {
	        let object = JSON.parse(json);
	        this.addClaims(object);
	        return this;
	    }
	    addHeader(name, value) {
	        this.header.put(name, value);
	        return this;
	    }
	    claims(name, value) {
	        this.payload.put(name, value);
	        return this;
	    }
	    claimsWithJson(name, json) {
	        let object = JSON.parse(json);
	        this.claims(name, object);
	        return this;
	    }
	    setId(jti) {
	        this.payload.setId(jti);
	        return this;
	    }
	    setAudience(subject) {
	        this.payload.setAudience(subject);
	        return this;
	    }
	    setExpiration(expire) {
	        let expiration = expire instanceof Date ? expire.getUTCSeconds() : expire;
	        this.payload.setExpiration(expiration);
	        return this;
	    }
	    setIssuedAt(iat) {
	        let issuedAt = iat instanceof Date ? iat.getUTCSeconds() : iat;
	        this.payload.setIssuedAt(issuedAt);
	        return this;
	    }
	    setIssuer(issuer) {
	        this.payload.setIssuer(issuer);
	        return this;
	    }
	    setJti(jwtid) {
	        this.payload.setJti(jwtid);
	        return this;
	    }
	    setNotBefore(nbf) {
	        let notBefore = nbf instanceof Date ? nbf.getUTCSeconds() : nbf;
	        this.payload.setNotBefore(notBefore);
	        return this;
	    }
	    setSubject(subject) {
	        this.payload.setSubject(subject);
	        return this;
	    }
	    sign(password, keyid = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(password != null && password != "", "Invalid password");
	            this.header.setAlgorithm("ES256");
	            if (keyid)
	                this.header.setKeyId(keyid);
	            const signjwt = new SignJWT(this.payload.getJWTPayload())
	                .setProtectedHeader(this.header.getJWSHeaderParameters());
	            let sk = yield this.keyprovider.getPrivateKey(keyid, password);
	            return yield signjwt.sign(sk);
	        });
	    }
	    compact() {
	        this.header.setAlgorithm("none");
	        const header = BASE64.fromString(JSON.stringify(this.header.getJWSHeaderParameters()));
	        const payload = BASE64.fromString(JSON.stringify(this.payload.getJWTPayload()));
	        return `${header}.${payload}.`;
	    }
	}

	class JWT {
	    constructor(header, payload) {
	        this.header = new JWTHeader(header);
	        this.claims = new Claims(payload);
	    }
	    getHeader() {
	        return this.header;
	    }
	    getBody() {
	        return this.claims;
	    }
	}

	const verify$3 = async (alg, key, signature, data) => {
	    const cryptoKey = await getCryptoKey(alg, key, 'verify');
	    checkKeyLength(alg, cryptoKey);
	    const algorithm = subtleDsa(alg, cryptoKey.algorithm.namedCurve);
	    try {
	        return await crypto$4.subtle.verify(algorithm, cryptoKey, signature, data);
	    }
	    catch (_a) {
	        return false;
	    }
	};
	var verify$4 = verify$3;

	const validateAlgorithms = (option, algorithms) => {
	    if (algorithms !== undefined &&
	        (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== 'string'))) {
	        throw new TypeError(`"${option}" option must be an array of strings`);
	    }
	    if (!algorithms) {
	        return undefined;
	    }
	    return new Set(algorithms);
	};
	var validateAlgorithms$1 = validateAlgorithms;

	const checkExtensions = validateCrit.bind(undefined, JWSInvalid, new Map([['b64', true]]));
	const checkAlgOption = validateAlgorithms$1.bind(undefined, 'algorithms');
	async function flattenedVerify(jws, key, options) {
	    var _a;
	    if (!isObject$1(jws)) {
	        throw new JWSInvalid('Flattened JWS must be an object');
	    }
	    if (jws.protected === undefined && jws.header === undefined) {
	        throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
	    }
	    if (jws.protected !== undefined && typeof jws.protected !== 'string') {
	        throw new JWSInvalid('JWS Protected Header incorrect type');
	    }
	    if (jws.payload === undefined) {
	        throw new JWSInvalid('JWS Payload missing');
	    }
	    if (typeof jws.signature !== 'string') {
	        throw new JWSInvalid('JWS Signature missing or incorrect type');
	    }
	    if (jws.header !== undefined && !isObject$1(jws.header)) {
	        throw new JWSInvalid('JWS Unprotected Header incorrect type');
	    }
	    let parsedProt = {};
	    if (jws.protected) {
	        const protectedHeader = decode$1(jws.protected);
	        try {
	            parsedProt = JSON.parse(decoder.decode(protectedHeader));
	        }
	        catch (_b) {
	            throw new JWSInvalid('JWS Protected Header is invalid');
	        }
	    }
	    if (!isDisjoint$1(parsedProt, jws.header)) {
	        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
	    }
	    const joseHeader = {
	        ...parsedProt,
	        ...jws.header,
	    };
	    const extensions = checkExtensions(options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
	    let b64 = true;
	    if (extensions.has('b64')) {
	        b64 = parsedProt.b64;
	        if (typeof b64 !== 'boolean') {
	            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
	        }
	    }
	    const { alg } = joseHeader;
	    if (typeof alg !== 'string' || !alg) {
	        throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
	    }
	    const algorithms = options && checkAlgOption(options.algorithms);
	    if (algorithms && !algorithms.has(alg)) {
	        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
	    }
	    if (b64) {
	        if (typeof jws.payload !== 'string') {
	            throw new JWSInvalid('JWS Payload must be a string');
	        }
	    }
	    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {
	        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
	    }
	    let resolvedKey = false;
	    if (typeof key === 'function') {
	        key = await key(parsedProt, jws);
	        resolvedKey = true;
	    }
	    checkKeyType$1(alg, key, 'verify');
	    const data = concat$1(encoder$2.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), encoder$2.encode('.'), typeof jws.payload === 'string' ? encoder$2.encode(jws.payload) : jws.payload);
	    const signature = decode$1(jws.signature);
	    const verified = await verify$4(alg, key, signature, data);
	    if (!verified) {
	        throw new JWSSignatureVerificationFailed();
	    }
	    let payload;
	    if (b64) {
	        payload = decode$1(jws.payload);
	    }
	    else if (typeof jws.payload === 'string') {
	        payload = encoder$2.encode(jws.payload);
	    }
	    else {
	        payload = jws.payload;
	    }
	    const result = { payload };
	    if (jws.protected !== undefined) {
	        result.protectedHeader = parsedProt;
	    }
	    if (jws.header !== undefined) {
	        result.unprotectedHeader = jws.header;
	    }
	    if (resolvedKey) {
	        return { ...result, key };
	    }
	    return result;
	}

	async function compactVerify(jws, key, options) {
	    if (jws instanceof Uint8Array) {
	        jws = decoder.decode(jws);
	    }
	    if (typeof jws !== 'string') {
	        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');
	    }
	    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');
	    if (length !== 3) {
	        throw new JWSInvalid('Invalid Compact JWS');
	    }
	    const verified = await flattenedVerify({
	        payload: (payload || undefined),
	        protected: protectedHeader || undefined,
	        signature: (signature || undefined),
	    }, key, options);
	    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
	    if (typeof key === 'function') {
	        return { ...result, key: verified.key };
	    }
	    return result;
	}

	const normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, '');
	const checkAudiencePresence = (audPayload, audOption) => {
	    if (typeof audPayload === 'string') {
	        return audOption.includes(audPayload);
	    }
	    if (Array.isArray(audPayload)) {
	        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
	    }
	    return false;
	};
	var jwtPayload = (protectedHeader, encodedPayload, options = {}) => {
	    const { typ } = options;
	    if (typ &&
	        (typeof protectedHeader.typ !== 'string' ||
	            normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
	        throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', 'typ', 'check_failed');
	    }
	    let payload;
	    try {
	        payload = JSON.parse(decoder.decode(encodedPayload));
	    }
	    catch (_a) {
	    }
	    if (!isObject$1(payload)) {
	        throw new JWTInvalid('JWT Claims Set must be a top-level JSON object');
	    }
	    const { issuer } = options;
	    if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
	        throw new JWTClaimValidationFailed('unexpected "iss" claim value', 'iss', 'check_failed');
	    }
	    const { subject } = options;
	    if (subject && payload.sub !== subject) {
	        throw new JWTClaimValidationFailed('unexpected "sub" claim value', 'sub', 'check_failed');
	    }
	    const { audience } = options;
	    if (audience &&
	        !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {
	        throw new JWTClaimValidationFailed('unexpected "aud" claim value', 'aud', 'check_failed');
	    }
	    let tolerance;
	    switch (typeof options.clockTolerance) {
	        case 'string':
	            tolerance = secs(options.clockTolerance);
	            break;
	        case 'number':
	            tolerance = options.clockTolerance;
	            break;
	        case 'undefined':
	            tolerance = 0;
	            break;
	        default:
	            throw new TypeError('Invalid clockTolerance option type');
	    }
	    const { currentDate } = options;
	    const now = epoch(currentDate || new Date());
	    if (payload.iat !== undefined || options.maxTokenAge) {
	        if (typeof payload.iat !== 'number') {
	            throw new JWTClaimValidationFailed('"iat" claim must be a number', 'iat', 'invalid');
	        }
	        if (payload.exp === undefined && payload.iat > now + tolerance) {
	            throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
	        }
	    }
	    if (payload.nbf !== undefined) {
	        if (typeof payload.nbf !== 'number') {
	            throw new JWTClaimValidationFailed('"nbf" claim must be a number', 'nbf', 'invalid');
	        }
	        if (payload.nbf > now + tolerance) {
	            throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', 'nbf', 'check_failed');
	        }
	    }
	    if (payload.exp !== undefined) {
	        if (typeof payload.exp !== 'number') {
	            throw new JWTClaimValidationFailed('"exp" claim must be a number', 'exp', 'invalid');
	        }
	        if (payload.exp <= now - tolerance) {
	            throw new JWTExpired('"exp" claim timestamp check failed', 'exp', 'check_failed');
	        }
	    }
	    if (options.maxTokenAge) {
	        const age = now - payload.iat;
	        const max = typeof options.maxTokenAge === 'number' ? options.maxTokenAge : secs(options.maxTokenAge);
	        if (age - tolerance > max) {
	            throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');
	        }
	        if (age < 0 - tolerance) {
	            throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
	        }
	    }
	    return payload;
	};

	async function jwtVerify(jwt, key, options) {
	    var _a;
	    const verified = await compactVerify(jwt, key, options);
	    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {
	        throw new JWTInvalid('JWTs MUST NOT use unencoded payload');
	    }
	    const payload = jwtPayload(verified.protectedHeader, verified.payload, options);
	    const result = { payload, protectedHeader: verified.protectedHeader };
	    if (typeof key === 'function') {
	        return { ...result, key: verified.key };
	    }
	    return result;
	}

	const decode = decode$1;

	function decodeProtectedHeader(token) {
	    let protectedB64u;
	    if (typeof token === 'string') {
	        const parts = token.split('.');
	        if (parts.length === 3 || parts.length === 5) {
	            [protectedB64u] = parts;
	        }
	    }
	    else if (typeof token === 'object' && token) {
	        if ('protected' in token) {
	            protectedB64u = token.protected;
	        }
	        else {
	            throw new TypeError('Token does not contain a Protected Header');
	        }
	    }
	    try {
	        if (typeof protectedB64u !== 'string' || !protectedB64u) {
	            throw new Error();
	        }
	        const result = JSON.parse(decoder.decode(decode(protectedB64u)));
	        if (!isObject$1(result)) {
	            throw new Error();
	        }
	        return result;
	    }
	    catch (_a) {
	        throw new TypeError('Invalid Token or Protected Header formatting');
	    }
	}

	class UnsecuredJWT extends ProduceJWT {
	    encode() {
	        const header = encode$1(JSON.stringify({ alg: 'none' }));
	        const payload = encode$1(JSON.stringify(this._payload));
	        return `${header}.${payload}.`;
	    }
	    static decode(jwt, options) {
	        if (typeof jwt !== 'string') {
	            throw new JWTInvalid('Unsecured JWT must be a string');
	        }
	        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split('.');
	        if (length !== 3 || signature !== '') {
	            throw new JWTInvalid('Invalid Unsecured JWT');
	        }
	        let header;
	        try {
	            header = JSON.parse(decoder.decode(decode$1(encodedHeader)));
	            if (header.alg !== 'none')
	                throw new Error();
	        }
	        catch (_a) {
	            throw new JWTInvalid('Invalid Unsecured JWT');
	        }
	        const payload = jwtPayload(header, decode$1(encodedPayload), options);
	        return { payload, header };
	    }
	}

	class JWTParser {
	    constructor(keyprovider, options) {
	        this.keyprovider = keyprovider;
	        this.options = options;
	    }
	    isSigned(token) {
	        const protectedHeader = decodeProtectedHeader(token);
	        return protectedHeader.alg == "none" ? false : true;
	    }
	    getSignkey(token) {
	        const protectedHeader = decodeProtectedHeader(token);
	        return protectedHeader.kid;
	    }
	    getIssuer(token) {
	        let toks = token.split(".");
	        if (toks.length != 3)
	            throw new JWTException("Invalid jwt token.");
	        let payload = JSON.parse(BASE64.toString(toks[1]));
	        let issuer = payload["iss"];
	        if (issuer == null)
	            throw new JWTException("No issuer in the token.");
	        return issuer;
	    }
	    parse(token) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (!this.isSigned(token)) {
	                const result = UnsecuredJWT.decode(token, this.options);
	                return new JWT(result.header, result.payload);
	            }
	            else {
	                if (this.keyprovider == null) {
	                    let issuer = DID.from(this.getIssuer(token));
	                    if (issuer == null)
	                        throw new JWTException("No issuer in the token");
	                    let issuerDoc = yield issuer.resolve();
	                    if (issuerDoc == null)
	                        throw new DIDResolveException("No issuer doc in the chain.");
	                    this.keyprovider = issuerDoc.getKeyProvider();
	                }
	                let pk = yield this.keyprovider.getPublicKey(this.getSignkey(token));
	                var result;
	                try {
	                    result = yield jwtVerify(token, pk, this.options);
	                }
	                catch (e) {
	                    throw new JWTException(e);
	                }
	                return new JWT(result.protectedHeader, result.payload);
	            }
	        });
	    }
	}

	class JWTParserBuilder {
	    constructor() {
	        this.keyProvider = null;
	        this.options = {};
	        return this;
	    }
	    static newWithKeyProvider(keyprovider) {
	        let builder = new JWTParserBuilder();
	        builder.keyProvider = keyprovider;
	        return builder;
	    }
	    requireSubject(subject) {
	        this.options.subject = subject;
	        return this;
	    }
	    requireAudience(audience) {
	        this.options.audience = audience;
	        return this;
	    }
	    requireIssuer(issuer) {
	        this.options.issuer = issuer;
	        return this;
	    }
	    requireIssuedAt(iat) {
	        this.options.maxTokenAge = iat;
	        return this;
	    }
	    requireAlgorithms(algorithms) {
	        this.options.algorithms = algorithms;
	        return this;
	    }
	    requireHeaderType(type) {
	        this.options.typ = type;
	        return this;
	    }
	    setAllowedClockSkewSeconds(clockTolerance) {
	        this.options.clockTolerance = clockTolerance;
	        return this;
	    }
	    build() {
	        Object.assign({}, this.options);
	        return new JWTParser(this.keyProvider, this.options);
	    }
	}

	class CredentialMetadata extends AbstractMetadata {
	    constructor(id = null, store = null) {
	        super(store);
	        this.id = id;
	    }
	    setId(id) {
	        this.id = id;
	    }
	    setTransactionId(txid) {
	        this.put(CredentialMetadata.TXID, txid);
	    }
	    getTransactionId() {
	        return this.get(CredentialMetadata.TXID);
	    }
	    setPublished(timestamp) {
	        checkArgument(timestamp != null, "Invalid timestamp");
	        this.put(CredentialMetadata.PUBLISHED, timestamp);
	    }
	    getPublished() {
	        return this.getDate(CredentialMetadata.PUBLISHED, null);
	    }
	    setRevoked(revoked) {
	        this.put(CredentialMetadata.REVOKED, revoked);
	    }
	    isRevoked() {
	        return this.getBoolean(CredentialMetadata.REVOKED, false);
	    }
	    clone() {
	        try {
	            return super.clone();
	        }
	        catch (e) {
	            CredentialMetadata.log.error(e);
	            return null;
	        }
	    }
	    save() {
	        if (this.attachedStore()) {
	            try {
	                this.getStore().storeCredentialMetadata(this.id, this);
	            }
	            catch (e) {
	                CredentialMetadata.log.error("INTERNAL - error store metadata for credential {}", this.id);
	                throw e;
	            }
	        }
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialMetadata, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedMetadataException)
	                throw e;
	            else
	                throw new MalformedMetadataException(e);
	        }
	    }
	}
	CredentialMetadata.TXID = "txid";
	CredentialMetadata.PUBLISHED = "published";
	CredentialMetadata.REVOKED = "revoked";
	CredentialMetadata.log = new Logger("CredentialMetadata");

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire (path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var dayjs_min = {exports: {}};

	(function (module, exports) {
	!function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",$="Invalid Date",l=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},m=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return +(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return {M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},D="en",v={};v[D]=M;var p=function(t){return t instanceof _},S=function(t,e,n){var r;if(!t)return D;if("string"==typeof t)v[t]&&(r=t),e&&(v[t]=e,r=t);else {var i=t.name;v[i]=t,r=i;}return !n&&r&&(D=r),r||!n&&D},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t);}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},m.$utils=function(){return O},m.isValid=function(){return !(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g="set"+(this.$u?"UTC":"");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var D=this.$locale().weekStart||0,v=(y<D?y+7:y)-D;return $(r?m-v:m+(6-v),M);case a:case d:return l(g+"Hours",0);case u:return l(g+"Minutes",1);case s:return l(g+"Seconds",2);case i:return l(g+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),$=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d;}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].substr(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,D=O.m(this,M);return D=(l={},l[c]=D/12,l[f]=D,l[h]=D/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?D:O.a(D)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return v[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),b=_.prototype;return w.prototype=b,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])};})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=v[D],w.Ls=v,w.p={},w}));
	}(dayjs_min));

	var dayjs = dayjs_min.exports;

	var ChangeChain;
	(function (ChangeChain) {
	    ChangeChain[ChangeChain["EXTERNAL"] = 0] = "EXTERNAL";
	    ChangeChain[ChangeChain["INTERNAL"] = 1] = "INTERNAL";
	})(ChangeChain || (ChangeChain = {}));
	var CoinType;
	(function (CoinType) {
	    CoinType[CoinType["ELA"] = 0] = "ELA";
	    CoinType[CoinType["IDCHAIN"] = 1] = "IDCHAIN";
	})(CoinType || (CoinType = {}));
	var SignType;
	(function (SignType) {
	    SignType["ELA_STANDARD"] = "ELA_STANDARD";
	    SignType["ELA_MULTISIG"] = "ELA_MULTISIG";
	    SignType["ELA_CROSSCHAIN"] = "ELA_CROSSCHAIN";
	    SignType["ELA_IDCHAIN"] = "ELA_IDCHAIN";
	    SignType["ELA_DESTROY"] = "ELA_DESTROY";
	})(SignType || (SignType = {}));
	class Constants {
	}
	Constants._DEFAULT_PUBLICKEY_TYPE = "secp256r1";
	Constants.DEFAULT_PUBLICKEY_TYPE = "ECDSAsecp256r1";
	Constants.DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss'Z'";
	Constants.DATE_FORMAT_ISO_8601 = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
	Constants.MAX_VALID_YEARS = 5;

	const log$5 = new Logger("VerifiableCredential");
	class VerifiableCredential extends DIDEntity {
	    constructor() {
	        super();
	    }
	    static newWithVerifiableCredential(vc, withProof) {
	        let newVc = new VerifiableCredential();
	        newVc.id = vc.id;
	        newVc.type = vc.type;
	        newVc.issuer = vc.issuer;
	        newVc.issuanceDate = vc.issuanceDate;
	        newVc.expirationDate = vc.expirationDate;
	        newVc.subject = vc.subject;
	        if (withProof)
	            newVc.proof = vc.proof;
	        return newVc;
	    }
	    checkAttachedStore() {
	        if (!this.getMetadata().attachedStore())
	            throw new NotAttachedWithStoreException();
	    }
	    getId() {
	        return this.id;
	    }
	    getType() {
	        return this.type;
	    }
	    getIssuer() {
	        return this.issuer;
	    }
	    getIssuanceDate() {
	        return this.issuanceDate;
	    }
	    hasExpirationDate() {
	        return this.expirationDate != null;
	    }
	    getExpirationDate() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.expirationDate != null)
	                return this.expirationDate;
	            else {
	                try {
	                    let controllerDoc = yield this.subject.getId().resolve();
	                    if (controllerDoc != null)
	                        return controllerDoc.getExpires();
	                }
	                catch (e) {
	                    return null;
	                }
	                return null;
	            }
	        });
	    }
	    getLastModified() {
	        return this.proof.getCreated();
	    }
	    getSubject() {
	        return this.subject;
	    }
	    getProof() {
	        return this.proof;
	    }
	    getSerializeContextDid() {
	        return this.getSubject().getId();
	    }
	    setMetadata(metadata) {
	        this.metadata = metadata;
	        this.getId().setMetadata(metadata);
	    }
	    getMetadata() {
	        if (this.metadata == null) {
	            this.metadata = new CredentialMetadata(this.getId());
	        }
	        return this.metadata;
	    }
	    getStore() {
	        return this.metadata.getStore();
	    }
	    isSelfProclaimed() {
	        return this.issuer.equals(this.subject.getId());
	    }
	    isExpired() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.expirationDate != null) {
	                if (dayjs().isAfter(dayjs(this.expirationDate)))
	                    return true;
	            }
	            let controllerDoc = yield this.subject.getId().resolve();
	            if (controllerDoc != null && controllerDoc.isExpired())
	                return true;
	            if (!this.isSelfProclaimed()) {
	                let issuerDoc = yield this.issuer.resolve();
	                if (issuerDoc != null && issuerDoc.isExpired())
	                    return true;
	            }
	            return false;
	        });
	    }
	    isGenuine(listener = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (!this.getId().getDid().equals(this.getSubject().getId())) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: invalid id '{}', should under the scope of '{}'", this.getId(), this.getId(), this.getSubject().getId());
	                    listener.failed(this, "VC {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            let issuerDoc = yield this.issuer.resolve();
	            if (issuerDoc == null) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: Can not resolve the document for issuer '{}'", this.getId(), this.getIssuer());
	                    listener.failed(this, "VC {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (!issuerDoc.isGenuine(listener)) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: issuer '{}' is not genuine", this.getId(), this.getIssuer());
	                    listener.failed(this, "VC {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (!issuerDoc.isAuthenticationKey(this.proof.getVerificationMethod())) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: key '{}' for proof is not an authencation key of '{}'", this.getId(), this.proof.getVerificationMethod(), this.proof.getVerificationMethod().getDid());
	                    listener.failed(this, "VC {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (this.proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: key type '{}' for proof is not supported", this.getId(), this.proof.getType());
	                    listener.failed(this, "VC {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            let vc = VerifiableCredential.newWithVerifiableCredential(this, false);
	            let json = vc.serialize(true);
	            if (!issuerDoc.verify(this.proof.getVerificationMethod(), this.proof.getSignature(), buffer$3.Buffer.from(json))) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: proof is invalid, signature mismatch", this.getId());
	                    listener.failed(this, "VC {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (!this.isSelfProclaimed()) {
	                let controllerDoc = yield this.subject.getId().resolve();
	                if (controllerDoc != null && !controllerDoc.isGenuine(listener)) {
	                    if (listener != null) {
	                        listener.failed(this, "VC {}: holder's document is not genuine", this.getId());
	                        listener.failed(this, "VC {}: is not genuine", this.getId());
	                    }
	                    return false;
	                }
	            }
	            if (listener != null)
	                listener.succeeded(this, "VC {}: is genuine", this.getId());
	            return true;
	        });
	    }
	    isRevoked() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.getMetadata().isRevoked())
	                return true;
	            let bio = yield DIDBackend.getInstance().resolveCredentialBiography(this.getId(), this.getIssuer());
	            let revoked = bio.getStatus().equals(CredentialBiographyStatus.REVOKED);
	            if (revoked)
	                this.getMetadata().setRevoked(revoked);
	            return revoked;
	        });
	    }
	    isValid(listener = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.expirationDate != null) {
	                if (dayjs().isAfter(dayjs(this.expirationDate))) {
	                    if (listener != null) {
	                        listener.failed(this, "VC {}: is expired", this.getId());
	                        listener.failed(this, "VC {}: is invalid", this.getId());
	                    }
	                    return false;
	                }
	            }
	            let issuerDoc = yield this.issuer.resolve();
	            if (issuerDoc == null) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: can not resolve the document for issuer '{}'", this.getId(), this.getIssuer());
	                    listener.failed(this, "VC {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            if (!issuerDoc.isValid(listener)) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: issuer '{}' is invalid", this.getId(), this.getIssuer());
	                    listener.failed(this, "VC {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            if (!issuerDoc.isAuthenticationKey(this.proof.getVerificationMethod())) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: key '{}' for proof is not an authencation key of '{}'", this.getId(), this.proof.getVerificationMethod(), this.proof.getVerificationMethod().getDid());
	                    listener.failed(this, "VC {}: is invalid", this.getSubject());
	                }
	                return false;
	            }
	            if (this.proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: key type '{}' for proof is not supported", this.getId(), this.proof.getType());
	                    listener.failed(this, "VC {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            let vc = VerifiableCredential.newWithVerifiableCredential(this, false);
	            let json = vc.serialize(true);
	            if (!issuerDoc.verify(this.proof.getVerificationMethod(), this.proof.getSignature(), buffer$3.Buffer.from(json))) {
	                if (listener != null) {
	                    listener.failed(this, "VC {}: proof is invalid, signature mismatch", this.getId());
	                    listener.failed(this, "VC {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            if (!this.isSelfProclaimed()) {
	                let controllerDoc = yield this.subject.getId().resolve();
	                if (controllerDoc != null && !controllerDoc.isValid(listener)) {
	                    if (listener != null) {
	                        listener.failed(this, "VC {}: holder's document is invalid", this.getId());
	                        listener.failed(this, "VC {}: is invalid", this.getId());
	                    }
	                    return false;
	                }
	            }
	            if (listener != null)
	                listener.succeeded(this, "VC {}: is valid", this.getId());
	            return true;
	        });
	    }
	    wasDeclared() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let bio = yield DIDBackend.getInstance().resolveCredentialBiography(this.getId(), this.getIssuer());
	            if (bio.getStatus() == CredentialBiographyStatus.NOT_FOUND)
	                return false;
	            for (let tx of bio.getAllTransactions()) {
	                if (tx.getRequest().getOperation().equals(IDChainRequest.Operation.DECLARE))
	                    return true;
	            }
	            return false;
	        });
	    }
	    declare(signKey, storepass, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            this.checkAttachedStore();
	            if (!(yield this.isGenuine())) {
	                log$5.error("Publish failed because the credential is not genuine.");
	                throw new CredentialNotGenuineException(this.getId().toString());
	            }
	            if (yield this.isExpired()) {
	                log$5.error("Publish failed because the credential is expired.");
	                throw new CredentialExpiredException(this.getId().toString());
	            }
	            if (yield this.isRevoked()) {
	                log$5.error("Publish failed because the credential is revoked.");
	                throw new CredentialRevokedException(this.getId().toString());
	            }
	            if (yield this.wasDeclared()) {
	                log$5.error("Publish failed because the credential already declared.");
	                throw new CredentialAlreadyExistException(this.getId().toString());
	            }
	            let owner = yield this.getStore().loadDid(this.getSubject().getId());
	            if (owner == null) {
	                owner = yield this.getSubject().getId().resolve();
	                if (owner == null)
	                    throw new DIDNotFoundException(this.getSubject().getId().toString());
	                owner.getMetadata().attachStore(this.getStore());
	            }
	            if (signKey == null && owner.getDefaultPublicKeyId() == null)
	                throw new InvalidKeyException("Unknown sign key");
	            if (signKey != null) {
	                if (!owner.isAuthenticationKey(signKey))
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            else {
	                signKey = owner.getDefaultPublicKeyId();
	            }
	            yield DIDBackend.getInstance().declareCredential(this, owner, signKey, storepass, adapter);
	        });
	    }
	    revoke(signKey, signer = null, storepass = null, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            this.checkAttachedStore();
	            let owner = yield this.getSubject().getId().resolve();
	            if (owner == null) {
	                log$5.error("Publish failed because the credential owner is not published.");
	                throw new DIDNotFoundException(this.getSubject().getId().toString());
	            }
	            owner.getMetadata().attachStore(this.getStore());
	            let issuer = yield this.getIssuer().resolve();
	            if (issuer == null) {
	                log$5.error("Publish failed because the credential issuer is not published.");
	                throw new DIDNotFoundException(this.getIssuer().toString());
	            }
	            issuer.getMetadata().attachStore(this.getStore());
	            if (yield this.isRevoked()) {
	                log$5.error("Publish failed because the credential is revoked.");
	                throw new CredentialRevokedException(this.getId().toString());
	            }
	            if (typeof signKey === "string")
	                signKey = DIDURL.from(signKey, this.getSubject().getId());
	            if (signer == null) {
	                let signerDid = (signKey != null && signKey.getDid() != null) ?
	                    signKey.getDid() : this.getSubject().getId();
	                signer = yield this.getStore().loadDid(signerDid);
	                if (signer == null) {
	                    signer = yield this.getSubject().getId().resolve();
	                    if (signer == null)
	                        throw new DIDNotFoundException(this.getSubject().getId().toString());
	                    signer.getMetadata().attachStore(this.getStore());
	                }
	            }
	            if (!signer.getSubject().equals(this.getSubject().getId()) &&
	                !signer.getSubject().equals(this.getIssuer()) &&
	                !owner.hasController(signer.getSubject()) &&
	                !issuer.hasController(signer.getSubject())) {
	                log$5.error("Publish failed because the invalid signer or signkey.");
	                throw new InvalidKeyException("Not owner or issuer: " + signer.getSubject());
	            }
	            if (signKey == null && signer.getDefaultPublicKeyId() == null)
	                throw new InvalidKeyException("Unknown sign key");
	            if (signKey != null) {
	                if (!signer.isAuthenticationKey(signKey))
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            else {
	                signKey = signer.getDefaultPublicKeyId();
	            }
	            yield DIDBackend.getInstance().revokeCredential(this, signer, signKey, storepass, adapter);
	        });
	    }
	    static revoke(id, signer, signKey, storepass, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null, "Invalid credential id");
	            checkArgument(signer != null, "Invalid issuer's document");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            if (!signer.getMetadata().attachedStore())
	                throw new NotAttachedWithStoreException(signer.getSubject().toString());
	            let bio = yield DIDBackend.getInstance().resolveCredentialBiography(id, signer.getSubject());
	            if (bio.getStatus().equals(CredentialBiographyStatus.REVOKED)) {
	                log$5.error("Publish failed because the credential is revoked.");
	                throw new CredentialRevokedException(id.toString());
	            }
	            if (bio.getStatus().equals(CredentialBiographyStatus.VALID)) {
	                let vc = bio.getTransaction(0).getRequest().getCredential();
	                if (!signer.getSubject().equals(vc.getSubject().getId()) && signer.getSubject().equals(vc.getIssuer())) {
	                    log$5.error("Publish failed because the invalid signer or signkey.");
	                    throw new InvalidKeyException("Not owner or issuer: " + signer.getSubject());
	                }
	            }
	            if (signKey == null && signer.getDefaultPublicKeyId() == null)
	                throw new InvalidKeyException("Unknown sign key");
	            if (signKey != null) {
	                if (!signer.isAuthenticationKey(signKey))
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            else {
	                signKey = signer.getDefaultPublicKeyId();
	            }
	            yield DIDBackend.getInstance().revokeCredential(id, signer, signKey, storepass, adapter);
	        });
	    }
	    static resolve(id, issuer = null, force = false) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (id == null)
	                throw new IllegalArgumentException();
	            if (typeof id === "string")
	                id = DIDURL.from(id);
	            if (typeof issuer === "string")
	                issuer = DID.from(issuer);
	            let vc = yield DIDBackend.getInstance().resolveCredential(id, issuer, force);
	            if (vc != null)
	                id.setMetadata(vc.getMetadata());
	            return vc;
	        });
	    }
	    static resolveBiography(id, issuer) {
	        checkArgument(id != null, "Invalid credential id");
	        return DIDBackend.getInstance().resolveCredentialBiography(id, issuer);
	    }
	    static list(did, skip = 0, limit = 0) {
	        checkArgument(did != null, "Invalid did");
	        return DIDBackend.getInstance().listCredentials(did, skip, limit);
	    }
	    toJSON(key = null) {
	        let context = key ? new DID(key) : null;
	        let json = {};
	        json.id = this.id.toString(context);
	        json.type = this.type;
	        if (!context || !this.issuer.equals(context))
	            json.issuer = this.issuer.toString();
	        if (this.issuanceDate)
	            json.issuanceDate = this.dateToString(this.issuanceDate);
	        if (this.expirationDate)
	            json.expirationDate = this.dateToString(this.expirationDate);
	        json.credentialSubject = this.subject.toJSON(key);
	        if (this.proof)
	            json.proof = this.proof.toJSON(key);
	        return json;
	    }
	    fromJSON(json, context = null) {
	        if (!json.credentialSubject)
	            throw new MalformedCredentialException("Missing property: subject");
	        let subject = json.credentialSubject;
	        let holder = this.getDid("credentialSubject.id", subject.id, { mandatory: false, nullable: false, defaultValue: context });
	        if (!holder)
	            throw new MalformedCredentialException("Missing property: subject.id");
	        this.id = this.getDidUrl("id", json.id, { mandatory: true, nullable: false, context: holder });
	        this.type = this.getStrings("type", json.type, { mandatory: true, nullable: false });
	        this.issuer = this.getDid("issuer", json.issuer, { mandatory: false, nullable: false, defaultValue: holder });
	        this.issuanceDate = this.getDate("issuanceDate", json.issuanceDate, { mandatory: true, nullable: false });
	        this.expirationDate = this.getDate("expirationDate", json.expirationDate, { mandatory: true, nullable: true });
	        this.subject = VerifiableCredential.Subject.deserialize(subject, VerifiableCredential.Subject, holder);
	        if (!json.proof)
	            throw new MalformedCredentialException("Missing property: proof");
	        let proof = json.proof;
	        this.proof = VerifiableCredential.Proof.deserialize(proof, VerifiableCredential.Proof, this.issuer);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, VerifiableCredential, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedCredentialException)
	                throw e;
	            else
	                throw new MalformedCredentialException(e);
	        }
	    }
	}
	(function (VerifiableCredential) {
	    class Subject extends DIDEntity {
	        constructor(id = null, properties = {}) {
	            super();
	            this.id = id;
	            this.properties = sortJSONObject(JSON.parse(JSON.stringify(properties)));
	        }
	        getId() {
	            return this.id;
	        }
	        getProperties() {
	            return JSON.parse(JSON.stringify(this.properties));
	        }
	        getPropertyCount() {
	            return Object.keys(this.properties).length;
	        }
	        getProperty(name) {
	            return this.properties[name];
	        }
	        getPropertiesAsString() {
	            return JSON.stringify(this.properties);
	        }
	        toJSON(key = null) {
	            key ? new DID(key) : null;
	            let json = {};
	            json.id = this.id.toString();
	            json = Object.assign(Object.assign({}, json), this.properties);
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.id = this.getDid("subject.id", json.id, { mandatory: false, defaultValue: context });
	            let props = JSON.parse(JSON.stringify(json));
	            delete props.id;
	            this.properties = sortJSONObject(props);
	        }
	    }
	    VerifiableCredential.Subject = Subject;
	    class Proof extends DIDEntity {
	        constructor(method = null, signature = null, created = new Date(), type = Constants.DEFAULT_PUBLICKEY_TYPE) {
	            super();
	            this.type = type != null ? type : Constants.DEFAULT_PUBLICKEY_TYPE;
	            this.created = created == null ? null : new Date(created.getTime() / 1000 * 1000);
	            if (this.created)
	                this.created.setMilliseconds(0);
	            this.verificationMethod = method;
	            this.signature = signature;
	        }
	        getType() {
	            return this.type;
	        }
	        getVerificationMethod() {
	            return this.verificationMethod;
	        }
	        getCreated() {
	            return this.created;
	        }
	        getSignature() {
	            return this.signature;
	        }
	        toJSON(key = null) {
	            let context = key ? new DID(key) : null;
	            let json = {};
	            if (!context || this.type !== Constants.DEFAULT_PUBLICKEY_TYPE)
	                json.type = this.type;
	            if (this.created)
	                json.created = this.dateToString(this.created);
	            json.verificationMethod = this.verificationMethod.toJSON(key);
	            json.signature = this.signature;
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("proof.type", json.type, { mandatory: false, defaultValue: Constants.DEFAULT_PUBLICKEY_TYPE });
	            this.created = this.getDate("proof.created", json.created, { mandatory: false });
	            this.verificationMethod = this.getDidUrl("proof.verificationMethod", json.verificationMethod, { mandatory: true, nullable: false, context: context });
	            this.signature = this.getString("proof.signature", json.signature, { mandatory: true, nullable: false });
	        }
	    }
	    VerifiableCredential.Proof = Proof;
	    class Builder {
	        constructor(issuer, target) {
	            this.issuer = issuer;
	            this.target = target;
	            this.credential = new VerifiableCredential();
	            this.credential.issuer = issuer.getDid();
	        }
	        checkNotSealed() {
	            if (this.credential == null)
	                throw new AlreadySealedException();
	        }
	        id(id) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid id");
	            if (typeof id === "string")
	                id = DIDURL.from(id, this.target);
	            checkArgument(id.getDid() == null || id.getDid().equals(this.target), "Invalid id");
	            if (id.getDid() == null)
	                id = DIDURL.from(id, this.target);
	            this.credential.id = id;
	            return this;
	        }
	        type(...types) {
	            this.checkNotSealed();
	            checkArgument(types != null && types.length > 0, "Invalid types");
	            this.credential.type = Array.from(types);
	            return this;
	        }
	        getMaxExpires() {
	            let maxExpires;
	            if (this.credential.getIssuanceDate() != null)
	                maxExpires = dayjs(this.credential.getIssuanceDate());
	            else
	                maxExpires = dayjs();
	            maxExpires = maxExpires.add(Constants.MAX_VALID_YEARS, "years");
	            return maxExpires.toDate();
	        }
	        defaultExpirationDate() {
	            this.checkNotSealed();
	            this.credential.expirationDate = this.getMaxExpires();
	            if (this.credential.expirationDate)
	                this.credential.expirationDate.setMilliseconds(0);
	            return this;
	        }
	        expirationDate(expirationDate) {
	            this.checkNotSealed();
	            checkArgument(expirationDate != null, "Invalid expiration date");
	            let expDate = dayjs(expirationDate);
	            let maxExpires = this.getMaxExpires();
	            if (expDate.isAfter(maxExpires))
	                expDate = dayjs(maxExpires);
	            this.credential.expirationDate = expDate.toDate();
	            if (this.credential.expirationDate)
	                this.credential.expirationDate.setMilliseconds(0);
	            return this;
	        }
	        properties(newProperties) {
	            this.checkNotSealed();
	            let props = typeof newProperties === "string" ?
	                JSON.parse(newProperties) :
	                JSON.parse(JSON.stringify(newProperties));
	            delete props.id;
	            if (newProperties == null || Object.keys(newProperties).length == 0) {
	                this.subjectProperties = {};
	                return this;
	            }
	            this.subjectProperties = props;
	            return this;
	        }
	        property(name, value) {
	            this.checkNotSealed();
	            checkArgument(name != null && name !== "" && name !== "id", "Invalid name");
	            if (!this.subjectProperties)
	                this.subjectProperties = {};
	            this.subjectProperties[name] = value;
	            return this;
	        }
	        sanitize() {
	            if (this.credential.id == null)
	                throw new MalformedCredentialException("Missing credential id");
	            if (this.credential.type == null || this.credential.type.length == 0)
	                throw new MalformedCredentialException("Missing credential type");
	            this.credential.type.sort();
	            this.credential.issuanceDate = new Date();
	            if (this.credential.issuanceDate)
	                this.credential.issuanceDate.setMilliseconds(0);
	            if (!this.credential.hasExpirationDate())
	                this.defaultExpirationDate();
	            this.subjectProperties = sortJSONObject(this.subjectProperties);
	            this.credential.proof = null;
	        }
	        seal(storepass) {
	            return __awaiter$9(this, void 0, void 0, function* () {
	                this.checkNotSealed();
	                checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	                this.sanitize();
	                this.credential.subject = new VerifiableCredential.Subject(this.target, this.subjectProperties);
	                let json = this.credential.serialize(true);
	                let sig = yield this.issuer.sign(storepass, buffer$3.Buffer.from(json));
	                this.credential.proof = new VerifiableCredential.Proof(this.issuer.getSignKey(), sig);
	                let vc = this.credential;
	                this.credential = null;
	                return vc;
	            });
	        }
	    }
	    VerifiableCredential.Builder = Builder;
	})(VerifiableCredential || (VerifiableCredential = {}));

	var cryptoBrowserify = {};

	var global$1 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick$1(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser$d = true;
	var env$1 = {};
	var argv = [];
	var version$2 = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once$1 = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance$1 = global$1.performance || {};
	var performanceNow =
	  performance$1.now        ||
	  performance$1.mozNow     ||
	  performance$1.msNow      ||
	  performance$1.oNow       ||
	  performance$1.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance$1)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process$1 = {
	  nextTick: nextTick$1,
	  title: title,
	  browser: browser$d,
	  env: env$1,
	  argv: argv,
	  version: version$2,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once$1,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var browser$c = {exports: {}};

	var safeBuffer$1 = {exports: {}};

	var require$$2$3 = /*@__PURE__*/getAugmentedNamespace(buffer$3$1);

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */
	var buffer = require$$2$3;
	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	};
	}(safeBuffer$1, safeBuffer$1.exports));

	// limit of Crypto.getRandomValues()
	// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
	var MAX_BYTES = 65536;

	// Node supports requesting up to this number of bytes
	// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
	var MAX_UINT32 = 4294967295;

	function oldBrowser$1 () {
	  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
	}

	var Buffer$N = safeBuffer$1.exports.Buffer;
	var crypto$3 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

	if (crypto$3 && crypto$3.getRandomValues) {
	  browser$c.exports = randomBytes$6;
	} else {
	  browser$c.exports = oldBrowser$1;
	}

	function randomBytes$6 (size, cb) {
	  // phantomjs needs to throw
	  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

	  var bytes = Buffer$N.allocUnsafe(size);

	  if (size > 0) {  // getRandomValues fails on IE if size == 0
	    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
	      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	      for (var generated = 0; generated < size; generated += MAX_BYTES) {
	        // buffer.slice automatically checks if the end is past the end of
	        // the buffer so we don't have to here
	        crypto$3.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
	      }
	    } else {
	      crypto$3.getRandomValues(bytes);
	    }
	  }

	  if (typeof cb === 'function') {
	    return nextTick$1(function () {
	      cb(null, bytes);
	    })
	  }

	  return bytes
	}

	var inherits_browser = {exports: {}};

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}

	var events = {exports: {}};

	var R = typeof Reflect === 'object' ? Reflect : null;
	var ReflectApply = R && typeof R.apply === 'function'
	  ? R.apply
	  : function ReflectApply(target, receiver, args) {
	    return Function.prototype.apply.call(target, receiver, args);
	  };

	var ReflectOwnKeys;
	if (R && typeof R.ownKeys === 'function') {
	  ReflectOwnKeys = R.ownKeys;
	} else if (Object.getOwnPropertySymbols) {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target)
	      .concat(Object.getOwnPropertySymbols(target));
	  };
	} else {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target);
	  };
	}

	function ProcessEmitWarning(warning) {
	  if (console && console.warn) console.warn(warning);
	}

	var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
	  return value !== value;
	};

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}
	events.exports = EventEmitter;
	events.exports.once = once;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._eventsCount = 0;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	var defaultMaxListeners = 10;

	function checkListener(listener) {
	  if (typeof listener !== 'function') {
	    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
	  }
	}

	Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
	  enumerable: true,
	  get: function() {
	    return defaultMaxListeners;
	  },
	  set: function(arg) {
	    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
	      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
	    }
	    defaultMaxListeners = arg;
	  }
	});

	EventEmitter.init = function() {

	  if (this._events === undefined ||
	      this._events === Object.getPrototypeOf(this)._events) {
	    this._events = Object.create(null);
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
	    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
	  }
	  this._maxListeners = n;
	  return this;
	};

	function _getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return _getMaxListeners(this);
	};

	EventEmitter.prototype.emit = function emit(type) {
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
	  var doError = (type === 'error');

	  var events = this._events;
	  if (events !== undefined)
	    doError = (doError && events.error === undefined);
	  else if (!doError)
	    return false;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    var er;
	    if (args.length > 0)
	      er = args[0];
	    if (er instanceof Error) {
	      // Note: The comments on the `throw` lines are intentional, they show
	      // up in Node's output if this results in an unhandled exception.
	      throw er; // Unhandled 'error' event
	    }
	    // At least give some kind of context to the user
	    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
	    err.context = er;
	    throw err; // Unhandled 'error' event
	  }

	  var handler = events[type];

	  if (handler === undefined)
	    return false;

	  if (typeof handler === 'function') {
	    ReflectApply(handler, this, args);
	  } else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      ReflectApply(listeners[i], this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  checkListener(listener);

	  events = target._events;
	  if (events === undefined) {
	    events = target._events = Object.create(null);
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener !== undefined) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (existing === undefined) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] =
	        prepend ? [listener, existing] : [existing, listener];
	      // If we've already got an array, just append.
	    } else if (prepend) {
	      existing.unshift(listener);
	    } else {
	      existing.push(listener);
	    }

	    // Check for listener leak
	    m = _getMaxListeners(target);
	    if (m > 0 && existing.length > m && !existing.warned) {
	      existing.warned = true;
	      // No error code for this since it is a Warning
	      // eslint-disable-next-line no-restricted-syntax
	      var w = new Error('Possible EventEmitter memory leak detected. ' +
	                          existing.length + ' ' + String(type) + ' listeners ' +
	                          'added. Use emitter.setMaxListeners() to ' +
	                          'increase limit');
	      w.name = 'MaxListenersExceededWarning';
	      w.emitter = target;
	      w.type = type;
	      w.count = existing.length;
	      ProcessEmitWarning(w);
	    }
	  }

	  return target;
	}

	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function onceWrapper() {
	  if (!this.fired) {
	    this.target.removeListener(this.type, this.wrapFn);
	    this.fired = true;
	    if (arguments.length === 0)
	      return this.listener.call(this.target);
	    return this.listener.apply(this.target, arguments);
	  }
	}

	function _onceWrap(target, type, listener) {
	  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
	  var wrapped = onceWrapper.bind(state);
	  wrapped.listener = listener;
	  state.wrapFn = wrapped;
	  return wrapped;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  checkListener(listener);
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      checkListener(listener);
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// Emits a 'removeListener' event if and only if the listener was removed.
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      checkListener(listener);

	      events = this._events;
	      if (events === undefined)
	        return this;

	      list = events[type];
	      if (list === undefined)
	        return this;

	      if (list === listener || list.listener === listener) {
	        if (--this._eventsCount === 0)
	          this._events = Object.create(null);
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length - 1; i >= 0; i--) {
	          if (list[i] === listener || list[i].listener === listener) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (position === 0)
	          list.shift();
	        else {
	          spliceOne(list, position);
	        }

	        if (list.length === 1)
	          events[type] = list[0];

	        if (events.removeListener !== undefined)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events, i;

	      events = this._events;
	      if (events === undefined)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (events.removeListener === undefined) {
	        if (arguments.length === 0) {
	          this._events = Object.create(null);
	          this._eventsCount = 0;
	        } else if (events[type] !== undefined) {
	          if (--this._eventsCount === 0)
	            this._events = Object.create(null);
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        var key;
	        for (i = 0; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = Object.create(null);
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners !== undefined) {
	        // LIFO order
	        for (i = listeners.length - 1; i >= 0; i--) {
	          this.removeListener(type, listeners[i]);
	        }
	      }

	      return this;
	    };

	function _listeners(target, type, unwrap) {
	  var events = target._events;

	  if (events === undefined)
	    return [];

	  var evlistener = events[type];
	  if (evlistener === undefined)
	    return [];

	  if (typeof evlistener === 'function')
	    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

	  return unwrap ?
	    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
	}

	EventEmitter.prototype.listeners = function listeners(type) {
	  return _listeners(this, type, true);
	};

	EventEmitter.prototype.rawListeners = function rawListeners(type) {
	  return _listeners(this, type, false);
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount$1.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount$1;
	function listenerCount$1(type) {
	  var events = this._events;

	  if (events !== undefined) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener !== undefined) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
	};

	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i)
	    copy[i] = arr[i];
	  return copy;
	}

	function spliceOne(list, index) {
	  for (; index + 1 < list.length; index++)
	    list[index] = list[index + 1];
	  list.pop();
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function once(emitter, name) {
	  return new Promise(function (resolve, reject) {
	    function errorListener(err) {
	      emitter.removeListener(name, resolver);
	      reject(err);
	    }

	    function resolver() {
	      if (typeof emitter.removeListener === 'function') {
	        emitter.removeListener('error', errorListener);
	      }
	      resolve([].slice.call(arguments));
	    }
	    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
	    if (name !== 'error') {
	      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
	    }
	  });
	}

	function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
	  if (typeof emitter.on === 'function') {
	    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
	  }
	}

	function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
	  if (typeof emitter.on === 'function') {
	    if (flags.once) {
	      emitter.once(name, listener);
	    } else {
	      emitter.on(name, listener);
	    }
	  } else if (typeof emitter.addEventListener === 'function') {
	    // EventTarget does not have `error` event semantics like Node
	    // EventEmitters, we do not listen for `error` events here.
	    emitter.addEventListener(name, function wrapListener(arg) {
	      // IE does not have builtin `{ once: true }` support so we
	      // have to do it manually.
	      if (flags.once) {
	        emitter.removeEventListener(name, wrapListener);
	      }
	      listener(arg);
	    });
	  } else {
	    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
	  }
	}

	var EE = events.exports;

	var inherits$w;
	if (typeof Object.create === 'function'){
	  inherits$w = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$w = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$x = inherits$w;

	var lookup$1 = [];
	var revLookup$1 = [];
	var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup$1[i] = code[i];
	    revLookup$1[code.charCodeAt(i)] = i;
	  }

	  revLookup$1['-'.charCodeAt(0)] = 62;
	  revLookup$1['_'.charCodeAt(0)] = 63;
	}

	function toByteArray$1 (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr$1(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64$1 (num) {
	  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
	}

	function encodeChunk$1 (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64$1(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray$1 (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup$1[tmp >> 2];
	    output += lookup$1[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup$1[tmp >> 10];
	    output += lookup$1[(tmp >> 4) & 0x3F];
	    output += lookup$1[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$2 = {}.toString;

	var isArray$1 = Array.isArray || function (arr) {
	  return toString$2.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$M.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	function kMaxLength () {
	  return Buffer$M.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$M.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$M(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$M (arg, encodingOrOffset, length) {
	  if (!Buffer$M.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$M)) {
	    return new Buffer$M(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer$M.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$M._augment = function (arr) {
	  arr.__proto__ = Buffer$M.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$M.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	  Buffer$M.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$M.__proto__ = Uint8Array;
	}

	function assertSize$1 (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize$1(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$M.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize$1(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$M.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$M.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$M.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$M.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength$1(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$M.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	Buffer$M.isBuffer = isBuffer$2;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$M.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$M.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$M.concat = function concat (list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$M.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$M.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength$1 (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$M.byteLength = byteLength$1;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$M.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$M.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer$M.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$M.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$M.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$M.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$M.compare(this, b) === 0
	};

	Buffer$M.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$M.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$M.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$M.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$M.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$M.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$M.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$M.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$M.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray$1(buf)
	  } else {
	    return fromByteArray$1(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex$1(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$M.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$M.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$M(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$M.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$M.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$M.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$M.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$M.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$M.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$M.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$M.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$M.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$M.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$M.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$M.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$M.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$M.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$M.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer$M.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer$M.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer$M.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$M.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$M.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$M.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$M.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$M.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$M.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$M.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$M.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$M.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$M.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$M.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$M.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$M.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$M.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$M.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$M.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$M.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$M.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$M.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$M.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$M.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$M.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$M.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$M.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$M.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer$M(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex$1 (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray$1(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$2(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer$1(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer$1 (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return buffer$3.Buffer.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = buffer$3.Buffer.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	/*<replacement>*/

	var Buffer$L = safeBuffer$1.exports.Buffer;
	/*</replacement>*/

	var isEncoding$1 = Buffer$L.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding$1(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding$1(enc) {
	  var nenc = _normalizeEncoding$1(enc);
	  if (typeof nenc !== 'string' && (Buffer$L.isEncoding === isEncoding$1 || !isEncoding$1(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	var StringDecoder_1 = StringDecoder$2;
	function StringDecoder$2(encoding) {
	  this.encoding = normalizeEncoding$1(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text$1;
	      this.end = utf16End$1;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast$1;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text$1;
	      this.end = base64End$1;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite$1;
	      this.end = simpleEnd$1;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer$L.allocUnsafe(nb);
	}

	StringDecoder$2.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder$2.prototype.end = utf8End$1;

	// Returns only complete characters in a Buffer
	StringDecoder$2.prototype.text = utf8Text$1;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder$2.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte$1(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete$1(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte$1(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte$1(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte$1(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes$1(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast$1(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes$1(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text$1(buf, i) {
	  var total = utf8CheckIncomplete$1(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End$1(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text$1(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End$1(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text$1(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End$1(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite$1(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd$1(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

	Readable.ReadableState = ReadableState;
	inherits$x(Readable, EE);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder_1(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EE.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer$M.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder_1(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	  } else if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!isBuffer$2(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    state.emittedReadable = true;
	    if (state.sync) nextTick$1(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick$1(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick$1(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EE.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick$1(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick$1(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  if (false !== this._readableState.flowing) {
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach$3(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer$M.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick$1(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach$3(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	Writable.WritableState = WritableState;
	inherits$x(Writable, events.exports.EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: function () {
	      console.log('_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.');
	      return this.getBuffer();
	    }
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  events.exports.EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick$1(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!buffer$3.Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick$1(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (buffer$3.Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = buffer$3.Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (buffer$3.Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick$1(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick$1(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick$1(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$x(Duplex, Readable);

	var keys$1 = Object.keys(Writable.prototype);
	for (var v = 0; v < keys$1.length; v++) {
	  var method = keys$1[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick$1(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	// a transform stream is a readable/writable stream where you do
	inherits$x(Transform$6, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform$6(options) {
	  if (!(this instanceof Transform$6)) return new Transform$6(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform$6.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform$6.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform$6.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform$6.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

	inherits$x(PassThrough, Transform$6);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform$6.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	inherits$x(Stream, EE);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform$6;
	Stream.PassThrough = PassThrough;

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;

	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	var stream$1 = /*#__PURE__*/Object.freeze({
	    __proto__: null,
	    'default': Stream,
	    Readable: Readable,
	    Writable: Writable,
	    Duplex: Duplex,
	    Transform: Transform$6,
	    PassThrough: PassThrough,
	    Stream: Stream
	});

	var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(stream$1);

	var Buffer$K = safeBuffer$1.exports.Buffer;
	var Transform$5 = require$$2$2.Transform;
	var inherits$v = inherits_browser.exports;

	function throwIfNotStringOrBuffer (val, prefix) {
	  if (!Buffer$K.isBuffer(val) && typeof val !== 'string') {
	    throw new TypeError(prefix + ' must be a string or a buffer')
	  }
	}

	function HashBase$2 (blockSize) {
	  Transform$5.call(this);

	  this._block = Buffer$K.allocUnsafe(blockSize);
	  this._blockSize = blockSize;
	  this._blockOffset = 0;
	  this._length = [0, 0, 0, 0];

	  this._finalized = false;
	}

	inherits$v(HashBase$2, Transform$5);

	HashBase$2.prototype._transform = function (chunk, encoding, callback) {
	  var error = null;
	  try {
	    this.update(chunk, encoding);
	  } catch (err) {
	    error = err;
	  }

	  callback(error);
	};

	HashBase$2.prototype._flush = function (callback) {
	  var error = null;
	  try {
	    this.push(this.digest());
	  } catch (err) {
	    error = err;
	  }

	  callback(error);
	};

	HashBase$2.prototype.update = function (data, encoding) {
	  throwIfNotStringOrBuffer(data, 'Data');
	  if (this._finalized) throw new Error('Digest already called')
	  if (!Buffer$K.isBuffer(data)) data = Buffer$K.from(data, encoding);

	  // consume data
	  var block = this._block;
	  var offset = 0;
	  while (this._blockOffset + data.length - offset >= this._blockSize) {
	    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
	    this._update();
	    this._blockOffset = 0;
	  }
	  while (offset < data.length) block[this._blockOffset++] = data[offset++];

	  // update length
	  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
	    this._length[j] += carry;
	    carry = (this._length[j] / 0x0100000000) | 0;
	    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
	  }

	  return this
	};

	HashBase$2.prototype._update = function () {
	  throw new Error('_update is not implemented')
	};

	HashBase$2.prototype.digest = function (encoding) {
	  if (this._finalized) throw new Error('Digest already called')
	  this._finalized = true;

	  var digest = this._digest();
	  if (encoding !== undefined) digest = digest.toString(encoding);

	  // reset state
	  this._block.fill(0);
	  this._blockOffset = 0;
	  for (var i = 0; i < 4; ++i) this._length[i] = 0;

	  return digest
	};

	HashBase$2.prototype._digest = function () {
	  throw new Error('_digest is not implemented')
	};

	var hashBase = HashBase$2;

	var inherits$u = inherits_browser.exports;
	var HashBase$1 = hashBase;
	var Buffer$J = safeBuffer$1.exports.Buffer;

	var ARRAY16$1 = new Array(16);

	function MD5$3 () {
	  HashBase$1.call(this, 64);

	  // state
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	}

	inherits$u(MD5$3, HashBase$1);

	MD5$3.prototype._update = function () {
	  var M = ARRAY16$1;
	  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

	  var a = this._a;
	  var b = this._b;
	  var c = this._c;
	  var d = this._d;

	  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
	  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
	  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
	  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
	  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
	  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
	  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
	  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
	  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
	  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
	  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
	  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
	  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
	  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
	  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
	  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

	  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
	  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
	  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
	  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
	  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
	  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
	  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
	  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
	  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
	  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
	  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
	  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
	  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
	  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
	  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
	  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

	  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
	  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
	  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
	  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
	  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
	  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
	  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
	  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
	  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
	  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
	  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
	  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
	  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
	  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
	  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
	  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

	  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
	  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
	  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
	  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
	  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
	  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
	  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
	  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
	  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
	  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
	  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
	  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
	  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
	  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
	  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
	  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

	  this._a = (this._a + a) | 0;
	  this._b = (this._b + b) | 0;
	  this._c = (this._c + c) | 0;
	  this._d = (this._d + d) | 0;
	};

	MD5$3.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80;
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64);
	    this._update();
	    this._blockOffset = 0;
	  }

	  this._block.fill(0, this._blockOffset, 56);
	  this._block.writeUInt32LE(this._length[0], 56);
	  this._block.writeUInt32LE(this._length[1], 60);
	  this._update();

	  // produce result
	  var buffer = Buffer$J.allocUnsafe(16);
	  buffer.writeInt32LE(this._a, 0);
	  buffer.writeInt32LE(this._b, 4);
	  buffer.writeInt32LE(this._c, 8);
	  buffer.writeInt32LE(this._d, 12);
	  return buffer
	};

	function rotl$1 (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fnF (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
	}

	function fnG (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
	}

	function fnH (a, b, c, d, m, k, s) {
	  return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
	}

	function fnI (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
	}

	var md5_js = MD5$3;

	var Buffer$I = require$$2$3.Buffer;
	var inherits$t = inherits_browser.exports;
	var HashBase = hashBase;

	var ARRAY16 = new Array(16);

	var zl = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var zr = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var sl = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sr = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
	var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

	function RIPEMD160$4 () {
	  HashBase.call(this, 64);

	  // state
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;
	}

	inherits$t(RIPEMD160$4, HashBase);

	RIPEMD160$4.prototype._update = function () {
	  var words = ARRAY16;
	  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

	  var al = this._a | 0;
	  var bl = this._b | 0;
	  var cl = this._c | 0;
	  var dl = this._d | 0;
	  var el = this._e | 0;

	  var ar = this._a | 0;
	  var br = this._b | 0;
	  var cr = this._c | 0;
	  var dr = this._d | 0;
	  var er = this._e | 0;

	  // computation
	  for (var i = 0; i < 80; i += 1) {
	    var tl;
	    var tr;
	    if (i < 16) {
	      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
	      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
	    } else if (i < 32) {
	      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
	      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
	    } else if (i < 48) {
	      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
	      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
	    } else if (i < 64) {
	      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
	      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
	    } else { // if (i<80) {
	      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
	      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
	    }

	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = tl;

	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = tr;
	  }

	  // update state
	  var t = (this._b + cl + dr) | 0;
	  this._b = (this._c + dl + er) | 0;
	  this._c = (this._d + el + ar) | 0;
	  this._d = (this._e + al + br) | 0;
	  this._e = (this._a + bl + cr) | 0;
	  this._a = t;
	};

	RIPEMD160$4.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80;
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64);
	    this._update();
	    this._blockOffset = 0;
	  }

	  this._block.fill(0, this._blockOffset, 56);
	  this._block.writeUInt32LE(this._length[0], 56);
	  this._block.writeUInt32LE(this._length[1], 60);
	  this._update();

	  // produce result
	  var buffer = Buffer$I.alloc ? Buffer$I.alloc(20) : new Buffer$I(20);
	  buffer.writeInt32LE(this._a, 0);
	  buffer.writeInt32LE(this._b, 4);
	  buffer.writeInt32LE(this._c, 8);
	  buffer.writeInt32LE(this._d, 12);
	  buffer.writeInt32LE(this._e, 16);
	  return buffer
	};

	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fn1 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn2 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
	}

	function fn3 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn4 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
	}

	function fn5 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
	}

	var ripemd160 = RIPEMD160$4;

	var sha_js = {exports: {}};

	var Buffer$H = safeBuffer$1.exports.Buffer;

	// prototype class for hash functions
	function Hash$7 (blockSize, finalSize) {
	  this._block = Buffer$H.alloc(blockSize);
	  this._finalSize = finalSize;
	  this._blockSize = blockSize;
	  this._len = 0;
	}

	Hash$7.prototype.update = function (data, enc) {
	  if (typeof data === 'string') {
	    enc = enc || 'utf8';
	    data = Buffer$H.from(data, enc);
	  }

	  var block = this._block;
	  var blockSize = this._blockSize;
	  var length = data.length;
	  var accum = this._len;

	  for (var offset = 0; offset < length;) {
	    var assigned = accum % blockSize;
	    var remainder = Math.min(length - offset, blockSize - assigned);

	    for (var i = 0; i < remainder; i++) {
	      block[assigned + i] = data[offset + i];
	    }

	    accum += remainder;
	    offset += remainder;

	    if ((accum % blockSize) === 0) {
	      this._update(block);
	    }
	  }

	  this._len += length;
	  return this
	};

	Hash$7.prototype.digest = function (enc) {
	  var rem = this._len % this._blockSize;

	  this._block[rem] = 0x80;

	  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
	  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
	  this._block.fill(0, rem + 1);

	  if (rem >= this._finalSize) {
	    this._update(this._block);
	    this._block.fill(0);
	  }

	  var bits = this._len * 8;

	  // uint32
	  if (bits <= 0xffffffff) {
	    this._block.writeUInt32BE(bits, this._blockSize - 4);

	  // uint64
	  } else {
	    var lowBits = (bits & 0xffffffff) >>> 0;
	    var highBits = (bits - lowBits) / 0x100000000;

	    this._block.writeUInt32BE(highBits, this._blockSize - 8);
	    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
	  }

	  this._update(this._block);
	  var hash = this._hash();

	  return enc ? hash.toString(enc) : hash
	};

	Hash$7.prototype._update = function () {
	  throw new Error('_update must be implemented by subclass')
	};

	var hash$4 = Hash$7;

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */

	var inherits$s = inherits_browser.exports;
	var Hash$6 = hash$4;
	var Buffer$G = safeBuffer$1.exports.Buffer;

	var K$4 = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	];

	var W$5 = new Array(80);

	function Sha () {
	  this.init();
	  this._w = W$5;

	  Hash$6.call(this, 64, 56);
	}

	inherits$s(Sha, Hash$6);

	Sha.prototype.init = function () {
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;

	  return this
	};

	function rotl5$1 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30$1 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft$1 (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20);
	    var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$4[s]) | 0;

	    e = d;
	    d = c;
	    c = rotl30$1(b);
	    b = a;
	    a = t;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	};

	Sha.prototype._hash = function () {
	  var H = Buffer$G.allocUnsafe(20);

	  H.writeInt32BE(this._a | 0, 0);
	  H.writeInt32BE(this._b | 0, 4);
	  H.writeInt32BE(this._c | 0, 8);
	  H.writeInt32BE(this._d | 0, 12);
	  H.writeInt32BE(this._e | 0, 16);

	  return H
	};

	var sha$4 = Sha;

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits$r = inherits_browser.exports;
	var Hash$5 = hash$4;
	var Buffer$F = safeBuffer$1.exports.Buffer;

	var K$3 = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	];

	var W$4 = new Array(80);

	function Sha1 () {
	  this.init();
	  this._w = W$4;

	  Hash$5.call(this, 64, 56);
	}

	inherits$r(Sha1, Hash$5);

	Sha1.prototype.init = function () {
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;

	  return this
	};

	function rotl1 (num) {
	  return (num << 1) | (num >>> 31)
	}

	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha1.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20);
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K$3[s]) | 0;

	    e = d;
	    d = c;
	    c = rotl30(b);
	    b = a;
	    a = t;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	};

	Sha1.prototype._hash = function () {
	  var H = Buffer$F.allocUnsafe(20);

	  H.writeInt32BE(this._a | 0, 0);
	  H.writeInt32BE(this._b | 0, 4);
	  H.writeInt32BE(this._c | 0, 8);
	  H.writeInt32BE(this._d | 0, 12);
	  H.writeInt32BE(this._e | 0, 16);

	  return H
	};

	var sha1 = Sha1;

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits$q = inherits_browser.exports;
	var Hash$4 = hash$4;
	var Buffer$E = safeBuffer$1.exports.Buffer;

	var K$2 = [
	  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	];

	var W$3 = new Array(64);

	function Sha256$1 () {
	  this.init();

	  this._w = W$3; // new Array(64)

	  Hash$4.call(this, 64, 56);
	}

	inherits$q(Sha256$1, Hash$4);

	Sha256$1.prototype.init = function () {
	  this._a = 0x6a09e667;
	  this._b = 0xbb67ae85;
	  this._c = 0x3c6ef372;
	  this._d = 0xa54ff53a;
	  this._e = 0x510e527f;
	  this._f = 0x9b05688c;
	  this._g = 0x1f83d9ab;
	  this._h = 0x5be0cd19;

	  return this
	};

	function ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj$1 (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0$1 (x) {
	  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
	}

	function sigma1$1 (x) {
	  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
	}

	function gamma0 (x) {
	  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
	}

	function gamma1 (x) {
	  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
	}

	Sha256$1.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;
	  var f = this._f | 0;
	  var g = this._g | 0;
	  var h = this._h | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

	  for (var j = 0; j < 64; ++j) {
	    var T1 = (h + sigma1$1(e) + ch(e, f, g) + K$2[j] + W[j]) | 0;
	    var T2 = (sigma0$1(a) + maj$1(a, b, c)) | 0;

	    h = g;
	    g = f;
	    f = e;
	    e = (d + T1) | 0;
	    d = c;
	    c = b;
	    b = a;
	    a = (T1 + T2) | 0;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	  this._f = (f + this._f) | 0;
	  this._g = (g + this._g) | 0;
	  this._h = (h + this._h) | 0;
	};

	Sha256$1.prototype._hash = function () {
	  var H = Buffer$E.allocUnsafe(32);

	  H.writeInt32BE(this._a, 0);
	  H.writeInt32BE(this._b, 4);
	  H.writeInt32BE(this._c, 8);
	  H.writeInt32BE(this._d, 12);
	  H.writeInt32BE(this._e, 16);
	  H.writeInt32BE(this._f, 20);
	  H.writeInt32BE(this._g, 24);
	  H.writeInt32BE(this._h, 28);

	  return H
	};

	var sha256$1 = Sha256$1;

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits$p = inherits_browser.exports;
	var Sha256 = sha256$1;
	var Hash$3 = hash$4;
	var Buffer$D = safeBuffer$1.exports.Buffer;

	var W$2 = new Array(64);

	function Sha224 () {
	  this.init();

	  this._w = W$2; // new Array(64)

	  Hash$3.call(this, 64, 56);
	}

	inherits$p(Sha224, Sha256);

	Sha224.prototype.init = function () {
	  this._a = 0xc1059ed8;
	  this._b = 0x367cd507;
	  this._c = 0x3070dd17;
	  this._d = 0xf70e5939;
	  this._e = 0xffc00b31;
	  this._f = 0x68581511;
	  this._g = 0x64f98fa7;
	  this._h = 0xbefa4fa4;

	  return this
	};

	Sha224.prototype._hash = function () {
	  var H = Buffer$D.allocUnsafe(28);

	  H.writeInt32BE(this._a, 0);
	  H.writeInt32BE(this._b, 4);
	  H.writeInt32BE(this._c, 8);
	  H.writeInt32BE(this._d, 12);
	  H.writeInt32BE(this._e, 16);
	  H.writeInt32BE(this._f, 20);
	  H.writeInt32BE(this._g, 24);

	  return H
	};

	var sha224$1 = Sha224;

	var inherits$o = inherits_browser.exports;
	var Hash$2 = hash$4;
	var Buffer$C = safeBuffer$1.exports.Buffer;

	var K$1 = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	var W$1 = new Array(160);

	function Sha512 () {
	  this.init();
	  this._w = W$1;

	  Hash$2.call(this, 128, 112);
	}

	inherits$o(Sha512, Hash$2);

	Sha512.prototype.init = function () {
	  this._ah = 0x6a09e667;
	  this._bh = 0xbb67ae85;
	  this._ch = 0x3c6ef372;
	  this._dh = 0xa54ff53a;
	  this._eh = 0x510e527f;
	  this._fh = 0x9b05688c;
	  this._gh = 0x1f83d9ab;
	  this._hh = 0x5be0cd19;

	  this._al = 0xf3bcc908;
	  this._bl = 0x84caa73b;
	  this._cl = 0xfe94f82b;
	  this._dl = 0x5f1d36f1;
	  this._el = 0xade682d1;
	  this._fl = 0x2b3e6c1f;
	  this._gl = 0xfb41bd6b;
	  this._hl = 0x137e2179;

	  return this
	};

	function Ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0 (x, xl) {
	  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
	}

	function sigma1 (x, xl) {
	  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
	}

	function Gamma0 (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
	}

	function Gamma0l (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
	}

	function Gamma1 (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
	}

	function Gamma1l (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
	}

	function getCarry (a, b) {
	  return (a >>> 0) < (b >>> 0) ? 1 : 0
	}

	Sha512.prototype._update = function (M) {
	  var W = this._w;

	  var ah = this._ah | 0;
	  var bh = this._bh | 0;
	  var ch = this._ch | 0;
	  var dh = this._dh | 0;
	  var eh = this._eh | 0;
	  var fh = this._fh | 0;
	  var gh = this._gh | 0;
	  var hh = this._hh | 0;

	  var al = this._al | 0;
	  var bl = this._bl | 0;
	  var cl = this._cl | 0;
	  var dl = this._dl | 0;
	  var el = this._el | 0;
	  var fl = this._fl | 0;
	  var gl = this._gl | 0;
	  var hl = this._hl | 0;

	  for (var i = 0; i < 32; i += 2) {
	    W[i] = M.readInt32BE(i * 4);
	    W[i + 1] = M.readInt32BE(i * 4 + 4);
	  }
	  for (; i < 160; i += 2) {
	    var xh = W[i - 15 * 2];
	    var xl = W[i - 15 * 2 + 1];
	    var gamma0 = Gamma0(xh, xl);
	    var gamma0l = Gamma0l(xl, xh);

	    xh = W[i - 2 * 2];
	    xl = W[i - 2 * 2 + 1];
	    var gamma1 = Gamma1(xh, xl);
	    var gamma1l = Gamma1l(xl, xh);

	    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	    var Wi7h = W[i - 7 * 2];
	    var Wi7l = W[i - 7 * 2 + 1];

	    var Wi16h = W[i - 16 * 2];
	    var Wi16l = W[i - 16 * 2 + 1];

	    var Wil = (gamma0l + Wi7l) | 0;
	    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
	    Wil = (Wil + gamma1l) | 0;
	    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
	    Wil = (Wil + Wi16l) | 0;
	    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

	    W[i] = Wih;
	    W[i + 1] = Wil;
	  }

	  for (var j = 0; j < 160; j += 2) {
	    Wih = W[j];
	    Wil = W[j + 1];

	    var majh = maj(ah, bh, ch);
	    var majl = maj(al, bl, cl);

	    var sigma0h = sigma0(ah, al);
	    var sigma0l = sigma0(al, ah);
	    var sigma1h = sigma1(eh, el);
	    var sigma1l = sigma1(el, eh);

	    // t1 = h + sigma1 + ch + K[j] + W[j]
	    var Kih = K$1[j];
	    var Kil = K$1[j + 1];

	    var chh = Ch(eh, fh, gh);
	    var chl = Ch(el, fl, gl);

	    var t1l = (hl + sigma1l) | 0;
	    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
	    t1l = (t1l + chl) | 0;
	    t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
	    t1l = (t1l + Kil) | 0;
	    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
	    t1l = (t1l + Wil) | 0;
	    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

	    // t2 = sigma0 + maj
	    var t2l = (sigma0l + majl) | 0;
	    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

	    hh = gh;
	    hl = gl;
	    gh = fh;
	    gl = fl;
	    fh = eh;
	    fl = el;
	    el = (dl + t1l) | 0;
	    eh = (dh + t1h + getCarry(el, dl)) | 0;
	    dh = ch;
	    dl = cl;
	    ch = bh;
	    cl = bl;
	    bh = ah;
	    bl = al;
	    al = (t1l + t2l) | 0;
	    ah = (t1h + t2h + getCarry(al, t1l)) | 0;
	  }

	  this._al = (this._al + al) | 0;
	  this._bl = (this._bl + bl) | 0;
	  this._cl = (this._cl + cl) | 0;
	  this._dl = (this._dl + dl) | 0;
	  this._el = (this._el + el) | 0;
	  this._fl = (this._fl + fl) | 0;
	  this._gl = (this._gl + gl) | 0;
	  this._hl = (this._hl + hl) | 0;

	  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
	  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
	  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
	  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
	  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
	  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
	  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
	  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
	};

	Sha512.prototype._hash = function () {
	  var H = Buffer$C.allocUnsafe(64);

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset);
	    H.writeInt32BE(l, offset + 4);
	  }

	  writeInt64BE(this._ah, this._al, 0);
	  writeInt64BE(this._bh, this._bl, 8);
	  writeInt64BE(this._ch, this._cl, 16);
	  writeInt64BE(this._dh, this._dl, 24);
	  writeInt64BE(this._eh, this._el, 32);
	  writeInt64BE(this._fh, this._fl, 40);
	  writeInt64BE(this._gh, this._gl, 48);
	  writeInt64BE(this._hh, this._hl, 56);

	  return H
	};

	var sha512$1 = Sha512;

	var inherits$n = inherits_browser.exports;
	var SHA512$2 = sha512$1;
	var Hash$1 = hash$4;
	var Buffer$B = safeBuffer$1.exports.Buffer;

	var W = new Array(160);

	function Sha384 () {
	  this.init();
	  this._w = W;

	  Hash$1.call(this, 128, 112);
	}

	inherits$n(Sha384, SHA512$2);

	Sha384.prototype.init = function () {
	  this._ah = 0xcbbb9d5d;
	  this._bh = 0x629a292a;
	  this._ch = 0x9159015a;
	  this._dh = 0x152fecd8;
	  this._eh = 0x67332667;
	  this._fh = 0x8eb44a87;
	  this._gh = 0xdb0c2e0d;
	  this._hh = 0x47b5481d;

	  this._al = 0xc1059ed8;
	  this._bl = 0x367cd507;
	  this._cl = 0x3070dd17;
	  this._dl = 0xf70e5939;
	  this._el = 0xffc00b31;
	  this._fl = 0x68581511;
	  this._gl = 0x64f98fa7;
	  this._hl = 0xbefa4fa4;

	  return this
	};

	Sha384.prototype._hash = function () {
	  var H = Buffer$B.allocUnsafe(48);

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset);
	    H.writeInt32BE(l, offset + 4);
	  }

	  writeInt64BE(this._ah, this._al, 0);
	  writeInt64BE(this._bh, this._bl, 8);
	  writeInt64BE(this._ch, this._cl, 16);
	  writeInt64BE(this._dh, this._dl, 24);
	  writeInt64BE(this._eh, this._el, 32);
	  writeInt64BE(this._fh, this._fl, 40);

	  return H
	};

	var sha384$1 = Sha384;

	var exports$1 = sha_js.exports = function SHA (algorithm) {
	  algorithm = algorithm.toLowerCase();

	  var Algorithm = exports$1[algorithm];
	  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

	  return new Algorithm()
	};

	exports$1.sha = sha$4;
	exports$1.sha1 = sha1;
	exports$1.sha224 = sha224$1;
	exports$1.sha256 = sha256$1;
	exports$1.sha384 = sha384$1;
	exports$1.sha512 = sha512$1;

	var string_decoder = {};

	/*<replacement>*/

	var Buffer$A = safeBuffer$1.exports.Buffer;
	/*</replacement>*/

	var isEncoding = Buffer$A.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer$A.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	string_decoder.StringDecoder = StringDecoder$1;
	function StringDecoder$1(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer$A.allocUnsafe(nb);
	}

	StringDecoder$1.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder$1.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder$1.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder$1.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

	var Buffer$z = safeBuffer$1.exports.Buffer;
	var Transform$4 = require$$2$2.Transform;
	var StringDecoder = string_decoder.StringDecoder;
	var inherits$m = inherits_browser.exports;

	function CipherBase$1 (hashMode) {
	  Transform$4.call(this);
	  this.hashMode = typeof hashMode === 'string';
	  if (this.hashMode) {
	    this[hashMode] = this._finalOrDigest;
	  } else {
	    this.final = this._finalOrDigest;
	  }
	  if (this._final) {
	    this.__final = this._final;
	    this._final = null;
	  }
	  this._decoder = null;
	  this._encoding = null;
	}
	inherits$m(CipherBase$1, Transform$4);

	CipherBase$1.prototype.update = function (data, inputEnc, outputEnc) {
	  if (typeof data === 'string') {
	    data = Buffer$z.from(data, inputEnc);
	  }

	  var outData = this._update(data);
	  if (this.hashMode) return this

	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc);
	  }

	  return outData
	};

	CipherBase$1.prototype.setAutoPadding = function () {};
	CipherBase$1.prototype.getAuthTag = function () {
	  throw new Error('trying to get auth tag in unsupported state')
	};

	CipherBase$1.prototype.setAuthTag = function () {
	  throw new Error('trying to set auth tag in unsupported state')
	};

	CipherBase$1.prototype.setAAD = function () {
	  throw new Error('trying to set aad in unsupported state')
	};

	CipherBase$1.prototype._transform = function (data, _, next) {
	  var err;
	  try {
	    if (this.hashMode) {
	      this._update(data);
	    } else {
	      this.push(this._update(data));
	    }
	  } catch (e) {
	    err = e;
	  } finally {
	    next(err);
	  }
	};
	CipherBase$1.prototype._flush = function (done) {
	  var err;
	  try {
	    this.push(this.__final());
	  } catch (e) {
	    err = e;
	  }

	  done(err);
	};
	CipherBase$1.prototype._finalOrDigest = function (outputEnc) {
	  var outData = this.__final() || Buffer$z.alloc(0);
	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc, true);
	  }
	  return outData
	};

	CipherBase$1.prototype._toString = function (value, enc, fin) {
	  if (!this._decoder) {
	    this._decoder = new StringDecoder(enc);
	    this._encoding = enc;
	  }

	  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

	  var out = this._decoder.write(value);
	  if (fin) {
	    out += this._decoder.end();
	  }

	  return out
	};

	var cipherBase = CipherBase$1;

	var inherits$l = inherits_browser.exports;
	var MD5$2 = md5_js;
	var RIPEMD160$3 = ripemd160;
	var sha$3 = sha_js.exports;
	var Base$5 = cipherBase;

	function Hash (hash) {
	  Base$5.call(this, 'digest');

	  this._hash = hash;
	}

	inherits$l(Hash, Base$5);

	Hash.prototype._update = function (data) {
	  this._hash.update(data);
	};

	Hash.prototype._final = function () {
	  return this._hash.digest()
	};

	var browser$b = function createHash (alg) {
	  alg = alg.toLowerCase();
	  if (alg === 'md5') return new MD5$2()
	  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160$3()

	  return new Hash(sha$3(alg))
	};

	var createHash$6 = browser$b;

	var inherits$k = inherits_browser.exports;
	var Buffer$y = safeBuffer$1.exports.Buffer;

	var Base$4 = cipherBase;

	var ZEROS$2 = Buffer$y.alloc(128);
	var blocksize = 64;

	function Hmac$3 (alg, key) {
	  Base$4.call(this, 'digest');
	  if (typeof key === 'string') {
	    key = Buffer$y.from(key);
	  }

	  this._alg = alg;
	  this._key = key;

	  if (key.length > blocksize) {
	    key = alg(key);
	  } else if (key.length < blocksize) {
	    key = Buffer$y.concat([key, ZEROS$2], blocksize);
	  }

	  var ipad = this._ipad = Buffer$y.allocUnsafe(blocksize);
	  var opad = this._opad = Buffer$y.allocUnsafe(blocksize);

	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36;
	    opad[i] = key[i] ^ 0x5C;
	  }

	  this._hash = [ipad];
	}

	inherits$k(Hmac$3, Base$4);

	Hmac$3.prototype._update = function (data) {
	  this._hash.push(data);
	};

	Hmac$3.prototype._final = function () {
	  var h = this._alg(Buffer$y.concat(this._hash));
	  return this._alg(Buffer$y.concat([this._opad, h]))
	};
	var legacy = Hmac$3;

	var MD5$1 = md5_js;

	var md5$4 = function (buffer) {
	  return new MD5$1().update(buffer).digest()
	};

	var inherits$j = inherits_browser.exports;
	var Legacy = legacy;
	var Base$3 = cipherBase;
	var Buffer$x = safeBuffer$1.exports.Buffer;
	var md5$3 = md5$4;
	var RIPEMD160$2 = ripemd160;

	var sha$2 = sha_js.exports;

	var ZEROS$1 = Buffer$x.alloc(128);

	function Hmac$2 (alg, key) {
	  Base$3.call(this, 'digest');
	  if (typeof key === 'string') {
	    key = Buffer$x.from(key);
	  }

	  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

	  this._alg = alg;
	  this._key = key;
	  if (key.length > blocksize) {
	    var hash = alg === 'rmd160' ? new RIPEMD160$2() : sha$2(alg);
	    key = hash.update(key).digest();
	  } else if (key.length < blocksize) {
	    key = Buffer$x.concat([key, ZEROS$1], blocksize);
	  }

	  var ipad = this._ipad = Buffer$x.allocUnsafe(blocksize);
	  var opad = this._opad = Buffer$x.allocUnsafe(blocksize);

	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36;
	    opad[i] = key[i] ^ 0x5C;
	  }
	  this._hash = alg === 'rmd160' ? new RIPEMD160$2() : sha$2(alg);
	  this._hash.update(ipad);
	}

	inherits$j(Hmac$2, Base$3);

	Hmac$2.prototype._update = function (data) {
	  this._hash.update(data);
	};

	Hmac$2.prototype._final = function () {
	  var h = this._hash.digest();
	  var hash = this._alg === 'rmd160' ? new RIPEMD160$2() : sha$2(this._alg);
	  return hash.update(this._opad).update(h).digest()
	};

	var browser$a = function createHmac (alg, key) {
	  alg = alg.toLowerCase();
	  if (alg === 'rmd160' || alg === 'ripemd160') {
	    return new Hmac$2('rmd160', key)
	  }
	  if (alg === 'md5') {
	    return new Legacy(md5$3, key)
	  }
	  return new Hmac$2(alg, key)
	};

	var sha224WithRSAEncryption = {
		sign: "rsa",
		hash: "sha224",
		id: "302d300d06096086480165030402040500041c"
	};
	var sha256WithRSAEncryption = {
		sign: "rsa",
		hash: "sha256",
		id: "3031300d060960864801650304020105000420"
	};
	var sha384WithRSAEncryption = {
		sign: "rsa",
		hash: "sha384",
		id: "3041300d060960864801650304020205000430"
	};
	var sha512WithRSAEncryption = {
		sign: "rsa",
		hash: "sha512",
		id: "3051300d060960864801650304020305000440"
	};
	var sha256 = {
		sign: "ecdsa",
		hash: "sha256",
		id: ""
	};
	var sha224 = {
		sign: "ecdsa",
		hash: "sha224",
		id: ""
	};
	var sha384 = {
		sign: "ecdsa",
		hash: "sha384",
		id: ""
	};
	var sha512 = {
		sign: "ecdsa",
		hash: "sha512",
		id: ""
	};
	var DSA = {
		sign: "dsa",
		hash: "sha1",
		id: ""
	};
	var ripemd160WithRSA = {
		sign: "rsa",
		hash: "rmd160",
		id: "3021300906052b2403020105000414"
	};
	var md5WithRSAEncryption = {
		sign: "rsa",
		hash: "md5",
		id: "3020300c06082a864886f70d020505000410"
	};
	var require$$6$1 = {
		sha224WithRSAEncryption: sha224WithRSAEncryption,
		"RSA-SHA224": {
		sign: "ecdsa/rsa",
		hash: "sha224",
		id: "302d300d06096086480165030402040500041c"
	},
		sha256WithRSAEncryption: sha256WithRSAEncryption,
		"RSA-SHA256": {
		sign: "ecdsa/rsa",
		hash: "sha256",
		id: "3031300d060960864801650304020105000420"
	},
		sha384WithRSAEncryption: sha384WithRSAEncryption,
		"RSA-SHA384": {
		sign: "ecdsa/rsa",
		hash: "sha384",
		id: "3041300d060960864801650304020205000430"
	},
		sha512WithRSAEncryption: sha512WithRSAEncryption,
		"RSA-SHA512": {
		sign: "ecdsa/rsa",
		hash: "sha512",
		id: "3051300d060960864801650304020305000440"
	},
		"RSA-SHA1": {
		sign: "rsa",
		hash: "sha1",
		id: "3021300906052b0e03021a05000414"
	},
		"ecdsa-with-SHA1": {
		sign: "ecdsa",
		hash: "sha1",
		id: ""
	},
		sha256: sha256,
		sha224: sha224,
		sha384: sha384,
		sha512: sha512,
		"DSA-SHA": {
		sign: "dsa",
		hash: "sha1",
		id: ""
	},
		"DSA-SHA1": {
		sign: "dsa",
		hash: "sha1",
		id: ""
	},
		DSA: DSA,
		"DSA-WITH-SHA224": {
		sign: "dsa",
		hash: "sha224",
		id: ""
	},
		"DSA-SHA224": {
		sign: "dsa",
		hash: "sha224",
		id: ""
	},
		"DSA-WITH-SHA256": {
		sign: "dsa",
		hash: "sha256",
		id: ""
	},
		"DSA-SHA256": {
		sign: "dsa",
		hash: "sha256",
		id: ""
	},
		"DSA-WITH-SHA384": {
		sign: "dsa",
		hash: "sha384",
		id: ""
	},
		"DSA-SHA384": {
		sign: "dsa",
		hash: "sha384",
		id: ""
	},
		"DSA-WITH-SHA512": {
		sign: "dsa",
		hash: "sha512",
		id: ""
	},
		"DSA-SHA512": {
		sign: "dsa",
		hash: "sha512",
		id: ""
	},
		"DSA-RIPEMD160": {
		sign: "dsa",
		hash: "rmd160",
		id: ""
	},
		ripemd160WithRSA: ripemd160WithRSA,
		"RSA-RIPEMD160": {
		sign: "rsa",
		hash: "rmd160",
		id: "3021300906052b2403020105000414"
	},
		md5WithRSAEncryption: md5WithRSAEncryption,
		"RSA-MD5": {
		sign: "rsa",
		hash: "md5",
		id: "3020300c06082a864886f70d020505000410"
	}
	};

	var algos$1 = require$$6$1;

	var browser$9 = {};

	var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

	var precondition = function (iterations, keylen) {
	  if (typeof iterations !== 'number') {
	    throw new TypeError('Iterations not a number')
	  }

	  if (iterations < 0) {
	    throw new TypeError('Bad iterations')
	  }

	  if (typeof keylen !== 'number') {
	    throw new TypeError('Key length not a number')
	  }

	  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
	    throw new TypeError('Bad key length')
	  }
	};

	var defaultEncoding$2;
	/* istanbul ignore next */
	if (commonjsGlobal.process && commonjsGlobal.process.browser) {
	  defaultEncoding$2 = 'utf-8';
	} else if (commonjsGlobal.process && commonjsGlobal.process.version) {
	  var pVersionMajor = parseInt(process$1.version.split('.')[0].slice(1), 10);

	  defaultEncoding$2 = pVersionMajor >= 6 ? 'utf-8' : 'binary';
	} else {
	  defaultEncoding$2 = 'utf-8';
	}
	var defaultEncoding_1 = defaultEncoding$2;

	var Buffer$w = safeBuffer$1.exports.Buffer;

	var toBuffer$2 = function (thing, encoding, name) {
	  if (Buffer$w.isBuffer(thing)) {
	    return thing
	  } else if (typeof thing === 'string') {
	    return Buffer$w.from(thing, encoding)
	  } else if (ArrayBuffer.isView(thing)) {
	    return Buffer$w.from(thing.buffer)
	  } else {
	    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
	  }
	};

	var md5$2 = md5$4;
	var RIPEMD160$1 = ripemd160;
	var sha$1 = sha_js.exports;
	var Buffer$v = safeBuffer$1.exports.Buffer;

	var checkParameters$1 = precondition;
	var defaultEncoding$1 = defaultEncoding_1;
	var toBuffer$1 = toBuffer$2;

	var ZEROS = Buffer$v.alloc(128);
	var sizes = {
	  md5: 16,
	  sha1: 20,
	  sha224: 28,
	  sha256: 32,
	  sha384: 48,
	  sha512: 64,
	  rmd160: 20,
	  ripemd160: 20
	};

	function Hmac$1 (alg, key, saltLen) {
	  var hash = getDigest(alg);
	  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

	  if (key.length > blocksize) {
	    key = hash(key);
	  } else if (key.length < blocksize) {
	    key = Buffer$v.concat([key, ZEROS], blocksize);
	  }

	  var ipad = Buffer$v.allocUnsafe(blocksize + sizes[alg]);
	  var opad = Buffer$v.allocUnsafe(blocksize + sizes[alg]);
	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36;
	    opad[i] = key[i] ^ 0x5C;
	  }

	  var ipad1 = Buffer$v.allocUnsafe(blocksize + saltLen + 4);
	  ipad.copy(ipad1, 0, 0, blocksize);
	  this.ipad1 = ipad1;
	  this.ipad2 = ipad;
	  this.opad = opad;
	  this.alg = alg;
	  this.blocksize = blocksize;
	  this.hash = hash;
	  this.size = sizes[alg];
	}

	Hmac$1.prototype.run = function (data, ipad) {
	  data.copy(ipad, this.blocksize);
	  var h = this.hash(ipad);
	  h.copy(this.opad, this.blocksize);
	  return this.hash(this.opad)
	};

	function getDigest (alg) {
	  function shaFunc (data) {
	    return sha$1(alg).update(data).digest()
	  }
	  function rmd160Func (data) {
	    return new RIPEMD160$1().update(data).digest()
	  }

	  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
	  if (alg === 'md5') return md5$2
	  return shaFunc
	}

	function pbkdf2$1 (password, salt, iterations, keylen, digest) {
	  checkParameters$1(iterations, keylen);
	  password = toBuffer$1(password, defaultEncoding$1, 'Password');
	  salt = toBuffer$1(salt, defaultEncoding$1, 'Salt');

	  digest = digest || 'sha1';

	  var hmac = new Hmac$1(digest, password, salt.length);

	  var DK = Buffer$v.allocUnsafe(keylen);
	  var block1 = Buffer$v.allocUnsafe(salt.length + 4);
	  salt.copy(block1, 0, 0, salt.length);

	  var destPos = 0;
	  var hLen = sizes[digest];
	  var l = Math.ceil(keylen / hLen);

	  for (var i = 1; i <= l; i++) {
	    block1.writeUInt32BE(i, salt.length);

	    var T = hmac.run(block1, hmac.ipad1);
	    var U = T;

	    for (var j = 1; j < iterations; j++) {
	      U = hmac.run(U, hmac.ipad2);
	      for (var k = 0; k < hLen; k++) T[k] ^= U[k];
	    }

	    T.copy(DK, destPos);
	    destPos += hLen;
	  }

	  return DK
	}

	var syncBrowser = pbkdf2$1;

	var Buffer$u = safeBuffer$1.exports.Buffer;

	var checkParameters = precondition;
	var defaultEncoding = defaultEncoding_1;
	var sync = syncBrowser;
	var toBuffer = toBuffer$2;

	var ZERO_BUF;
	var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
	var toBrowser = {
	  sha: 'SHA-1',
	  'sha-1': 'SHA-1',
	  sha1: 'SHA-1',
	  sha256: 'SHA-256',
	  'sha-256': 'SHA-256',
	  sha384: 'SHA-384',
	  'sha-384': 'SHA-384',
	  'sha-512': 'SHA-512',
	  sha512: 'SHA-512'
	};
	var checks = [];
	function checkNative (algo) {
	  if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
	    return Promise.resolve(false)
	  }
	  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
	    return Promise.resolve(false)
	  }
	  if (checks[algo] !== undefined) {
	    return checks[algo]
	  }
	  ZERO_BUF = ZERO_BUF || Buffer$u.alloc(8);
	  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
	    .then(function () {
	      return true
	    }).catch(function () {
	      return false
	    });
	  checks[algo] = prom;
	  return prom
	}
	var nextTick;
	function getNextTick () {
	  if (nextTick) {
	    return nextTick
	  }
	  if (commonjsGlobal.process && commonjsGlobal.process.nextTick) {
	    nextTick = commonjsGlobal.process.nextTick;
	  } else if (commonjsGlobal.queueMicrotask) {
	    nextTick = commonjsGlobal.queueMicrotask;
	  } else if (commonjsGlobal.setImmediate) {
	    nextTick = commonjsGlobal.setImmediate;
	  } else {
	    nextTick = commonjsGlobal.setTimeout;
	  }
	  return nextTick
	}
	function browserPbkdf2 (password, salt, iterations, length, algo) {
	  return subtle.importKey(
	    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
	  ).then(function (key) {
	    return subtle.deriveBits({
	      name: 'PBKDF2',
	      salt: salt,
	      iterations: iterations,
	      hash: {
	        name: algo
	      }
	    }, key, length << 3)
	  }).then(function (res) {
	    return Buffer$u.from(res)
	  })
	}

	function resolvePromise (promise, callback) {
	  promise.then(function (out) {
	    getNextTick()(function () {
	      callback(null, out);
	    });
	  }, function (e) {
	    getNextTick()(function () {
	      callback(e);
	    });
	  });
	}
	var async = function (password, salt, iterations, keylen, digest, callback) {
	  if (typeof digest === 'function') {
	    callback = digest;
	    digest = undefined;
	  }

	  digest = digest || 'sha1';
	  var algo = toBrowser[digest.toLowerCase()];

	  if (!algo || typeof commonjsGlobal.Promise !== 'function') {
	    getNextTick()(function () {
	      var out;
	      try {
	        out = sync(password, salt, iterations, keylen, digest);
	      } catch (e) {
	        return callback(e)
	      }
	      callback(null, out);
	    });
	    return
	  }

	  checkParameters(iterations, keylen);
	  password = toBuffer(password, defaultEncoding, 'Password');
	  salt = toBuffer(salt, defaultEncoding, 'Salt');
	  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

	  resolvePromise(checkNative(algo).then(function (resp) {
	    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

	    return sync(password, salt, iterations, keylen, digest)
	  }), callback);
	};

	browser$9.pbkdf2 = async;
	browser$9.pbkdf2Sync = syncBrowser;

	var browser$8 = {};

	var des$2 = {};

	var utils$C = {};

	utils$C.readUInt32BE = function readUInt32BE(bytes, off) {
	  var res =  (bytes[0 + off] << 24) |
	             (bytes[1 + off] << 16) |
	             (bytes[2 + off] << 8) |
	             bytes[3 + off];
	  return res >>> 0;
	};

	utils$C.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
	  bytes[0 + off] = value >>> 24;
	  bytes[1 + off] = (value >>> 16) & 0xff;
	  bytes[2 + off] = (value >>> 8) & 0xff;
	  bytes[3 + off] = value & 0xff;
	};

	utils$C.ip = function ip(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;

	  for (var i = 6; i >= 0; i -= 2) {
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inR >>> (j + i)) & 1;
	    }
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inL >>> (j + i)) & 1;
	    }
	  }

	  for (var i = 6; i >= 0; i -= 2) {
	    for (var j = 1; j <= 25; j += 8) {
	      outR <<= 1;
	      outR |= (inR >>> (j + i)) & 1;
	    }
	    for (var j = 1; j <= 25; j += 8) {
	      outR <<= 1;
	      outR |= (inL >>> (j + i)) & 1;
	    }
	  }

	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};

	utils$C.rip = function rip(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;

	  for (var i = 0; i < 4; i++) {
	    for (var j = 24; j >= 0; j -= 8) {
	      outL <<= 1;
	      outL |= (inR >>> (j + i)) & 1;
	      outL <<= 1;
	      outL |= (inL >>> (j + i)) & 1;
	    }
	  }
	  for (var i = 4; i < 8; i++) {
	    for (var j = 24; j >= 0; j -= 8) {
	      outR <<= 1;
	      outR |= (inR >>> (j + i)) & 1;
	      outR <<= 1;
	      outR |= (inL >>> (j + i)) & 1;
	    }
	  }

	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};

	utils$C.pc1 = function pc1(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;

	  // 7, 15, 23, 31, 39, 47, 55, 63
	  // 6, 14, 22, 30, 39, 47, 55, 63
	  // 5, 13, 21, 29, 39, 47, 55, 63
	  // 4, 12, 20, 28
	  for (var i = 7; i >= 5; i--) {
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inR >> (j + i)) & 1;
	    }
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inL >> (j + i)) & 1;
	    }
	  }
	  for (var j = 0; j <= 24; j += 8) {
	    outL <<= 1;
	    outL |= (inR >> (j + i)) & 1;
	  }

	  // 1, 9, 17, 25, 33, 41, 49, 57
	  // 2, 10, 18, 26, 34, 42, 50, 58
	  // 3, 11, 19, 27, 35, 43, 51, 59
	  // 36, 44, 52, 60
	  for (var i = 1; i <= 3; i++) {
	    for (var j = 0; j <= 24; j += 8) {
	      outR <<= 1;
	      outR |= (inR >> (j + i)) & 1;
	    }
	    for (var j = 0; j <= 24; j += 8) {
	      outR <<= 1;
	      outR |= (inL >> (j + i)) & 1;
	    }
	  }
	  for (var j = 0; j <= 24; j += 8) {
	    outR <<= 1;
	    outR |= (inL >> (j + i)) & 1;
	  }

	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};

	utils$C.r28shl = function r28shl(num, shift) {
	  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
	};

	var pc2table = [
	  // inL => outL
	  14, 11, 17, 4, 27, 23, 25, 0,
	  13, 22, 7, 18, 5, 9, 16, 24,
	  2, 20, 12, 21, 1, 8, 15, 26,

	  // inR => outR
	  15, 4, 25, 19, 9, 1, 26, 16,
	  5, 11, 23, 8, 12, 7, 17, 0,
	  22, 3, 10, 14, 6, 20, 27, 24
	];

	utils$C.pc2 = function pc2(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;

	  var len = pc2table.length >>> 1;
	  for (var i = 0; i < len; i++) {
	    outL <<= 1;
	    outL |= (inL >>> pc2table[i]) & 0x1;
	  }
	  for (var i = len; i < pc2table.length; i++) {
	    outR <<= 1;
	    outR |= (inR >>> pc2table[i]) & 0x1;
	  }

	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};

	utils$C.expand = function expand(r, out, off) {
	  var outL = 0;
	  var outR = 0;

	  outL = ((r & 1) << 5) | (r >>> 27);
	  for (var i = 23; i >= 15; i -= 4) {
	    outL <<= 6;
	    outL |= (r >>> i) & 0x3f;
	  }
	  for (var i = 11; i >= 3; i -= 4) {
	    outR |= (r >>> i) & 0x3f;
	    outR <<= 6;
	  }
	  outR |= ((r & 0x1f) << 1) | (r >>> 31);

	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};

	var sTable = [
	  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
	  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
	  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
	  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

	  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
	  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
	  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
	  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

	  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
	  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
	  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
	  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

	  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
	  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
	  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
	  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

	  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
	  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
	  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
	  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

	  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
	  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
	  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
	  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

	  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
	  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
	  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
	  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

	  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
	  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
	  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
	  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
	];

	utils$C.substitute = function substitute(inL, inR) {
	  var out = 0;
	  for (var i = 0; i < 4; i++) {
	    var b = (inL >>> (18 - i * 6)) & 0x3f;
	    var sb = sTable[i * 0x40 + b];

	    out <<= 4;
	    out |= sb;
	  }
	  for (var i = 0; i < 4; i++) {
	    var b = (inR >>> (18 - i * 6)) & 0x3f;
	    var sb = sTable[4 * 0x40 + i * 0x40 + b];

	    out <<= 4;
	    out |= sb;
	  }
	  return out >>> 0;
	};

	var permuteTable = [
	  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
	  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
	];

	utils$C.permute = function permute(num) {
	  var out = 0;
	  for (var i = 0; i < permuteTable.length; i++) {
	    out <<= 1;
	    out |= (num >>> permuteTable[i]) & 0x1;
	  }
	  return out >>> 0;
	};

	utils$C.padSplit = function padSplit(num, size, group) {
	  var str = num.toString(2);
	  while (str.length < size)
	    str = '0' + str;

	  var out = [];
	  for (var i = 0; i < size; i += group)
	    out.push(str.slice(i, i + group));
	  return out.join(' ');
	};

	var minimalisticAssert = assert$n;

	function assert$n(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$n.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var assert$m = minimalisticAssert;

	function Cipher$3(options) {
	  this.options = options;

	  this.type = this.options.type;
	  this.blockSize = 8;
	  this._init();

	  this.buffer = new Array(this.blockSize);
	  this.bufferOff = 0;
	}
	var cipher = Cipher$3;

	Cipher$3.prototype._init = function _init() {
	  // Might be overrided
	};

	Cipher$3.prototype.update = function update(data) {
	  if (data.length === 0)
	    return [];

	  if (this.type === 'decrypt')
	    return this._updateDecrypt(data);
	  else
	    return this._updateEncrypt(data);
	};

	Cipher$3.prototype._buffer = function _buffer(data, off) {
	  // Append data to buffer
	  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
	  for (var i = 0; i < min; i++)
	    this.buffer[this.bufferOff + i] = data[off + i];
	  this.bufferOff += min;

	  // Shift next
	  return min;
	};

	Cipher$3.prototype._flushBuffer = function _flushBuffer(out, off) {
	  this._update(this.buffer, 0, out, off);
	  this.bufferOff = 0;
	  return this.blockSize;
	};

	Cipher$3.prototype._updateEncrypt = function _updateEncrypt(data) {
	  var inputOff = 0;
	  var outputOff = 0;

	  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
	  var out = new Array(count * this.blockSize);

	  if (this.bufferOff !== 0) {
	    inputOff += this._buffer(data, inputOff);

	    if (this.bufferOff === this.buffer.length)
	      outputOff += this._flushBuffer(out, outputOff);
	  }

	  // Write blocks
	  var max = data.length - ((data.length - inputOff) % this.blockSize);
	  for (; inputOff < max; inputOff += this.blockSize) {
	    this._update(data, inputOff, out, outputOff);
	    outputOff += this.blockSize;
	  }

	  // Queue rest
	  for (; inputOff < data.length; inputOff++, this.bufferOff++)
	    this.buffer[this.bufferOff] = data[inputOff];

	  return out;
	};

	Cipher$3.prototype._updateDecrypt = function _updateDecrypt(data) {
	  var inputOff = 0;
	  var outputOff = 0;

	  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
	  var out = new Array(count * this.blockSize);

	  // TODO(indutny): optimize it, this is far from optimal
	  for (; count > 0; count--) {
	    inputOff += this._buffer(data, inputOff);
	    outputOff += this._flushBuffer(out, outputOff);
	  }

	  // Buffer rest of the input
	  inputOff += this._buffer(data, inputOff);

	  return out;
	};

	Cipher$3.prototype.final = function final(buffer) {
	  var first;
	  if (buffer)
	    first = this.update(buffer);

	  var last;
	  if (this.type === 'encrypt')
	    last = this._finalEncrypt();
	  else
	    last = this._finalDecrypt();

	  if (first)
	    return first.concat(last);
	  else
	    return last;
	};

	Cipher$3.prototype._pad = function _pad(buffer, off) {
	  if (off === 0)
	    return false;

	  while (off < buffer.length)
	    buffer[off++] = 0;

	  return true;
	};

	Cipher$3.prototype._finalEncrypt = function _finalEncrypt() {
	  if (!this._pad(this.buffer, this.bufferOff))
	    return [];

	  var out = new Array(this.blockSize);
	  this._update(this.buffer, 0, out, 0);
	  return out;
	};

	Cipher$3.prototype._unpad = function _unpad(buffer) {
	  return buffer;
	};

	Cipher$3.prototype._finalDecrypt = function _finalDecrypt() {
	  assert$m.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
	  var out = new Array(this.blockSize);
	  this._flushBuffer(out, 0);

	  return this._unpad(out);
	};

	var assert$l = minimalisticAssert;
	var inherits$i = inherits_browser.exports;

	var utils$B = utils$C;
	var Cipher$2 = cipher;

	function DESState() {
	  this.tmp = new Array(2);
	  this.keys = null;
	}

	function DES$3(options) {
	  Cipher$2.call(this, options);

	  var state = new DESState();
	  this._desState = state;

	  this.deriveKeys(state, options.key);
	}
	inherits$i(DES$3, Cipher$2);
	var des$1 = DES$3;

	DES$3.create = function create(options) {
	  return new DES$3(options);
	};

	var shiftTable = [
	  1, 1, 2, 2, 2, 2, 2, 2,
	  1, 2, 2, 2, 2, 2, 2, 1
	];

	DES$3.prototype.deriveKeys = function deriveKeys(state, key) {
	  state.keys = new Array(16 * 2);

	  assert$l.equal(key.length, this.blockSize, 'Invalid key length');

	  var kL = utils$B.readUInt32BE(key, 0);
	  var kR = utils$B.readUInt32BE(key, 4);

	  utils$B.pc1(kL, kR, state.tmp, 0);
	  kL = state.tmp[0];
	  kR = state.tmp[1];
	  for (var i = 0; i < state.keys.length; i += 2) {
	    var shift = shiftTable[i >>> 1];
	    kL = utils$B.r28shl(kL, shift);
	    kR = utils$B.r28shl(kR, shift);
	    utils$B.pc2(kL, kR, state.keys, i);
	  }
	};

	DES$3.prototype._update = function _update(inp, inOff, out, outOff) {
	  var state = this._desState;

	  var l = utils$B.readUInt32BE(inp, inOff);
	  var r = utils$B.readUInt32BE(inp, inOff + 4);

	  // Initial Permutation
	  utils$B.ip(l, r, state.tmp, 0);
	  l = state.tmp[0];
	  r = state.tmp[1];

	  if (this.type === 'encrypt')
	    this._encrypt(state, l, r, state.tmp, 0);
	  else
	    this._decrypt(state, l, r, state.tmp, 0);

	  l = state.tmp[0];
	  r = state.tmp[1];

	  utils$B.writeUInt32BE(out, l, outOff);
	  utils$B.writeUInt32BE(out, r, outOff + 4);
	};

	DES$3.prototype._pad = function _pad(buffer, off) {
	  var value = buffer.length - off;
	  for (var i = off; i < buffer.length; i++)
	    buffer[i] = value;

	  return true;
	};

	DES$3.prototype._unpad = function _unpad(buffer) {
	  var pad = buffer[buffer.length - 1];
	  for (var i = buffer.length - pad; i < buffer.length; i++)
	    assert$l.equal(buffer[i], pad);

	  return buffer.slice(0, buffer.length - pad);
	};

	DES$3.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
	  var l = lStart;
	  var r = rStart;

	  // Apply f() x16 times
	  for (var i = 0; i < state.keys.length; i += 2) {
	    var keyL = state.keys[i];
	    var keyR = state.keys[i + 1];

	    // f(r, k)
	    utils$B.expand(r, state.tmp, 0);

	    keyL ^= state.tmp[0];
	    keyR ^= state.tmp[1];
	    var s = utils$B.substitute(keyL, keyR);
	    var f = utils$B.permute(s);

	    var t = r;
	    r = (l ^ f) >>> 0;
	    l = t;
	  }

	  // Reverse Initial Permutation
	  utils$B.rip(r, l, out, off);
	};

	DES$3.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
	  var l = rStart;
	  var r = lStart;

	  // Apply f() x16 times
	  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
	    var keyL = state.keys[i];
	    var keyR = state.keys[i + 1];

	    // f(r, k)
	    utils$B.expand(l, state.tmp, 0);

	    keyL ^= state.tmp[0];
	    keyR ^= state.tmp[1];
	    var s = utils$B.substitute(keyL, keyR);
	    var f = utils$B.permute(s);

	    var t = l;
	    l = (r ^ f) >>> 0;
	    r = t;
	  }

	  // Reverse Initial Permutation
	  utils$B.rip(l, r, out, off);
	};

	var cbc$1 = {};

	var assert$k = minimalisticAssert;
	var inherits$h = inherits_browser.exports;

	var proto = {};

	function CBCState(iv) {
	  assert$k.equal(iv.length, 8, 'Invalid IV length');

	  this.iv = new Array(8);
	  for (var i = 0; i < this.iv.length; i++)
	    this.iv[i] = iv[i];
	}

	function instantiate(Base) {
	  function CBC(options) {
	    Base.call(this, options);
	    this._cbcInit();
	  }
	  inherits$h(CBC, Base);

	  var keys = Object.keys(proto);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    CBC.prototype[key] = proto[key];
	  }

	  CBC.create = function create(options) {
	    return new CBC(options);
	  };

	  return CBC;
	}

	cbc$1.instantiate = instantiate;

	proto._cbcInit = function _cbcInit() {
	  var state = new CBCState(this.options.iv);
	  this._cbcState = state;
	};

	proto._update = function _update(inp, inOff, out, outOff) {
	  var state = this._cbcState;
	  var superProto = this.constructor.super_.prototype;

	  var iv = state.iv;
	  if (this.type === 'encrypt') {
	    for (var i = 0; i < this.blockSize; i++)
	      iv[i] ^= inp[inOff + i];

	    superProto._update.call(this, iv, 0, out, outOff);

	    for (var i = 0; i < this.blockSize; i++)
	      iv[i] = out[outOff + i];
	  } else {
	    superProto._update.call(this, inp, inOff, out, outOff);

	    for (var i = 0; i < this.blockSize; i++)
	      out[outOff + i] ^= iv[i];

	    for (var i = 0; i < this.blockSize; i++)
	      iv[i] = inp[inOff + i];
	  }
	};

	var assert$j = minimalisticAssert;
	var inherits$g = inherits_browser.exports;

	var Cipher$1 = cipher;
	var DES$2 = des$1;

	function EDEState(type, key) {
	  assert$j.equal(key.length, 24, 'Invalid key length');

	  var k1 = key.slice(0, 8);
	  var k2 = key.slice(8, 16);
	  var k3 = key.slice(16, 24);

	  if (type === 'encrypt') {
	    this.ciphers = [
	      DES$2.create({ type: 'encrypt', key: k1 }),
	      DES$2.create({ type: 'decrypt', key: k2 }),
	      DES$2.create({ type: 'encrypt', key: k3 })
	    ];
	  } else {
	    this.ciphers = [
	      DES$2.create({ type: 'decrypt', key: k3 }),
	      DES$2.create({ type: 'encrypt', key: k2 }),
	      DES$2.create({ type: 'decrypt', key: k1 })
	    ];
	  }
	}

	function EDE(options) {
	  Cipher$1.call(this, options);

	  var state = new EDEState(this.type, this.options.key);
	  this._edeState = state;
	}
	inherits$g(EDE, Cipher$1);

	var ede = EDE;

	EDE.create = function create(options) {
	  return new EDE(options);
	};

	EDE.prototype._update = function _update(inp, inOff, out, outOff) {
	  var state = this._edeState;

	  state.ciphers[0]._update(inp, inOff, out, outOff);
	  state.ciphers[1]._update(out, outOff, out, outOff);
	  state.ciphers[2]._update(out, outOff, out, outOff);
	};

	EDE.prototype._pad = DES$2.prototype._pad;
	EDE.prototype._unpad = DES$2.prototype._unpad;

	des$2.utils = utils$C;
	des$2.Cipher = cipher;
	des$2.DES = des$1;
	des$2.CBC = cbc$1;
	des$2.EDE = ede;

	var CipherBase = cipherBase;
	var des = des$2;
	var inherits$f = inherits_browser.exports;
	var Buffer$t = safeBuffer$1.exports.Buffer;

	var modes$3 = {
	  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
	  'des-ede3': des.EDE,
	  'des-ede-cbc': des.CBC.instantiate(des.EDE),
	  'des-ede': des.EDE,
	  'des-cbc': des.CBC.instantiate(des.DES),
	  'des-ecb': des.DES
	};
	modes$3.des = modes$3['des-cbc'];
	modes$3.des3 = modes$3['des-ede3-cbc'];
	var browserifyDes = DES$1;
	inherits$f(DES$1, CipherBase);
	function DES$1 (opts) {
	  CipherBase.call(this);
	  var modeName = opts.mode.toLowerCase();
	  var mode = modes$3[modeName];
	  var type;
	  if (opts.decrypt) {
	    type = 'decrypt';
	  } else {
	    type = 'encrypt';
	  }
	  var key = opts.key;
	  if (!Buffer$t.isBuffer(key)) {
	    key = Buffer$t.from(key);
	  }
	  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
	    key = Buffer$t.concat([key, key.slice(0, 8)]);
	  }
	  var iv = opts.iv;
	  if (!Buffer$t.isBuffer(iv)) {
	    iv = Buffer$t.from(iv);
	  }
	  this._des = mode.create({
	    key: key,
	    iv: iv,
	    type: type
	  });
	}
	DES$1.prototype._update = function (data) {
	  return Buffer$t.from(this._des.update(data))
	};
	DES$1.prototype._final = function () {
	  return Buffer$t.from(this._des.final())
	};

	var browser$7 = {};

	var encrypter = {};

	var ecb = {};

	ecb.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block)
	};

	ecb.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block)
	};

	var cbc = {};

	var bufferXor = function xor (a, b) {
	  var length = Math.min(a.length, b.length);
	  var buffer = new Buffer$M(length);

	  for (var i = 0; i < length; ++i) {
	    buffer[i] = a[i] ^ b[i];
	  }

	  return buffer
	};

	var xor$7 = bufferXor;

	cbc.encrypt = function (self, block) {
	  var data = xor$7(block, self._prev);

	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev
	};

	cbc.decrypt = function (self, block) {
	  var pad = self._prev;

	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);

	  return xor$7(out, pad)
	};

	var cfb = {};

	var Buffer$s = safeBuffer$1.exports.Buffer;
	var xor$6 = bufferXor;

	function encryptStart (self, data, decrypt) {
	  var len = data.length;
	  var out = xor$6(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer$s.concat([self._prev, decrypt ? data : out]);
	  return out
	}

	cfb.encrypt = function (self, data, decrypt) {
	  var out = Buffer$s.allocUnsafe(0);
	  var len;

	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = Buffer$s.allocUnsafe(0);
	    }

	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer$s.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer$s.concat([out, encryptStart(self, data, decrypt)]);
	      break
	    }
	  }

	  return out
	};

	var cfb8 = {};

	var Buffer$r = safeBuffer$1.exports.Buffer;

	function encryptByte$1 (self, byteParam, decrypt) {
	  var pad = self._cipher.encryptBlock(self._prev);
	  var out = pad[0] ^ byteParam;

	  self._prev = Buffer$r.concat([
	    self._prev.slice(1),
	    Buffer$r.from([decrypt ? byteParam : out])
	  ]);

	  return out
	}

	cfb8.encrypt = function (self, chunk, decrypt) {
	  var len = chunk.length;
	  var out = Buffer$r.allocUnsafe(len);
	  var i = -1;

	  while (++i < len) {
	    out[i] = encryptByte$1(self, chunk[i], decrypt);
	  }

	  return out
	};

	var cfb1 = {};

	var Buffer$q = safeBuffer$1.exports.Buffer;

	function encryptByte (self, byteParam, decrypt) {
	  var pad;
	  var i = -1;
	  var len = 8;
	  var out = 0;
	  var bit, value;
	  while (++i < len) {
	    pad = self._cipher.encryptBlock(self._prev);
	    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0;
	    value = pad[0] ^ bit;
	    out += ((value & 0x80) >> (i % 8));
	    self._prev = shiftIn(self._prev, decrypt ? bit : value);
	  }
	  return out
	}

	function shiftIn (buffer, value) {
	  var len = buffer.length;
	  var i = -1;
	  var out = Buffer$q.allocUnsafe(buffer.length);
	  buffer = Buffer$q.concat([buffer, Buffer$q.from([value])]);

	  while (++i < len) {
	    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7);
	  }

	  return out
	}

	cfb1.encrypt = function (self, chunk, decrypt) {
	  var len = chunk.length;
	  var out = Buffer$q.allocUnsafe(len);
	  var i = -1;

	  while (++i < len) {
	    out[i] = encryptByte(self, chunk[i], decrypt);
	  }

	  return out
	};

	var ofb = {};

	var xor$5 = bufferXor;

	function getBlock$1 (self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev
	}

	ofb.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer$M.concat([self._cache, getBlock$1(self)]);
	  }

	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor$5(chunk, pad)
	};

	var ctr = {};

	function incr32$2 (iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break
	    }
	  }
	}
	var incr32_1 = incr32$2;

	var xor$4 = bufferXor;
	var Buffer$p = safeBuffer$1.exports.Buffer;
	var incr32$1 = incr32_1;

	function getBlock (self) {
	  var out = self._cipher.encryptBlockRaw(self._prev);
	  incr32$1(self._prev);
	  return out
	}

	var blockSize = 16;
	ctr.encrypt = function (self, chunk) {
	  var chunkNum = Math.ceil(chunk.length / blockSize);
	  var start = self._cache.length;
	  self._cache = Buffer$p.concat([
	    self._cache,
	    Buffer$p.allocUnsafe(chunkNum * blockSize)
	  ]);
	  for (var i = 0; i < chunkNum; i++) {
	    var out = getBlock(self);
	    var offset = start + i * blockSize;
	    self._cache.writeUInt32BE(out[0], offset + 0);
	    self._cache.writeUInt32BE(out[1], offset + 4);
	    self._cache.writeUInt32BE(out[2], offset + 8);
	    self._cache.writeUInt32BE(out[3], offset + 12);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor$4(chunk, pad)
	};

	var aes128 = {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "CBC",
		type: "block"
	};
	var aes192 = {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "CBC",
		type: "block"
	};
	var aes256 = {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "CBC",
		type: "block"
	};
	var require$$2$1 = {
		"aes-128-ecb": {
		cipher: "AES",
		key: 128,
		iv: 0,
		mode: "ECB",
		type: "block"
	},
		"aes-192-ecb": {
		cipher: "AES",
		key: 192,
		iv: 0,
		mode: "ECB",
		type: "block"
	},
		"aes-256-ecb": {
		cipher: "AES",
		key: 256,
		iv: 0,
		mode: "ECB",
		type: "block"
	},
		"aes-128-cbc": {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "CBC",
		type: "block"
	},
		"aes-192-cbc": {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "CBC",
		type: "block"
	},
		"aes-256-cbc": {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "CBC",
		type: "block"
	},
		aes128: aes128,
		aes192: aes192,
		aes256: aes256,
		"aes-128-cfb": {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "CFB",
		type: "stream"
	},
		"aes-192-cfb": {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "CFB",
		type: "stream"
	},
		"aes-256-cfb": {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "CFB",
		type: "stream"
	},
		"aes-128-cfb8": {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "CFB8",
		type: "stream"
	},
		"aes-192-cfb8": {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "CFB8",
		type: "stream"
	},
		"aes-256-cfb8": {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "CFB8",
		type: "stream"
	},
		"aes-128-cfb1": {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "CFB1",
		type: "stream"
	},
		"aes-192-cfb1": {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "CFB1",
		type: "stream"
	},
		"aes-256-cfb1": {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "CFB1",
		type: "stream"
	},
		"aes-128-ofb": {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "OFB",
		type: "stream"
	},
		"aes-192-ofb": {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "OFB",
		type: "stream"
	},
		"aes-256-ofb": {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "OFB",
		type: "stream"
	},
		"aes-128-ctr": {
		cipher: "AES",
		key: 128,
		iv: 16,
		mode: "CTR",
		type: "stream"
	},
		"aes-192-ctr": {
		cipher: "AES",
		key: 192,
		iv: 16,
		mode: "CTR",
		type: "stream"
	},
		"aes-256-ctr": {
		cipher: "AES",
		key: 256,
		iv: 16,
		mode: "CTR",
		type: "stream"
	},
		"aes-128-gcm": {
		cipher: "AES",
		key: 128,
		iv: 12,
		mode: "GCM",
		type: "auth"
	},
		"aes-192-gcm": {
		cipher: "AES",
		key: 192,
		iv: 12,
		mode: "GCM",
		type: "auth"
	},
		"aes-256-gcm": {
		cipher: "AES",
		key: 256,
		iv: 12,
		mode: "GCM",
		type: "auth"
	}
	};

	var modeModules = {
	  ECB: ecb,
	  CBC: cbc,
	  CFB: cfb,
	  CFB8: cfb8,
	  CFB1: cfb1,
	  OFB: ofb,
	  CTR: ctr,
	  GCM: ctr
	};

	var modes$2 = require$$2$1;

	for (var key$4 in modes$2) {
	  modes$2[key$4].module = modeModules[modes$2[key$4].mode];
	}

	var modes_1 = modes$2;

	var aes$7 = {};

	// based on the aes implimentation in triple sec
	// https://github.com/keybase/triplesec
	// which is in turn based on the one from crypto-js
	// https://code.google.com/p/crypto-js/

	var Buffer$o = safeBuffer$1.exports.Buffer;

	function asUInt32Array (buf) {
	  if (!Buffer$o.isBuffer(buf)) buf = Buffer$o.from(buf);

	  var len = (buf.length / 4) | 0;
	  var out = new Array(len);

	  for (var i = 0; i < len; i++) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }

	  return out
	}

	function scrubVec (v) {
	  for (var i = 0; i < v.length; v++) {
	    v[i] = 0;
	  }
	}

	function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
	  var SUB_MIX0 = SUB_MIX[0];
	  var SUB_MIX1 = SUB_MIX[1];
	  var SUB_MIX2 = SUB_MIX[2];
	  var SUB_MIX3 = SUB_MIX[3];

	  var s0 = M[0] ^ keySchedule[0];
	  var s1 = M[1] ^ keySchedule[1];
	  var s2 = M[2] ^ keySchedule[2];
	  var s3 = M[3] ^ keySchedule[3];
	  var t0, t1, t2, t3;
	  var ksRow = 4;

	  for (var round = 1; round < nRounds; round++) {
	    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }

	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  t0 = t0 >>> 0;
	  t1 = t1 >>> 0;
	  t2 = t2 >>> 0;
	  t3 = t3 >>> 0;

	  return [t0, t1, t2, t3]
	}

	// AES constants
	var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	var G = (function () {
	  // Compute double table
	  var d = new Array(256);
	  for (var j = 0; j < 256; j++) {
	    if (j < 128) {
	      d[j] = j << 1;
	    } else {
	      d[j] = (j << 1) ^ 0x11b;
	    }
	  }

	  var SBOX = [];
	  var INV_SBOX = [];
	  var SUB_MIX = [[], [], [], []];
	  var INV_SUB_MIX = [[], [], [], []];

	  // Walk GF(2^8)
	  var x = 0;
	  var xi = 0;
	  for (var i = 0; i < 256; ++i) {
	    // Compute sbox
	    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    SBOX[x] = sx;
	    INV_SBOX[sx] = x;

	    // Compute multiplication
	    var x2 = d[x];
	    var x4 = d[x2];
	    var x8 = d[x4];

	    // Compute sub bytes, mix columns tables
	    var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    SUB_MIX[3][x] = t;

	    // Compute inv sub bytes, inv mix columns tables
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    INV_SUB_MIX[3][sx] = t;

	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }

	  return {
	    SBOX: SBOX,
	    INV_SBOX: INV_SBOX,
	    SUB_MIX: SUB_MIX,
	    INV_SUB_MIX: INV_SUB_MIX
	  }
	})();

	function AES (key) {
	  this._key = asUInt32Array(key);
	  this._reset();
	}

	AES.blockSize = 4 * 4;
	AES.keySize = 256 / 8;
	AES.prototype.blockSize = AES.blockSize;
	AES.prototype.keySize = AES.keySize;
	AES.prototype._reset = function () {
	  var keyWords = this._key;
	  var keySize = keyWords.length;
	  var nRounds = keySize + 6;
	  var ksRows = (nRounds + 1) * 4;

	  var keySchedule = [];
	  for (var k = 0; k < keySize; k++) {
	    keySchedule[k] = keyWords[k];
	  }

	  for (k = keySize; k < ksRows; k++) {
	    var t = keySchedule[k - 1];

	    if (k % keySize === 0) {
	      t = (t << 8) | (t >>> 24);
	      t =
	        (G.SBOX[t >>> 24] << 24) |
	        (G.SBOX[(t >>> 16) & 0xff] << 16) |
	        (G.SBOX[(t >>> 8) & 0xff] << 8) |
	        (G.SBOX[t & 0xff]);

	      t ^= RCON[(k / keySize) | 0] << 24;
	    } else if (keySize > 6 && k % keySize === 4) {
	      t =
	        (G.SBOX[t >>> 24] << 24) |
	        (G.SBOX[(t >>> 16) & 0xff] << 16) |
	        (G.SBOX[(t >>> 8) & 0xff] << 8) |
	        (G.SBOX[t & 0xff]);
	    }

	    keySchedule[k] = keySchedule[k - keySize] ^ t;
	  }

	  var invKeySchedule = [];
	  for (var ik = 0; ik < ksRows; ik++) {
	    var ksR = ksRows - ik;
	    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

	    if (ik < 4 || ksR <= 4) {
	      invKeySchedule[ik] = tt;
	    } else {
	      invKeySchedule[ik] =
	        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
	        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
	        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
	        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
	    }
	  }

	  this._nRounds = nRounds;
	  this._keySchedule = keySchedule;
	  this._invKeySchedule = invKeySchedule;
	};

	AES.prototype.encryptBlockRaw = function (M) {
	  M = asUInt32Array(M);
	  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
	};

	AES.prototype.encryptBlock = function (M) {
	  var out = this.encryptBlockRaw(M);
	  var buf = Buffer$o.allocUnsafe(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf
	};

	AES.prototype.decryptBlock = function (M) {
	  M = asUInt32Array(M);

	  // swap
	  var m1 = M[1];
	  M[1] = M[3];
	  M[3] = m1;

	  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
	  var buf = Buffer$o.allocUnsafe(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf
	};

	AES.prototype.scrub = function () {
	  scrubVec(this._keySchedule);
	  scrubVec(this._invKeySchedule);
	  scrubVec(this._key);
	};

	aes$7.AES = AES;

	var Buffer$n = safeBuffer$1.exports.Buffer;
	var ZEROES = Buffer$n.alloc(16, 0);

	function toArray$1 (buf) {
	  return [
	    buf.readUInt32BE(0),
	    buf.readUInt32BE(4),
	    buf.readUInt32BE(8),
	    buf.readUInt32BE(12)
	  ]
	}

	function fromArray (out) {
	  var buf = Buffer$n.allocUnsafe(16);
	  buf.writeUInt32BE(out[0] >>> 0, 0);
	  buf.writeUInt32BE(out[1] >>> 0, 4);
	  buf.writeUInt32BE(out[2] >>> 0, 8);
	  buf.writeUInt32BE(out[3] >>> 0, 12);
	  return buf
	}

	function GHASH$1 (key) {
	  this.h = key;
	  this.state = Buffer$n.alloc(16, 0);
	  this.cache = Buffer$n.allocUnsafe(0);
	}

	// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
	// by Juho Vähä-Herttua
	GHASH$1.prototype.ghash = function (block) {
	  var i = -1;
	  while (++i < block.length) {
	    this.state[i] ^= block[i];
	  }
	  this._multiply();
	};

	GHASH$1.prototype._multiply = function () {
	  var Vi = toArray$1(this.h);
	  var Zi = [0, 0, 0, 0];
	  var j, xi, lsbVi;
	  var i = -1;
	  while (++i < 128) {
	    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0;
	    if (xi) {
	      // Z_i+1 = Z_i ^ V_i
	      Zi[0] ^= Vi[0];
	      Zi[1] ^= Vi[1];
	      Zi[2] ^= Vi[2];
	      Zi[3] ^= Vi[3];
	    }

	    // Store the value of LSB(V_i)
	    lsbVi = (Vi[3] & 1) !== 0;

	    // V_i+1 = V_i >> 1
	    for (j = 3; j > 0; j--) {
	      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
	    }
	    Vi[0] = Vi[0] >>> 1;

	    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
	    if (lsbVi) {
	      Vi[0] = Vi[0] ^ (0xe1 << 24);
	    }
	  }
	  this.state = fromArray(Zi);
	};

	GHASH$1.prototype.update = function (buf) {
	  this.cache = Buffer$n.concat([this.cache, buf]);
	  var chunk;
	  while (this.cache.length >= 16) {
	    chunk = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    this.ghash(chunk);
	  }
	};

	GHASH$1.prototype.final = function (abl, bl) {
	  if (this.cache.length) {
	    this.ghash(Buffer$n.concat([this.cache, ZEROES], 16));
	  }

	  this.ghash(fromArray([0, abl, 0, bl]));
	  return this.state
	};

	var ghash = GHASH$1;

	var aes$6 = aes$7;
	var Buffer$m = safeBuffer$1.exports.Buffer;
	var Transform$3 = cipherBase;
	var inherits$e = inherits_browser.exports;
	var GHASH = ghash;
	var xor$3 = bufferXor;
	var incr32 = incr32_1;

	function xorTest (a, b) {
	  var out = 0;
	  if (a.length !== b.length) out++;

	  var len = Math.min(a.length, b.length);
	  for (var i = 0; i < len; ++i) {
	    out += (a[i] ^ b[i]);
	  }

	  return out
	}

	function calcIv (self, iv, ck) {
	  if (iv.length === 12) {
	    self._finID = Buffer$m.concat([iv, Buffer$m.from([0, 0, 0, 1])]);
	    return Buffer$m.concat([iv, Buffer$m.from([0, 0, 0, 2])])
	  }
	  var ghash = new GHASH(ck);
	  var len = iv.length;
	  var toPad = len % 16;
	  ghash.update(iv);
	  if (toPad) {
	    toPad = 16 - toPad;
	    ghash.update(Buffer$m.alloc(toPad, 0));
	  }
	  ghash.update(Buffer$m.alloc(8, 0));
	  var ivBits = len * 8;
	  var tail = Buffer$m.alloc(8);
	  tail.writeUIntBE(ivBits, 0, 8);
	  ghash.update(tail);
	  self._finID = ghash.state;
	  var out = Buffer$m.from(self._finID);
	  incr32(out);
	  return out
	}
	function StreamCipher$3 (mode, key, iv, decrypt) {
	  Transform$3.call(this);

	  var h = Buffer$m.alloc(4, 0);

	  this._cipher = new aes$6.AES(key);
	  var ck = this._cipher.encryptBlock(h);
	  this._ghash = new GHASH(ck);
	  iv = calcIv(this, iv, ck);

	  this._prev = Buffer$m.from(iv);
	  this._cache = Buffer$m.allocUnsafe(0);
	  this._secCache = Buffer$m.allocUnsafe(0);
	  this._decrypt = decrypt;
	  this._alen = 0;
	  this._len = 0;
	  this._mode = mode;

	  this._authTag = null;
	  this._called = false;
	}

	inherits$e(StreamCipher$3, Transform$3);

	StreamCipher$3.prototype._update = function (chunk) {
	  if (!this._called && this._alen) {
	    var rump = 16 - (this._alen % 16);
	    if (rump < 16) {
	      rump = Buffer$m.alloc(rump, 0);
	      this._ghash.update(rump);
	    }
	  }

	  this._called = true;
	  var out = this._mode.encrypt(this, chunk);
	  if (this._decrypt) {
	    this._ghash.update(chunk);
	  } else {
	    this._ghash.update(out);
	  }
	  this._len += chunk.length;
	  return out
	};

	StreamCipher$3.prototype._final = function () {
	  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

	  var tag = xor$3(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
	  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

	  this._authTag = tag;
	  this._cipher.scrub();
	};

	StreamCipher$3.prototype.getAuthTag = function getAuthTag () {
	  if (this._decrypt || !Buffer$m.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

	  return this._authTag
	};

	StreamCipher$3.prototype.setAuthTag = function setAuthTag (tag) {
	  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

	  this._authTag = tag;
	};

	StreamCipher$3.prototype.setAAD = function setAAD (buf) {
	  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

	  this._ghash.update(buf);
	  this._alen += buf.length;
	};

	var authCipher = StreamCipher$3;

	var aes$5 = aes$7;
	var Buffer$l = safeBuffer$1.exports.Buffer;
	var Transform$2 = cipherBase;
	var inherits$d = inherits_browser.exports;

	function StreamCipher$2 (mode, key, iv, decrypt) {
	  Transform$2.call(this);

	  this._cipher = new aes$5.AES(key);
	  this._prev = Buffer$l.from(iv);
	  this._cache = Buffer$l.allocUnsafe(0);
	  this._secCache = Buffer$l.allocUnsafe(0);
	  this._decrypt = decrypt;
	  this._mode = mode;
	}

	inherits$d(StreamCipher$2, Transform$2);

	StreamCipher$2.prototype._update = function (chunk) {
	  return this._mode.encrypt(this, chunk, this._decrypt)
	};

	StreamCipher$2.prototype._final = function () {
	  this._cipher.scrub();
	};

	var streamCipher = StreamCipher$2;

	var Buffer$k = safeBuffer$1.exports.Buffer;
	var MD5 = md5_js;

	/* eslint-disable camelcase */
	function EVP_BytesToKey (password, salt, keyBits, ivLen) {
	  if (!Buffer$k.isBuffer(password)) password = Buffer$k.from(password, 'binary');
	  if (salt) {
	    if (!Buffer$k.isBuffer(salt)) salt = Buffer$k.from(salt, 'binary');
	    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
	  }

	  var keyLen = keyBits / 8;
	  var key = Buffer$k.alloc(keyLen);
	  var iv = Buffer$k.alloc(ivLen || 0);
	  var tmp = Buffer$k.alloc(0);

	  while (keyLen > 0 || ivLen > 0) {
	    var hash = new MD5();
	    hash.update(tmp);
	    hash.update(password);
	    if (salt) hash.update(salt);
	    tmp = hash.digest();

	    var used = 0;

	    if (keyLen > 0) {
	      var keyStart = key.length - keyLen;
	      used = Math.min(keyLen, tmp.length);
	      tmp.copy(key, keyStart, 0, used);
	      keyLen -= used;
	    }

	    if (used < tmp.length && ivLen > 0) {
	      var ivStart = iv.length - ivLen;
	      var length = Math.min(ivLen, tmp.length - used);
	      tmp.copy(iv, ivStart, used, used + length);
	      ivLen -= length;
	    }
	  }

	  tmp.fill(0);
	  return { key: key, iv: iv }
	}

	var evp_bytestokey = EVP_BytesToKey;

	var MODES$1 = modes_1;
	var AuthCipher$1 = authCipher;
	var Buffer$j = safeBuffer$1.exports.Buffer;
	var StreamCipher$1 = streamCipher;
	var Transform$1 = cipherBase;
	var aes$4 = aes$7;
	var ebtk$2 = evp_bytestokey;
	var inherits$c = inherits_browser.exports;

	function Cipher (mode, key, iv) {
	  Transform$1.call(this);

	  this._cache = new Splitter$1();
	  this._cipher = new aes$4.AES(key);
	  this._prev = Buffer$j.from(iv);
	  this._mode = mode;
	  this._autopadding = true;
	}

	inherits$c(Cipher, Transform$1);

	Cipher.prototype._update = function (data) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  var out = [];

	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    out.push(thing);
	  }

	  return Buffer$j.concat(out)
	};

	var PADDING = Buffer$j.alloc(16, 0x10);

	Cipher.prototype._final = function () {
	  var chunk = this._cache.flush();
	  if (this._autopadding) {
	    chunk = this._mode.encrypt(this, chunk);
	    this._cipher.scrub();
	    return chunk
	  }

	  if (!chunk.equals(PADDING)) {
	    this._cipher.scrub();
	    throw new Error('data not multiple of block length')
	  }
	};

	Cipher.prototype.setAutoPadding = function (setTo) {
	  this._autopadding = !!setTo;
	  return this
	};

	function Splitter$1 () {
	  this.cache = Buffer$j.allocUnsafe(0);
	}

	Splitter$1.prototype.add = function (data) {
	  this.cache = Buffer$j.concat([this.cache, data]);
	};

	Splitter$1.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out
	  }
	  return null
	};

	Splitter$1.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = Buffer$j.allocUnsafe(len);

	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }

	  return Buffer$j.concat([this.cache, padBuff])
	};

	function createCipheriv$1 (suite, password, iv) {
	  var config = MODES$1[suite.toLowerCase()];
	  if (!config) throw new TypeError('invalid suite type')

	  if (typeof password === 'string') password = Buffer$j.from(password);
	  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

	  if (typeof iv === 'string') iv = Buffer$j.from(iv);
	  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

	  if (config.type === 'stream') {
	    return new StreamCipher$1(config.module, password, iv)
	  } else if (config.type === 'auth') {
	    return new AuthCipher$1(config.module, password, iv)
	  }

	  return new Cipher(config.module, password, iv)
	}

	function createCipher$1 (suite, password) {
	  var config = MODES$1[suite.toLowerCase()];
	  if (!config) throw new TypeError('invalid suite type')

	  var keys = ebtk$2(password, false, config.key, config.iv);
	  return createCipheriv$1(suite, keys.key, keys.iv)
	}

	encrypter.createCipheriv = createCipheriv$1;
	encrypter.createCipher = createCipher$1;

	var decrypter = {};

	var AuthCipher = authCipher;
	var Buffer$i = safeBuffer$1.exports.Buffer;
	var MODES = modes_1;
	var StreamCipher = streamCipher;
	var Transform = cipherBase;
	var aes$3 = aes$7;
	var ebtk$1 = evp_bytestokey;
	var inherits$b = inherits_browser.exports;

	function Decipher (mode, key, iv) {
	  Transform.call(this);

	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes$3.AES(key);
	  this._prev = Buffer$i.from(iv);
	  this._mode = mode;
	  this._autopadding = true;
	}

	inherits$b(Decipher, Transform);

	Decipher.prototype._update = function (data) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  var out = [];
	  while ((chunk = this._cache.get(this._autopadding))) {
	    thing = this._mode.decrypt(this, chunk);
	    out.push(thing);
	  }
	  return Buffer$i.concat(out)
	};

	Decipher.prototype._final = function () {
	  var chunk = this._cache.flush();
	  if (this._autopadding) {
	    return unpad(this._mode.decrypt(this, chunk))
	  } else if (chunk) {
	    throw new Error('data not multiple of block length')
	  }
	};

	Decipher.prototype.setAutoPadding = function (setTo) {
	  this._autopadding = !!setTo;
	  return this
	};

	function Splitter () {
	  this.cache = Buffer$i.allocUnsafe(0);
	}

	Splitter.prototype.add = function (data) {
	  this.cache = Buffer$i.concat([this.cache, data]);
	};

	Splitter.prototype.get = function (autoPadding) {
	  var out;
	  if (autoPadding) {
	    if (this.cache.length > 16) {
	      out = this.cache.slice(0, 16);
	      this.cache = this.cache.slice(16);
	      return out
	    }
	  } else {
	    if (this.cache.length >= 16) {
	      out = this.cache.slice(0, 16);
	      this.cache = this.cache.slice(16);
	      return out
	    }
	  }

	  return null
	};

	Splitter.prototype.flush = function () {
	  if (this.cache.length) return this.cache
	};

	function unpad (last) {
	  var padded = last[15];
	  if (padded < 1 || padded > 16) {
	    throw new Error('unable to decrypt data')
	  }
	  var i = -1;
	  while (++i < padded) {
	    if (last[(i + (16 - padded))] !== padded) {
	      throw new Error('unable to decrypt data')
	    }
	  }
	  if (padded === 16) return

	  return last.slice(0, 16 - padded)
	}

	function createDecipheriv$1 (suite, password, iv) {
	  var config = MODES[suite.toLowerCase()];
	  if (!config) throw new TypeError('invalid suite type')

	  if (typeof iv === 'string') iv = Buffer$i.from(iv);
	  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

	  if (typeof password === 'string') password = Buffer$i.from(password);
	  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

	  if (config.type === 'stream') {
	    return new StreamCipher(config.module, password, iv, true)
	  } else if (config.type === 'auth') {
	    return new AuthCipher(config.module, password, iv, true)
	  }

	  return new Decipher(config.module, password, iv)
	}

	function createDecipher$1 (suite, password) {
	  var config = MODES[suite.toLowerCase()];
	  if (!config) throw new TypeError('invalid suite type')

	  var keys = ebtk$1(password, false, config.key, config.iv);
	  return createDecipheriv$1(suite, keys.key, keys.iv)
	}

	decrypter.createDecipher = createDecipher$1;
	decrypter.createDecipheriv = createDecipheriv$1;

	var ciphers$3 = encrypter;
	var deciphers = decrypter;
	var modes$1 = require$$2$1;

	function getCiphers$1 () {
	  return Object.keys(modes$1)
	}

	browser$7.createCipher = browser$7.Cipher = ciphers$3.createCipher;
	browser$7.createCipheriv = browser$7.Cipheriv = ciphers$3.createCipheriv;
	browser$7.createDecipher = browser$7.Decipher = deciphers.createDecipher;
	browser$7.createDecipheriv = browser$7.Decipheriv = deciphers.createDecipheriv;
	browser$7.listCiphers = browser$7.getCiphers = getCiphers$1;

	var modes = {};

	(function (exports) {
	exports['des-ecb'] = {
	  key: 8,
	  iv: 0
	};
	exports['des-cbc'] = exports.des = {
	  key: 8,
	  iv: 8
	};
	exports['des-ede3-cbc'] = exports.des3 = {
	  key: 24,
	  iv: 8
	};
	exports['des-ede3'] = {
	  key: 24,
	  iv: 0
	};
	exports['des-ede-cbc'] = {
	  key: 16,
	  iv: 8
	};
	exports['des-ede'] = {
	  key: 16,
	  iv: 0
	};
	}(modes));

	var DES = browserifyDes;
	var aes$2 = browser$7;
	var aesModes = modes_1;
	var desModes = modes;
	var ebtk = evp_bytestokey;

	function createCipher (suite, password) {
	  suite = suite.toLowerCase();

	  var keyLen, ivLen;
	  if (aesModes[suite]) {
	    keyLen = aesModes[suite].key;
	    ivLen = aesModes[suite].iv;
	  } else if (desModes[suite]) {
	    keyLen = desModes[suite].key * 8;
	    ivLen = desModes[suite].iv;
	  } else {
	    throw new TypeError('invalid suite type')
	  }

	  var keys = ebtk(password, false, keyLen, ivLen);
	  return createCipheriv(suite, keys.key, keys.iv)
	}

	function createDecipher (suite, password) {
	  suite = suite.toLowerCase();

	  var keyLen, ivLen;
	  if (aesModes[suite]) {
	    keyLen = aesModes[suite].key;
	    ivLen = aesModes[suite].iv;
	  } else if (desModes[suite]) {
	    keyLen = desModes[suite].key * 8;
	    ivLen = desModes[suite].iv;
	  } else {
	    throw new TypeError('invalid suite type')
	  }

	  var keys = ebtk(password, false, keyLen, ivLen);
	  return createDecipheriv(suite, keys.key, keys.iv)
	}

	function createCipheriv (suite, key, iv) {
	  suite = suite.toLowerCase();
	  if (aesModes[suite]) return aes$2.createCipheriv(suite, key, iv)
	  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

	  throw new TypeError('invalid suite type')
	}

	function createDecipheriv (suite, key, iv) {
	  suite = suite.toLowerCase();
	  if (aesModes[suite]) return aes$2.createDecipheriv(suite, key, iv)
	  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

	  throw new TypeError('invalid suite type')
	}

	function getCiphers () {
	  return Object.keys(desModes).concat(aes$2.getCiphers())
	}

	browser$8.createCipher = browser$8.Cipher = createCipher;
	browser$8.createCipheriv = browser$8.Cipheriv = createCipheriv;
	browser$8.createDecipher = browser$8.Decipher = createDecipher;
	browser$8.createDecipheriv = browser$8.Decipheriv = createDecipheriv;
	browser$8.listCiphers = browser$8.getCiphers = getCiphers;

	var browser$6 = {};

	var bn$1 = {exports: {}};

	var _nodeResolve_empty = {};

	var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
	    __proto__: null,
	    'default': _nodeResolve_empty
	});

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

	(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require$$0$3.Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	    // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this._strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this._strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  function move (dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }

	  BN.prototype._move = function _move (dest) {
	    move(dest, this);
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
	    try {
	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }

	  function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16, 2);
	  };

	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer (endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  var allocate = function allocate (ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    this._strip();

	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };

	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
	    var position = 0;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = (word >> 8) & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position < res.length) {
	      res[position++] = carry;

	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };

	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = (word >> 8) & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position >= 0) {
	      res[position--] = carry;

	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] >>> wbit) & 0x01;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this._strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this._strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this._strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  function jumboMulTo (self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this._strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this._strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modrn = function modrn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this._strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	}(bn$1));

	var BN$i = bn$1.exports;

	var brorand$1 = {exports: {}};

	var r$1;

	brorand$1.exports = function rand(len) {
	  if (!r$1)
	    r$1 = new Rand(null);

	  return r$1.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	brorand$1.exports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$2 = null;
	    if (typeof crypto$2.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$2.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}

	var bn = bn$1.exports;
	var brorand = brorand$1.exports;

	function MillerRabin$2(rand) {
	  this.rand = rand || new brorand.Rand();
	}
	var mr = MillerRabin$2;

	MillerRabin$2.create = function create(rand) {
	  return new MillerRabin$2(rand);
	};

	MillerRabin$2.prototype._randbelow = function _randbelow(n) {
	  var len = n.bitLength();
	  var min_bytes = Math.ceil(len / 8);

	  // Generage random bytes until a number less than n is found.
	  // This ensures that 0..n-1 have an equal probability of being selected.
	  do
	    var a = new bn(this.rand.generate(min_bytes));
	  while (a.cmp(n) >= 0);

	  return a;
	};

	MillerRabin$2.prototype._randrange = function _randrange(start, stop) {
	  // Generate a random number greater than or equal to start and less than stop.
	  var size = stop.sub(start);
	  return start.add(this._randbelow(size));
	};

	MillerRabin$2.prototype.test = function test(n, k, cb) {
	  var len = n.bitLength();
	  var red = bn.mont(n);
	  var rone = new bn(1).toRed(red);

	  if (!k)
	    k = Math.max(1, (len / 48) | 0);

	  // Find d and s, (n - 1) = (2 ^ s) * d;
	  var n1 = n.subn(1);
	  for (var s = 0; !n1.testn(s); s++) {}
	  var d = n.shrn(s);

	  var rn1 = n1.toRed(red);

	  var prime = true;
	  for (; k > 0; k--) {
	    var a = this._randrange(new bn(2), n1);
	    if (cb)
	      cb(a);

	    var x = a.toRed(red).redPow(d);
	    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
	      continue;

	    for (var i = 1; i < s; i++) {
	      x = x.redSqr();

	      if (x.cmp(rone) === 0)
	        return false;
	      if (x.cmp(rn1) === 0)
	        break;
	    }

	    if (i === s)
	      return false;
	  }

	  return prime;
	};

	MillerRabin$2.prototype.getDivisor = function getDivisor(n, k) {
	  var len = n.bitLength();
	  var red = bn.mont(n);
	  var rone = new bn(1).toRed(red);

	  if (!k)
	    k = Math.max(1, (len / 48) | 0);

	  // Find d and s, (n - 1) = (2 ^ s) * d;
	  var n1 = n.subn(1);
	  for (var s = 0; !n1.testn(s); s++) {}
	  var d = n.shrn(s);

	  var rn1 = n1.toRed(red);

	  for (; k > 0; k--) {
	    var a = this._randrange(new bn(2), n1);

	    var g = n.gcd(a);
	    if (g.cmpn(1) !== 0)
	      return g;

	    var x = a.toRed(red).redPow(d);
	    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
	      continue;

	    for (var i = 1; i < s; i++) {
	      x = x.redSqr();

	      if (x.cmp(rone) === 0)
	        return x.fromRed().subn(1).gcd(n);
	      if (x.cmp(rn1) === 0)
	        break;
	    }

	    if (i === s) {
	      x = x.redSqr();
	      return x.fromRed().subn(1).gcd(n);
	    }
	  }

	  return false;
	};

	var randomBytes$5 = browser$c.exports;
	var generatePrime$1 = findPrime;
	findPrime.simpleSieve = simpleSieve;
	findPrime.fermatTest = fermatTest;
	var BN$h = bn$1.exports;
	var TWENTYFOUR$1 = new BN$h(24);
	var MillerRabin$1 = mr;
	var millerRabin$1 = new MillerRabin$1();
	var ONE = new BN$h(1);
	var TWO = new BN$h(2);
	var FIVE = new BN$h(5);
	new BN$h(16);
	new BN$h(8);
	var TEN$1 = new BN$h(10);
	var THREE$1 = new BN$h(3);
	new BN$h(7);
	var ELEVEN$1 = new BN$h(11);
	var FOUR = new BN$h(4);
	new BN$h(12);
	var primes$2 = null;

	function _getPrimes() {
	  if (primes$2 !== null)
	    return primes$2;

	  var limit = 0x100000;
	  var res = [];
	  res[0] = 2;
	  for (var i = 1, k = 3; k < limit; k += 2) {
	    var sqrt = Math.ceil(Math.sqrt(k));
	    for (var j = 0; j < i && res[j] <= sqrt; j++)
	      if (k % res[j] === 0)
	        break;

	    if (i !== j && res[j] <= sqrt)
	      continue;

	    res[i++] = k;
	  }
	  primes$2 = res;
	  return res;
	}

	function simpleSieve(p) {
	  var primes = _getPrimes();

	  for (var i = 0; i < primes.length; i++)
	    if (p.modn(primes[i]) === 0) {
	      if (p.cmpn(primes[i]) === 0) {
	        return true;
	      } else {
	        return false;
	      }
	    }

	  return true;
	}

	function fermatTest(p) {
	  var red = BN$h.mont(p);
	  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
	}

	function findPrime(bits, gen) {
	  if (bits < 16) {
	    // this is what openssl does
	    if (gen === 2 || gen === 5) {
	      return new BN$h([0x8c, 0x7b]);
	    } else {
	      return new BN$h([0x8c, 0x27]);
	    }
	  }
	  gen = new BN$h(gen);

	  var num, n2;

	  while (true) {
	    num = new BN$h(randomBytes$5(Math.ceil(bits / 8)));
	    while (num.bitLength() > bits) {
	      num.ishrn(1);
	    }
	    if (num.isEven()) {
	      num.iadd(ONE);
	    }
	    if (!num.testn(1)) {
	      num.iadd(TWO);
	    }
	    if (!gen.cmp(TWO)) {
	      while (num.mod(TWENTYFOUR$1).cmp(ELEVEN$1)) {
	        num.iadd(FOUR);
	      }
	    } else if (!gen.cmp(FIVE)) {
	      while (num.mod(TEN$1).cmp(THREE$1)) {
	        num.iadd(FOUR);
	      }
	    }
	    n2 = num.shrn(1);
	    if (simpleSieve(n2) && simpleSieve(num) &&
	      fermatTest(n2) && fermatTest(num) &&
	      millerRabin$1.test(n2) && millerRabin$1.test(num)) {
	      return num;
	    }
	  }

	}

	var modp1 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
	};
	var modp2 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
	};
	var modp5 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
	};
	var modp14 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
	};
	var modp15 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
	};
	var modp16 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
	};
	var modp17 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
	};
	var modp18 = {
		gen: "02",
		prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
	};
	var require$$1$2 = {
		modp1: modp1,
		modp2: modp2,
		modp5: modp5,
		modp14: modp14,
		modp15: modp15,
		modp16: modp16,
		modp17: modp17,
		modp18: modp18
	};

	var BN$g = bn$1.exports;
	var MillerRabin = mr;
	var millerRabin = new MillerRabin();
	var TWENTYFOUR = new BN$g(24);
	var ELEVEN = new BN$g(11);
	var TEN = new BN$g(10);
	var THREE = new BN$g(3);
	var SEVEN = new BN$g(7);
	var primes$1 = generatePrime$1;
	var randomBytes$4 = browser$c.exports;
	var dh$1 = DH$1;

	function setPublicKey(pub, enc) {
	  enc = enc || 'utf8';
	  if (!isBuffer$2(pub)) {
	    pub = new Buffer$M(pub, enc);
	  }
	  this._pub = new BN$g(pub);
	  return this;
	}

	function setPrivateKey(priv, enc) {
	  enc = enc || 'utf8';
	  if (!isBuffer$2(priv)) {
	    priv = new Buffer$M(priv, enc);
	  }
	  this._priv = new BN$g(priv);
	  return this;
	}

	var primeCache = {};
	function checkPrime(prime, generator) {
	  var gen = generator.toString('hex');
	  var hex = [gen, prime.toString(16)].join('_');
	  if (hex in primeCache) {
	    return primeCache[hex];
	  }
	  var error = 0;

	  if (prime.isEven() ||
	    !primes$1.simpleSieve ||
	    !primes$1.fermatTest(prime) ||
	    !millerRabin.test(prime)) {
	    //not a prime so +1
	    error += 1;

	    if (gen === '02' || gen === '05') {
	      // we'd be able to check the generator
	      // it would fail so +8
	      error += 8;
	    } else {
	      //we wouldn't be able to test the generator
	      // so +4
	      error += 4;
	    }
	    primeCache[hex] = error;
	    return error;
	  }
	  if (!millerRabin.test(prime.shrn(1))) {
	    //not a safe prime
	    error += 2;
	  }
	  var rem;
	  switch (gen) {
	    case '02':
	      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
	        // unsuidable generator
	        error += 8;
	      }
	      break;
	    case '05':
	      rem = prime.mod(TEN);
	      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
	        // prime mod 10 needs to equal 3 or 7
	        error += 8;
	      }
	      break;
	    default:
	      error += 4;
	  }
	  primeCache[hex] = error;
	  return error;
	}

	function DH$1(prime, generator, malleable) {
	  this.setGenerator(generator);
	  this.__prime = new BN$g(prime);
	  this._prime = BN$g.mont(this.__prime);
	  this._primeLen = prime.length;
	  this._pub = undefined;
	  this._priv = undefined;
	  this._primeCode = undefined;
	  if (malleable) {
	    this.setPublicKey = setPublicKey;
	    this.setPrivateKey = setPrivateKey;
	  } else {
	    this._primeCode = 8;
	  }
	}
	Object.defineProperty(DH$1.prototype, 'verifyError', {
	  enumerable: true,
	  get: function () {
	    if (typeof this._primeCode !== 'number') {
	      this._primeCode = checkPrime(this.__prime, this.__gen);
	    }
	    return this._primeCode;
	  }
	});
	DH$1.prototype.generateKeys = function () {
	  if (!this._priv) {
	    this._priv = new BN$g(randomBytes$4(this._primeLen));
	  }
	  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
	  return this.getPublicKey();
	};

	DH$1.prototype.computeSecret = function (other) {
	  other = new BN$g(other);
	  other = other.toRed(this._prime);
	  var secret = other.redPow(this._priv).fromRed();
	  var out = new Buffer$M(secret.toArray());
	  var prime = this.getPrime();
	  if (out.length < prime.length) {
	    var front = new Buffer$M(prime.length - out.length);
	    front.fill(0);
	    out = Buffer$M.concat([front, out]);
	  }
	  return out;
	};

	DH$1.prototype.getPublicKey = function getPublicKey(enc) {
	  return formatReturnValue$1(this._pub, enc);
	};

	DH$1.prototype.getPrivateKey = function getPrivateKey(enc) {
	  return formatReturnValue$1(this._priv, enc);
	};

	DH$1.prototype.getPrime = function (enc) {
	  return formatReturnValue$1(this.__prime, enc);
	};

	DH$1.prototype.getGenerator = function (enc) {
	  return formatReturnValue$1(this._gen, enc);
	};

	DH$1.prototype.setGenerator = function (gen, enc) {
	  enc = enc || 'utf8';
	  if (!isBuffer$2(gen)) {
	    gen = new Buffer$M(gen, enc);
	  }
	  this.__gen = gen;
	  this._gen = new BN$g(gen);
	  return this;
	};

	function formatReturnValue$1(bn, enc) {
	  var buf = new Buffer$M(bn.toArray());
	  if (!enc) {
	    return buf;
	  } else {
	    return buf.toString(enc);
	  }
	}

	var generatePrime = generatePrime$1;
	var primes = require$$1$2;

	var DH = dh$1;

	function getDiffieHellman (mod) {
	  var prime = new Buffer$M(primes[mod].prime, 'hex');
	  var gen = new Buffer$M(primes[mod].gen, 'hex');

	  return new DH(prime, gen)
	}

	var ENCODINGS = {
	  'binary': true, 'hex': true, 'base64': true
	};

	function createDiffieHellman (prime, enc, generator, genc) {
	  if (isBuffer$2(enc) || ENCODINGS[enc] === undefined) {
	    return createDiffieHellman(prime, 'binary', enc, generator)
	  }

	  enc = enc || 'binary';
	  genc = genc || 'binary';
	  generator = generator || new Buffer$M([2]);

	  if (!isBuffer$2(generator)) {
	    generator = new Buffer$M(generator, genc);
	  }

	  if (typeof prime === 'number') {
	    return new DH(generatePrime(prime, generator), generator, true)
	  }

	  if (!isBuffer$2(prime)) {
	    prime = new Buffer$M(prime, enc);
	  }

	  return new DH(prime, generator, true)
	}

	browser$6.DiffieHellmanGroup = browser$6.createDiffieHellmanGroup = browser$6.getDiffieHellman = getDiffieHellman;
	browser$6.createDiffieHellman = browser$6.DiffieHellman = createDiffieHellman;

	var sign$4 = {exports: {}};

	var BN$f = bn$1.exports;
	var randomBytes$3 = browser$c.exports;

	function blind (priv) {
	  var r = getr(priv);
	  var blinder = r.toRed(BN$f.mont(priv.modulus)).redPow(new BN$f(priv.publicExponent)).fromRed();
	  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
	}

	function getr (priv) {
	  var len = priv.modulus.byteLength();
	  var r;
	  do {
	    r = new BN$f(randomBytes$3(len));
	  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
	  return r
	}

	function crt$3 (msg, priv) {
	  var blinds = blind(priv);
	  var len = priv.modulus.byteLength();
	  var blinded = new BN$f(msg).mul(blinds.blinder).umod(priv.modulus);
	  var c1 = blinded.toRed(BN$f.mont(priv.prime1));
	  var c2 = blinded.toRed(BN$f.mont(priv.prime2));
	  var qinv = priv.coefficient;
	  var p = priv.prime1;
	  var q = priv.prime2;
	  var m1 = c1.redPow(priv.exponent1).fromRed();
	  var m2 = c2.redPow(priv.exponent2).fromRed();
	  var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
	  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer$M, 'be', len)
	}
	crt$3.getr = getr;

	var browserifyRsa = crt$3;

	var elliptic$2 = {};

	var name$1 = "elliptic";
	var version$1 = "6.5.4";
	var description$1 = "EC cryptography";
	var main$1 = "lib/elliptic.js";
	var files = [
		"lib"
	];
	var scripts$1 = {
		lint: "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		test: "npm run lint && npm run unit",
		version: "grunt dist && git add dist/"
	};
	var repository$1 = {
		type: "git",
		url: "git@github.com:indutny/elliptic"
	};
	var keywords$1 = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var author$1 = "Fedor Indutny <fedor@indutny.com>";
	var license$1 = "MIT";
	var bugs$1 = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var homepage$1 = "https://github.com/indutny/elliptic";
	var devDependencies$1 = {
		brfs: "^2.0.2",
		coveralls: "^3.1.0",
		eslint: "^7.6.0",
		grunt: "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.5",
		mocha: "^8.0.1"
	};
	var dependencies$1 = {
		"bn.js": "^4.11.9",
		brorand: "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		inherits: "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	};
	var require$$0$2 = {
		name: name$1,
		version: version$1,
		description: description$1,
		main: main$1,
		files: files,
		scripts: scripts$1,
		repository: repository$1,
		keywords: keywords$1,
		author: author$1,
		license: license$1,
		bugs: bugs$1,
		homepage: homepage$1,
		devDependencies: devDependencies$1,
		dependencies: dependencies$1
	};

	var utils$A = {};

	var utils$z = {};

	(function (exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	}(utils$z));

	(function (exports) {

	var utils = exports;
	var BN = bn$1.exports;
	var minAssert = minimalisticAssert;
	var minUtils = utils$z;

	utils.assert = minAssert;
	utils.toArray = minUtils.toArray;
	utils.zero2 = minUtils.zero2;
	utils.toHex = minUtils.toHex;
	utils.encode = minUtils.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    [],
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	      this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	    bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new BN(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	}(utils$A));

	var curve = {};

	var BN$e = bn$1.exports;
	var utils$y = utils$A;
	var getNAF = utils$y.getNAF;
	var getJSF = utils$y.getJSF;
	var assert$i = utils$y.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN$e(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN$e.red(conf.prime) : BN$e.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN$e(0).toRed(this.red);
	  this.one = new BN$e(1).toRed(this.red);
	  this.two = new BN$e(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN$e(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base$2 = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$i(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$i(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils$y.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$i(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$i(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils$y.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var utils$x = utils$A;
	var BN$d = bn$1.exports;
	var inherits$a = inherits_browser.exports;
	var Base$2 = base$2;

	var assert$h = utils$x.assert;

	function ShortCurve(conf) {
	  Base$2.call(this, 'short', conf);

	  this.a = new BN$d(conf.a, 16).toRed(this.red);
	  this.b = new BN$d(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits$a(ShortCurve, Base$2);
	var short = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN$d(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN$d(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$h(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN$d(vec.a, 16),
	        b: new BN$d(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN$d.mont(num);
	  var tinv = new BN$d(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN$d(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN$d(1);
	  var y1 = new BN$d(0);
	  var x2 = new BN$d(0);
	  var y2 = new BN$d(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$d(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point$2(curve, x, y, isRed) {
	  Base$2.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN$d(x, 16);
	    this.y = new BN$d(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits$a(Point$2, Base$2.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point$2(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point$2.fromJSON(this, obj, red);
	};

	Point$2.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point$2.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point$2.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point$2.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point$2.prototype.mul = function mul(k) {
	  k = new BN$d(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point$2.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point$2.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point$2.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base$2.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN$d(0);
	  } else {
	    this.x = new BN$d(x, 16);
	    this.y = new BN$d(y, 16);
	    this.z = new BN$d(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits$a(JPoint, Base$2.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN$d(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	var BN$c = bn$1.exports;
	var inherits$9 = inherits_browser.exports;
	var Base$1 = base$2;

	var utils$w = utils$A;

	function MontCurve(conf) {
	  Base$1.call(this, 'mont', conf);

	  this.a = new BN$c(conf.a, 16).toRed(this.red);
	  this.b = new BN$c(conf.b, 16).toRed(this.red);
	  this.i4 = new BN$c(4).toRed(this.red).redInvm();
	  this.two = new BN$c(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits$9(MontCurve, Base$1);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  Base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN$c(x, 16);
	    this.z = new BN$c(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits$9(Point$1, Base$1.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils$w.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var utils$v = utils$A;
	var BN$b = bn$1.exports;
	var inherits$8 = inherits_browser.exports;
	var Base = base$2;

	var assert$g = utils$v.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'edwards', conf);

	  this.a = new BN$b(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN$b(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN$b(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$g(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits$8(EdwardsCurve, Base);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$b(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN$b(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN$b(x, 16);
	    this.y = new BN$b(y, 16);
	    this.z = z ? new BN$b(z, 16) : this.curve.one;
	    this.t = t && new BN$b(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits$8(Point, Base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	    this.y,
	    this.z,
	    this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;

	(function (exports) {

	var curve = exports;

	curve.base = base$2;
	curve.short = short;
	curve.mont = mont;
	curve.edwards = edwards;
	}(curve));

	var curves$4 = {};

	var hash$3 = {};

	var utils$u = {};

	var assert$f = minimalisticAssert;
	var inherits$7 = inherits_browser.exports;

	utils$u.inherits = inherits$7;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils$u.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils$u.toHex = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	utils$u.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils$u.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils$u.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils$u.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert$f(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	utils$u.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils$u.split32 = split32;

	function rotr32$1(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils$u.rotr32 = rotr32$1;

	function rotl32$2(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils$u.rotl32 = rotl32$2;

	function sum32$3(a, b) {
	  return (a + b) >>> 0;
	}
	utils$u.sum32 = sum32$3;

	function sum32_3$1(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	utils$u.sum32_3 = sum32_3$1;

	function sum32_4$2(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	utils$u.sum32_4 = sum32_4$2;

	function sum32_5$2(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	utils$u.sum32_5 = sum32_5$2;

	function sum64$1(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	utils$u.sum64 = sum64$1;

	function sum64_hi$1(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	utils$u.sum64_hi = sum64_hi$1;

	function sum64_lo$1(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	utils$u.sum64_lo = sum64_lo$1;

	function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	utils$u.sum64_4_hi = sum64_4_hi$1;

	function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	utils$u.sum64_4_lo = sum64_4_lo$1;

	function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	utils$u.sum64_5_hi = sum64_5_hi$1;

	function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	utils$u.sum64_5_lo = sum64_5_lo$1;

	function rotr64_hi$1(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	utils$u.rotr64_hi = rotr64_hi$1;

	function rotr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$u.rotr64_lo = rotr64_lo$1;

	function shr64_hi$1(ah, al, num) {
	  return ah >>> num;
	}
	utils$u.shr64_hi = shr64_hi$1;

	function shr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$u.shr64_lo = shr64_lo$1;

	var common$5 = {};

	var utils$t = utils$u;
	var assert$e = minimalisticAssert;

	function BlockHash$4() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	common$5.BlockHash = BlockHash$4;

	BlockHash$4.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$t.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$t.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$4.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert$e(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$4.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var sha = {};

	var common$4 = {};

	var utils$s = utils$u;
	var rotr32 = utils$s.rotr32;

	function ft_1$1(s, x, y, z) {
	  if (s === 0)
	    return ch32$1(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32$1(x, y, z);
	}
	common$4.ft_1 = ft_1$1;

	function ch32$1(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	common$4.ch32 = ch32$1;

	function maj32$1(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	common$4.maj32 = maj32$1;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	common$4.p32 = p32;

	function s0_256$1(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	common$4.s0_256 = s0_256$1;

	function s1_256$1(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	common$4.s1_256 = s1_256$1;

	function g0_256$1(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	common$4.g0_256 = g0_256$1;

	function g1_256$1(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	common$4.g1_256 = g1_256$1;

	var utils$r = utils$u;
	var common$3 = common$5;
	var shaCommon$1 = common$4;

	var rotl32$1 = utils$r.rotl32;
	var sum32$2 = utils$r.sum32;
	var sum32_5$1 = utils$r.sum32_5;
	var ft_1 = shaCommon$1.ft_1;
	var BlockHash$3 = common$3.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$3.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$r.inherits(SHA1, BlockHash$3);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$r.toHex32(this.h, 'big');
	  else
	    return utils$r.split32(this.h, 'big');
	};

	var utils$q = utils$u;
	var common$2 = common$5;
	var shaCommon = common$4;
	var assert$d = minimalisticAssert;

	var sum32$1 = utils$q.sum32;
	var sum32_4$1 = utils$q.sum32_4;
	var sum32_5 = utils$q.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;

	var BlockHash$2 = common$2.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$2() {
	  if (!(this instanceof SHA256$2))
	    return new SHA256$2();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils$q.inherits(SHA256$2, BlockHash$2);
	var _256 = SHA256$2;

	SHA256$2.blockSize = 512;
	SHA256$2.outSize = 256;
	SHA256$2.hmacStrength = 192;
	SHA256$2.padLength = 64;

	SHA256$2.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert$d(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$1(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$1(T1, T2);
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	  this.h[5] = sum32$1(this.h[5], f);
	  this.h[6] = sum32$1(this.h[6], g);
	  this.h[7] = sum32$1(this.h[7], h);
	};

	SHA256$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$q.toHex32(this.h, 'big');
	  else
	    return utils$q.split32(this.h, 'big');
	};

	var utils$p = utils$u;
	var SHA256$1 = _256;

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256$1.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$p.inherits(SHA224, SHA256$1);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$p.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$p.split32(this.h.slice(0, 7), 'big');
	};

	var utils$o = utils$u;
	var common$1 = common$5;
	var assert$c = minimalisticAssert;

	var rotr64_hi = utils$o.rotr64_hi;
	var rotr64_lo = utils$o.rotr64_lo;
	var shr64_hi = utils$o.shr64_hi;
	var shr64_lo = utils$o.shr64_lo;
	var sum64 = utils$o.sum64;
	var sum64_hi = utils$o.sum64_hi;
	var sum64_lo = utils$o.sum64_lo;
	var sum64_4_hi = utils$o.sum64_4_hi;
	var sum64_4_lo = utils$o.sum64_4_lo;
	var sum64_5_hi = utils$o.sum64_5_hi;
	var sum64_5_lo = utils$o.sum64_5_lo;

	var BlockHash$1 = common$1.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$1() {
	  if (!(this instanceof SHA512$1))
	    return new SHA512$1();

	  BlockHash$1.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils$o.inherits(SHA512$1, BlockHash$1);
	var _512 = SHA512$1;

	SHA512$1.blockSize = 1024;
	SHA512$1.outSize = 512;
	SHA512$1.hmacStrength = 192;
	SHA512$1.padLength = 128;

	SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$1.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert$c(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$o.toHex32(this.h, 'big');
	  else
	    return utils$o.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	var utils$n = utils$u;

	var SHA512 = _512;

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$n.inherits(SHA384, SHA512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$n.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$n.split32(this.h.slice(0, 12), 'big');
	};

	sha.sha1 = _1;
	sha.sha224 = _224;
	sha.sha256 = _256;
	sha.sha384 = _384;
	sha.sha512 = _512;

	var ripemd = {};

	var utils$m = utils$u;
	var common = common$5;

	var rotl32 = utils$m.rotl32;
	var sum32 = utils$m.sum32;
	var sum32_3 = utils$m.sum32_3;
	var sum32_4 = utils$m.sum32_4;
	var BlockHash = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$m.inherits(RIPEMD160, BlockHash);
	ripemd.ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$m.toHex32(this.h, 'little');
	  else
	    return utils$m.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var utils$l = utils$u;
	var assert$b = minimalisticAssert;

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$l.toArray(key, enc));
	}
	var hmac$1 = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert$b(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	(function (exports) {
	var hash = exports;

	hash.utils = utils$u;
	hash.common = common$5;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac$1;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	}(hash$3));

	var secp256k1 = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
	      ],
	    ],
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
	      ],
	    ],
	  },
	};

	(function (exports) {

	var curves = exports;

	var hash = hash$3;
	var curve$1 = curve;
	var utils = utils$A;

	var assert = utils.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve$1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve$1.edwards(options);
	  else
	    this.curve = new curve$1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve,
	      });
	      return curve;
	    },
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '9',
	  ],
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});

	var pre;
	try {
	  pre = secp256k1;
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3',
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15',
	    },
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre,
	  ],
	});
	}(curves$4));

	var hash$2 = hash$3;
	var utils$k = utils$z;
	var assert$a = minimalisticAssert;

	function HmacDRBG$1(options) {
	  if (!(this instanceof HmacDRBG$1))
	    return new HmacDRBG$1(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils$k.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils$k.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils$k.toArray(options.pers, options.persEnc || 'hex');
	  assert$a(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG$1;

	HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG$1.prototype._hmac = function hmac() {
	  return new hash$2.hmac(this.hash, this.K);
	};

	HmacDRBG$1.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils$k.toArray(entropy, entropyEnc);
	  add = utils$k.toArray(add, addEnc);

	  assert$a(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils$k.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils$k.encode(res, enc);
	};

	var BN$a = bn$1.exports;
	var utils$j = utils$A;
	var assert$9 = utils$j.assert;

	function KeyPair$3(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key$3 = KeyPair$3;

	KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair$3)
	    return pub;

	  return new KeyPair$3(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair$3)
	    return priv;

	  return new KeyPair$3(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair$3.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN$a(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$9(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$9(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair$3.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$9(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair$3.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair$3.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair$3.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var BN$9 = bn$1.exports;

	var utils$i = utils$A;
	var assert$8 = utils$i.assert;

	function Signature$3(options, enc) {
	  if (options instanceof Signature$3)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$8(options.r && options.s, 'Signature without r or s');
	  this.r = new BN$9(options.r, 16);
	  this.s = new BN$9(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature$1 = Signature$3;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature$3.prototype._importDER = function _importDER(data, enc) {
	  data = utils$i.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN$9(r);
	  this.s = new BN$9(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature$3.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils$i.encode(res, enc);
	};

	var BN$8 = bn$1.exports;
	var HmacDRBG = hmacDrbg;
	var utils$h = utils$A;
	var curves$3 = curves$4;
	var rand = brorand$1.exports;
	var assert$7 = utils$h.assert;

	var KeyPair$2 = key$3;
	var Signature$2 = signature$1;

	function EC$2(options) {
	  if (!(this instanceof EC$2))
	    return new EC$2(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$7(Object.prototype.hasOwnProperty.call(curves$3, options),
	      'Unknown curve ' + options);

	    options = curves$3[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves$3.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec$1 = EC$2;

	EC$2.prototype.keyPair = function keyPair(options) {
	  return new KeyPair$2(this, options);
	};

	EC$2.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair$2.fromPrivate(this, priv, enc);
	};

	EC$2.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair$2.fromPublic(this, pub, enc);
	};

	EC$2.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN$8(2));
	  for (;;) {
	    var priv = new BN$8(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC$2.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC$2.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN$8(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN$8(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new BN$8(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC$2.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN$8(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature$2(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC$2.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert$7((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature$2(signature, enc);

	  var n = this.n;
	  var e = new BN$8(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC$2.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature$2(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var utils$g = utils$A;
	var assert$6 = utils$g.assert;
	var parseBytes$2 = utils$g.parseBytes;
	var cachedProperty$1 = utils$g.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$1(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes$2(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes$2(params.pub);
	}

	KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$1)
	    return pub;
	  return new KeyPair$1(eddsa, { pub: pub });
	};

	KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$1)
	    return secret;
	  return new KeyPair$1(eddsa, { secret: secret });
	};

	KeyPair$1.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty$1(KeyPair$1, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty$1(KeyPair$1, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty$1(KeyPair$1, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$1.prototype.sign = function sign(message) {
	  assert$6(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$1.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$1.prototype.getSecret = function getSecret(enc) {
	  assert$6(this._secret, 'KeyPair is public only');
	  return utils$g.encode(this.secret(), enc);
	};

	KeyPair$1.prototype.getPublic = function getPublic(enc) {
	  return utils$g.encode(this.pubBytes(), enc);
	};

	var key$2 = KeyPair$1;

	var BN$7 = bn$1.exports;
	var utils$f = utils$A;
	var assert$5 = utils$f.assert;
	var cachedProperty = utils$f.cachedProperty;
	var parseBytes$1 = utils$f.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$1(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength),
	    };
	  }

	  assert$5(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof BN$7)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature$1, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature$1, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$1.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$1.prototype.toHex = function toHex() {
	  return utils$f.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature = Signature$1;

	var hash$1 = hash$3;
	var curves$2 = curves$4;
	var utils$e = utils$A;
	var assert$4 = utils$e.assert;
	var parseBytes = utils$e.parseBytes;
	var KeyPair = key$2;
	var Signature = signature;

	function EDDSA(curve) {
	  assert$4(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  curve = curves$2[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash$1.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	    .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils$e.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature)
	    return sig;
	  return new Signature(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils$e.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils$e.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils$e.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	(function (exports) {

	var elliptic = exports;

	elliptic.version = require$$0$2.version;
	elliptic.utils = utils$A;
	elliptic.rand = brorand$1.exports;
	elliptic.curve = curve;
	elliptic.curves = curves$4;

	// Protocols
	elliptic.ec = ec$1;
	elliptic.eddsa = eddsa;
	}(elliptic$2));

	var asn1$3 = {};

	var asn1$2 = {};

	var api = {};

	var encoders = {};

	var buffer$2 = require$$2$3;
	var Buffer$h = buffer$2.Buffer;

	var safer = {};

	var key$1;

	for (key$1 in buffer$2) {
	  if (!buffer$2.hasOwnProperty(key$1)) continue
	  if (key$1 === 'SlowBuffer' || key$1 === 'Buffer') continue
	  safer[key$1] = buffer$2[key$1];
	}

	var Safer = safer.Buffer = {};
	for (key$1 in Buffer$h) {
	  if (!Buffer$h.hasOwnProperty(key$1)) continue
	  if (key$1 === 'allocUnsafe' || key$1 === 'allocUnsafeSlow') continue
	  Safer[key$1] = Buffer$h[key$1];
	}

	safer.Buffer.prototype = Buffer$h.prototype;

	if (!Safer.from || Safer.from === Uint8Array.from) {
	  Safer.from = function (value, encodingOrOffset, length) {
	    if (typeof value === 'number') {
	      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
	    }
	    if (value && typeof value.length === 'undefined') {
	      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
	    }
	    return Buffer$h(value, encodingOrOffset, length)
	  };
	}

	if (!Safer.alloc) {
	  Safer.alloc = function (size, fill, encoding) {
	    if (typeof size !== 'number') {
	      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
	    }
	    if (size < 0 || size >= 2 * (1 << 30)) {
	      throw new RangeError('The value "' + size + '" is invalid for option "size"')
	    }
	    var buf = Buffer$h(size);
	    if (!fill || fill.length === 0) {
	      buf.fill(0);
	    } else if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	    return buf
	  };
	}

	if (!safer.kStringMaxLength) {
	  try {
	    safer.kStringMaxLength = process$1.binding('buffer').kStringMaxLength;
	  } catch (e) {
	    // we can't determine kStringMaxLength in environments where process.binding
	    // is unsupported, so let's not set it
	  }
	}

	if (!safer.constants) {
	  safer.constants = {
	    MAX_LENGTH: safer.kMaxLength
	  };
	  if (safer.kStringMaxLength) {
	    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
	  }
	}

	var safer_1 = safer;

	var reporter = {};

	const inherits$6 = inherits_browser.exports;

	function Reporter$2(options) {
	  this._reporterState = {
	    obj: null,
	    path: [],
	    options: options || {},
	    errors: []
	  };
	}
	reporter.Reporter = Reporter$2;

	Reporter$2.prototype.isError = function isError(obj) {
	  return obj instanceof ReporterError;
	};

	Reporter$2.prototype.save = function save() {
	  const state = this._reporterState;

	  return { obj: state.obj, pathLen: state.path.length };
	};

	Reporter$2.prototype.restore = function restore(data) {
	  const state = this._reporterState;

	  state.obj = data.obj;
	  state.path = state.path.slice(0, data.pathLen);
	};

	Reporter$2.prototype.enterKey = function enterKey(key) {
	  return this._reporterState.path.push(key);
	};

	Reporter$2.prototype.exitKey = function exitKey(index) {
	  const state = this._reporterState;

	  state.path = state.path.slice(0, index - 1);
	};

	Reporter$2.prototype.leaveKey = function leaveKey(index, key, value) {
	  const state = this._reporterState;

	  this.exitKey(index);
	  if (state.obj !== null)
	    state.obj[key] = value;
	};

	Reporter$2.prototype.path = function path() {
	  return this._reporterState.path.join('/');
	};

	Reporter$2.prototype.enterObject = function enterObject() {
	  const state = this._reporterState;

	  const prev = state.obj;
	  state.obj = {};
	  return prev;
	};

	Reporter$2.prototype.leaveObject = function leaveObject(prev) {
	  const state = this._reporterState;

	  const now = state.obj;
	  state.obj = prev;
	  return now;
	};

	Reporter$2.prototype.error = function error(msg) {
	  let err;
	  const state = this._reporterState;

	  const inherited = msg instanceof ReporterError;
	  if (inherited) {
	    err = msg;
	  } else {
	    err = new ReporterError(state.path.map(function(elem) {
	      return '[' + JSON.stringify(elem) + ']';
	    }).join(''), msg.message || msg, msg.stack);
	  }

	  if (!state.options.partial)
	    throw err;

	  if (!inherited)
	    state.errors.push(err);

	  return err;
	};

	Reporter$2.prototype.wrapResult = function wrapResult(result) {
	  const state = this._reporterState;
	  if (!state.options.partial)
	    return result;

	  return {
	    result: this.isError(result) ? null : result,
	    errors: state.errors
	  };
	};

	function ReporterError(path, msg) {
	  this.path = path;
	  this.rethrow(msg);
	}
	inherits$6(ReporterError, Error);

	ReporterError.prototype.rethrow = function rethrow(msg) {
	  this.message = msg + ' at: ' + (this.path || '(shallow)');
	  if (Error.captureStackTrace)
	    Error.captureStackTrace(this, ReporterError);

	  if (!this.stack) {
	    try {
	      // IE only adds stack when thrown
	      throw new Error(this.message);
	    } catch (e) {
	      this.stack = e.stack;
	    }
	  }
	  return this;
	};

	var buffer$1 = {};

	const inherits$5 = inherits_browser.exports;
	const Reporter$1 = reporter.Reporter;
	const Buffer$g = safer_1.Buffer;

	function DecoderBuffer$2(base, options) {
	  Reporter$1.call(this, options);
	  if (!Buffer$g.isBuffer(base)) {
	    this.error('Input not Buffer');
	    return;
	  }

	  this.base = base;
	  this.offset = 0;
	  this.length = base.length;
	}
	inherits$5(DecoderBuffer$2, Reporter$1);
	buffer$1.DecoderBuffer = DecoderBuffer$2;

	DecoderBuffer$2.isDecoderBuffer = function isDecoderBuffer(data) {
	  if (data instanceof DecoderBuffer$2) {
	    return true;
	  }

	  // Or accept compatible API
	  const isCompatible = typeof data === 'object' &&
	    Buffer$g.isBuffer(data.base) &&
	    data.constructor.name === 'DecoderBuffer' &&
	    typeof data.offset === 'number' &&
	    typeof data.length === 'number' &&
	    typeof data.save === 'function' &&
	    typeof data.restore === 'function' &&
	    typeof data.isEmpty === 'function' &&
	    typeof data.readUInt8 === 'function' &&
	    typeof data.skip === 'function' &&
	    typeof data.raw === 'function';

	  return isCompatible;
	};

	DecoderBuffer$2.prototype.save = function save() {
	  return { offset: this.offset, reporter: Reporter$1.prototype.save.call(this) };
	};

	DecoderBuffer$2.prototype.restore = function restore(save) {
	  // Return skipped data
	  const res = new DecoderBuffer$2(this.base);
	  res.offset = save.offset;
	  res.length = this.offset;

	  this.offset = save.offset;
	  Reporter$1.prototype.restore.call(this, save.reporter);

	  return res;
	};

	DecoderBuffer$2.prototype.isEmpty = function isEmpty() {
	  return this.offset === this.length;
	};

	DecoderBuffer$2.prototype.readUInt8 = function readUInt8(fail) {
	  if (this.offset + 1 <= this.length)
	    return this.base.readUInt8(this.offset++, true);
	  else
	    return this.error(fail || 'DecoderBuffer overrun');
	};

	DecoderBuffer$2.prototype.skip = function skip(bytes, fail) {
	  if (!(this.offset + bytes <= this.length))
	    return this.error(fail || 'DecoderBuffer overrun');

	  const res = new DecoderBuffer$2(this.base);

	  // Share reporter state
	  res._reporterState = this._reporterState;

	  res.offset = this.offset;
	  res.length = this.offset + bytes;
	  this.offset += bytes;
	  return res;
	};

	DecoderBuffer$2.prototype.raw = function raw(save) {
	  return this.base.slice(save ? save.offset : this.offset, this.length);
	};

	function EncoderBuffer$1(value, reporter) {
	  if (Array.isArray(value)) {
	    this.length = 0;
	    this.value = value.map(function(item) {
	      if (!EncoderBuffer$1.isEncoderBuffer(item))
	        item = new EncoderBuffer$1(item, reporter);
	      this.length += item.length;
	      return item;
	    }, this);
	  } else if (typeof value === 'number') {
	    if (!(0 <= value && value <= 0xff))
	      return reporter.error('non-byte EncoderBuffer value');
	    this.value = value;
	    this.length = 1;
	  } else if (typeof value === 'string') {
	    this.value = value;
	    this.length = Buffer$g.byteLength(value);
	  } else if (Buffer$g.isBuffer(value)) {
	    this.value = value;
	    this.length = value.length;
	  } else {
	    return reporter.error('Unsupported type: ' + typeof value);
	  }
	}
	buffer$1.EncoderBuffer = EncoderBuffer$1;

	EncoderBuffer$1.isEncoderBuffer = function isEncoderBuffer(data) {
	  if (data instanceof EncoderBuffer$1) {
	    return true;
	  }

	  // Or accept compatible API
	  const isCompatible = typeof data === 'object' &&
	    data.constructor.name === 'EncoderBuffer' &&
	    typeof data.length === 'number' &&
	    typeof data.join === 'function';

	  return isCompatible;
	};

	EncoderBuffer$1.prototype.join = function join(out, offset) {
	  if (!out)
	    out = Buffer$g.alloc(this.length);
	  if (!offset)
	    offset = 0;

	  if (this.length === 0)
	    return out;

	  if (Array.isArray(this.value)) {
	    this.value.forEach(function(item) {
	      item.join(out, offset);
	      offset += item.length;
	    });
	  } else {
	    if (typeof this.value === 'number')
	      out[offset] = this.value;
	    else if (typeof this.value === 'string')
	      out.write(this.value, offset);
	    else if (Buffer$g.isBuffer(this.value))
	      this.value.copy(out, offset);
	    offset += this.length;
	  }

	  return out;
	};

	const Reporter = reporter.Reporter;
	const EncoderBuffer = buffer$1.EncoderBuffer;
	const DecoderBuffer$1 = buffer$1.DecoderBuffer;
	const assert$3 = minimalisticAssert;

	// Supported tags
	const tags = [
	  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
	  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
	  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
	  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
	];

	// Public methods list
	const methods = [
	  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
	  'any', 'contains'
	].concat(tags);

	// Overrided methods list
	const overrided = [
	  '_peekTag', '_decodeTag', '_use',
	  '_decodeStr', '_decodeObjid', '_decodeTime',
	  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

	  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
	  '_encodeNull', '_encodeInt', '_encodeBool'
	];

	function Node$2(enc, parent, name) {
	  const state = {};
	  this._baseState = state;

	  state.name = name;
	  state.enc = enc;

	  state.parent = parent || null;
	  state.children = null;

	  // State
	  state.tag = null;
	  state.args = null;
	  state.reverseArgs = null;
	  state.choice = null;
	  state.optional = false;
	  state.any = false;
	  state.obj = false;
	  state.use = null;
	  state.useDecoder = null;
	  state.key = null;
	  state['default'] = null;
	  state.explicit = null;
	  state.implicit = null;
	  state.contains = null;

	  // Should create new instance on each method
	  if (!state.parent) {
	    state.children = [];
	    this._wrap();
	  }
	}
	var node = Node$2;

	const stateProps = [
	  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
	  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
	  'implicit', 'contains'
	];

	Node$2.prototype.clone = function clone() {
	  const state = this._baseState;
	  const cstate = {};
	  stateProps.forEach(function(prop) {
	    cstate[prop] = state[prop];
	  });
	  const res = new this.constructor(cstate.parent);
	  res._baseState = cstate;
	  return res;
	};

	Node$2.prototype._wrap = function wrap() {
	  const state = this._baseState;
	  methods.forEach(function(method) {
	    this[method] = function _wrappedMethod() {
	      const clone = new this.constructor(this);
	      state.children.push(clone);
	      return clone[method].apply(clone, arguments);
	    };
	  }, this);
	};

	Node$2.prototype._init = function init(body) {
	  const state = this._baseState;

	  assert$3(state.parent === null);
	  body.call(this);

	  // Filter children
	  state.children = state.children.filter(function(child) {
	    return child._baseState.parent === this;
	  }, this);
	  assert$3.equal(state.children.length, 1, 'Root node can have only one child');
	};

	Node$2.prototype._useArgs = function useArgs(args) {
	  const state = this._baseState;

	  // Filter children and args
	  const children = args.filter(function(arg) {
	    return arg instanceof this.constructor;
	  }, this);
	  args = args.filter(function(arg) {
	    return !(arg instanceof this.constructor);
	  }, this);

	  if (children.length !== 0) {
	    assert$3(state.children === null);
	    state.children = children;

	    // Replace parent to maintain backward link
	    children.forEach(function(child) {
	      child._baseState.parent = this;
	    }, this);
	  }
	  if (args.length !== 0) {
	    assert$3(state.args === null);
	    state.args = args;
	    state.reverseArgs = args.map(function(arg) {
	      if (typeof arg !== 'object' || arg.constructor !== Object)
	        return arg;

	      const res = {};
	      Object.keys(arg).forEach(function(key) {
	        if (key == (key | 0))
	          key |= 0;
	        const value = arg[key];
	        res[value] = key;
	      });
	      return res;
	    });
	  }
	};

	//
	// Overrided methods
	//

	overrided.forEach(function(method) {
	  Node$2.prototype[method] = function _overrided() {
	    const state = this._baseState;
	    throw new Error(method + ' not implemented for encoding: ' + state.enc);
	  };
	});

	//
	// Public methods
	//

	tags.forEach(function(tag) {
	  Node$2.prototype[tag] = function _tagMethod() {
	    const state = this._baseState;
	    const args = Array.prototype.slice.call(arguments);

	    assert$3(state.tag === null);
	    state.tag = tag;

	    this._useArgs(args);

	    return this;
	  };
	});

	Node$2.prototype.use = function use(item) {
	  assert$3(item);
	  const state = this._baseState;

	  assert$3(state.use === null);
	  state.use = item;

	  return this;
	};

	Node$2.prototype.optional = function optional() {
	  const state = this._baseState;

	  state.optional = true;

	  return this;
	};

	Node$2.prototype.def = function def(val) {
	  const state = this._baseState;

	  assert$3(state['default'] === null);
	  state['default'] = val;
	  state.optional = true;

	  return this;
	};

	Node$2.prototype.explicit = function explicit(num) {
	  const state = this._baseState;

	  assert$3(state.explicit === null && state.implicit === null);
	  state.explicit = num;

	  return this;
	};

	Node$2.prototype.implicit = function implicit(num) {
	  const state = this._baseState;

	  assert$3(state.explicit === null && state.implicit === null);
	  state.implicit = num;

	  return this;
	};

	Node$2.prototype.obj = function obj() {
	  const state = this._baseState;
	  const args = Array.prototype.slice.call(arguments);

	  state.obj = true;

	  if (args.length !== 0)
	    this._useArgs(args);

	  return this;
	};

	Node$2.prototype.key = function key(newKey) {
	  const state = this._baseState;

	  assert$3(state.key === null);
	  state.key = newKey;

	  return this;
	};

	Node$2.prototype.any = function any() {
	  const state = this._baseState;

	  state.any = true;

	  return this;
	};

	Node$2.prototype.choice = function choice(obj) {
	  const state = this._baseState;

	  assert$3(state.choice === null);
	  state.choice = obj;
	  this._useArgs(Object.keys(obj).map(function(key) {
	    return obj[key];
	  }));

	  return this;
	};

	Node$2.prototype.contains = function contains(item) {
	  const state = this._baseState;

	  assert$3(state.use === null);
	  state.contains = item;

	  return this;
	};

	//
	// Decoding
	//

	Node$2.prototype._decode = function decode(input, options) {
	  const state = this._baseState;

	  // Decode root node
	  if (state.parent === null)
	    return input.wrapResult(state.children[0]._decode(input, options));

	  let result = state['default'];
	  let present = true;

	  let prevKey = null;
	  if (state.key !== null)
	    prevKey = input.enterKey(state.key);

	  // Check if tag is there
	  if (state.optional) {
	    let tag = null;
	    if (state.explicit !== null)
	      tag = state.explicit;
	    else if (state.implicit !== null)
	      tag = state.implicit;
	    else if (state.tag !== null)
	      tag = state.tag;

	    if (tag === null && !state.any) {
	      // Trial and Error
	      const save = input.save();
	      try {
	        if (state.choice === null)
	          this._decodeGeneric(state.tag, input, options);
	        else
	          this._decodeChoice(input, options);
	        present = true;
	      } catch (e) {
	        present = false;
	      }
	      input.restore(save);
	    } else {
	      present = this._peekTag(input, tag, state.any);

	      if (input.isError(present))
	        return present;
	    }
	  }

	  // Push object on stack
	  let prevObj;
	  if (state.obj && present)
	    prevObj = input.enterObject();

	  if (present) {
	    // Unwrap explicit values
	    if (state.explicit !== null) {
	      const explicit = this._decodeTag(input, state.explicit);
	      if (input.isError(explicit))
	        return explicit;
	      input = explicit;
	    }

	    const start = input.offset;

	    // Unwrap implicit and normal values
	    if (state.use === null && state.choice === null) {
	      let save;
	      if (state.any)
	        save = input.save();
	      const body = this._decodeTag(
	        input,
	        state.implicit !== null ? state.implicit : state.tag,
	        state.any
	      );
	      if (input.isError(body))
	        return body;

	      if (state.any)
	        result = input.raw(save);
	      else
	        input = body;
	    }

	    if (options && options.track && state.tag !== null)
	      options.track(input.path(), start, input.length, 'tagged');

	    if (options && options.track && state.tag !== null)
	      options.track(input.path(), input.offset, input.length, 'content');

	    // Select proper method for tag
	    if (state.any) ; else if (state.choice === null) {
	      result = this._decodeGeneric(state.tag, input, options);
	    } else {
	      result = this._decodeChoice(input, options);
	    }

	    if (input.isError(result))
	      return result;

	    // Decode children
	    if (!state.any && state.choice === null && state.children !== null) {
	      state.children.forEach(function decodeChildren(child) {
	        // NOTE: We are ignoring errors here, to let parser continue with other
	        // parts of encoded data
	        child._decode(input, options);
	      });
	    }

	    // Decode contained/encoded by schema, only in bit or octet strings
	    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
	      const data = new DecoderBuffer$1(result);
	      result = this._getUse(state.contains, input._reporterState.obj)
	        ._decode(data, options);
	    }
	  }

	  // Pop object
	  if (state.obj && present)
	    result = input.leaveObject(prevObj);

	  // Set key
	  if (state.key !== null && (result !== null || present === true))
	    input.leaveKey(prevKey, state.key, result);
	  else if (prevKey !== null)
	    input.exitKey(prevKey);

	  return result;
	};

	Node$2.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
	  const state = this._baseState;

	  if (tag === 'seq' || tag === 'set')
	    return null;
	  if (tag === 'seqof' || tag === 'setof')
	    return this._decodeList(input, tag, state.args[0], options);
	  else if (/str$/.test(tag))
	    return this._decodeStr(input, tag, options);
	  else if (tag === 'objid' && state.args)
	    return this._decodeObjid(input, state.args[0], state.args[1], options);
	  else if (tag === 'objid')
	    return this._decodeObjid(input, null, null, options);
	  else if (tag === 'gentime' || tag === 'utctime')
	    return this._decodeTime(input, tag, options);
	  else if (tag === 'null_')
	    return this._decodeNull(input, options);
	  else if (tag === 'bool')
	    return this._decodeBool(input, options);
	  else if (tag === 'objDesc')
	    return this._decodeStr(input, tag, options);
	  else if (tag === 'int' || tag === 'enum')
	    return this._decodeInt(input, state.args && state.args[0], options);

	  if (state.use !== null) {
	    return this._getUse(state.use, input._reporterState.obj)
	      ._decode(input, options);
	  } else {
	    return input.error('unknown tag: ' + tag);
	  }
	};

	Node$2.prototype._getUse = function _getUse(entity, obj) {

	  const state = this._baseState;
	  // Create altered use decoder if implicit is set
	  state.useDecoder = this._use(entity, obj);
	  assert$3(state.useDecoder._baseState.parent === null);
	  state.useDecoder = state.useDecoder._baseState.children[0];
	  if (state.implicit !== state.useDecoder._baseState.implicit) {
	    state.useDecoder = state.useDecoder.clone();
	    state.useDecoder._baseState.implicit = state.implicit;
	  }
	  return state.useDecoder;
	};

	Node$2.prototype._decodeChoice = function decodeChoice(input, options) {
	  const state = this._baseState;
	  let result = null;
	  let match = false;

	  Object.keys(state.choice).some(function(key) {
	    const save = input.save();
	    const node = state.choice[key];
	    try {
	      const value = node._decode(input, options);
	      if (input.isError(value))
	        return false;

	      result = { type: key, value: value };
	      match = true;
	    } catch (e) {
	      input.restore(save);
	      return false;
	    }
	    return true;
	  }, this);

	  if (!match)
	    return input.error('Choice not matched');

	  return result;
	};

	//
	// Encoding
	//

	Node$2.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
	  return new EncoderBuffer(data, this.reporter);
	};

	Node$2.prototype._encode = function encode(data, reporter, parent) {
	  const state = this._baseState;
	  if (state['default'] !== null && state['default'] === data)
	    return;

	  const result = this._encodeValue(data, reporter, parent);
	  if (result === undefined)
	    return;

	  if (this._skipDefault(result, reporter, parent))
	    return;

	  return result;
	};

	Node$2.prototype._encodeValue = function encode(data, reporter, parent) {
	  const state = this._baseState;

	  // Decode root node
	  if (state.parent === null)
	    return state.children[0]._encode(data, reporter || new Reporter());

	  let result = null;

	  // Set reporter to share it with a child class
	  this.reporter = reporter;

	  // Check if data is there
	  if (state.optional && data === undefined) {
	    if (state['default'] !== null)
	      data = state['default'];
	    else
	      return;
	  }

	  // Encode children first
	  let content = null;
	  let primitive = false;
	  if (state.any) {
	    // Anything that was given is translated to buffer
	    result = this._createEncoderBuffer(data);
	  } else if (state.choice) {
	    result = this._encodeChoice(data, reporter);
	  } else if (state.contains) {
	    content = this._getUse(state.contains, parent)._encode(data, reporter);
	    primitive = true;
	  } else if (state.children) {
	    content = state.children.map(function(child) {
	      if (child._baseState.tag === 'null_')
	        return child._encode(null, reporter, data);

	      if (child._baseState.key === null)
	        return reporter.error('Child should have a key');
	      const prevKey = reporter.enterKey(child._baseState.key);

	      if (typeof data !== 'object')
	        return reporter.error('Child expected, but input is not object');

	      const res = child._encode(data[child._baseState.key], reporter, data);
	      reporter.leaveKey(prevKey);

	      return res;
	    }, this).filter(function(child) {
	      return child;
	    });
	    content = this._createEncoderBuffer(content);
	  } else {
	    if (state.tag === 'seqof' || state.tag === 'setof') {
	      // TODO(indutny): this should be thrown on DSL level
	      if (!(state.args && state.args.length === 1))
	        return reporter.error('Too many args for : ' + state.tag);

	      if (!Array.isArray(data))
	        return reporter.error('seqof/setof, but data is not Array');

	      const child = this.clone();
	      child._baseState.implicit = null;
	      content = this._createEncoderBuffer(data.map(function(item) {
	        const state = this._baseState;

	        return this._getUse(state.args[0], data)._encode(item, reporter);
	      }, child));
	    } else if (state.use !== null) {
	      result = this._getUse(state.use, parent)._encode(data, reporter);
	    } else {
	      content = this._encodePrimitive(state.tag, data);
	      primitive = true;
	    }
	  }

	  // Encode data itself
	  if (!state.any && state.choice === null) {
	    const tag = state.implicit !== null ? state.implicit : state.tag;
	    const cls = state.implicit === null ? 'universal' : 'context';

	    if (tag === null) {
	      if (state.use === null)
	        reporter.error('Tag could be omitted only for .use()');
	    } else {
	      if (state.use === null)
	        result = this._encodeComposite(tag, primitive, cls, content);
	    }
	  }

	  // Wrap in explicit
	  if (state.explicit !== null)
	    result = this._encodeComposite(state.explicit, false, 'context', result);

	  return result;
	};

	Node$2.prototype._encodeChoice = function encodeChoice(data, reporter) {
	  const state = this._baseState;

	  const node = state.choice[data.type];
	  if (!node) {
	    assert$3(
	      false,
	      data.type + ' not found in ' +
	            JSON.stringify(Object.keys(state.choice)));
	  }
	  return node._encode(data.value, reporter);
	};

	Node$2.prototype._encodePrimitive = function encodePrimitive(tag, data) {
	  const state = this._baseState;

	  if (/str$/.test(tag))
	    return this._encodeStr(data, tag);
	  else if (tag === 'objid' && state.args)
	    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
	  else if (tag === 'objid')
	    return this._encodeObjid(data, null, null);
	  else if (tag === 'gentime' || tag === 'utctime')
	    return this._encodeTime(data, tag);
	  else if (tag === 'null_')
	    return this._encodeNull();
	  else if (tag === 'int' || tag === 'enum')
	    return this._encodeInt(data, state.args && state.reverseArgs[0]);
	  else if (tag === 'bool')
	    return this._encodeBool(data);
	  else if (tag === 'objDesc')
	    return this._encodeStr(data, tag);
	  else
	    throw new Error('Unsupported tag: ' + tag);
	};

	Node$2.prototype._isNumstr = function isNumstr(str) {
	  return /^[0-9 ]*$/.test(str);
	};

	Node$2.prototype._isPrintstr = function isPrintstr(str) {
	  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
	};

	var der$2 = {};

	(function (exports) {

	// Helper
	function reverse(map) {
	  const res = {};

	  Object.keys(map).forEach(function(key) {
	    // Convert key to integer if it is stringified
	    if ((key | 0) == key)
	      key = key | 0;

	    const value = map[key];
	    res[value] = key;
	  });

	  return res;
	}

	exports.tagClass = {
	  0: 'universal',
	  1: 'application',
	  2: 'context',
	  3: 'private'
	};
	exports.tagClassByName = reverse(exports.tagClass);

	exports.tag = {
	  0x00: 'end',
	  0x01: 'bool',
	  0x02: 'int',
	  0x03: 'bitstr',
	  0x04: 'octstr',
	  0x05: 'null_',
	  0x06: 'objid',
	  0x07: 'objDesc',
	  0x08: 'external',
	  0x09: 'real',
	  0x0a: 'enum',
	  0x0b: 'embed',
	  0x0c: 'utf8str',
	  0x0d: 'relativeOid',
	  0x10: 'seq',
	  0x11: 'set',
	  0x12: 'numstr',
	  0x13: 'printstr',
	  0x14: 't61str',
	  0x15: 'videostr',
	  0x16: 'ia5str',
	  0x17: 'utctime',
	  0x18: 'gentime',
	  0x19: 'graphstr',
	  0x1a: 'iso646str',
	  0x1b: 'genstr',
	  0x1c: 'unistr',
	  0x1d: 'charstr',
	  0x1e: 'bmpstr'
	};
	exports.tagByName = reverse(exports.tag);
	}(der$2));

	const inherits$4 = inherits_browser.exports;
	const Buffer$f = safer_1.Buffer;
	const Node$1 = node;

	// Import DER constants
	const der$1 = der$2;

	function DEREncoder$1(entity) {
	  this.enc = 'der';
	  this.name = entity.name;
	  this.entity = entity;

	  // Construct base tree
	  this.tree = new DERNode$1();
	  this.tree._init(entity.body);
	}
	var der_1$1 = DEREncoder$1;

	DEREncoder$1.prototype.encode = function encode(data, reporter) {
	  return this.tree._encode(data, reporter).join();
	};

	// Tree methods

	function DERNode$1(parent) {
	  Node$1.call(this, 'der', parent);
	}
	inherits$4(DERNode$1, Node$1);

	DERNode$1.prototype._encodeComposite = function encodeComposite(tag,
	  primitive,
	  cls,
	  content) {
	  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

	  // Short form
	  if (content.length < 0x80) {
	    const header = Buffer$f.alloc(2);
	    header[0] = encodedTag;
	    header[1] = content.length;
	    return this._createEncoderBuffer([ header, content ]);
	  }

	  // Long form
	  // Count octets required to store length
	  let lenOctets = 1;
	  for (let i = content.length; i >= 0x100; i >>= 8)
	    lenOctets++;

	  const header = Buffer$f.alloc(1 + 1 + lenOctets);
	  header[0] = encodedTag;
	  header[1] = 0x80 | lenOctets;

	  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
	    header[i] = j & 0xff;

	  return this._createEncoderBuffer([ header, content ]);
	};

	DERNode$1.prototype._encodeStr = function encodeStr(str, tag) {
	  if (tag === 'bitstr') {
	    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
	  } else if (tag === 'bmpstr') {
	    const buf = Buffer$f.alloc(str.length * 2);
	    for (let i = 0; i < str.length; i++) {
	      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
	    }
	    return this._createEncoderBuffer(buf);
	  } else if (tag === 'numstr') {
	    if (!this._isNumstr(str)) {
	      return this.reporter.error('Encoding of string type: numstr supports ' +
	                                 'only digits and space');
	    }
	    return this._createEncoderBuffer(str);
	  } else if (tag === 'printstr') {
	    if (!this._isPrintstr(str)) {
	      return this.reporter.error('Encoding of string type: printstr supports ' +
	                                 'only latin upper and lower case letters, ' +
	                                 'digits, space, apostrophe, left and rigth ' +
	                                 'parenthesis, plus sign, comma, hyphen, ' +
	                                 'dot, slash, colon, equal sign, ' +
	                                 'question mark');
	    }
	    return this._createEncoderBuffer(str);
	  } else if (/str$/.test(tag)) {
	    return this._createEncoderBuffer(str);
	  } else if (tag === 'objDesc') {
	    return this._createEncoderBuffer(str);
	  } else {
	    return this.reporter.error('Encoding of string type: ' + tag +
	                               ' unsupported');
	  }
	};

	DERNode$1.prototype._encodeObjid = function encodeObjid(id, values, relative) {
	  if (typeof id === 'string') {
	    if (!values)
	      return this.reporter.error('string objid given, but no values map found');
	    if (!values.hasOwnProperty(id))
	      return this.reporter.error('objid not found in values map');
	    id = values[id].split(/[\s.]+/g);
	    for (let i = 0; i < id.length; i++)
	      id[i] |= 0;
	  } else if (Array.isArray(id)) {
	    id = id.slice();
	    for (let i = 0; i < id.length; i++)
	      id[i] |= 0;
	  }

	  if (!Array.isArray(id)) {
	    return this.reporter.error('objid() should be either array or string, ' +
	                               'got: ' + JSON.stringify(id));
	  }

	  if (!relative) {
	    if (id[1] >= 40)
	      return this.reporter.error('Second objid identifier OOB');
	    id.splice(0, 2, id[0] * 40 + id[1]);
	  }

	  // Count number of octets
	  let size = 0;
	  for (let i = 0; i < id.length; i++) {
	    let ident = id[i];
	    for (size++; ident >= 0x80; ident >>= 7)
	      size++;
	  }

	  const objid = Buffer$f.alloc(size);
	  let offset = objid.length - 1;
	  for (let i = id.length - 1; i >= 0; i--) {
	    let ident = id[i];
	    objid[offset--] = ident & 0x7f;
	    while ((ident >>= 7) > 0)
	      objid[offset--] = 0x80 | (ident & 0x7f);
	  }

	  return this._createEncoderBuffer(objid);
	};

	function two(num) {
	  if (num < 10)
	    return '0' + num;
	  else
	    return num;
	}

	DERNode$1.prototype._encodeTime = function encodeTime(time, tag) {
	  let str;
	  const date = new Date(time);

	  if (tag === 'gentime') {
	    str = [
	      two(date.getUTCFullYear()),
	      two(date.getUTCMonth() + 1),
	      two(date.getUTCDate()),
	      two(date.getUTCHours()),
	      two(date.getUTCMinutes()),
	      two(date.getUTCSeconds()),
	      'Z'
	    ].join('');
	  } else if (tag === 'utctime') {
	    str = [
	      two(date.getUTCFullYear() % 100),
	      two(date.getUTCMonth() + 1),
	      two(date.getUTCDate()),
	      two(date.getUTCHours()),
	      two(date.getUTCMinutes()),
	      two(date.getUTCSeconds()),
	      'Z'
	    ].join('');
	  } else {
	    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
	  }

	  return this._encodeStr(str, 'octstr');
	};

	DERNode$1.prototype._encodeNull = function encodeNull() {
	  return this._createEncoderBuffer('');
	};

	DERNode$1.prototype._encodeInt = function encodeInt(num, values) {
	  if (typeof num === 'string') {
	    if (!values)
	      return this.reporter.error('String int or enum given, but no values map');
	    if (!values.hasOwnProperty(num)) {
	      return this.reporter.error('Values map doesn\'t contain: ' +
	                                 JSON.stringify(num));
	    }
	    num = values[num];
	  }

	  // Bignum, assume big endian
	  if (typeof num !== 'number' && !Buffer$f.isBuffer(num)) {
	    const numArray = num.toArray();
	    if (!num.sign && numArray[0] & 0x80) {
	      numArray.unshift(0);
	    }
	    num = Buffer$f.from(numArray);
	  }

	  if (Buffer$f.isBuffer(num)) {
	    let size = num.length;
	    if (num.length === 0)
	      size++;

	    const out = Buffer$f.alloc(size);
	    num.copy(out);
	    if (num.length === 0)
	      out[0] = 0;
	    return this._createEncoderBuffer(out);
	  }

	  if (num < 0x80)
	    return this._createEncoderBuffer(num);

	  if (num < 0x100)
	    return this._createEncoderBuffer([0, num]);

	  let size = 1;
	  for (let i = num; i >= 0x100; i >>= 8)
	    size++;

	  const out = new Array(size);
	  for (let i = out.length - 1; i >= 0; i--) {
	    out[i] = num & 0xff;
	    num >>= 8;
	  }
	  if(out[0] & 0x80) {
	    out.unshift(0);
	  }

	  return this._createEncoderBuffer(Buffer$f.from(out));
	};

	DERNode$1.prototype._encodeBool = function encodeBool(value) {
	  return this._createEncoderBuffer(value ? 0xff : 0);
	};

	DERNode$1.prototype._use = function use(entity, obj) {
	  if (typeof entity === 'function')
	    entity = entity(obj);
	  return entity._getEncoder('der').tree;
	};

	DERNode$1.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
	  const state = this._baseState;
	  let i;
	  if (state['default'] === null)
	    return false;

	  const data = dataBuffer.join();
	  if (state.defaultBuffer === undefined)
	    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

	  if (data.length !== state.defaultBuffer.length)
	    return false;

	  for (i=0; i < data.length; i++)
	    if (data[i] !== state.defaultBuffer[i])
	      return false;

	  return true;
	};

	// Utility methods

	function encodeTag(tag, primitive, cls, reporter) {
	  let res;

	  if (tag === 'seqof')
	    tag = 'seq';
	  else if (tag === 'setof')
	    tag = 'set';

	  if (der$1.tagByName.hasOwnProperty(tag))
	    res = der$1.tagByName[tag];
	  else if (typeof tag === 'number' && (tag | 0) === tag)
	    res = tag;
	  else
	    return reporter.error('Unknown tag: ' + tag);

	  if (res >= 0x1f)
	    return reporter.error('Multi-octet tag encoding unsupported');

	  if (!primitive)
	    res |= 0x20;

	  res |= (der$1.tagClassByName[cls || 'universal'] << 6);

	  return res;
	}

	const inherits$3 = inherits_browser.exports;

	const DEREncoder = der_1$1;

	function PEMEncoder(entity) {
	  DEREncoder.call(this, entity);
	  this.enc = 'pem';
	}
	inherits$3(PEMEncoder, DEREncoder);
	var pem$1 = PEMEncoder;

	PEMEncoder.prototype.encode = function encode(data, options) {
	  const buf = DEREncoder.prototype.encode.call(this, data);

	  const p = buf.toString('base64');
	  const out = [ '-----BEGIN ' + options.label + '-----' ];
	  for (let i = 0; i < p.length; i += 64)
	    out.push(p.slice(i, i + 64));
	  out.push('-----END ' + options.label + '-----');
	  return out.join('\n');
	};

	(function (exports) {

	const encoders = exports;

	encoders.der = der_1$1;
	encoders.pem = pem$1;
	}(encoders));

	var decoders = {};

	const inherits$2 = inherits_browser.exports;

	const bignum = bn$1.exports;
	const DecoderBuffer = buffer$1.DecoderBuffer;
	const Node = node;

	// Import DER constants
	const der = der$2;

	function DERDecoder$1(entity) {
	  this.enc = 'der';
	  this.name = entity.name;
	  this.entity = entity;

	  // Construct base tree
	  this.tree = new DERNode();
	  this.tree._init(entity.body);
	}
	var der_1 = DERDecoder$1;

	DERDecoder$1.prototype.decode = function decode(data, options) {
	  if (!DecoderBuffer.isDecoderBuffer(data)) {
	    data = new DecoderBuffer(data, options);
	  }

	  return this.tree._decode(data, options);
	};

	// Tree methods

	function DERNode(parent) {
	  Node.call(this, 'der', parent);
	}
	inherits$2(DERNode, Node);

	DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
	  if (buffer.isEmpty())
	    return false;

	  const state = buffer.save();
	  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
	  if (buffer.isError(decodedTag))
	    return decodedTag;

	  buffer.restore(state);

	  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
	    (decodedTag.tagStr + 'of') === tag || any;
	};

	DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
	  const decodedTag = derDecodeTag(buffer,
	    'Failed to decode tag of "' + tag + '"');
	  if (buffer.isError(decodedTag))
	    return decodedTag;

	  let len = derDecodeLen(buffer,
	    decodedTag.primitive,
	    'Failed to get length of "' + tag + '"');

	  // Failure
	  if (buffer.isError(len))
	    return len;

	  if (!any &&
	      decodedTag.tag !== tag &&
	      decodedTag.tagStr !== tag &&
	      decodedTag.tagStr + 'of' !== tag) {
	    return buffer.error('Failed to match tag: "' + tag + '"');
	  }

	  if (decodedTag.primitive || len !== null)
	    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

	  // Indefinite length... find END tag
	  const state = buffer.save();
	  const res = this._skipUntilEnd(
	    buffer,
	    'Failed to skip indefinite length body: "' + this.tag + '"');
	  if (buffer.isError(res))
	    return res;

	  len = buffer.offset - state.offset;
	  buffer.restore(state);
	  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
	};

	DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
	  for (;;) {
	    const tag = derDecodeTag(buffer, fail);
	    if (buffer.isError(tag))
	      return tag;
	    const len = derDecodeLen(buffer, tag.primitive, fail);
	    if (buffer.isError(len))
	      return len;

	    let res;
	    if (tag.primitive || len !== null)
	      res = buffer.skip(len);
	    else
	      res = this._skipUntilEnd(buffer, fail);

	    // Failure
	    if (buffer.isError(res))
	      return res;

	    if (tag.tagStr === 'end')
	      break;
	  }
	};

	DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
	  options) {
	  const result = [];
	  while (!buffer.isEmpty()) {
	    const possibleEnd = this._peekTag(buffer, 'end');
	    if (buffer.isError(possibleEnd))
	      return possibleEnd;

	    const res = decoder.decode(buffer, 'der', options);
	    if (buffer.isError(res) && possibleEnd)
	      break;
	    result.push(res);
	  }
	  return result;
	};

	DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
	  if (tag === 'bitstr') {
	    const unused = buffer.readUInt8();
	    if (buffer.isError(unused))
	      return unused;
	    return { unused: unused, data: buffer.raw() };
	  } else if (tag === 'bmpstr') {
	    const raw = buffer.raw();
	    if (raw.length % 2 === 1)
	      return buffer.error('Decoding of string type: bmpstr length mismatch');

	    let str = '';
	    for (let i = 0; i < raw.length / 2; i++) {
	      str += String.fromCharCode(raw.readUInt16BE(i * 2));
	    }
	    return str;
	  } else if (tag === 'numstr') {
	    const numstr = buffer.raw().toString('ascii');
	    if (!this._isNumstr(numstr)) {
	      return buffer.error('Decoding of string type: ' +
	                          'numstr unsupported characters');
	    }
	    return numstr;
	  } else if (tag === 'octstr') {
	    return buffer.raw();
	  } else if (tag === 'objDesc') {
	    return buffer.raw();
	  } else if (tag === 'printstr') {
	    const printstr = buffer.raw().toString('ascii');
	    if (!this._isPrintstr(printstr)) {
	      return buffer.error('Decoding of string type: ' +
	                          'printstr unsupported characters');
	    }
	    return printstr;
	  } else if (/str$/.test(tag)) {
	    return buffer.raw().toString();
	  } else {
	    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
	  }
	};

	DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
	  let result;
	  const identifiers = [];
	  let ident = 0;
	  let subident = 0;
	  while (!buffer.isEmpty()) {
	    subident = buffer.readUInt8();
	    ident <<= 7;
	    ident |= subident & 0x7f;
	    if ((subident & 0x80) === 0) {
	      identifiers.push(ident);
	      ident = 0;
	    }
	  }
	  if (subident & 0x80)
	    identifiers.push(ident);

	  const first = (identifiers[0] / 40) | 0;
	  const second = identifiers[0] % 40;

	  if (relative)
	    result = identifiers;
	  else
	    result = [first, second].concat(identifiers.slice(1));

	  if (values) {
	    let tmp = values[result.join(' ')];
	    if (tmp === undefined)
	      tmp = values[result.join('.')];
	    if (tmp !== undefined)
	      result = tmp;
	  }

	  return result;
	};

	DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
	  const str = buffer.raw().toString();

	  let year;
	  let mon;
	  let day;
	  let hour;
	  let min;
	  let sec;
	  if (tag === 'gentime') {
	    year = str.slice(0, 4) | 0;
	    mon = str.slice(4, 6) | 0;
	    day = str.slice(6, 8) | 0;
	    hour = str.slice(8, 10) | 0;
	    min = str.slice(10, 12) | 0;
	    sec = str.slice(12, 14) | 0;
	  } else if (tag === 'utctime') {
	    year = str.slice(0, 2) | 0;
	    mon = str.slice(2, 4) | 0;
	    day = str.slice(4, 6) | 0;
	    hour = str.slice(6, 8) | 0;
	    min = str.slice(8, 10) | 0;
	    sec = str.slice(10, 12) | 0;
	    if (year < 70)
	      year = 2000 + year;
	    else
	      year = 1900 + year;
	  } else {
	    return buffer.error('Decoding ' + tag + ' time is not supported yet');
	  }

	  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
	};

	DERNode.prototype._decodeNull = function decodeNull() {
	  return null;
	};

	DERNode.prototype._decodeBool = function decodeBool(buffer) {
	  const res = buffer.readUInt8();
	  if (buffer.isError(res))
	    return res;
	  else
	    return res !== 0;
	};

	DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
	  // Bigint, return as it is (assume big endian)
	  const raw = buffer.raw();
	  let res = new bignum(raw);

	  if (values)
	    res = values[res.toString(10)] || res;

	  return res;
	};

	DERNode.prototype._use = function use(entity, obj) {
	  if (typeof entity === 'function')
	    entity = entity(obj);
	  return entity._getDecoder('der').tree;
	};

	// Utility methods

	function derDecodeTag(buf, fail) {
	  let tag = buf.readUInt8(fail);
	  if (buf.isError(tag))
	    return tag;

	  const cls = der.tagClass[tag >> 6];
	  const primitive = (tag & 0x20) === 0;

	  // Multi-octet tag - load
	  if ((tag & 0x1f) === 0x1f) {
	    let oct = tag;
	    tag = 0;
	    while ((oct & 0x80) === 0x80) {
	      oct = buf.readUInt8(fail);
	      if (buf.isError(oct))
	        return oct;

	      tag <<= 7;
	      tag |= oct & 0x7f;
	    }
	  } else {
	    tag &= 0x1f;
	  }
	  const tagStr = der.tag[tag];

	  return {
	    cls: cls,
	    primitive: primitive,
	    tag: tag,
	    tagStr: tagStr
	  };
	}

	function derDecodeLen(buf, primitive, fail) {
	  let len = buf.readUInt8(fail);
	  if (buf.isError(len))
	    return len;

	  // Indefinite form
	  if (!primitive && len === 0x80)
	    return null;

	  // Definite form
	  if ((len & 0x80) === 0) {
	    // Short form
	    return len;
	  }

	  // Long form
	  const num = len & 0x7f;
	  if (num > 4)
	    return buf.error('length octect is too long');

	  len = 0;
	  for (let i = 0; i < num; i++) {
	    len <<= 8;
	    const j = buf.readUInt8(fail);
	    if (buf.isError(j))
	      return j;
	    len |= j;
	  }

	  return len;
	}

	const inherits$1 = inherits_browser.exports;
	const Buffer$e = safer_1.Buffer;

	const DERDecoder = der_1;

	function PEMDecoder(entity) {
	  DERDecoder.call(this, entity);
	  this.enc = 'pem';
	}
	inherits$1(PEMDecoder, DERDecoder);
	var pem = PEMDecoder;

	PEMDecoder.prototype.decode = function decode(data, options) {
	  const lines = data.toString().split(/[\r\n]+/g);

	  const label = options.label.toUpperCase();

	  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
	  let start = -1;
	  let end = -1;
	  for (let i = 0; i < lines.length; i++) {
	    const match = lines[i].match(re);
	    if (match === null)
	      continue;

	    if (match[2] !== label)
	      continue;

	    if (start === -1) {
	      if (match[1] !== 'BEGIN')
	        break;
	      start = i;
	    } else {
	      if (match[1] !== 'END')
	        break;
	      end = i;
	      break;
	    }
	  }
	  if (start === -1 || end === -1)
	    throw new Error('PEM section not found for: ' + label);

	  const base64 = lines.slice(start + 1, end).join('');
	  // Remove excessive symbols
	  base64.replace(/[^a-z0-9+/=]+/gi, '');

	  const input = Buffer$e.from(base64, 'base64');
	  return DERDecoder.prototype.decode.call(this, input, options);
	};

	(function (exports) {

	const decoders = exports;

	decoders.der = der_1;
	decoders.pem = pem;
	}(decoders));

	(function (exports) {

	const encoders$1 = encoders;
	const decoders$1 = decoders;
	const inherits = inherits_browser.exports;

	const api = exports;

	api.define = function define(name, body) {
	  return new Entity(name, body);
	};

	function Entity(name, body) {
	  this.name = name;
	  this.body = body;

	  this.decoders = {};
	  this.encoders = {};
	}

	Entity.prototype._createNamed = function createNamed(Base) {
	  const name = this.name;

	  function Generated(entity) {
	    this._initNamed(entity, name);
	  }
	  inherits(Generated, Base);
	  Generated.prototype._initNamed = function _initNamed(entity, name) {
	    Base.call(this, entity, name);
	  };

	  return new Generated(this);
	};

	Entity.prototype._getDecoder = function _getDecoder(enc) {
	  enc = enc || 'der';
	  // Lazily create decoder
	  if (!this.decoders.hasOwnProperty(enc))
	    this.decoders[enc] = this._createNamed(decoders$1[enc]);
	  return this.decoders[enc];
	};

	Entity.prototype.decode = function decode(data, enc, options) {
	  return this._getDecoder(enc).decode(data, options);
	};

	Entity.prototype._getEncoder = function _getEncoder(enc) {
	  enc = enc || 'der';
	  // Lazily create encoder
	  if (!this.encoders.hasOwnProperty(enc))
	    this.encoders[enc] = this._createNamed(encoders$1[enc]);
	  return this.encoders[enc];
	};

	Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
	  return this._getEncoder(enc).encode(data, reporter);
	};
	}(api));

	var base$1 = {};

	(function (exports) {

	const base = exports;

	base.Reporter = reporter.Reporter;
	base.DecoderBuffer = buffer$1.DecoderBuffer;
	base.EncoderBuffer = buffer$1.EncoderBuffer;
	base.Node = node;
	}(base$1));

	var constants = {};

	(function (exports) {

	const constants = exports;

	// Helper
	constants._reverse = function reverse(map) {
	  const res = {};

	  Object.keys(map).forEach(function(key) {
	    // Convert key to integer if it is stringified
	    if ((key | 0) == key)
	      key = key | 0;

	    const value = map[key];
	    res[value] = key;
	  });

	  return res;
	};

	constants.der = der$2;
	}(constants));

	(function (exports) {

	const asn1 = exports;

	asn1.bignum = bn$1.exports;

	asn1.define = api.define;
	asn1.base = base$1;
	asn1.constants = constants;
	asn1.decoders = decoders;
	asn1.encoders = encoders;
	}(asn1$2));

	var asn = asn1$2;

	var Time = asn.define('Time', function () {
	  this.choice({
	    utcTime: this.utctime(),
	    generalTime: this.gentime()
	  });
	});

	var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
	  this.seq().obj(
	    this.key('type').objid(),
	    this.key('value').any()
	  );
	});

	var AlgorithmIdentifier$1 = asn.define('AlgorithmIdentifier', function () {
	  this.seq().obj(
	    this.key('algorithm').objid(),
	    this.key('parameters').optional(),
	    this.key('curve').objid().optional()
	  );
	});

	var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
	  this.seq().obj(
	    this.key('algorithm').use(AlgorithmIdentifier$1),
	    this.key('subjectPublicKey').bitstr()
	  );
	});

	var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
	  this.setof(AttributeTypeValue);
	});

	var RDNSequence = asn.define('RDNSequence', function () {
	  this.seqof(RelativeDistinguishedName);
	});

	var Name = asn.define('Name', function () {
	  this.choice({
	    rdnSequence: this.use(RDNSequence)
	  });
	});

	var Validity = asn.define('Validity', function () {
	  this.seq().obj(
	    this.key('notBefore').use(Time),
	    this.key('notAfter').use(Time)
	  );
	});

	var Extension = asn.define('Extension', function () {
	  this.seq().obj(
	    this.key('extnID').objid(),
	    this.key('critical').bool().def(false),
	    this.key('extnValue').octstr()
	  );
	});

	var TBSCertificate = asn.define('TBSCertificate', function () {
	  this.seq().obj(
	    this.key('version').explicit(0).int().optional(),
	    this.key('serialNumber').int(),
	    this.key('signature').use(AlgorithmIdentifier$1),
	    this.key('issuer').use(Name),
	    this.key('validity').use(Validity),
	    this.key('subject').use(Name),
	    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
	    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
	    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
	    this.key('extensions').explicit(3).seqof(Extension).optional()
	  );
	});

	var X509Certificate = asn.define('X509Certificate', function () {
	  this.seq().obj(
	    this.key('tbsCertificate').use(TBSCertificate),
	    this.key('signatureAlgorithm').use(AlgorithmIdentifier$1),
	    this.key('signatureValue').bitstr()
	  );
	});

	var certificate = X509Certificate;

	var asn1$1 = asn1$2;

	asn1$3.certificate = certificate;

	var RSAPrivateKey$1 = asn1$1.define('RSAPrivateKey', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('modulus').int(),
	    this.key('publicExponent').int(),
	    this.key('privateExponent').int(),
	    this.key('prime1').int(),
	    this.key('prime2').int(),
	    this.key('exponent1').int(),
	    this.key('exponent2').int(),
	    this.key('coefficient').int()
	  );
	});
	asn1$3.RSAPrivateKey = RSAPrivateKey$1;

	var RSAPublicKey$1 = asn1$1.define('RSAPublicKey', function () {
	  this.seq().obj(
	    this.key('modulus').int(),
	    this.key('publicExponent').int()
	  );
	});
	asn1$3.RSAPublicKey = RSAPublicKey$1;

	var PublicKey = asn1$1.define('SubjectPublicKeyInfo', function () {
	  this.seq().obj(
	    this.key('algorithm').use(AlgorithmIdentifier),
	    this.key('subjectPublicKey').bitstr()
	  );
	});
	asn1$3.PublicKey = PublicKey;

	var AlgorithmIdentifier = asn1$1.define('AlgorithmIdentifier', function () {
	  this.seq().obj(
	    this.key('algorithm').objid(),
	    this.key('none').null_().optional(),
	    this.key('curve').objid().optional(),
	    this.key('params').seq().obj(
	      this.key('p').int(),
	      this.key('q').int(),
	      this.key('g').int()
	    ).optional()
	  );
	});

	var PrivateKeyInfo = asn1$1.define('PrivateKeyInfo', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('algorithm').use(AlgorithmIdentifier),
	    this.key('subjectPrivateKey').octstr()
	  );
	});
	asn1$3.PrivateKey = PrivateKeyInfo;
	var EncryptedPrivateKeyInfo = asn1$1.define('EncryptedPrivateKeyInfo', function () {
	  this.seq().obj(
	    this.key('algorithm').seq().obj(
	      this.key('id').objid(),
	      this.key('decrypt').seq().obj(
	        this.key('kde').seq().obj(
	          this.key('id').objid(),
	          this.key('kdeparams').seq().obj(
	            this.key('salt').octstr(),
	            this.key('iters').int()
	          )
	        ),
	        this.key('cipher').seq().obj(
	          this.key('algo').objid(),
	          this.key('iv').octstr()
	        )
	      )
	    ),
	    this.key('subjectPrivateKey').octstr()
	  );
	});

	asn1$3.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

	var DSAPrivateKey = asn1$1.define('DSAPrivateKey', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('p').int(),
	    this.key('q').int(),
	    this.key('g').int(),
	    this.key('pub_key').int(),
	    this.key('priv_key').int()
	  );
	});
	asn1$3.DSAPrivateKey = DSAPrivateKey;

	asn1$3.DSAparam = asn1$1.define('DSAparam', function () {
	  this.int();
	});

	var ECPrivateKey$1 = asn1$1.define('ECPrivateKey', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('privateKey').octstr(),
	    this.key('parameters').optional().explicit(0).use(ECParameters$1),
	    this.key('publicKey').optional().explicit(1).bitstr()
	  );
	});
	asn1$3.ECPrivateKey = ECPrivateKey$1;

	var ECParameters$1 = asn1$1.define('ECParameters', function () {
	  this.choice({
	    namedCurve: this.objid()
	  });
	});

	asn1$3.signature = asn1$1.define('signature', function () {
	  this.seq().obj(
	    this.key('r').int(),
	    this.key('s').int()
	  );
	});

	var require$$1$1 = {
		"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
		"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
		"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
		"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
		"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
		"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
		"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
		"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
		"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
		"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
		"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
		"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
	};

	// adapted from https://github.com/apatil/pemstrip
	var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
	var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
	var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
	var evp = evp_bytestokey;
	var ciphers$2 = browser$7;
	var Buffer$d = safeBuffer$1.exports.Buffer;
	var fixProc$1 = function (okey, password) {
	  var key = okey.toString();
	  var match = key.match(findProc);
	  var decrypted;
	  if (!match) {
	    var match2 = key.match(fullRegex);
	    decrypted = Buffer$d.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
	  } else {
	    var suite = 'aes' + match[1];
	    var iv = Buffer$d.from(match[2], 'hex');
	    var cipherText = Buffer$d.from(match[3].replace(/[\r\n]/g, ''), 'base64');
	    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
	    var out = [];
	    var cipher = ciphers$2.createDecipheriv(suite, cipherKey, iv);
	    out.push(cipher.update(cipherText));
	    out.push(cipher.final());
	    decrypted = Buffer$d.concat(out);
	  }
	  var tag = key.match(startRegex)[1];
	  return {
	    tag: tag,
	    data: decrypted
	  }
	};

	var asn1 = asn1$3;
	var aesid = require$$1$1;
	var fixProc = fixProc$1;
	var ciphers$1 = browser$7;
	var compat = browser$9;
	var Buffer$c = safeBuffer$1.exports.Buffer;
	var parseAsn1 = parseKeys$4;

	function parseKeys$4 (buffer) {
	  var password;
	  if (typeof buffer === 'object' && !Buffer$c.isBuffer(buffer)) {
	    password = buffer.passphrase;
	    buffer = buffer.key;
	  }
	  if (typeof buffer === 'string') {
	    buffer = Buffer$c.from(buffer);
	  }

	  var stripped = fixProc(buffer, password);

	  var type = stripped.tag;
	  var data = stripped.data;
	  var subtype, ndata;
	  switch (type) {
	    case 'CERTIFICATE':
	      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
	      // falls through
	    case 'PUBLIC KEY':
	      if (!ndata) {
	        ndata = asn1.PublicKey.decode(data, 'der');
	      }
	      subtype = ndata.algorithm.algorithm.join('.');
	      switch (subtype) {
	        case '1.2.840.113549.1.1.1':
	          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
	        case '1.2.840.10045.2.1':
	          ndata.subjectPrivateKey = ndata.subjectPublicKey;
	          return {
	            type: 'ec',
	            data: ndata
	          }
	        case '1.2.840.10040.4.1':
	          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
	          return {
	            type: 'dsa',
	            data: ndata.algorithm.params
	          }
	        default: throw new Error('unknown key id ' + subtype)
	      }
	      // throw new Error('unknown key type ' + type)
	    case 'ENCRYPTED PRIVATE KEY':
	      data = asn1.EncryptedPrivateKey.decode(data, 'der');
	      data = decrypt$2(data, password);
	      // falls through
	    case 'PRIVATE KEY':
	      ndata = asn1.PrivateKey.decode(data, 'der');
	      subtype = ndata.algorithm.algorithm.join('.');
	      switch (subtype) {
	        case '1.2.840.113549.1.1.1':
	          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
	        case '1.2.840.10045.2.1':
	          return {
	            curve: ndata.algorithm.curve,
	            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
	          }
	        case '1.2.840.10040.4.1':
	          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
	          return {
	            type: 'dsa',
	            params: ndata.algorithm.params
	          }
	        default: throw new Error('unknown key id ' + subtype)
	      }
	      // throw new Error('unknown key type ' + type)
	    case 'RSA PUBLIC KEY':
	      return asn1.RSAPublicKey.decode(data, 'der')
	    case 'RSA PRIVATE KEY':
	      return asn1.RSAPrivateKey.decode(data, 'der')
	    case 'DSA PRIVATE KEY':
	      return {
	        type: 'dsa',
	        params: asn1.DSAPrivateKey.decode(data, 'der')
	      }
	    case 'EC PRIVATE KEY':
	      data = asn1.ECPrivateKey.decode(data, 'der');
	      return {
	        curve: data.parameters.value,
	        privateKey: data.privateKey
	      }
	    default: throw new Error('unknown key type ' + type)
	  }
	}
	parseKeys$4.signature = asn1.signature;
	function decrypt$2 (data, password) {
	  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
	  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
	  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
	  var iv = data.algorithm.decrypt.cipher.iv;
	  var cipherText = data.subjectPrivateKey;
	  var keylen = parseInt(algo.split('-')[1], 10) / 8;
	  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
	  var cipher = ciphers$1.createDecipheriv(algo, key, iv);
	  var out = [];
	  out.push(cipher.update(cipherText));
	  out.push(cipher.final());
	  return Buffer$c.concat(out)
	}

	var require$$4$1 = {
		"1.3.132.0.10": "secp256k1",
		"1.3.132.0.33": "p224",
		"1.2.840.10045.3.1.1": "p192",
		"1.2.840.10045.3.1.7": "p256",
		"1.3.132.0.34": "p384",
		"1.3.132.0.35": "p521"
	};

	// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
	var Buffer$b = safeBuffer$1.exports.Buffer;
	var createHmac$1 = browser$a;
	var crt$2 = browserifyRsa;
	var EC$1 = elliptic$2.ec;
	var BN$6 = bn$1.exports;
	var parseKeys$3 = parseAsn1;
	var curves$1 = require$$4$1;

	function sign$3 (hash, key, hashType, signType, tag) {
	  var priv = parseKeys$3(key);
	  if (priv.curve) {
	    // rsa keys can be interpreted as ecdsa ones in openssl
	    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
	    return ecSign(hash, priv)
	  } else if (priv.type === 'dsa') {
	    if (signType !== 'dsa') throw new Error('wrong private key type')
	    return dsaSign(hash, priv, hashType)
	  } else {
	    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
	  }
	  hash = Buffer$b.concat([tag, hash]);
	  var len = priv.modulus.byteLength();
	  var pad = [0, 1];
	  while (hash.length + pad.length + 1 < len) pad.push(0xff);
	  pad.push(0x00);
	  var i = -1;
	  while (++i < hash.length) pad.push(hash[i]);

	  var out = crt$2(pad, priv);
	  return out
	}

	function ecSign (hash, priv) {
	  var curveId = curves$1[priv.curve.join('.')];
	  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

	  var curve = new EC$1(curveId);
	  var key = curve.keyFromPrivate(priv.privateKey);
	  var out = key.sign(hash);

	  return Buffer$b.from(out.toDER())
	}

	function dsaSign (hash, priv, algo) {
	  var x = priv.params.priv_key;
	  var p = priv.params.p;
	  var q = priv.params.q;
	  var g = priv.params.g;
	  var r = new BN$6(0);
	  var k;
	  var H = bits2int(hash, q).mod(q);
	  var s = false;
	  var kv = getKey(x, q, hash, algo);
	  while (s === false) {
	    k = makeKey(q, kv, algo);
	    r = makeR(g, k, p, q);
	    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
	    if (s.cmpn(0) === 0) {
	      s = false;
	      r = new BN$6(0);
	    }
	  }
	  return toDER(r, s)
	}

	function toDER (r, s) {
	  r = r.toArray();
	  s = s.toArray();

	  // Pad values
	  if (r[0] & 0x80) r = [0].concat(r);
	  if (s[0] & 0x80) s = [0].concat(s);

	  var total = r.length + s.length + 4;
	  var res = [0x30, total, 0x02, r.length];
	  res = res.concat(r, [0x02, s.length], s);
	  return Buffer$b.from(res)
	}

	function getKey (x, q, hash, algo) {
	  x = Buffer$b.from(x.toArray());
	  if (x.length < q.byteLength()) {
	    var zeros = Buffer$b.alloc(q.byteLength() - x.length);
	    x = Buffer$b.concat([zeros, x]);
	  }
	  var hlen = hash.length;
	  var hbits = bits2octets(hash, q);
	  var v = Buffer$b.alloc(hlen);
	  v.fill(1);
	  var k = Buffer$b.alloc(hlen);
	  k = createHmac$1(algo, k).update(v).update(Buffer$b.from([0])).update(x).update(hbits).digest();
	  v = createHmac$1(algo, k).update(v).digest();
	  k = createHmac$1(algo, k).update(v).update(Buffer$b.from([1])).update(x).update(hbits).digest();
	  v = createHmac$1(algo, k).update(v).digest();
	  return { k: k, v: v }
	}

	function bits2int (obits, q) {
	  var bits = new BN$6(obits);
	  var shift = (obits.length << 3) - q.bitLength();
	  if (shift > 0) bits.ishrn(shift);
	  return bits
	}

	function bits2octets (bits, q) {
	  bits = bits2int(bits, q);
	  bits = bits.mod(q);
	  var out = Buffer$b.from(bits.toArray());
	  if (out.length < q.byteLength()) {
	    var zeros = Buffer$b.alloc(q.byteLength() - out.length);
	    out = Buffer$b.concat([zeros, out]);
	  }
	  return out
	}

	function makeKey (q, kv, algo) {
	  var t;
	  var k;

	  do {
	    t = Buffer$b.alloc(0);

	    while (t.length * 8 < q.bitLength()) {
	      kv.v = createHmac$1(algo, kv.k).update(kv.v).digest();
	      t = Buffer$b.concat([t, kv.v]);
	    }

	    k = bits2int(t, q);
	    kv.k = createHmac$1(algo, kv.k).update(kv.v).update(Buffer$b.from([0])).digest();
	    kv.v = createHmac$1(algo, kv.k).update(kv.v).digest();
	  } while (k.cmp(q) !== -1)

	  return k
	}

	function makeR (g, k, p, q) {
	  return g.toRed(BN$6.mont(p)).redPow(k).fromRed().mod(q)
	}

	sign$4.exports = sign$3;
	sign$4.exports.getKey = getKey;
	sign$4.exports.makeKey = makeKey;

	// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
	var Buffer$a = safeBuffer$1.exports.Buffer;
	var BN$5 = bn$1.exports;
	var EC = elliptic$2.ec;
	var parseKeys$2 = parseAsn1;
	var curves = require$$4$1;

	function verify$2 (sig, hash, key, signType, tag) {
	  var pub = parseKeys$2(key);
	  if (pub.type === 'ec') {
	    // rsa keys can be interpreted as ecdsa ones in openssl
	    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
	    return ecVerify(sig, hash, pub)
	  } else if (pub.type === 'dsa') {
	    if (signType !== 'dsa') throw new Error('wrong public key type')
	    return dsaVerify(sig, hash, pub)
	  } else {
	    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
	  }
	  hash = Buffer$a.concat([tag, hash]);
	  var len = pub.modulus.byteLength();
	  var pad = [1];
	  var padNum = 0;
	  while (hash.length + pad.length + 2 < len) {
	    pad.push(0xff);
	    padNum++;
	  }
	  pad.push(0x00);
	  var i = -1;
	  while (++i < hash.length) {
	    pad.push(hash[i]);
	  }
	  pad = Buffer$a.from(pad);
	  var red = BN$5.mont(pub.modulus);
	  sig = new BN$5(sig).toRed(red);

	  sig = sig.redPow(new BN$5(pub.publicExponent));
	  sig = Buffer$a.from(sig.fromRed().toArray());
	  var out = padNum < 8 ? 1 : 0;
	  len = Math.min(sig.length, pad.length);
	  if (sig.length !== pad.length) out = 1;

	  i = -1;
	  while (++i < len) out |= sig[i] ^ pad[i];
	  return out === 0
	}

	function ecVerify (sig, hash, pub) {
	  var curveId = curves[pub.data.algorithm.curve.join('.')];
	  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

	  var curve = new EC(curveId);
	  var pubkey = pub.data.subjectPrivateKey.data;

	  return curve.verify(hash, sig, pubkey)
	}

	function dsaVerify (sig, hash, pub) {
	  var p = pub.data.p;
	  var q = pub.data.q;
	  var g = pub.data.g;
	  var y = pub.data.pub_key;
	  var unpacked = parseKeys$2.signature.decode(sig, 'der');
	  var s = unpacked.s;
	  var r = unpacked.r;
	  checkValue(s, q);
	  checkValue(r, q);
	  var montp = BN$5.mont(p);
	  var w = s.invm(q);
	  var v = g.toRed(montp)
	    .redPow(new BN$5(hash).mul(w).mod(q))
	    .fromRed()
	    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
	    .mod(p)
	    .mod(q);
	  return v.cmp(r) === 0
	}

	function checkValue (b, q) {
	  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
	  if (b.cmp(q) >= q) throw new Error('invalid sig')
	}

	var verify_1 = verify$2;

	var Buffer$9 = safeBuffer$1.exports.Buffer;
	var createHash$5 = browser$b;
	var stream = require$$2$2;
	var inherits = inherits_browser.exports;
	var sign$2 = sign$4.exports;
	var verify$1 = verify_1;

	var algorithms = require$$6$1;
	Object.keys(algorithms).forEach(function (key) {
	  algorithms[key].id = Buffer$9.from(algorithms[key].id, 'hex');
	  algorithms[key.toLowerCase()] = algorithms[key];
	});

	function Sign (algorithm) {
	  stream.Writable.call(this);

	  var data = algorithms[algorithm];
	  if (!data) throw new Error('Unknown message digest')

	  this._hashType = data.hash;
	  this._hash = createHash$5(data.hash);
	  this._tag = data.id;
	  this._signType = data.sign;
	}
	inherits(Sign, stream.Writable);

	Sign.prototype._write = function _write (data, _, done) {
	  this._hash.update(data);
	  done();
	};

	Sign.prototype.update = function update (data, enc) {
	  if (typeof data === 'string') data = Buffer$9.from(data, enc);

	  this._hash.update(data);
	  return this
	};

	Sign.prototype.sign = function signMethod (key, enc) {
	  this.end();
	  var hash = this._hash.digest();
	  var sig = sign$2(hash, key, this._hashType, this._signType, this._tag);

	  return enc ? sig.toString(enc) : sig
	};

	function Verify (algorithm) {
	  stream.Writable.call(this);

	  var data = algorithms[algorithm];
	  if (!data) throw new Error('Unknown message digest')

	  this._hash = createHash$5(data.hash);
	  this._tag = data.id;
	  this._signType = data.sign;
	}
	inherits(Verify, stream.Writable);

	Verify.prototype._write = function _write (data, _, done) {
	  this._hash.update(data);
	  done();
	};

	Verify.prototype.update = function update (data, enc) {
	  if (typeof data === 'string') data = Buffer$9.from(data, enc);

	  this._hash.update(data);
	  return this
	};

	Verify.prototype.verify = function verifyMethod (key, sig, enc) {
	  if (typeof sig === 'string') sig = Buffer$9.from(sig, enc);

	  this.end();
	  var hash = this._hash.digest();
	  return verify$1(sig, hash, key, this._signType, this._tag)
	};

	function createSign (algorithm) {
	  return new Sign(algorithm)
	}

	function createVerify (algorithm) {
	  return new Verify(algorithm)
	}

	var browser$5 = {
	  Sign: createSign,
	  Verify: createVerify,
	  createSign: createSign,
	  createVerify: createVerify
	};

	var elliptic$1 = elliptic$2;
	var BN$4 = bn$1.exports;

	var browser$4 = function createECDH (curve) {
	  return new ECDH(curve)
	};

	var aliases = {
	  secp256k1: {
	    name: 'secp256k1',
	    byteLength: 32
	  },
	  secp224r1: {
	    name: 'p224',
	    byteLength: 28
	  },
	  prime256v1: {
	    name: 'p256',
	    byteLength: 32
	  },
	  prime192v1: {
	    name: 'p192',
	    byteLength: 24
	  },
	  ed25519: {
	    name: 'ed25519',
	    byteLength: 32
	  },
	  secp384r1: {
	    name: 'p384',
	    byteLength: 48
	  },
	  secp521r1: {
	    name: 'p521',
	    byteLength: 66
	  }
	};

	aliases.p224 = aliases.secp224r1;
	aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
	aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
	aliases.p384 = aliases.secp384r1;
	aliases.p521 = aliases.secp521r1;

	function ECDH (curve) {
	  this.curveType = aliases[curve];
	  if (!this.curveType) {
	    this.curveType = {
	      name: curve
	    };
	  }
	  this.curve = new elliptic$1.ec(this.curveType.name); // eslint-disable-line new-cap
	  this.keys = void 0;
	}

	ECDH.prototype.generateKeys = function (enc, format) {
	  this.keys = this.curve.genKeyPair();
	  return this.getPublicKey(enc, format)
	};

	ECDH.prototype.computeSecret = function (other, inenc, enc) {
	  inenc = inenc || 'utf8';
	  if (!isBuffer$2(other)) {
	    other = new Buffer$M(other, inenc);
	  }
	  var otherPub = this.curve.keyFromPublic(other).getPublic();
	  var out = otherPub.mul(this.keys.getPrivate()).getX();
	  return formatReturnValue(out, enc, this.curveType.byteLength)
	};

	ECDH.prototype.getPublicKey = function (enc, format) {
	  var key = this.keys.getPublic(format === 'compressed', true);
	  if (format === 'hybrid') {
	    if (key[key.length - 1] % 2) {
	      key[0] = 7;
	    } else {
	      key[0] = 6;
	    }
	  }
	  return formatReturnValue(key, enc)
	};

	ECDH.prototype.getPrivateKey = function (enc) {
	  return formatReturnValue(this.keys.getPrivate(), enc)
	};

	ECDH.prototype.setPublicKey = function (pub, enc) {
	  enc = enc || 'utf8';
	  if (!isBuffer$2(pub)) {
	    pub = new Buffer$M(pub, enc);
	  }
	  this.keys._importPublic(pub);
	  return this
	};

	ECDH.prototype.setPrivateKey = function (priv, enc) {
	  enc = enc || 'utf8';
	  if (!isBuffer$2(priv)) {
	    priv = new Buffer$M(priv, enc);
	  }

	  var _priv = new BN$4(priv);
	  _priv = _priv.toString(16);
	  this.keys = this.curve.genKeyPair();
	  this.keys._importPrivate(_priv);
	  return this
	};

	function formatReturnValue (bn, enc, len) {
	  if (!Array.isArray(bn)) {
	    bn = bn.toArray();
	  }
	  var buf = new Buffer$M(bn);
	  if (len && buf.length < len) {
	    var zeros = new Buffer$M(len - buf.length);
	    zeros.fill(0);
	    buf = Buffer$M.concat([zeros, buf]);
	  }
	  if (!enc) {
	    return buf
	  } else {
	    return buf.toString(enc)
	  }
	}

	var browser$3 = {};

	var createHash$4 = browser$b;
	var Buffer$8 = safeBuffer$1.exports.Buffer;

	var mgf$2 = function (seed, len) {
	  var t = Buffer$8.alloc(0);
	  var i = 0;
	  var c;
	  while (t.length < len) {
	    c = i2ops(i++);
	    t = Buffer$8.concat([t, createHash$4('sha1').update(seed).update(c).digest()]);
	  }
	  return t.slice(0, len)
	};

	function i2ops (c) {
	  var out = Buffer$8.allocUnsafe(4);
	  out.writeUInt32BE(c, 0);
	  return out
	}

	var xor$2 = function xor (a, b) {
	  var len = a.length;
	  var i = -1;
	  while (++i < len) {
	    a[i] ^= b[i];
	  }
	  return a
	};

	var BN$3 = bn$1.exports;
	var Buffer$7 = safeBuffer$1.exports.Buffer;

	function withPublic$2 (paddedMsg, key) {
	  return Buffer$7.from(paddedMsg
	    .toRed(BN$3.mont(key.modulus))
	    .redPow(new BN$3(key.publicExponent))
	    .fromRed()
	    .toArray())
	}

	var withPublic_1 = withPublic$2;

	var parseKeys$1 = parseAsn1;
	var randomBytes$2 = browser$c.exports;
	var createHash$3 = browser$b;
	var mgf$1 = mgf$2;
	var xor$1 = xor$2;
	var BN$2 = bn$1.exports;
	var withPublic$1 = withPublic_1;
	var crt$1 = browserifyRsa;
	var Buffer$6 = safeBuffer$1.exports.Buffer;

	var publicEncrypt$1 = function publicEncrypt (publicKey, msg, reverse) {
	  var padding;
	  if (publicKey.padding) {
	    padding = publicKey.padding;
	  } else if (reverse) {
	    padding = 1;
	  } else {
	    padding = 4;
	  }
	  var key = parseKeys$1(publicKey);
	  var paddedMsg;
	  if (padding === 4) {
	    paddedMsg = oaep$1(key, msg);
	  } else if (padding === 1) {
	    paddedMsg = pkcs1$1(key, msg, reverse);
	  } else if (padding === 3) {
	    paddedMsg = new BN$2(msg);
	    if (paddedMsg.cmp(key.modulus) >= 0) {
	      throw new Error('data too long for modulus')
	    }
	  } else {
	    throw new Error('unknown padding')
	  }
	  if (reverse) {
	    return crt$1(paddedMsg, key)
	  } else {
	    return withPublic$1(paddedMsg, key)
	  }
	};

	function oaep$1 (key, msg) {
	  var k = key.modulus.byteLength();
	  var mLen = msg.length;
	  var iHash = createHash$3('sha1').update(Buffer$6.alloc(0)).digest();
	  var hLen = iHash.length;
	  var hLen2 = 2 * hLen;
	  if (mLen > k - hLen2 - 2) {
	    throw new Error('message too long')
	  }
	  var ps = Buffer$6.alloc(k - mLen - hLen2 - 2);
	  var dblen = k - hLen - 1;
	  var seed = randomBytes$2(hLen);
	  var maskedDb = xor$1(Buffer$6.concat([iHash, ps, Buffer$6.alloc(1, 1), msg], dblen), mgf$1(seed, dblen));
	  var maskedSeed = xor$1(seed, mgf$1(maskedDb, hLen));
	  return new BN$2(Buffer$6.concat([Buffer$6.alloc(1), maskedSeed, maskedDb], k))
	}
	function pkcs1$1 (key, msg, reverse) {
	  var mLen = msg.length;
	  var k = key.modulus.byteLength();
	  if (mLen > k - 11) {
	    throw new Error('message too long')
	  }
	  var ps;
	  if (reverse) {
	    ps = Buffer$6.alloc(k - mLen - 3, 0xff);
	  } else {
	    ps = nonZero(k - mLen - 3);
	  }
	  return new BN$2(Buffer$6.concat([Buffer$6.from([0, reverse ? 1 : 2]), ps, Buffer$6.alloc(1), msg], k))
	}
	function nonZero (len) {
	  var out = Buffer$6.allocUnsafe(len);
	  var i = 0;
	  var cache = randomBytes$2(len * 2);
	  var cur = 0;
	  var num;
	  while (i < len) {
	    if (cur === cache.length) {
	      cache = randomBytes$2(len * 2);
	      cur = 0;
	    }
	    num = cache[cur++];
	    if (num) {
	      out[i++] = num;
	    }
	  }
	  return out
	}

	var parseKeys = parseAsn1;
	var mgf = mgf$2;
	var xor = xor$2;
	var BN$1 = bn$1.exports;
	var crt = browserifyRsa;
	var createHash$2 = browser$b;
	var withPublic = withPublic_1;
	var Buffer$5 = safeBuffer$1.exports.Buffer;

	var privateDecrypt = function privateDecrypt (privateKey, enc, reverse) {
	  var padding;
	  if (privateKey.padding) {
	    padding = privateKey.padding;
	  } else if (reverse) {
	    padding = 1;
	  } else {
	    padding = 4;
	  }

	  var key = parseKeys(privateKey);
	  var k = key.modulus.byteLength();
	  if (enc.length > k || new BN$1(enc).cmp(key.modulus) >= 0) {
	    throw new Error('decryption error')
	  }
	  var msg;
	  if (reverse) {
	    msg = withPublic(new BN$1(enc), key);
	  } else {
	    msg = crt(enc, key);
	  }
	  var zBuffer = Buffer$5.alloc(k - msg.length);
	  msg = Buffer$5.concat([zBuffer, msg], k);
	  if (padding === 4) {
	    return oaep(key, msg)
	  } else if (padding === 1) {
	    return pkcs1(key, msg, reverse)
	  } else if (padding === 3) {
	    return msg
	  } else {
	    throw new Error('unknown padding')
	  }
	};

	function oaep (key, msg) {
	  var k = key.modulus.byteLength();
	  var iHash = createHash$2('sha1').update(Buffer$5.alloc(0)).digest();
	  var hLen = iHash.length;
	  if (msg[0] !== 0) {
	    throw new Error('decryption error')
	  }
	  var maskedSeed = msg.slice(1, hLen + 1);
	  var maskedDb = msg.slice(hLen + 1);
	  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
	  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
	  if (compare$1(iHash, db.slice(0, hLen))) {
	    throw new Error('decryption error')
	  }
	  var i = hLen;
	  while (db[i] === 0) {
	    i++;
	  }
	  if (db[i++] !== 1) {
	    throw new Error('decryption error')
	  }
	  return db.slice(i)
	}

	function pkcs1 (key, msg, reverse) {
	  var p1 = msg.slice(0, 2);
	  var i = 2;
	  var status = 0;
	  while (msg[i++] !== 0) {
	    if (i >= msg.length) {
	      status++;
	      break
	    }
	  }
	  var ps = msg.slice(2, i - 1);

	  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
	    status++;
	  }
	  if (ps.length < 8) {
	    status++;
	  }
	  if (status) {
	    throw new Error('decryption error')
	  }
	  return msg.slice(i)
	}
	function compare$1 (a, b) {
	  a = Buffer$5.from(a);
	  b = Buffer$5.from(b);
	  var dif = 0;
	  var len = a.length;
	  if (a.length !== b.length) {
	    dif++;
	    len = Math.min(a.length, b.length);
	  }
	  var i = -1;
	  while (++i < len) {
	    dif += (a[i] ^ b[i]);
	  }
	  return dif
	}

	(function (exports) {
	exports.publicEncrypt = publicEncrypt$1;
	exports.privateDecrypt = privateDecrypt;

	exports.privateEncrypt = function privateEncrypt (key, buf) {
	  return exports.publicEncrypt(key, buf, true)
	};

	exports.publicDecrypt = function publicDecrypt (key, buf) {
	  return exports.privateDecrypt(key, buf, true)
	};
	}(browser$3));

	var browser$2 = true;

	var browser$1 = {};

	function oldBrowser () {
	  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
	}
	var safeBuffer = safeBuffer$1.exports;
	var Buffer$4 = safeBuffer.Buffer;
	var kBufferMaxLength = safeBuffer.kMaxLength;
	var crypto$1 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
	var kMaxUint32 = Math.pow(2, 32) - 1;
	function assertOffset (offset, length) {
	  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
	    throw new TypeError('offset must be a number')
	  }

	  if (offset > kMaxUint32 || offset < 0) {
	    throw new TypeError('offset must be a uint32')
	  }

	  if (offset > kBufferMaxLength || offset > length) {
	    throw new RangeError('offset out of range')
	  }
	}

	function assertSize (size, offset, length) {
	  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
	    throw new TypeError('size must be a number')
	  }

	  if (size > kMaxUint32 || size < 0) {
	    throw new TypeError('size must be a uint32')
	  }

	  if (size + offset > length || size > kBufferMaxLength) {
	    throw new RangeError('buffer too small')
	  }
	}
	if ((crypto$1 && crypto$1.getRandomValues) || !browser$2) {
	  browser$1.randomFill = randomFill;
	  browser$1.randomFillSync = randomFillSync;
	} else {
	  browser$1.randomFill = oldBrowser;
	  browser$1.randomFillSync = oldBrowser;
	}
	function randomFill (buf, offset, size, cb) {
	  if (!Buffer$4.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
	    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
	  }

	  if (typeof offset === 'function') {
	    cb = offset;
	    offset = 0;
	    size = buf.length;
	  } else if (typeof size === 'function') {
	    cb = size;
	    size = buf.length - offset;
	  } else if (typeof cb !== 'function') {
	    throw new TypeError('"cb" argument must be a function')
	  }
	  assertOffset(offset, buf.length);
	  assertSize(size, offset, buf.length);
	  return actualFill(buf, offset, size, cb)
	}

	function actualFill (buf, offset, size, cb) {
	  {
	    var ourBuf = buf.buffer;
	    var uint = new Uint8Array(ourBuf, offset, size);
	    crypto$1.getRandomValues(uint);
	    if (cb) {
	      nextTick$1(function () {
	        cb(null, buf);
	      });
	      return
	    }
	    return buf
	  }
	}
	function randomFillSync (buf, offset, size) {
	  if (typeof offset === 'undefined') {
	    offset = 0;
	  }
	  if (!Buffer$4.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
	    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
	  }

	  assertOffset(offset, buf.length);

	  if (size === undefined) size = buf.length - offset;

	  assertSize(size, offset, buf.length);

	  return actualFill(buf, offset, size)
	}

	var randomBytes$1 = cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = browser$c.exports;
	var createHash$1 = cryptoBrowserify.createHash = cryptoBrowserify.Hash = browser$b;
	var createHmac = cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = browser$a;

	var algos = algos$1;
	var algoKeys = Object.keys(algos);
	var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
	cryptoBrowserify.getHashes = function () {
	  return hashes
	};

	var p = browser$9;
	cryptoBrowserify.pbkdf2 = p.pbkdf2;
	cryptoBrowserify.pbkdf2Sync = p.pbkdf2Sync;

	var aes$1 = browser$8;

	cryptoBrowserify.Cipher = aes$1.Cipher;
	cryptoBrowserify.createCipher = aes$1.createCipher;
	cryptoBrowserify.Cipheriv = aes$1.Cipheriv;
	cryptoBrowserify.createCipheriv = aes$1.createCipheriv;
	cryptoBrowserify.Decipher = aes$1.Decipher;
	cryptoBrowserify.createDecipher = aes$1.createDecipher;
	cryptoBrowserify.Decipheriv = aes$1.Decipheriv;
	cryptoBrowserify.createDecipheriv = aes$1.createDecipheriv;
	cryptoBrowserify.getCiphers = aes$1.getCiphers;
	cryptoBrowserify.listCiphers = aes$1.listCiphers;

	var dh = browser$6;

	cryptoBrowserify.DiffieHellmanGroup = dh.DiffieHellmanGroup;
	cryptoBrowserify.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
	cryptoBrowserify.getDiffieHellman = dh.getDiffieHellman;
	cryptoBrowserify.createDiffieHellman = dh.createDiffieHellman;
	cryptoBrowserify.DiffieHellman = dh.DiffieHellman;

	var sign$1 = browser$5;

	cryptoBrowserify.createSign = sign$1.createSign;
	cryptoBrowserify.Sign = sign$1.Sign;
	cryptoBrowserify.createVerify = sign$1.createVerify;
	cryptoBrowserify.Verify = sign$1.Verify;

	cryptoBrowserify.createECDH = browser$4;

	var publicEncrypt = browser$3;

	cryptoBrowserify.publicEncrypt = publicEncrypt.publicEncrypt;
	cryptoBrowserify.privateEncrypt = publicEncrypt.privateEncrypt;
	cryptoBrowserify.publicDecrypt = publicEncrypt.publicDecrypt;
	cryptoBrowserify.privateDecrypt = publicEncrypt.privateDecrypt;

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	// ;[
	//   'createCredentials'
	// ].forEach(function (name) {
	//   exports[name] = function () {
	//     throw new Error([
	//       'sorry, ' + name + ' is not implemented yet',
	//       'we accept pull requests',
	//       'https://github.com/crypto-browserify/crypto-browserify'
	//     ].join('\n'))
	//   }
	// })

	var rf = browser$1;

	cryptoBrowserify.randomFill = rf.randomFill;
	cryptoBrowserify.randomFillSync = rf.randomFillSync;

	cryptoBrowserify.createCredentials = function () {
	  throw new Error([
	    'sorry, createCredentials is not implemented yet',
	    'we accept pull requests',
	    'https://github.com/crypto-browserify/crypto-browserify'
	  ].join('\n'))
	};

	cryptoBrowserify.constants = {
	  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
	  'DH_CHECK_P_NOT_PRIME': 1,
	  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
	  'DH_NOT_SUITABLE_GENERATOR': 8,
	  'NPN_ENABLED': 1,
	  'ALPN_ENABLED': 1,
	  'RSA_PKCS1_PADDING': 1,
	  'RSA_SSLV23_PADDING': 2,
	  'RSA_NO_PADDING': 3,
	  'RSA_PKCS1_OAEP_PADDING': 4,
	  'RSA_X931_PADDING': 5,
	  'RSA_PKCS1_PSS_PADDING': 6,
	  'POINT_CONVERSION_COMPRESSED': 2,
	  'POINT_CONVERSION_UNCOMPRESSED': 4,
	  'POINT_CONVERSION_HYBRID': 6
	};

	var crypto = cryptoBrowserify;

	var dist$7 = {};

	var key = {};

	var converter = {};

	var asn1enc$1 = {};

	var asn1ec$1 = {};

	var params$b = {};

	/**
	 * params.ts
	 */
	Object.defineProperty(params$b, "__esModule", { value: true });
	params$b.getAlgorithmFromOidStrict = params$b.getAlgorithmFromOid = params$b.hashes = params$b.encryptionSchemes = params$b.pbkdf2Prfs = params$b.keyDerivationFunctions = params$b.passwordBasedEncryptionSchemes = params$b.publicKeyAlgorithms = params$b.namedCurves = void 0;
	// oid is referred to rfc5480 https://www.ietf.org/rfc/rfc5480.txt
	params$b.namedCurves = {
	    'P-256': { indutnyName: 'p256', payloadSize: 32, oid: [1, 2, 840, 10045, 3, 1, 7] },
	    'P-384': { indutnyName: 'p384', payloadSize: 48, oid: [1, 3, 132, 0, 34] },
	    'P-521': { indutnyName: 'p521', payloadSize: 66, oid: [1, 3, 132, 0, 35] },
	    'P-256K': { indutnyName: 'secp256k1', payloadSize: 32, oid: [1, 3, 132, 0, 10] },
	};
	// https://tools.ietf.org/html/rfc3279
	params$b.publicKeyAlgorithms = {
	    'EC': { oid: [1, 2, 840, 10045, 2, 1] },
	    'RSA': { oid: [1, 2, 840, 113549, 1, 1, 1] }
	};
	params$b.passwordBasedEncryptionSchemes = {
	    // PBES1
	    'pbeWithMD5AndDES-CBC': { oid: [1, 2, 840, 113549, 1, 5, 3], hash: 'MD5', encrypt: 'DES-CBC' },
	    'pbeWithSHA1AndDES-CBC': { oid: [1, 2, 840, 113549, 1, 5, 10], hash: 'SHA-1', encrypt: 'DES-CBC' },
	    // PBES2
	    'pbes2': { oid: [1, 2, 840, 113549, 1, 5, 13] }
	};
	params$b.keyDerivationFunctions = {
	    'pbkdf2': { oid: [1, 2, 840, 113549, 1, 5, 12], defaultSaltLen: 8 }
	};
	params$b.pbkdf2Prfs = {
	    'hmacWithSHA1': { oid: [1, 2, 840, 113549, 2, 7], hash: 'SHA-1' },
	    'hmacWithSHA256': { oid: [1, 2, 840, 113549, 2, 9], hash: 'SHA-256' },
	    'hmacWithSHA384': { oid: [1, 2, 840, 113549, 2, 10], hash: 'SHA-384' },
	    'hmacWithSHA512': { oid: [1, 2, 840, 113549, 2, 11], hash: 'SHA-512' }
	};
	params$b.encryptionSchemes = {
	    'des-ede3-cbc': { oid: [1, 2, 840, 113549, 3, 7], keyLength: 24, ivLength: 8 },
	    'aes128-cbc': { oid: [2, 16, 840, 1, 101, 3, 4, 1, 2], keyLength: 16, ivLength: 16 },
	    'aes192-cbc': { oid: [2, 16, 840, 1, 101, 3, 4, 1, 22], keyLength: 24, ivLength: 16 },
	    'aes256-cbc': { oid: [2, 16, 840, 1, 101, 3, 4, 1, 42], keyLength: 32, ivLength: 16 }
	};
	params$b.hashes = {
	    'SHA-256': { hashSize: 32 },
	    'SHA-384': { hashSize: 48 },
	    'SHA-512': { hashSize: 64 },
	    'SHA-1': { hashSize: 20 },
	    'MD5': { hashSize: 16 } // SHOULD NOT USE
	};
	/**
	 * Get algorithm name from ObjectIdentifier array loosely.
	 * @param {Array<number>} oid - ObjectIdentifier.
	 * @param {Object} oidDict - Dictionary of ObjectIdentifier.
	 * @return {Array} - Array of ObjectIdentifier array.
	 */
	function getAlgorithmFromOid(oid, oidDict) {
	    return Object.keys(oidDict).filter(function (k) { return oidDict[k].oid.toString() === oid.toString(); });
	}
	params$b.getAlgorithmFromOid = getAlgorithmFromOid;
	/**
	 * Get algorithm name from ObjectIdentifier array strictly.
	 * @param {Array<number>} oid - ObjectIdentifier.
	 * @param {Object} dict - Dictionary of ObjectIdentifier.
	 * @return {Array} - Exactly one ObjectIdentifier.
	 * @throws {Error} - Throws if UnsupportedAlgorithm.
	 */
	var getAlgorithmFromOidStrict = function (oid, dict) {
	    var array = getAlgorithmFromOid(oid, dict);
	    if (array.length === 0)
	        throw new Error('UnsupportedAlgorithm');
	    return array[0];
	};
	params$b.getAlgorithmFromOidStrict = getAlgorithmFromOidStrict;

	var octenc$1 = {};

	var dist$6 = {};

	var encoder$1 = {};

	var env = {};

	/**
	 * this module handles the difference between window (browser) and node js for specific functions and libraries.
	 * env.js
	 */
	Object.defineProperty(env, "__esModule", { value: true });
	env.getEnvAtob = env.getEnvBtoa = void 0;
	env.getEnvBtoa = function () {
	    if (typeof window !== 'undefined')
	        return window.btoa; // browser
	    else
	        return nodeBtoa; // node
	};
	env.getEnvAtob = function () {
	    if (typeof window !== 'undefined')
	        return window.atob; // browser
	    else
	        return nodeAtob; // node
	};
	var nodeBtoa = function (str) {
	    if (typeof Buffer$M === 'undefined')
	        throw new Error('UnsupportedEnvironment');
	    var buffer = Buffer$M.from(str.toString(), 'binary');
	    return buffer.toString('base64');
	};
	var nodeAtob = function (str) {
	    if (typeof Buffer$M === 'undefined')
	        throw new Error('UnsupportedEnvironment');
	    return Buffer$M.from(str, 'base64').toString('binary');
	};

	(function (exports) {
	/**
	 * encoder.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.stringToArrayBuffer = exports.arrayBufferToString = exports.hexStringToArrayBuffer = exports.arrayBufferToHexString = exports.decodeBase64Url = exports.encodeBase64Url = exports.decodeBase64 = exports.encodeBase64 = void 0;
	var env$1 = __importStar(env);
	/**
	 * Encode ArrayBuffer or TypedArray To Base64
	 * @param data
	 * @return {*}
	 */
	exports.encodeBase64 = function (data) {
	    var str = '';
	    if (typeof data === 'string')
	        str = data;
	    else
	        str = exports.arrayBufferToString(data);
	    var btoa = env$1.getEnvBtoa();
	    return btoa(str);
	};
	/**
	 * Decode Base64 to Uint8Array
	 * @param str
	 * @return {Uint8Array|string|*}
	 */
	exports.decodeBase64 = function (str) {
	    var atob = env$1.getEnvAtob();
	    var binary = atob(str);
	    var data = exports.stringToArrayBuffer(binary);
	    return getAsciiIfAscii(data);
	};
	/**
	 * if input data is an ArrayBuffer or TypedArray, it would be returned as Uint8Array
	 * @param data
	 * @return {Uint8Array}
	 */
	var sanitizeTypedArrayAndArrayBuffer = function (data) {
	    if (data instanceof Uint8Array)
	        return data;
	    if (ArrayBuffer.isView(data) && typeof data.buffer !== 'undefined') { // TypedArray except Uint8Array
	        return new Uint8Array(data.buffer);
	    }
	    else
	        return new Uint8Array(data); // ArrayBuffer
	};
	/**
	 * Check if the given Uint8Array can be expressed in Ascii Text
	 * @param data
	 * @return {Uint8Array|string|*}
	 */
	var getAsciiIfAscii = function (data) {
	    var flag = true;
	    for (var i = 0; i < data.length; i++) {
	        if (data[i] > 0x7e || (data[i] < 0x20 && data[i] !== 0x0d && data[i] !== 0x0a)) {
	            flag = false;
	            break;
	        }
	    }
	    var returnData = null;
	    if (flag) {
	        returnData = '';
	        for (var i = 0; i < data.length; i++)
	            returnData += String.fromCharCode(data[i]);
	    }
	    else
	        returnData = data;
	    return returnData;
	};
	/**
	 * Encode ArrayBuffer or TypedArray to base64url string
	 * @param data
	 * @return {string}
	 */
	exports.encodeBase64Url = function (data) { return exports.encodeBase64(data).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, ''); };
	/**
	 * Decode Base64Url string to Uint8Array
	 * @param str
	 * @return {Uint8Array}
	 */
	exports.decodeBase64Url = function (str) {
	    str = str.replace(/-/g, '+').replace(/_/g, '/');
	    // str = str + "=".repeat(str.length % 4); // this sometimes causes error...
	    return exports.decodeBase64(str);
	};
	/**
	 * Encode ArrayBuffer or TypedArray to hex string
	 * @param data
	 * @return {string}
	 */
	exports.arrayBufferToHexString = function (data) {
	    var arr = sanitizeTypedArrayAndArrayBuffer(data);
	    var hexStr = '';
	    for (var i = 0; i < arr.length; i++) {
	        var hex = (arr[i] & 0xff).toString(16);
	        hex = (hex.length === 1) ? "0" + hex : hex;
	        hexStr += hex;
	    }
	    return hexStr;
	};
	/**
	 * Decode hex string to Uint8Array
	 * @param str
	 * @return {Uint8Array}
	 */
	exports.hexStringToArrayBuffer = function (str) {
	    var arr = [];
	    var len = str.length;
	    for (var i = 0; i < len; i += 2)
	        arr.push(parseInt(str.substr(i, 2), 16));
	    return new Uint8Array(arr);
	};
	/**
	 * Encode ArrayBuffer or TypedArray to string with code (like output of legacy atob)
	 * @param data
	 * @return {string}
	 */
	exports.arrayBufferToString = function (data) {
	    var bytes = sanitizeTypedArrayAndArrayBuffer(data);
	    var arr = new Array(bytes.length);
	    bytes.forEach(function (x, i) { arr[i] = x; });
	    return String.fromCharCode.apply(null, arr);
	};
	/**
	 * Decode string with code (like output of legacy atob) to Uint8Array
	 * @param str
	 * @return {Uint8Array}
	 */
	exports.stringToArrayBuffer = function (str) {
	    var bytes = new Uint8Array(str.length);
	    return bytes.map(function (_x, i) { return str.charCodeAt(i); });
	};

	}(encoder$1));

	var formatter = {};

	/**
	 * formatter.js
	 */
	var __createBinding$9 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$9 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$9 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
	    __setModuleDefault$9(result, mod);
	    return result;
	};
	Object.defineProperty(formatter, "__esModule", { value: true });
	formatter.binToPem = formatter.pemToBin = void 0;
	var encoder = __importStar$9(encoder$1);
	var PemArmorString = {
	    'public': 'PUBLIC KEY',
	    'private': 'PRIVATE KEY',
	    'encryptedPrivate': 'ENCRYPTED PRIVATE KEY',
	    'certificate': 'CERTIFICATE',
	    'certRequest': 'CERTIFICATE REQUEST'
	};
	/**
	 * Convert PEM armored string to Uint8Array
	 * @param keydataB64Pem
	 * @return {Uint8Array}
	 */
	formatter.pemToBin = function (keydataB64Pem) {
	    var keydataB64 = dearmorPem(keydataB64Pem);
	    return encoder.decodeBase64(keydataB64);
	};
	/**
	 * Convert ArrayBuffer or TypedArray to PEM armored string with a specified type
	 * @param keydata
	 * @param type
	 * @return {string}
	 */
	formatter.binToPem = function (keydata, type) {
	    var keydataB64 = encoder.encodeBase64(keydata);
	    return formatAsPem(keydataB64, type);
	};
	/**
	 * Armor the given Base64 string and return PEM formatted string
	 * @param str
	 * @param type
	 * @return {string}
	 */
	var formatAsPem = function (str, type) {
	    var typeString = PemArmorString[type];
	    var finalString = "-----BEGIN " + typeString + "-----\n";
	    while (str.length > 0) {
	        finalString += str.substring(0, 64) + "\n";
	        str = str.substring(64);
	    }
	    finalString = finalString + "-----END " + typeString + "-----";
	    return finalString;
	};
	/**
	 * Dearmor the given PEM string and return Base64 string
	 * @param str
	 * @return {string}
	 */
	var dearmorPem = function (str) {
	    // const beginRegExp = RegExp('^-----[\s]*BEGIN[^-]*KEY-----$', 'gm');
	    // const endRegExp = RegExp('^-----[\s]*END[^-]*KEY-----$', 'gm');
	    var beginRegExp = RegExp('^-----[\s]*BEGIN[^-]*-----$', 'gm');
	    var endRegExp = RegExp('^-----[\s]*END[^-]*-----$', 'gm');
	    // check if the object starts from 'begin'
	    try {
	        var dearmored = str.split(beginRegExp)[1].split(endRegExp)[0];
	        dearmored = dearmored.replace(/\r?\n/g, '');
	        return dearmored;
	    }
	    catch (e) {
	        throw new Error('Invalid format as PEM');
	    }
	};

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.formatter = exports.encoder = void 0;
	/**
	 * index.ts
	 **/
	var Encoder = __importStar(encoder$1);
	var Formatter = __importStar(formatter);
	var encoder;
	(function (encoder) {
	    encoder.encodeBase64 = Encoder.encodeBase64;
	    encoder.decodeBase64 = Encoder.decodeBase64;
	    encoder.encodeBase64Url = Encoder.encodeBase64Url;
	    encoder.decodeBase64Url = Encoder.decodeBase64Url;
	    encoder.arrayBufferToHexString = Encoder.arrayBufferToHexString;
	    encoder.hexStringToArrayBuffer = Encoder.hexStringToArrayBuffer;
	    encoder.stringToArrayBuffer = Encoder.stringToArrayBuffer;
	    encoder.arrayBufferToString = Encoder.arrayBufferToString;
	})(encoder = exports.encoder || (exports.encoder = {}));
	var formatter$1;
	(function (formatter) {
	    formatter.binToPem = Formatter.binToPem;
	    formatter.pemToBin = Formatter.pemToBin;
	})(formatter$1 = exports.formatter || (exports.formatter = {}));
	exports.default = { encoder: encoder, formatter: formatter$1 };

	}(dist$6));

	var util$4 = {};

	var asn1def = {};

	(function (exports) {
	/**
	 * asn1def.js
	 */
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PBES2ESParams = exports.PBKDF2Params = exports.PBES2Params = exports.PBEParameter = exports.EncryptedPrivateKeyInfo = exports.OneAsymmetricKey = exports.SubjectPublicKeyInfo = exports.KeyStructure = void 0;
	var asn1_js_1 = __importDefault(asn1$2);
	///////////////////////////////////////////////////////////////////////////////////////////
	/**
	 * This is either one of subjectPublicKeyInfo, oneAsymmetricKey or encryptedPrivateKeyInfo in ASN.1 format.
	 * @type {AsnObject}
	 */
	exports.KeyStructure = asn1_js_1.default.define('KeyStructure', function () {
	    // @ts-ignore
	    this.choice({
	        // @ts-ignore
	        subjectPublicKeyInfo: this.use(exports.SubjectPublicKeyInfo),
	        // @ts-ignore
	        oneAsymmetricKey: this.use(exports.OneAsymmetricKey),
	        // @ts-ignore
	        encryptedPrivateKeyInfo: this.use(exports.EncryptedPrivateKeyInfo)
	    });
	});
	/**
	 * SubjectPublicKeyInfo specified in RFC 5280 {@link https://tools.ietf.org/html/rfc5280}.
	 * @type {AsnObject}
	 */
	exports.SubjectPublicKeyInfo = asn1_js_1.default.define('SubjectPublicKeyInfo', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('algorithm').use(AlgorithmIdentifier), 
	    // @ts-ignore
	    this.key('subjectPublicKey').bitstr());
	});
	///////////////////////////////////////////////////////////////////////////////////////////
	/**
	 * OneAsymmetricKey specified in RFC5958 {@link https://tools.ietf.org/html/rfc5958}.
	 * (old version PrivateKeyInfo {@link https://tools.ietf.org/html/rfc5208}.)
	 * @type {AsnObject}
	 */
	exports.OneAsymmetricKey = asn1_js_1.default.define('OneAsymmetricKey', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('version').use(Version), 
	    // @ts-ignore
	    this.key('privateKeyAlgorithm').use(AlgorithmIdentifier), 
	    // @ts-ignore
	    this.key('privateKey').octstr(), 
	    // @ts-ignore
	    this.key('attributes').implicit(0).optional().any(), 
	    // @ts-ignore
	    this.key('publicKey').implicit(1).optional().bitstr());
	});
	/**
	 * EncryptedPrivateKeyInfo specified in RFC5958 {@link https://tools.ietf.org/html/rfc5958}.
	 * @type {AsnObject}
	 */
	exports.EncryptedPrivateKeyInfo = asn1_js_1.default.define('EncryptedPrivateKeyInfo', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('encryptionAlgorithm').use(AlgorithmIdentifier), 
	    // @ts-ignore
	    this.key('encryptedData').octstr());
	});
	///////////////////////////////////////////////////////////////////////////////////////////
	/**
	 * PBEParameter, parameter for password-based encryption, specified in RFC 8018 {@link https://tools.ietf.org/html/rfc8018}.
	 * @type {AsnObject}
	 */
	exports.PBEParameter = asn1_js_1.default.define('PBEParameter', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('salt').octstr(8), 
	    // @ts-ignore
	    this.key('iterationCount').int());
	});
	/**
	 * PBES2Params, parameter for password-based encryption scheme 2, specified in RFC 8018 {@link https://tools.ietf.org/html/rfc8018}.
	 * @type {AsnObject}
	 */
	exports.PBES2Params = asn1_js_1.default.define('PBES2Params', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('keyDerivationFunc').use(AlgorithmIdentifier), 
	    // @ts-ignore
	    this.key('encryptionScheme').use(AlgorithmIdentifier));
	});
	///////////////////////////////////////////////////////////////////////////////////////////
	// PBKDF2-params ::= SEQUENCE {
	//        salt CHOICE {
	//          specified OCTET STRING,
	//          otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
	//        },
	//        iterationCount INTEGER (1..MAX),
	//        keyLength INTEGER (1..MAX) OPTIONAL,
	//        prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT
	//        algid-hmacWithSHA1
	//    }
	/**
	 * PBKDF2Params, parameter for PBKDF2, specified in RFC 8018 {@link https://tools.ietf.org/html/rfc8018}.
	 * @type {AsnObject}
	 */
	exports.PBKDF2Params = asn1_js_1.default.define('PBKDF2Params', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('salt').choice({
	        // @ts-ignore
	        'specified': this.octstr(),
	        // @ts-ignore
	        'otherSource': this.use(AlgorithmIdentifier)
	    }), 
	    // @ts-ignore
	    this.key('iterationCount').int(), 
	    // @ts-ignore
	    this.key('keyLength').int().optional(), 
	    // @ts-ignore
	    this.key('prf').use(AlgorithmIdentifier).def({
	        algorithm: [1, 2, 840, 113549, 2, 7],
	        parameters: Buffer$M.from([0x05, 0x00])
	    }));
	});
	///////////////////////////////////////////////////////////////////////////////////////////
	/**
	 * PBES2ESParams specified in RFC 8018 {@link https://tools.ietf.org/html/rfc8018}.
	 * @type {{'aes192-cbc': AsnObject, 'aes128-cbc': AsnObject, 'des-ede3-cbc': Object, 'aes256-cbc': AsnObject}}
	 */
	exports.PBES2ESParams = {
	    'des-ede3-cbc': asn1_js_1.default.define('DesEde3CbcParams', function () {
	        // @ts-ignore
	        this.octstr();
	    }),
	    'aes128-cbc': asn1_js_1.default.define('Aes128CbcParams', function () {
	        // @ts-ignore
	        this.octstr();
	    }),
	    'aes192-cbc': asn1_js_1.default.define('Aes192CbcParams', function () {
	        // @ts-ignore
	        this.octstr();
	    }),
	    'aes256-cbc': asn1_js_1.default.define('Aes256CbcParams', function () {
	        // @ts-ignore
	        this.octstr();
	    })
	};
	////////////////////////////////////////////////////////////////////////////////////
	/**
	 * AlgorithmIdentifier given in RFC 5280 {@link https://tools.ietf.org/html/rfc5280}
	 * @type AsnObject
	 */
	var AlgorithmIdentifier = asn1_js_1.default.define('AlgorithmIdentifier', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('algorithm').objid(), 
	    // @ts-ignore
	    this.key('parameters').optional().any());
	});
	/**
	 * Version
	 * @type {AsnObject}
	 */
	var Version = asn1_js_1.default.define('Version', function () {
	    // @ts-ignore
	    this.int();
	});

	}(asn1def));

	(function (exports) {
	/**
	 * util.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.appendLeadingZeros = exports.pruneLeadingZeros = exports.getJwkType = exports.getSec1KeyType = exports.getAsn1KeyType = exports.isAsn1Public = exports.isAsn1Encrypted = void 0;
	var js_encoding_utils_1 = __importDefault(dist$6);
	var params = __importStar(params$b);
	var asn1def_1 = asn1def;
	/**
	 * Check if the given key is encrypted.
	 * @param {DER|PEM} key - Private key object in ASN.1 encoding.
	 * @param {AsnFormat} [format='pem'] - pem or der
	 * @return {boolean} - True if encrypted.
	 */
	var isAsn1Encrypted = function (key, format) {
	    if (format === void 0) { format = 'pem'; }
	    var keyType;
	    try {
	        keyType = exports.getAsn1KeyType(key, format);
	    }
	    catch (e) {
	        return false;
	    }
	    return keyType === 'encryptedPrivate';
	};
	exports.isAsn1Encrypted = isAsn1Encrypted;
	/**
	 * Check if the given key is public.
	 * @param {DER|PEM} key - Public key object in ASN.1 encoding.
	 * @param {AsnFormat} format - pem or der
	 * @return {boolean} - True if public.
	 */
	var isAsn1Public = function (key, format) {
	    if (format === void 0) { format = 'pem'; }
	    var keyType;
	    try {
	        keyType = exports.getAsn1KeyType(key, format);
	    }
	    catch (e) {
	        return false;
	    }
	    return (keyType === 'public');
	};
	exports.isAsn1Public = isAsn1Public;
	/**
	 * Retrieve the key type of public or private in ASN.1 format
	 * @param {DER|PEM} key - Key object in ASN.1 encoding.
	 * @param {AsnFormat} format - pem or der
	 * @return {'public'|'private'|'encryptedPrivate'} - The key type of the given key.
	 * @throws {Error} - Throws if NotSpkiNorPkcs8Key.
	 */
	var getAsn1KeyType = function (key, format) {
	    if (format === void 0) { format = 'pem'; }
	    // Peel the pem strings
	    var binKey = (format === 'pem') ? js_encoding_utils_1.default.formatter.pemToBin(key) : key;
	    var decoded = asn1def_1.KeyStructure.decode(Buffer$M.from(binKey), 'der');
	    if (decoded.type === 'encryptedPrivateKeyInfo')
	        return 'encryptedPrivate';
	    else if (decoded.type === 'oneAsymmetricKey')
	        return 'private';
	    else if (decoded.type === 'subjectPublicKeyInfo')
	        return 'public';
	    else
	        throw new Error('NotSpkiNorPkcs8Key');
	};
	exports.getAsn1KeyType = getAsn1KeyType;
	/**
	 * Retrieve the type of SEC1 octet key.
	 * @param {OctetEC} sec1key - Key object in OctetEC encoding of Uint8Array.
	 * @param {CurveTypes} namedCurve - Name of elliptic curve like 'P-256'.
	 * @return {PublicOrPrivate} - public or private
	 * @throws {Error} - Throws if UnsupportedKeyStructure.
	 */
	var getSec1KeyType = function (sec1key, namedCurve) {
	    var len = params.namedCurves[namedCurve].payloadSize;
	    var binKey = (sec1key instanceof Uint8Array) ? sec1key : js_encoding_utils_1.default.encoder.hexStringToArrayBuffer(sec1key);
	    // original key type
	    if (binKey.length <= len)
	        return 'private';
	    else if ((binKey.length === 2 * len + 1 && binKey[0] === 0x04)
	        || (binKey.length === len + 1 && (binKey[0] === 0x02 || binKey[0] === 0x03)))
	        return 'public';
	    else
	        throw new Error('UnsupportedKeyStructure');
	};
	exports.getSec1KeyType = getSec1KeyType;
	/**
	 * Check key type of JWK.
	 * @param {JsonWebKey} jwkey - Key object in JWK format.
	 * @return {PublicOrPrivate} - public or private
	 * @throws {Error} - Throws if InvalidECKey, InvalidRSAKey or UnsupportedJWKType.
	 */
	var getJwkType = function (jwkey) {
	    if (jwkey.kty === 'EC') {
	        if (jwkey.x && jwkey.y && jwkey.d)
	            return 'private';
	        else if (jwkey.x && jwkey.y)
	            return 'public';
	        else
	            throw new Error('InvalidECKey');
	    }
	    else if (jwkey.kty === 'RSA') {
	        if (jwkey.n && jwkey.e && jwkey.d && jwkey.p && jwkey.q && jwkey.dp && jwkey.dq && jwkey.qi)
	            return 'private';
	        else if (jwkey.n && jwkey.e)
	            return 'public';
	        else
	            throw new Error('InvalidRSAKey');
	    }
	    else
	        throw new Error('UnsupportedJWKType');
	};
	exports.getJwkType = getJwkType;
	/**
	 * Prune leading zeros of an octet sequence in Uint8Array for jwk formatting of RSA.
	 * https://tools.ietf.org/html/rfc7518#section-6.3
	 * @param {Uint8Array} array - The octet sequence.
	 * @return {Uint8Array} - An octet sequence pruned leading zeros of length equal to or shorter than the input array.
	 * @throws {Error} - Throws if NonUint8Array.
	 */
	var pruneLeadingZeros = function (array) {
	    var offset = 0;
	    for (var i = 0; i < array.length; i++) {
	        if (array[i] !== 0x00)
	            break;
	        offset++;
	    }
	    var returnArray = new Uint8Array(array.length - offset);
	    returnArray.set(array.slice(offset, array.length));
	    return returnArray;
	};
	exports.pruneLeadingZeros = pruneLeadingZeros;
	// for pem/oct/der formatting from jwk of RSA
	/**
	 * Append leading zeros and generate an octet sequence of fixed length.
	 * @param {Uint8Array} array - An octet sequence.
	 * @param {Number} len - Intended length of output sequence.
	 * @returns {Uint8Array} - An octet sequence with leading zeros.
	 * @throws {Error} - Throws if NonUint8Array or InvalidLength.
	 */
	var appendLeadingZeros = function (array, len) {
	    if (array.length > len)
	        throw new Error('InvalidLength');
	    var returnArray = new Uint8Array(len); // initialized with zeros
	    returnArray.set(array, len - array.length);
	    return returnArray;
	};
	exports.appendLeadingZeros = appendLeadingZeros;

	}(util$4));

	/**
	 * octenc.js
	 */
	var __createBinding$8 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$8 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$8 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
	    __setModuleDefault$8(result, mod);
	    return result;
	};
	var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(octenc$1, "__esModule", { value: true });
	octenc$1.toJwk = octenc$1.fromJwk = void 0;
	var params$a = __importStar$8(params$b);
	var js_encoding_utils_1$6 = __importDefault$9(dist$6);
	var elliptic = __importStar$8(elliptic$2);
	var util_1$3 = util$4;
	var Ec = elliptic.ec;
	/**
	 * Convert JWK EC public/private keys to octet form.
	 * Compressed form of EC public key is referred to RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.
	 * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded to SEC1 octet format key.
	 * @param {boolean} [outputPublic] - Export public key even from private key if true.
	 * @param {OctetFormat} [outputFormat='binary'] - 'binary' or 'string'.
	 * @param {boolean} [compact=false] - Export compressed form of public key if true.
	 * @return {Uint8Array|string} - Encoded key object in JWK format.
	 */
	var fromJwk$2 = function (jwkey, _a) {
	    var outputPublic = _a.outputPublic, _b = _a.outputFormat, outputFormat = _b === void 0 ? 'binary' : _b, _c = _a.compact, compact = _c === void 0 ? false : _c;
	    // original key type
	    var orgType = util_1$3.getJwkType(jwkey);
	    var type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;
	    if (type === 'public') {
	        var bufX = js_encoding_utils_1$6.default.encoder.decodeBase64Url(jwkey.x);
	        var bufY = js_encoding_utils_1$6.default.encoder.decodeBase64Url(jwkey.y);
	        var publicKey = void 0;
	        if (compact) {
	            // compressed form
	            // http://www.secg.org/SEC1-Ver-1.0.pdf
	            publicKey = new Uint8Array(bufX.length + 1);
	            publicKey[0] = 0xFF & ((0x01 & (bufY.slice(-1)[0])) + 0x02);
	            publicKey.set(bufX, 1);
	        }
	        else {
	            // uncompressed form
	            publicKey = new Uint8Array(bufX.length + bufY.length + 1);
	            publicKey[0] = 0xFF & 0x04;
	            publicKey.set(bufX, 1);
	            publicKey.set(bufY, bufX.length + 1);
	        }
	        return (outputFormat === 'string') ? js_encoding_utils_1$6.default.encoder.arrayBufferToHexString(publicKey) : publicKey;
	    }
	    else { //type === 'private'
	        if (!jwkey.d)
	            throw new Error('InvalidKey');
	        var bufD = js_encoding_utils_1$6.default.encoder.decodeBase64Url(jwkey.d);
	        return (outputFormat === 'string') ? js_encoding_utils_1$6.default.encoder.arrayBufferToHexString(bufD) : bufD;
	    }
	};
	octenc$1.fromJwk = fromJwk$2;
	/**
	 * Convert Octet form of EC public/private keys to JWK.
	 * @param {OctetEC} octkey - OctetEC key object in hex string format or Uint8Array.
	 * @param {String} namedCurve - Name of elliptic curve like 'P-256'.
	 * @param {boolean} [outputPublic] - Export public key even from private key if true.
	 * @return {JsonWebKey} - Derived key object in JWK format.
	 */
	var toJwk$2 = function (octkey, namedCurve, _a) {
	    var outputPublic = _a.outputPublic;
	    if (Object.keys(params$a.namedCurves).indexOf(namedCurve) < 0)
	        throw new Error('UnsupportedCurve');
	    // original key type and check the key structure
	    var orgType = util_1$3.getSec1KeyType(octkey, namedCurve);
	    var type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;
	    // format conversion
	    var binKey = (typeof octkey === 'string') ? js_encoding_utils_1$6.default.encoder.hexStringToArrayBuffer(octkey) : octkey;
	    // instantiation
	    var curve = params$a.namedCurves[namedCurve].indutnyName;
	    var ec = new Ec(curve);
	    // derive key object from binary key
	    var ecKey = (orgType === 'public') ? ec.keyFromPublic(binKey) : ec.keyFromPrivate(binKey);
	    var publicKey = new Uint8Array(ecKey.getPublic('array'));
	    var len = params$a.namedCurves[namedCurve].payloadSize;
	    var bufX = publicKey.slice(1, len + 1);
	    var bufY = publicKey.slice(len + 1, len * 2 + 1);
	    var jwKey = {
	        kty: 'EC',
	        crv: namedCurve,
	        x: js_encoding_utils_1$6.default.encoder.encodeBase64Url(bufX),
	        y: js_encoding_utils_1$6.default.encoder.encodeBase64Url(bufY)
	        // ext: true
	    };
	    if (type === 'private') {
	        // octkey is exactly private key if type is private.
	        jwKey.d = js_encoding_utils_1$6.default.encoder.encodeBase64Url(binKey);
	    }
	    return jwKey;
	};
	octenc$1.toJwk = toJwk$2;

	/**
	 * asn1ec.js
	 */
	var __createBinding$7 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$7 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$7 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
	    __setModuleDefault$7(result, mod);
	    return result;
	};
	var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(asn1ec$1, "__esModule", { value: true });
	asn1ec$1.toJWK = asn1ec$1.fromJWK = void 0;
	var asn1_js_1$2 = __importDefault$8(asn1$2);
	var params$9 = __importStar$7(params$b);
	var octenc_1 = octenc$1;
	/**
	 * Convert JWK to parsed ASN.1 EC key object
	 * @param {JsonWebKey} jwk - A key object in JWK format.
	 * @param {PublicOrPrivate} type - 'public' or 'private'
	 * @param {boolean} [compact=false] - *Only for EC public keys*, the compact form of public key is given as ASN.1 object if true.
	 * @return {Object} - Parsed ASN.1 object.
	 */
	var fromJWK = function (jwk, type, compact) {
	    if (compact === void 0) { compact = false; }
	    var octetPublicKey = octenc_1.fromJwk(jwk, { outputFormat: 'binary', outputPublic: true, compact: compact });
	    var publicKeyAlgorithmOid = params$9.publicKeyAlgorithms['EC'].oid;
	    var publicKey = { unused: 0, data: Array.from(octetPublicKey) }; //Buffer.from(octkeyObj.publicKey)};
	    var parameters = ECParameters.encode({ type: 'namedCurve', value: params$9.namedCurves[jwk.crv].oid }, 'der');
	    var algorithm = { algorithm: publicKeyAlgorithmOid, parameters: parameters };
	    var decoded = {};
	    if (type === 'public') { // SPKI
	        decoded.subjectPublicKey = publicKey;
	        decoded.algorithm = algorithm;
	    }
	    else if (type === 'private') { // PKCS8
	        var octetPrivateKey = octenc_1.fromJwk(jwk, { outputFormat: 'binary', outputPublic: false, compact: compact });
	        decoded.version = 0; // no public key presents for v2 (0)
	        decoded.privateKeyAlgorithm = algorithm;
	        decoded.privateKey = ECPrivateKey.encode({
	            version: 1,
	            privateKey: Array.from(octetPrivateKey),
	            parameters: parameters,
	            publicKey: publicKey
	        }, 'der');
	    }
	    return decoded;
	};
	asn1ec$1.fromJWK = fromJWK;
	/**
	 * Convert parsed ASN.1 EC key object to JWK.
	 * @param {Object} decoded - Parsed ASN.1 EC key object.
	 * @param {PublicOrPrivate} type - 'public' or 'private'
	 * @return {JsonWebKey} - Converted key objects in JWK format.
	 * @throws {Error} - Throws if UnsupportedCurve.
	 */
	var toJWK = function (decoded, type) {
	    if (type === 'public') { // SPKI
	        decoded.algorithm.parameters = ECParameters.decode(decoded.algorithm.parameters, 'der'); // overwrite nested binary object as parsed object
	        var octPubKey = new Uint8Array(decoded.subjectPublicKey.data); // convert oct key to jwk
	        var namedCurves = params$9.getAlgorithmFromOid(decoded.algorithm.parameters.value, params$9.namedCurves);
	        return octenc_1.toJwk(octPubKey, namedCurves[0], { outputPublic: true });
	    }
	    else { // type === 'private', PKCS8
	        decoded.privateKeyAlgorithm.parameters = ECParameters.decode(decoded.privateKeyAlgorithm.parameters, 'der');
	        // Work around for optional private key parameter field.
	        try {
	            decoded.privateKey = ECPrivateKey.decode(decoded.privateKey, 'der');
	        }
	        catch (e) {
	            decoded.privateKey = ECPrivateKeyAlt.decode(decoded.privateKey, 'der');
	        }
	        var octPrivKey = new Uint8Array(decoded.privateKey.privateKey);
	        var namedCurves = params$9.getAlgorithmFromOid(decoded.privateKeyAlgorithm.parameters.value, params$9.namedCurves);
	        if (namedCurves.length < 1)
	            throw new Error('UnsupportedCurve');
	        return octenc_1.toJwk(octPrivKey, namedCurves[0], { outputPublic: false });
	    }
	};
	asn1ec$1.toJWK = toJWK;
	/////////////////////////
	/**
	 * ECParameters specified in RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.
	 * @type {AsnObject}
	 */
	var ECParameters = asn1_js_1$2.default.define('ECParameters', function () {
	    // @ts-ignore
	    this.choice({
	        // @ts-ignore
	        namedCurve: this.objid()
	    });
	});
	/**
	 * ECPrivateKey specified in RFC 5915 {@link https://tools.ietf.org/html/rfc5915}.
	 * @type {AsnObject}
	 */
	var ECPrivateKey = asn1_js_1$2.default.define('ECPrivateKey', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('version').int(), 
	    // @ts-ignore
	    this.key('privateKey').octstr(), 
	    // @ts-ignore
	    this.key('parameters').explicit(0).optional().any(), // rfc suggested that this must be implemented
	    // @ts-ignore
	    this.key('publicKey').explicit(1).optional().bitstr() // rfc suggested that this must be implemented
	    );
	});
	/**
	 * ECPrivateKey Alternative for an work around...
	 * @type {AsnObject}
	 */
	var ECPrivateKeyAlt = asn1_js_1$2.default.define('ECPrivateKey', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('version').int(), 
	    // @ts-ignore
	    this.key('privateKey').octstr(), 
	    // this.key('parameters').explicit(0).optional().any(), // rfc suggested that this must be implemented
	    // @ts-ignore
	    this.key('publicKey').explicit(1).optional().bitstr() // rfc suggested that this must be implemented
	    );
	});

	var asn1rsa$1 = {};

	/**
	 * asn1rsa.js
	 */
	var __createBinding$6 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$6 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
	    __setModuleDefault$6(result, mod);
	    return result;
	};
	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(asn1rsa$1, "__esModule", { value: true });
	asn1rsa$1.toJwk = asn1rsa$1.fromJwk = void 0;
	var asn1_js_1$1 = __importDefault$7(asn1$2);
	var js_encoding_utils_1$5 = __importDefault$7(dist$6);
	var BufferMod$3 = __importStar$6(require$$2$3);
	var Buffer$3 = BufferMod$3.Buffer;
	var params$8 = __importStar$6(params$b);
	var util_1$2 = util$4;
	/**
	 * Encode RSA JWK key to ASN.1 DER or PEM of SPKI/OneAsymmetricKey.
	 * @param {JsonWebKey} jwk - A key object in JWK format to be encoded.
	 * @param {PublicOrPrivate} type - 'public' or 'private'.
	 * @returns {DecodedAsn1Key} - Parsed object of ASN.1 encoded key object.
	 */
	var fromJwk$1 = function (jwk, type) {
	    var publicKeyAlgorithmOid = params$8.publicKeyAlgorithms['RSA'].oid;
	    // Parameters is always null Ox0500 in ASN.1 as shown in the Section 2.3.1 https://tools.ietf.org/html/rfc3279
	    var parameters = Buffer$3.from([0x05, 0x00]);
	    var algorithm = { algorithm: publicKeyAlgorithmOid, parameters: parameters };
	    // to append leading zeros (pruned when making JWK) in order to make binary of intended bit length
	    // https://tools.ietf.org/html/rfc7518#section-6.3
	    var modulusBytes = js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.n);
	    var nLen = modulusBytes.length;
	    var modulusLength = (nLen % 128 === 0) ? nLen : nLen + (128 - (nLen % 128));
	    var modulus = new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(modulusBytes, modulusLength)); // JWA RFC
	    var publicExponent = new asn1_js_1$1.default.bignum(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.e));
	    var decoded = {};
	    if (type === 'public') { // SPKI
	        decoded.subjectPublicKey = {
	            unused: 0,
	            data: RSAPublicKey.encode({ modulus: modulus, publicExponent: publicExponent }, 'der')
	        };
	        decoded.algorithm = algorithm;
	    }
	    else if (type === 'private') { // PKCS8
	        decoded.version = 0; // no public key presents for v2 (0)
	        decoded.privateKeyAlgorithm = algorithm;
	        decoded.privateKey = RSAPrivateKey.encode({
	            version: 0,
	            modulus: modulus,
	            publicExponent: publicExponent,
	            privateExponent: new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.d), modulusLength)),
	            prime1: new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.p), modulusLength)),
	            prime2: new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.q), modulusLength)),
	            exponent1: new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.dp), modulusLength)),
	            exponent2: new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.dq), modulusLength)),
	            coefficient: new asn1_js_1$1.default.bignum(util_1$2.appendLeadingZeros(js_encoding_utils_1$5.default.encoder.decodeBase64Url(jwk.qi), modulusLength))
	        }, 'der');
	    }
	    return decoded;
	};
	asn1rsa$1.fromJwk = fromJwk$1;
	/**
	 * Convert RSA spki/pkcs8 public/private keys to JWK
	 * @param {Object} decoded - Parsed object of RSA key to be encoded.
	 * @param {PublicOrPrivate} type - 'public' or 'private'
	 * @return {JsonWebKey} - Encoded RSA key object in JWK format.
	 */
	var toJwk$1 = function (decoded, type) {
	    if (type === 'public') { // SPKI
	        // algorithm.algorithm.parameters is always null Ox0500 in ASN.1
	        // as shown in the Section 2.3.1 https://tools.ietf.org/html/rfc3279
	        // overwrite nested binary object as parsed object
	        decoded.subjectPublicKey.data = RSAPublicKey.decode(decoded.subjectPublicKey.data, 'der');
	        var modulus = decoded.subjectPublicKey.data.modulus;
	        var publicExponent = decoded.subjectPublicKey.data.publicExponent;
	        // convert n and e from BN
	        // modulus n
	        var nLen = modulus.byteLength();
	        var len = (nLen % 128 === 0) ? nLen : nLen + (128 - (nLen % 128));
	        modulus = new Uint8Array(modulus.toArray('be', len));
	        // // publicExponent e;
	        publicExponent = new Uint8Array(publicExponent.toArray('be', publicExponent.byteLength()));
	        return {
	            kty: 'RSA',
	            n: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(modulus)),
	            e: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(publicExponent))
	        };
	    }
	    else { // type === 'private', PKCS8
	        // privateKeyAlgorithm.algorithm.parameters is always null Ox0500 in ASN.1
	        // as shown in the Section 2.3.1 https://tools.ietf.org/html/rfc3279
	        // overwrite nested binary object as parsed object
	        decoded.privateKey = RSAPrivateKey.decode(decoded.privateKey, 'der');
	        var privateKeyElems_1 = {}; // work around
	        privateKeyElems_1.modulus = decoded.privateKey.modulus;
	        // calculate key length from modulus n
	        var nLen = privateKeyElems_1.modulus.byteLength();
	        var len_1 = (nLen % 128 === 0) ? nLen : nLen + (128 - (nLen % 128)); // this is actual key length, e.g., 256 bytes
	        // convert BN to Uint8Array
	        privateKeyElems_1.modulus = new Uint8Array(privateKeyElems_1.modulus.toArray('be', len_1)); // n of length len
	        privateKeyElems_1.publicExponent = new Uint8Array(decoded.privateKey.publicExponent.toArray('be', decoded.privateKey.publicExponent.byteLength())); // e of arbitrary small length
	        privateKeyElems_1.privateExponent = new Uint8Array(decoded.privateKey.privateExponent.toArray('be', len_1)); // d of length len
	        var keys = ['prime1', 'prime2', 'exponent1', 'exponent2', 'coefficient']; // elements of length len/2
	        keys.forEach(function (key) {
	            privateKeyElems_1[key] = new Uint8Array(decoded.privateKey[key].toArray('be', (len_1 >> 1)));
	        });
	        // prune leading zeros JWW RSA private key: https://tools.ietf.org/html/rfc7517
	        return {
	            kty: 'RSA',
	            n: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.modulus)),
	            e: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.publicExponent)),
	            d: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.privateExponent)),
	            p: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.prime1)),
	            q: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.prime2)),
	            dp: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.exponent1)),
	            dq: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.exponent2)),
	            qi: js_encoding_utils_1$5.default.encoder.encodeBase64Url(util_1$2.pruneLeadingZeros(privateKeyElems_1.coefficient))
	        };
	    }
	};
	asn1rsa$1.toJwk = toJwk$1;
	///////////
	// https://tools.ietf.org/html/rfc3447
	var RSAPublicKey = asn1_js_1$1.default.define('RSAPublicKey', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('modulus').int(), // n
	    // @ts-ignore
	    this.key('publicExponent').int() // e
	    );
	});
	var RSAPrivateKey = asn1_js_1$1.default.define('RSAPrivateKey', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('version').int(), // 0
	    // @ts-ignore
	    this.key('modulus').int(), // n
	    // @ts-ignore
	    this.key('publicExponent').int(), // e
	    // @ts-ignore
	    this.key('privateExponent').int(), // d
	    // @ts-ignore
	    this.key('prime1').int(), // p
	    // @ts-ignore
	    this.key('prime2').int(), // q
	    // @ts-ignore
	    this.key('exponent1').int(), // d mod (p-1)
	    // @ts-ignore
	    this.key('exponent2').int(), // d mod (q-1)
	    // @ts-ignore
	    this.key('coefficient').int(), // (inverse of q) mod p
	    // @ts-ignore
	    this.key('otherPrimeInfos').optional().use(OtherPrimeInfos));
	});
	var OtherPrimeInfos = asn1_js_1$1.default.define('OtherPrimeInfos', function () {
	    // @ts-ignore
	    this.seqof(OtherPrimeInfo);
	});
	var OtherPrimeInfo = asn1_js_1$1.default.define('OtherPrimeInfo', function () {
	    // @ts-ignore
	    this.seq().obj(
	    // @ts-ignore
	    this.key('prime').int(), 
	    // @ts-ignore
	    this.key('exponent').int(), 
	    // @ts-ignore
	    this.key('coefficient').int());
	});

	var rfc8018 = {};

	var dist$5 = {};

	var pbkdf = {};

	var dist$4 = {};

	var hash = {};

	var dist$3 = {};

	Object.defineProperty(dist$3, "__esModule", { value: true });
	dist$3.getCrypto = dist$3.getRootWebCrypto = dist$3.getWebCrypto = dist$3.getNodeCrypto = void 0;
	/**
	 * index.js
	 **/
	/**
	 * Obtain require(crypto) in Node.js environment.
	 * @return {undefined|Object} - Node.js crypto object
	 */
	var getNodeCrypto = function () {
	    if (typeof window !== 'undefined')
	        return undefined;
	    else
	        return cryptoBrowserify;
	};
	dist$3.getNodeCrypto = getNodeCrypto;
	/**
	 * Obtain window.crypto.subtle object in browser environments.
	 * @return {undefined|Object} - WebCrypto API object
	 */
	var getWebCrypto = function () {
	    if (typeof window !== 'undefined' && window.crypto)
	        return window.crypto.subtle;
	    return undefined;
	};
	dist$3.getWebCrypto = getWebCrypto;
	/**
	 * Obtain window.crypto object in browser environments.
	 * @return {undefined|Object} - WebCrypto API object
	 */
	var getRootWebCrypto = function () {
	    if (typeof window !== 'undefined' && window.crypto)
	        return window.crypto;
	    return undefined;
	};
	dist$3.getRootWebCrypto = getRootWebCrypto;
	/**
	 * Get native crypto lib name.
	 * @return {name: 'webCrypto'|'nodeCrypto'|undefined, crypto?: any}
	 */
	var getCrypto = function () {
	    var webCrypto = getWebCrypto();
	    var nodeCrypto = getNodeCrypto();
	    if (typeof nodeCrypto !== 'undefined')
	        return { name: 'nodeCrypto', crypto: nodeCrypto };
	    else if (typeof webCrypto !== 'undefined')
	        return { name: 'webCrypto', crypto: webCrypto };
	    else
	        return { name: undefined };
	};
	dist$3.getCrypto = getCrypto;
	dist$3.default = { getNodeCrypto: getNodeCrypto, getWebCrypto: getWebCrypto, getRootWebCrypto: getRootWebCrypto, getCrypto: getCrypto };

	var params$7 = {};

	/**
	 * params. js
	 */
	Object.defineProperty(params$7, "__esModule", { value: true });
	var params$6 = {
	    hashes: {
	        'SHA3-512': { nodeName: 'sha3-512', hashSize: 64 },
	        'SHA3-384': { nodeName: 'sha3-384', hashSize: 48 },
	        'SHA3-256': { nodeName: 'sha3-256', hashSize: 32 },
	        'SHA3-224': { nodeName: 'sha3-224', hashSize: 28 },
	        'SHA-256': { nodeName: 'sha256', hashSize: 32 },
	        'SHA-384': { nodeName: 'sha384', hashSize: 48 },
	        'SHA-512': { nodeName: 'sha512', hashSize: 64 },
	        'SHA-1': { nodeName: 'sha1', hashSize: 20 },
	        'MD5': { nodeName: 'md5', hashSize: 16 } // SHOULD NOT USE
	    },
	};
	params$7.default = params$6;

	var md5$1 = {exports: {}};

	var crypt = {exports: {}};

	(function() {
	  var base64map
	      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

	  crypt$1 = {
	    // Bit-wise rotation left
	    rotl: function(n, b) {
	      return (n << b) | (n >>> (32 - b));
	    },

	    // Bit-wise rotation right
	    rotr: function(n, b) {
	      return (n << (32 - b)) | (n >>> b);
	    },

	    // Swap big-endian to little-endian and vice versa
	    endian: function(n) {
	      // If number given, swap endian
	      if (n.constructor == Number) {
	        return crypt$1.rotl(n, 8) & 0x00FF00FF | crypt$1.rotl(n, 24) & 0xFF00FF00;
	      }

	      // Else, assume array and swap all items
	      for (var i = 0; i < n.length; i++)
	        n[i] = crypt$1.endian(n[i]);
	      return n;
	    },

	    // Generate an array of any length of random bytes
	    randomBytes: function(n) {
	      for (var bytes = []; n > 0; n--)
	        bytes.push(Math.floor(Math.random() * 256));
	      return bytes;
	    },

	    // Convert a byte array to big-endian 32-bit words
	    bytesToWords: function(bytes) {
	      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
	        words[b >>> 5] |= bytes[i] << (24 - b % 32);
	      return words;
	    },

	    // Convert big-endian 32-bit words to a byte array
	    wordsToBytes: function(words) {
	      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
	        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	      return bytes;
	    },

	    // Convert a byte array to a hex string
	    bytesToHex: function(bytes) {
	      for (var hex = [], i = 0; i < bytes.length; i++) {
	        hex.push((bytes[i] >>> 4).toString(16));
	        hex.push((bytes[i] & 0xF).toString(16));
	      }
	      return hex.join('');
	    },

	    // Convert a hex string to a byte array
	    hexToBytes: function(hex) {
	      for (var bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	      return bytes;
	    },

	    // Convert a byte array to a base-64 string
	    bytesToBase64: function(bytes) {
	      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
	        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
	        for (var j = 0; j < 4; j++)
	          if (i * 8 + j * 6 <= bytes.length * 8)
	            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
	          else
	            base64.push('=');
	      }
	      return base64.join('');
	    },

	    // Convert a base-64 string to a byte array
	    base64ToBytes: function(base64) {
	      // Remove non-base-64 characters
	      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

	      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
	          imod4 = ++i % 4) {
	        if (imod4 == 0) continue;
	        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
	            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
	            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
	      }
	      return bytes;
	    }
	  };

	  crypt.exports = crypt$1;
	})();

	var charenc = {
	  // UTF-8 encoding
	  utf8: {
	    // Convert a string to a byte array
	    stringToBytes: function(str) {
	      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
	    },

	    // Convert a byte array to a string
	    bytesToString: function(bytes) {
	      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
	    }
	  },

	  // Binary encoding
	  bin: {
	    // Convert a string to a byte array
	    stringToBytes: function(str) {
	      for (var bytes = [], i = 0; i < str.length; i++)
	        bytes.push(str.charCodeAt(i) & 0xFF);
	      return bytes;
	    },

	    // Convert a byte array to a string
	    bytesToString: function(bytes) {
	      for (var str = [], i = 0; i < bytes.length; i++)
	        str.push(String.fromCharCode(bytes[i]));
	      return str.join('');
	    }
	  }
	};

	var charenc_1 = charenc;

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	var isBuffer_1 = function (obj) {
	  return obj != null && (isBuffer$1(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	};

	function isBuffer$1 (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer$1(obj.slice(0, 0))
	}

	(function(){
	  var crypt$1 = crypt.exports,
	      utf8 = charenc_1.utf8,
	      isBuffer = isBuffer_1,
	      bin = charenc_1.bin,

	  // The core
	  md5 = function (message, options) {
	    // Convert to byte array
	    if (message.constructor == String)
	      if (options && options.encoding === 'binary')
	        message = bin.stringToBytes(message);
	      else
	        message = utf8.stringToBytes(message);
	    else if (isBuffer(message))
	      message = Array.prototype.slice.call(message, 0);
	    else if (!Array.isArray(message) && message.constructor !== Uint8Array)
	      message = message.toString();
	    // else, assume byte array already

	    var m = crypt$1.bytesToWords(message),
	        l = message.length * 8,
	        a =  1732584193,
	        b = -271733879,
	        c = -1732584194,
	        d =  271733878;

	    // Swap endian
	    for (var i = 0; i < m.length; i++) {
	      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
	             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
	    }

	    // Padding
	    m[l >>> 5] |= 0x80 << (l % 32);
	    m[(((l + 64) >>> 9) << 4) + 14] = l;

	    // Method shortcuts
	    var FF = md5._ff,
	        GG = md5._gg,
	        HH = md5._hh,
	        II = md5._ii;

	    for (var i = 0; i < m.length; i += 16) {

	      var aa = a,
	          bb = b,
	          cc = c,
	          dd = d;

	      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
	      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
	      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
	      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
	      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
	      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
	      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
	      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
	      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
	      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
	      c = FF(c, d, a, b, m[i+10], 17, -42063);
	      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
	      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
	      d = FF(d, a, b, c, m[i+13], 12, -40341101);
	      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
	      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

	      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
	      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
	      c = GG(c, d, a, b, m[i+11], 14,  643717713);
	      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
	      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
	      d = GG(d, a, b, c, m[i+10],  9,  38016083);
	      c = GG(c, d, a, b, m[i+15], 14, -660478335);
	      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
	      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
	      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
	      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
	      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
	      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
	      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
	      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
	      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

	      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
	      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
	      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
	      b = HH(b, c, d, a, m[i+14], 23, -35309556);
	      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
	      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
	      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
	      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
	      a = HH(a, b, c, d, m[i+13],  4,  681279174);
	      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
	      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
	      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
	      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
	      d = HH(d, a, b, c, m[i+12], 11, -421815835);
	      c = HH(c, d, a, b, m[i+15], 16,  530742520);
	      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

	      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
	      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
	      c = II(c, d, a, b, m[i+14], 15, -1416354905);
	      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
	      a = II(a, b, c, d, m[i+12],  6,  1700485571);
	      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
	      c = II(c, d, a, b, m[i+10], 15, -1051523);
	      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
	      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
	      d = II(d, a, b, c, m[i+15], 10, -30611744);
	      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
	      b = II(b, c, d, a, m[i+13], 21,  1309151649);
	      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
	      d = II(d, a, b, c, m[i+11], 10, -1120210379);
	      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
	      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

	      a = (a + aa) >>> 0;
	      b = (b + bb) >>> 0;
	      c = (c + cc) >>> 0;
	      d = (d + dd) >>> 0;
	    }

	    return crypt$1.endian([a, b, c, d]);
	  };

	  // Auxiliary functions
	  md5._ff  = function (a, b, c, d, x, s, t) {
	    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._gg  = function (a, b, c, d, x, s, t) {
	    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._hh  = function (a, b, c, d, x, s, t) {
	    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._ii  = function (a, b, c, d, x, s, t) {
	    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };

	  // Package private blocksize
	  md5._blocksize = 16;
	  md5._digestsize = 16;

	  md5$1.exports = function (message, options) {
	    if (message === undefined || message === null)
	      throw new Error('Illegal argument ' + message);

	    var digestbytes = crypt$1.wordsToBytes(md5(message, options));
	    return options && options.asBytes ? digestbytes :
	        options && options.asString ? bin.bytesToString(digestbytes) :
	        crypt$1.bytesToHex(digestbytes);
	  };

	})();

	var sha3 = {};

	var sponge = {};

	var permute = {};

	var chi = {};

	var copy=function copy(I,i){return function(O,o){var oi=o*2;var ii=i*2;O[oi]=I[ii];O[oi+1]=I[ii+1];}};var copy_1=copy;

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _copy=_interopRequireDefault(copy_1);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var chi=function chi(_ref){var A=_ref.A,C=_ref.C;for(var y=0;y<25;y+=5){for(var x=0;x<5;x++){(0, _copy["default"])(A,y+x)(C,x);}for(var _x=0;_x<5;_x++){var xy=(y+_x)*2;var x1=(_x+1)%5*2;var x2=(_x+2)%5*2;A[xy]^=~C[x1]&C[x2];A[xy+1]^=~C[x1+1]&C[x2+1];}}};var _default=chi;exports["default"]=_default;
	}(chi));

	var iota = {};

	var roundConstants = {};

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var ROUND_CONSTANTS=new Uint32Array([0,1,0,32898,2147483648,32906,2147483648,2147516416,0,32907,0,2147483649,2147483648,2147516545,2147483648,32777,0,138,0,136,0,2147516425,0,2147483658,0,2147516555,2147483648,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,0,32778,2147483648,2147483658,2147483648,2147516545,2147483648,32896,0,2147483649,2147483648,2147516424]);var _default=ROUND_CONSTANTS;exports["default"]=_default;
	}(roundConstants));

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _roundConstants=_interopRequireDefault(roundConstants);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var iota=function iota(_ref){var A=_ref.A,roundIndex=_ref.roundIndex;var i=roundIndex*2;A[0]^=_roundConstants["default"][i];A[1]^=_roundConstants["default"][i+1];};var _default=iota;exports["default"]=_default;
	}(iota));

	var rhoPi = {};

	var piShuffles = {};

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var PI_SHUFFLES=[10,7,11,17,18,3,5,16,8,21,24,4,15,23,19,13,12,2,20,14,22,9,6,1];var _default=PI_SHUFFLES;exports["default"]=_default;
	}(piShuffles));

	var rhoOffsets = {};

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var RHO_OFFSETS=[1,3,6,10,15,21,28,36,45,55,2,14,27,41,56,8,25,43,62,18,39,61,20,44];var _default=RHO_OFFSETS;exports["default"]=_default;
	}(rhoOffsets));

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _piShuffles=_interopRequireDefault(piShuffles);var _rhoOffsets=_interopRequireDefault(rhoOffsets);var _copy=_interopRequireDefault(copy_1);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var rhoPi=function rhoPi(_ref){var A=_ref.A,C=_ref.C,W=_ref.W;(0, _copy["default"])(A,1)(W,0);var H=0;var L=0;var Wi=0;var ri=32;for(var i=0;i<24;i++){var j=_piShuffles["default"][i];var r=_rhoOffsets["default"][i];(0, _copy["default"])(A,j)(C,0);H=W[0];L=W[1];ri=32-r;Wi=r<32?0:1;W[Wi]=H<<r|L>>>ri;W[(Wi+1)%2]=L<<r|H>>>ri;(0, _copy["default"])(W,0)(A,j);(0, _copy["default"])(C,0)(W,0);}};var _default=rhoPi;exports["default"]=_default;
	}(rhoPi));

	var theta = {};

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _copy=_interopRequireDefault(copy_1);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var theta=function theta(_ref){var A=_ref.A,C=_ref.C,D=_ref.D,W=_ref.W;var H=0;var L=0;for(var x=0;x<5;x++){var x20=x*2;var x21=(x+5)*2;var x22=(x+10)*2;var x23=(x+15)*2;var x24=(x+20)*2;C[x20]=A[x20]^A[x21]^A[x22]^A[x23]^A[x24];C[x20+1]=A[x20+1]^A[x21+1]^A[x22+1]^A[x23+1]^A[x24+1];}for(var _x=0;_x<5;_x++){(0, _copy["default"])(C,(_x+1)%5)(W,0);H=W[0];L=W[1];W[0]=H<<1|L>>>31;W[1]=L<<1|H>>>31;D[_x*2]=C[(_x+4)%5*2]^W[0];D[_x*2+1]=C[(_x+4)%5*2+1]^W[1];for(var y=0;y<25;y+=5){A[(y+_x)*2]^=D[_x*2];A[(y+_x)*2+1]^=D[_x*2+1];}}};var _default=theta;exports["default"]=_default;
	}(theta));

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _chi=_interopRequireDefault(chi);var _iota=_interopRequireDefault(iota);var _rhoPi=_interopRequireDefault(rhoPi);var _theta=_interopRequireDefault(theta);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var permute=function permute(){var C=new Uint32Array(10);var D=new Uint32Array(10);var W=new Uint32Array(2);return function(A){for(var roundIndex=0;roundIndex<24;roundIndex++){(0, _theta["default"])({A:A,C:C,D:D,W:W});(0, _rhoPi["default"])({A:A,C:C,W:W});(0, _chi["default"])({A:A,C:C});(0, _iota["default"])({A:A,roundIndex:roundIndex});}C.fill(0);D.fill(0);W.fill(0);}};var _default=permute;exports["default"]=_default;
	}(permute));

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _buffer=require$$2$3;var _permute=_interopRequireDefault(permute);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var xorWords=function xorWords(I,O){for(var i=0;i<I.length;i+=8){var o=i/4;O[o]^=I[i+7]<<24|I[i+6]<<16|I[i+5]<<8|I[i+4];O[o+1]^=I[i+3]<<24|I[i+2]<<16|I[i+1]<<8|I[i];}return O};var readWords=function readWords(I,O){for(var o=0;o<O.length;o+=8){var i=o/4;O[o]=I[i+1];O[o+1]=I[i+1]>>>8;O[o+2]=I[i+1]>>>16;O[o+3]=I[i+1]>>>24;O[o+4]=I[i];O[o+5]=I[i]>>>8;O[o+6]=I[i]>>>16;O[o+7]=I[i]>>>24;}return O};var Sponge=function Sponge(_ref){var _this=this;var capacity=_ref.capacity,padding=_ref.padding;var keccak=(0, _permute["default"])();var stateSize=200;var blockSize=capacity/8;var queueSize=stateSize-capacity/4;var queueOffset=0;var state=new Uint32Array(stateSize/4);var queue=_buffer.Buffer.allocUnsafe(queueSize);this.absorb=function(buffer){for(var i=0;i<buffer.length;i++){queue[queueOffset]=buffer[i];queueOffset+=1;if(queueOffset>=queueSize){xorWords(queue,state);keccak(state);queueOffset=0;}}return _this};this.squeeze=function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var output={buffer:options.buffer||_buffer.Buffer.allocUnsafe(blockSize),padding:options.padding||padding,queue:_buffer.Buffer.allocUnsafe(queue.length),state:new Uint32Array(state.length)};queue.copy(output.queue);for(var i=0;i<state.length;i++){output.state[i]=state[i];}output.queue.fill(0,queueOffset);output.queue[queueOffset]|=output.padding;output.queue[queueSize-1]|=128;xorWords(output.queue,output.state);for(var offset=0;offset<output.buffer.length;offset+=queueSize){keccak(output.state);readWords(output.state,output.buffer.slice(offset,offset+queueSize));}return output.buffer};this.reset=function(){queue.fill(0);state.fill(0);queueOffset=0;return _this};return this};var _default=Sponge;exports["default"]=_default;
	}(sponge));

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.SHAKE=exports.SHA3Hash=exports.SHA3=exports.Keccak=void 0;var _buffer=require$$2$3;var _sponge=_interopRequireDefault(sponge);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var createHash=function createHash(_ref){var allowedSizes=_ref.allowedSizes,defaultSize=_ref.defaultSize,padding=_ref.padding;return function Hash(){var _this=this;var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultSize;if(!this||this.constructor!==Hash){return new Hash(size)}if(allowedSizes&&!allowedSizes.includes(size)){throw new Error("Unsupported hash length")}var sponge=new _sponge["default"]({capacity:size});this.update=function(input){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"utf8";if(_buffer.Buffer.isBuffer(input)){sponge.absorb(input);return _this}if(typeof input==="string"){return _this.update(_buffer.Buffer.from(input,encoding))}throw new TypeError("Not a string or buffer")};this.digest=function(){var formatOrOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"binary";var options=typeof formatOrOptions==="string"?{format:formatOrOptions}:formatOrOptions;var buffer=sponge.squeeze({buffer:options.buffer,padding:options.padding||padding});if(options.format&&options.format!=="binary"){return buffer.toString(options.format)}return buffer};this.reset=function(){sponge.reset();return _this};return this}};var Keccak=createHash({allowedSizes:[224,256,384,512],defaultSize:512,padding:1});exports.Keccak=Keccak;var SHA3=createHash({allowedSizes:[224,256,384,512],defaultSize:512,padding:6});exports.SHA3=SHA3;var SHAKE=createHash({allowedSizes:[128,256],defaultSize:256,padding:31});exports.SHAKE=SHAKE;var SHA3Hash=Keccak;exports.SHA3Hash=SHA3Hash;SHA3.SHA3Hash=SHA3Hash;var _default=SHA3;exports["default"]=_default;
	}(sha3));

	var buffer = {};

	var base64Js = {};

	base64Js.byteLength = byteLength;
	base64Js.toByteArray = toByteArray;
	base64Js.fromByteArray = fromByteArray;

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;

	function getLens (b64) {
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4);

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp;
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen;

	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)];
	    arr[curByte++] = (tmp >> 16) & 0xFF;
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    );
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    );
	  }

	  return parts.join('')
	}

	var ieee754 = {};

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

	ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	(function (exports) {

	var base64 = base64Js;
	var ieee754$1 = ieee754;
	var customInspectSymbol =
	  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
	    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
	    : null;

	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;

	var K_MAX_LENGTH = 0x7fffffff;
	exports.kMaxLength = K_MAX_LENGTH;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	  console.error(
	    'This browser lacks typed array (Uint8Array) support which is required by ' +
	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  );
	}

	function typedArraySupport () {
	  // Can typed array instances can be augmented?
	  try {
	    var arr = new Uint8Array(1);
	    var proto = { foo: function () { return 42 } };
	    Object.setPrototypeOf(proto, Uint8Array.prototype);
	    Object.setPrototypeOf(arr, proto);
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}

	Object.defineProperty(Buffer.prototype, 'parent', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.buffer
	  }
	});

	Object.defineProperty(Buffer.prototype, 'offset', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.byteOffset
	  }
	});

	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
	    throw new RangeError('The value "' + length + '" is invalid for option "size"')
	  }
	  // Return an augmented `Uint8Array` instance
	  var buf = new Uint8Array(length);
	  Object.setPrototypeOf(buf, Buffer.prototype);
	  return buf
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new TypeError(
	        'The "string" argument must be of type string. Received type number'
	      )
	    }
	    return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset)
	  }

	  if (ArrayBuffer.isView(value)) {
	    return fromArrayView(value)
	  }

	  if (value == null) {
	    throw new TypeError(
	      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	      'or Array-like Object. Received type ' + (typeof value)
	    )
	  }

	  if (isInstance(value, ArrayBuffer) ||
	      (value && isInstance(value.buffer, ArrayBuffer))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }

	  if (typeof SharedArrayBuffer !== 'undefined' &&
	      (isInstance(value, SharedArrayBuffer) ||
	      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }

	  if (typeof value === 'number') {
	    throw new TypeError(
	      'The "value" argument must not be of type number. Received type number'
	    )
	  }

	  var valueOf = value.valueOf && value.valueOf();
	  if (valueOf != null && valueOf !== value) {
	    return Buffer.from(valueOf, encodingOrOffset, length)
	  }

	  var b = fromObject(value);
	  if (b) return b

	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
	      typeof value[Symbol.toPrimitive] === 'function') {
	    return Buffer.from(
	      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
	    )
	  }

	  throw new TypeError(
	    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	    'or Array-like Object. Received type ' + (typeof value)
	  )
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	};

	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
	Object.setPrototypeOf(Buffer, Uint8Array);

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be of type number')
	  } else if (size < 0) {
	    throw new RangeError('The value "' + size + '" is invalid for option "size"')
	  }
	}

	function alloc (size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpreted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(size).fill(fill, encoding)
	      : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	};

	function allocUnsafe (size) {
	  assertSize(size);
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	};

	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('Unknown encoding: ' + encoding)
	  }

	  var length = byteLength(string, encoding) | 0;
	  var buf = createBuffer(length);

	  var actual = buf.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    buf = buf.slice(0, actual);
	  }

	  return buf
	}

	function fromArrayLike (array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  var buf = createBuffer(length);
	  for (var i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255;
	  }
	  return buf
	}

	function fromArrayView (arrayView) {
	  if (isInstance(arrayView, Uint8Array)) {
	    var copy = new Uint8Array(arrayView);
	    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
	  }
	  return fromArrayLike(arrayView)
	}

	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('"offset" is outside of buffer bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('"length" is outside of buffer bounds')
	  }

	  var buf;
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array);
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset);
	  } else {
	    buf = new Uint8Array(array, byteOffset, length);
	  }

	  // Return an augmented `Uint8Array` instance
	  Object.setPrototypeOf(buf, Buffer.prototype);

	  return buf
	}

	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    var buf = createBuffer(len);

	    if (buf.length === 0) {
	      return buf
	    }

	    obj.copy(buf, 0, 0, len);
	    return buf
	  }

	  if (obj.length !== undefined) {
	    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	      return createBuffer(0)
	    }
	    return fromArrayLike(obj)
	  }

	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	    return fromArrayLike(obj.data)
	  }
	}

	function checked (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true &&
	    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
	};

	Buffer.compare = function compare (a, b) {
	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError(
	      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
	    )
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (isInstance(buf, Uint8Array)) {
	      if (pos + buf.length > buffer.length) {
	        Buffer.from(buf).copy(buffer, pos);
	      } else {
	        Uint8Array.prototype.set.call(
	          buffer,
	          buf,
	          pos
	        );
	      }
	    } else if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    } else {
	      buf.copy(buffer, pos);
	    }
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    throw new TypeError(
	      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
	      'Received type ' + typeof string
	    )
	  }

	  var len = string.length;
	  var mustMatch = (arguments.length > 2 && arguments[2] === true);
	  if (!mustMatch && len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) {
	          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
	        }
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = exports.INSPECT_MAX_BYTES;
	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
	  if (this.length > max) str += ' ... ';
	  return '<Buffer ' + str + '>'
	};
	if (customInspectSymbol) {
	  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (isInstance(target, Uint8Array)) {
	    target = Buffer.from(target, target.offset, target.byteLength);
	  }
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError(
	      'The "target" argument must be one of type Buffer or Uint8Array. ' +
	      'Received type ' + (typeof target)
	    )
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset; // Coerce to Number.
	  if (numberIsNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  var strLen = string.length;

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (numberIsNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset >>> 0;
	    if (isFinite(length)) {
	      length = length >>> 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return asciiWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF)
	      ? 4
	      : (firstByte > 0xDF)
	          ? 3
	          : (firstByte > 0xBF)
	              ? 2
	              : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += hexSliceLookupTable[buf[i]];
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
	  for (var i = 0; i < bytes.length - 1; i += 2) {
	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf = this.subarray(start, end);
	  // Return an augmented `Uint8Array` instance
	  Object.setPrototypeOf(newBuf, Buffer.prototype);

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUintLE =
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUintBE =
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUint8 =
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUint16LE =
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUint16BE =
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUint32LE =
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUint32BE =
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUintLE =
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUintBE =
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUint8 =
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeUint16LE =
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};

	Buffer.prototype.writeUint16BE =
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};

	Buffer.prototype.writeUint32LE =
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset + 3] = (value >>> 24);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 1] = (value >>> 8);
	  this[offset] = (value & 0xff);
	  return offset + 4
	};

	Buffer.prototype.writeUint32BE =
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 3] = (value >>> 24);
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;

	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
	    // Use built-in when available, missing from IE11
	    this.copyWithin(targetStart, start, end);
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, end),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if ((encoding === 'utf8' && code < 128) ||
	          encoding === 'latin1') {
	        // Fast path: If `val` fits into a single byte, use that numeric value.
	        val = code;
	      }
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  } else if (typeof val === 'boolean') {
	    val = Number(val);
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : Buffer.from(val, encoding);
	    var len = bytes.length;
	    if (len === 0) {
	      throw new TypeError('The value "' + val +
	        '" is invalid for argument "value"')
	    }
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node takes equal signs as end of the Base64 encoding
	  str = str.split('=')[0];
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = str.trim().replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
	// the `instanceof` check but they should be treated as of that type.
	// See: https://github.com/feross/buffer/issues/166
	function isInstance (obj, type) {
	  return obj instanceof type ||
	    (obj != null && obj.constructor != null && obj.constructor.name != null &&
	      obj.constructor.name === type.name)
	}
	function numberIsNaN (obj) {
	  // For IE11 support
	  return obj !== obj // eslint-disable-line no-self-compare
	}

	// Create lookup table for `toString('hex')`
	// See: https://github.com/feross/buffer/issues/219
	var hexSliceLookupTable = (function () {
	  var alphabet = '0123456789abcdef';
	  var table = new Array(256);
	  for (var i = 0; i < 16; ++i) {
	    var i16 = i * 16;
	    for (var j = 0; j < 16; ++j) {
	      table[i16 + j] = alphabet[i] + alphabet[j];
	    }
	  }
	  return table
	})();
	}(buffer));

	/**
	 * hash.js
	 */
	var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$5 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
	    __setModuleDefault$5(result, mod);
	    return result;
	};
	var __awaiter$8 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$8 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(hash, "__esModule", { value: true });
	hash.compute = void 0;
	var util$3 = __importStar$5(dist$3);
	var params_1$3 = __importDefault$6(params$7);
	var md5_1 = __importDefault$6(md5$1.exports);
	var sha3_1 = sha3;
	var jsHash = __importStar$5(hash$3);
	/**
	 * Compute Hash value.
	 * @param {Uint8Array} msg - Byte array of message to be hashed.
	 * @param {HashTypes} [hash = 'SHA-256'] - Name of hash algorithm like 'SHA-256'.
	 * @return {Promise<Uint8Array>} - Hash value
	 * @throws {Error} - Throws if UnsupportedHashAlgorithm, UnsupportedMessageType,
	 *  or UnsupportedEnvironment, i.e., a case where even pure js implementation won't work.
	 */
	var compute = function (msg, hash) {
	    if (hash === void 0) { hash = 'SHA-256'; }
	    return __awaiter$8(void 0, void 0, void 0, function () {
	        var env, msgHash, errMsg, native, e_1;
	        return __generator$8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    env = util$3.getCrypto();
	                    native = true;
	                    _a.label = 1;
	                case 1:
	                    _a.trys.push([1, 5, , 6]);
	                    if (!(env.name === 'webCrypto' && typeof env.crypto.digest === 'function')) return [3 /*break*/, 3];
	                    return [4 /*yield*/, env.crypto.digest(hash, msg)];
	                case 2:
	                    msgHash = _a.sent();
	                    return [3 /*break*/, 4];
	                case 3:
	                    if (env.name === 'nodeCrypto') { // for node
	                        msgHash = nodedigest(hash, msg, env.crypto);
	                    }
	                    else
	                        native = false;
	                    _a.label = 4;
	                case 4: return [3 /*break*/, 6];
	                case 5:
	                    e_1 = _a.sent();
	                    errMsg = e_1.message;
	                    native = false;
	                    return [3 /*break*/, 6];
	                case 6:
	                    if (!native) {
	                        try {
	                            msgHash = purejs(hash, msg);
	                        }
	                        catch (e) {
	                            errMsg = ((typeof errMsg === 'undefined') ? '' : errMsg) + " => " + e.message;
	                            throw new Error("UnsupportedEnvironment: " + errMsg);
	                        }
	                    }
	                    return [2 /*return*/, new Uint8Array(msgHash)];
	            }
	        });
	    });
	};
	hash.compute = compute;
	/**
	 * Compute hash using Node.js implementation
	 * @param {String} hash - Name of hash algorithm like SHA-256
	 * @param {Uint8Array} msg - Byte array of message to be hashed.
	 * @param {Object} nodeCrypto - Node.js crypto object.
	 * @return {Uint8Array} - Hash value.
	 */
	var nodedigest = function (hash, msg, nodeCrypto) {
	    var alg = params_1$3.default.hashes[hash].nodeName;
	    var hashFunc = nodeCrypto.createHash(alg);
	    hashFunc.update(msg);
	    return hashFunc.digest();
	};
	/**
	 * Compute hash using pure js implementations
	 * @param {String} hash - Name of hash algorithm like SHA-256
	 * @param {Uint8Array} msg - Byte array of message to be hashed.
	 * @return {Uint8Array} - Hash value.
	 */
	var purejs = function (hash, msg) {
	    var h;
	    if (hash === 'MD5') {
	        h = md5_1.default(Array.from(msg), { asBytes: true });
	    }
	    else if (['SHA3-512', 'SHA3-384', 'SHA3-256', 'SHA3-224'].indexOf(hash) >= 0) {
	        // sha3
	        var sha3Len = params_1$3.default.hashes[hash].hashSize * 8;
	        var sha3obj = new sha3_1.SHA3(sha3Len);
	        var Buffer_1 = buffer.Buffer;
	        sha3obj.update(Buffer_1.from(msg));
	        h = sha3obj.digest('binary');
	    }
	    else {
	        // @ts-ignore
	        h = jsHash[params_1$3.default.hashes[hash].nodeName]().update(msg).digest();
	    }
	    return new Uint8Array(h);
	};

	(function (exports) {
	/**
	 * index.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.compute = void 0;
	var hash$1 = __importStar(hash);
	exports.compute = hash$1.compute;
	exports.default = { compute: exports.compute };

	}(dist$4));

	var dist$2 = {};

	var hmac = {};

	var params$5 = {};

	/**
	 * params. ts
	 */
	Object.defineProperty(params$5, "__esModule", { value: true });
	var params$4 = {
	    hashes: {
	        'SHA3-512': { nodeName: 'sha3-512', hashSize: 64, blockSize: 72 },
	        'SHA3-384': { nodeName: 'sha3-384', hashSize: 48, blockSize: 104 },
	        'SHA3-256': { nodeName: 'sha3-256', hashSize: 32, blockSize: 136 },
	        'SHA3-224': { nodeName: 'sha3-224', hashSize: 28, blockSize: 144 },
	        'SHA-256': { nodeName: 'sha256', hashSize: 32, blockSize: 64 },
	        'SHA-384': { nodeName: 'sha384', hashSize: 48, blockSize: 128 },
	        'SHA-512': { nodeName: 'sha512', hashSize: 64, blockSize: 128 },
	        'SHA-1': { nodeName: 'sha1', hashSize: 20, blockSize: 64 },
	        'MD5': { nodeName: 'md5', hashSize: 16, blockSize: 64 }
	    },
	};
	params$5.default = params$4;

	(function (exports) {
	/**
	 * hmac.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.verify = exports.compute = void 0;
	var params_1 = __importDefault(params$5);
	var util = __importStar(dist$3);
	var js_crypto_hash_1 = __importDefault(dist$4);
	/**
	 * Compute keyed hash value
	 * @param {Uint8Array} key - ByteArray of symmetric key.
	 * @param {Uint8Array} data - Byte array of message to be hashed.
	 * @param {HashTypes} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'.
	 * @return {Promise<Uint8Array>} - Keyed-hash value.
	 * @throws {Error} - Throws if UnsupportedEnvironment, i.e., even neither WebCrypto, NodeCrypto nor PureJS is available.
	 */
	var compute = function (key, data, hash) {
	    if (hash === void 0) { hash = 'SHA-256'; }
	    return __awaiter(void 0, void 0, void 0, function () {
	        var env, msgKeyedHash, errMsg, native, keyObj, f, e_1, e_2;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    env = util.getCrypto();
	                    native = true;
	                    _a.label = 1;
	                case 1:
	                    _a.trys.push([1, 6, , 7]);
	                    if (!(env.name === 'webCrypto' && typeof env.crypto.importKey === 'function' && typeof env.crypto.sign === 'function')) return [3 /*break*/, 4];
	                    return [4 /*yield*/, env.crypto.importKey('raw', key, {
	                            name: 'HMAC',
	                            hash: { name: hash }
	                        }, false, ['sign', 'verify'])];
	                case 2:
	                    keyObj = _a.sent();
	                    return [4 /*yield*/, env.crypto.sign({ name: 'HMAC', hash: { name: hash } }, keyObj, data)];
	                case 3:
	                    msgKeyedHash = _a.sent();
	                    return [3 /*break*/, 5];
	                case 4:
	                    if (env.name === 'nodeCrypto') { // for node
	                        f = env.crypto.createHmac(params_1.default.hashes[hash].nodeName, key);
	                        msgKeyedHash = f.update(data).digest();
	                    }
	                    else
	                        native = false;
	                    _a.label = 5;
	                case 5: return [3 /*break*/, 7];
	                case 6:
	                    e_1 = _a.sent();
	                    errMsg = e_1.message;
	                    native = false;
	                    return [3 /*break*/, 7];
	                case 7:
	                    if (!!native) return [3 /*break*/, 11];
	                    _a.label = 8;
	                case 8:
	                    _a.trys.push([8, 10, , 11]);
	                    return [4 /*yield*/, purejs(key, data, hash)];
	                case 9:
	                    msgKeyedHash = _a.sent();
	                    return [3 /*break*/, 11];
	                case 10:
	                    e_2 = _a.sent();
	                    errMsg = errMsg + " => " + e_2.message;
	                    throw new Error("UnsupportedEnvironments: " + errMsg);
	                case 11: return [2 /*return*/, new Uint8Array(msgKeyedHash)];
	            }
	        });
	    });
	};
	exports.compute = compute;
	/**
	 * PureJS implementation of HMAC algorithm specified in RFC 2104 {@link https://tools.ietf.org/html/rfc2104}.
	 * @param {Uint8Array} key - ByteArray of symmetric key.
	 * @param {Uint8Array} data - Byte array of message to be hashed.
	 * @param {HashTypes} hash - Name of hash algorithm like 'SHA-256'.
	 * @return {Promise<Uint8Array>} - Keyed-hash value.
	 */
	var purejs = function (key, data, hash) { return __awaiter(void 0, void 0, void 0, function () {
	    var B, L, K, KxorIpad, KxorOpad, inner, hashedInner, outer;
	    return __generator(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                B = params_1.default.hashes[hash].blockSize;
	                L = params_1.default.hashes[hash].hashSize;
	                if (!(key.length > B)) return [3 /*break*/, 2];
	                return [4 /*yield*/, js_crypto_hash_1.default.compute(key, hash)];
	            case 1:
	                key = _a.sent();
	                _a.label = 2;
	            case 2:
	                K = new Uint8Array(B);
	                K.set(key);
	                KxorIpad = K.map(function (k) { return 0xFF & (0x36 ^ k); });
	                KxorOpad = K.map(function (k) { return 0xFF & (0x5c ^ k); });
	                inner = new Uint8Array(B + data.length);
	                inner.set(KxorIpad);
	                inner.set(data, B);
	                return [4 /*yield*/, js_crypto_hash_1.default.compute(inner, hash)];
	            case 3:
	                hashedInner = _a.sent();
	                outer = new Uint8Array(B + L);
	                outer.set(KxorOpad);
	                outer.set(hashedInner, B);
	                return [2 /*return*/, js_crypto_hash_1.default.compute(outer, hash)];
	        }
	    });
	}); };
	/**
	 * Verify keyed-hash value using the key
	 * @param {Uint8Array} key - ByteArray of symmetric key.
	 * @param {Uint8Array} data - Byte array of message to be hashed.
	 * @param {Uint8Array} mac - Given keyed-hash value.
	 * @param {HashTypes} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'.
	 * @return {Promise<boolean>} - Result of verification.
	 * @throws {Error} - Throws if InvalidInputMac
	 */
	var verify = function (key, data, mac, hash) {
	    if (hash === void 0) { hash = 'SHA-256'; }
	    return __awaiter(void 0, void 0, void 0, function () {
	        var newMac;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, exports.compute(key, data, hash)];
	                case 1:
	                    newMac = _a.sent();
	                    return [2 /*return*/, (mac.toString() === newMac.toString())];
	            }
	        });
	    });
	};
	exports.verify = verify;

	}(hmac));

	(function (exports) {
	/**
	 * index.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.verify = exports.compute = void 0;
	var hmac$1 = __importStar(hmac);
	exports.compute = hmac$1.compute;
	exports.verify = hmac$1.verify;
	exports.default = { compute: exports.compute, verify: exports.verify };

	}(dist$2));

	var params$3 = {};

	/**
	 * params.ts
	 */
	Object.defineProperty(params$3, "__esModule", { value: true });
	var params$2 = {
	    hashes: {
	        'SHA3-512': { hashSize: 64 },
	        'SHA3-384': { hashSize: 48 },
	        'SHA3-256': { hashSize: 32 },
	        'SHA3-224': { hashSize: 28 },
	        'SHA-256': { hashSize: 32 },
	        'SHA-384': { hashSize: 48 },
	        'SHA-512': { hashSize: 64 },
	        'SHA-1': { hashSize: 20 },
	        'MD5': { hashSize: 16 } // SHOULD NOT USE
	    }
	};
	params$3.default = params$2;

	/**
	 * pbkdf
	 */
	var __awaiter$7 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$7 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(pbkdf, "__esModule", { value: true });
	pbkdf.pbkdf1 = pbkdf.pbkdf2 = void 0;
	var js_encoding_utils_1$4 = __importDefault$5(dist$6);
	var js_crypto_hash_1$1 = __importDefault$5(dist$4);
	var js_crypto_hmac_1 = __importDefault$5(dist$2);
	var params_1$2 = __importDefault$5(params$3);
	/**
	 * Password-based key derivation function 2.
	 * Detailed specification is given in RFC8018 Section 5.2 {@link https://tools.ietf.org/html/rfc8018#section-5.2}.
	 * @param {Uint8Array|String} p - Byte array or string of password. if string is given, it will be converted to Uint8Array.
	 * @param {Uint8Array} s - Byte array of salt.
	 * @param {Number} c - Iteration count.
	 * @param {Number} dkLen - Intended output key length in octet.
	 * @param {String} hash - Name of underlying hash function for HMAC like 'SHA-256', used as a pseudorandom function.
	 * @return {Promise<Uint8Array>} - Derived key.
	 * @throws {Error} - Throws if the intended key length is too long.
	 */
	var pbkdf2 = function (p, s, c, dkLen, hash) { return __awaiter$7(void 0, void 0, void 0, function () {
	    var uintP, hLen, l, r, funcF, Tis, DK, i, TisResolved;
	    return __generator$7(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                if (c <= 0)
	                    throw new Error('InvalidIterationCount');
	                if (dkLen <= 0)
	                    throw new Error('InvalidDerivedKeyLength');
	                uintP = (typeof p === 'string') ? js_encoding_utils_1$4.default.encoder.stringToArrayBuffer(p) : p;
	                hLen = params_1$2.default.hashes[hash].hashSize;
	                if (dkLen > (Math.pow(2, 32) - 1) * hLen)
	                    throw new Error('DerivedKeyTooLong');
	                l = Math.ceil(dkLen / hLen);
	                r = dkLen - (l - 1) * hLen;
	                funcF = function (i) { return __awaiter$7(void 0, void 0, void 0, function () {
	                    var seed, u, outputF, j;
	                    return __generator$7(this, function (_a) {
	                        switch (_a.label) {
	                            case 0:
	                                seed = new Uint8Array(s.length + 4);
	                                seed.set(s);
	                                seed.set(nwbo(i + 1, 4), s.length);
	                                return [4 /*yield*/, js_crypto_hmac_1.default.compute(uintP, seed, hash)];
	                            case 1:
	                                u = _a.sent();
	                                outputF = new Uint8Array(u);
	                                j = 1;
	                                _a.label = 2;
	                            case 2:
	                                if (!(j < c)) return [3 /*break*/, 5];
	                                return [4 /*yield*/, js_crypto_hmac_1.default.compute(uintP, u, hash)];
	                            case 3:
	                                u = _a.sent();
	                                outputF = u.map(function (elem, idx) { return elem ^ outputF[idx]; });
	                                _a.label = 4;
	                            case 4:
	                                j++;
	                                return [3 /*break*/, 2];
	                            case 5: return [2 /*return*/, { index: i, value: outputF }];
	                        }
	                    });
	                }); };
	                Tis = [];
	                DK = new Uint8Array(dkLen);
	                for (i = 0; i < l; i++)
	                    Tis.push(funcF(i));
	                return [4 /*yield*/, Promise.all(Tis)];
	            case 1:
	                TisResolved = _a.sent();
	                TisResolved.forEach(function (elem) {
	                    if (elem.index !== l - 1)
	                        DK.set(elem.value, elem.index * hLen);
	                    else
	                        DK.set(elem.value.slice(0, r), elem.index * hLen);
	                });
	                return [2 /*return*/, DK];
	        }
	    });
	}); };
	pbkdf.pbkdf2 = pbkdf2;
	// network byte order
	var nwbo = function (num, len) {
	    var arr = new Uint8Array(len);
	    for (var i = 0; i < len; i++)
	        arr[i] = (num >> ((len - i - 1) * 8));
	    return arr;
	};
	/**
	 * Password-based key derivation function 1.
	 * Detailed specification is given in RFC8018 Section 5.1 {@link https://tools.ietf.org/html/rfc8018#section-5.1}.
	 * @param {Uint8Array|String} p - Byte array or string of password. if string is given, it will be converted to Uint8Array.
	 * @param {Uint8Array} s - Byte array of salt.
	 * @param {Number} c - Iteration count.
	 * @param {Number} dkLen - Intended output key length in octet.
	 * @param {String} hash - Name of underlying hash function for HMAC like 'SHA-256'
	 * @return {Promise<Uint8Array>} - Derived key.
	 * @throws {Error} - Throws if the intended key length is too long.
	 */
	var pbkdf1 = function (p, s, c, dkLen, hash) { return __awaiter$7(void 0, void 0, void 0, function () {
	    var seed, i;
	    return __generator$7(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                if (c <= 0)
	                    throw new Error('InvalidIterationCount');
	                if (dkLen <= 0)
	                    throw new Error('InvalidDerivedKeyLength');
	                if (typeof p === 'string')
	                    p = js_encoding_utils_1$4.default.encoder.stringToArrayBuffer(p);
	                if (dkLen > params_1$2.default.hashes[hash].hashSize)
	                    throw new Error('DerivedKeyTooLong');
	                seed = new Uint8Array(p.length + s.length);
	                seed.set(p);
	                seed.set(s, p.length);
	                i = 0;
	                _a.label = 1;
	            case 1:
	                if (!(i < c)) return [3 /*break*/, 4];
	                return [4 /*yield*/, js_crypto_hash_1$1.default.compute(seed, hash)];
	            case 2:
	                seed = _a.sent();
	                _a.label = 3;
	            case 3:
	                i++;
	                return [3 /*break*/, 1];
	            case 4: return [2 /*return*/, seed.slice(0, dkLen)];
	        }
	    });
	}); };
	pbkdf.pbkdf1 = pbkdf1;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.pbkdf1 = exports.pbkdf2 = void 0;
	/**
	 * index.js
	 */
	var pbkdf$1 = __importStar(pbkdf);
	exports.pbkdf2 = pbkdf$1.pbkdf2;
	exports.pbkdf1 = pbkdf$1.pbkdf1;
	exports.default = { pbkdf2: exports.pbkdf2, pbkdf1: exports.pbkdf1 }; // both export and export default needs to be declared for compatibility on node and browser.

	}(dist$5));

	var dist$1 = {};

	var aes = {};

	var nodeapi$1 = {};

	var params$1 = {};

	/**
	 * params.js
	 */
	Object.defineProperty(params$1, "__esModule", { value: true });
	var ciphers = {
	    'AES-GCM': {
	        nodePrefix: 'aes-',
	        nodeSuffix: '-gcm',
	        ivLength: 12,
	        tagLength: 16,
	        staticIvLength: true, // if true, IV length must be always ivLength.
	    },
	    'AES-CBC': {
	        nodePrefix: 'aes-',
	        nodeSuffix: '-cbc',
	        ivLength: 16,
	        staticIvLength: true,
	    },
	    'AES-CTR': {
	        nodePrefix: 'aes-',
	        nodeSuffix: '-ctr',
	        ivLength: 12,
	        staticIvLength: false,
	    }
	};
	var wrapKeys = {
	    'AES-KW': {
	        nodePrefix: 'id-aes',
	        nodeSuffix: '-wrap',
	        ivLength: 8,
	        staticIvLength: true,
	        defaultIv: new Uint8Array([0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6])
	    }
	};
	params$1.default = { ciphers: ciphers, wrapKeys: wrapKeys };

	(function (exports) {
	/**
	 * nodeapi.js
	 */
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decrypt = exports.encrypt = exports.unwrapKey = exports.wrapKey = void 0;
	var params_1 = __importDefault(params$1);
	/**
	 * Node.js KeyWrapping function simply uses encrypt function.
	 * @param keyToBeWrapped {Uint8Array} - plaintext key
	 * @param wrappingKey {Uint8Array} - wrapping key
	 * @param name {string} - 'AES-KW'
	 * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'
	 * @param nodeCrypto {Object} - NodeCrypto object
	 * @return {Uint8Array} - Unwrapped Key
	 */
	var wrapKey = function (keyToBeWrapped, wrappingKey, _a, nodeCrypto) {
	    var name = _a.name, iv = _a.iv;
	    return exports.encrypt(keyToBeWrapped, wrappingKey, { name: name, iv: iv }, nodeCrypto, true);
	};
	exports.wrapKey = wrapKey;
	/**
	 * Node.js KeyUnwrapping function as well as keyWrapping
	 * @param wrappedKey {Uint8Array} - Wrapped key
	 * @param unwrappingKey {Uint8Array} - Key used for wrapping
	 * @param name {string} - 'AES-KW'
	 * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'
	 * @param nodeCrypto {Object} - NodeCrypto object
	 * @return {Uint8Array} - Unwrapped Key
	 */
	var unwrapKey = function (wrappedKey, unwrappingKey, _a, nodeCrypto) {
	    var name = _a.name, iv = _a.iv;
	    return exports.decrypt(wrappedKey, unwrappingKey, { name: name, iv: iv }, nodeCrypto, true);
	};
	exports.unwrapKey = unwrapKey;
	/**
	 * Encrypt plaintext message via AES Node.js crypto API
	 * @param {Uint8Array} msg - Plaintext message to be encrypted.
	 * @param {Uint8Array} key - Byte array of symmetric key.
	 * @param {String} name - Name of AES algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of initial vector if required.
	 * @param {Uint8Array} [additionalData] - Byte array of additional data if required.
	 * @param {Number} [tagLength] - Authentication tag length if required.
	 * @param {Object} nodeCrypto - NodeCrypto object, i.e., require(crypto) in Node.js.
	 * @param wrapKey {Boolean} [false] - true if called as AES-KW
	 * @return {Uint8Array} - Encrypted message byte array.
	 * @throws {Error} - Throws error if UnsupportedCipher.
	 */
	var encrypt = function (msg, key, _a, nodeCrypto, wrapKey) {
	    var name = _a.name, iv = _a.iv, additionalData = _a.additionalData, tagLength = _a.tagLength;
	    if (wrapKey === void 0) { wrapKey = false; }
	    var alg = getNodeName(name, key.byteLength, (wrapKey) ? params_1.default.wrapKeys : params_1.default.ciphers);
	    var cipher;
	    switch (name) {
	        case 'AES-GCM': {
	            cipher = nodeCrypto.createCipheriv(alg, key, iv, { authTagLength: tagLength });
	            cipher.setAAD(additionalData);
	            break;
	        }
	        case 'AES-CTR': {
	            if (iv.length === 0 || iv.length > 16)
	                throw new Error('InvalidIVLength');
	            var counter = new Uint8Array(16);
	            counter.set(iv);
	            counter[15] += 1;
	            cipher = nodeCrypto.createCipheriv(alg, key, counter);
	            break;
	        }
	        default: { // AES-CBC or AES-KW
	            cipher = nodeCrypto.createCipheriv(alg, key, iv);
	            break;
	        }
	    }
	    var body;
	    var final;
	    var tag;
	    try {
	        body = new Uint8Array(cipher.update(msg));
	        final = new Uint8Array(cipher.final());
	        tag = new Uint8Array([]);
	        if (name === 'AES-GCM')
	            tag = new Uint8Array(cipher.getAuthTag());
	    }
	    catch (e) {
	        throw new Error('NodeCrypto_EncryptionFailure');
	    }
	    var data = new Uint8Array(body.length + final.length + tag.length);
	    data.set(body);
	    data.set(final, body.length);
	    data.set(tag, body.length + final.length);
	    return data;
	};
	exports.encrypt = encrypt;
	/**
	 * Decrypt data through AES Node.js crypto API.
	 * @param {Uint8Array} data - Encrypted message to be decrypted.
	 * @param {Uint8Array} key - Byte array of symmetric key.
	 * @param {String} name - Name of AES algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of initial vector if required.
	 * @param {Uint8Array} [additionalData] - Byte array of additional data if required.
	 * @param {Number} [tagLength] - Authentication tag length if required.
	 * @param {Object} nodeCrypto - NodeCrypto object, i.e., require(crypto) in Node.js.
	 * @return {Uint8Array} - Decrypted message byte array.
	 * @param unwrapKey {Boolean} [false] - true if called as AES-KW
	 * @throws {Error} - Throws error if UnsupportedCipher or DecryptionFailure.
	 */
	var decrypt = function (data, key, _a, nodeCrypto, unwrapKey) {
	    var name = _a.name, iv = _a.iv, additionalData = _a.additionalData, tagLength = _a.tagLength;
	    if (unwrapKey === void 0) { unwrapKey = false; }
	    var alg = getNodeName(name, key.byteLength, (unwrapKey) ? params_1.default.wrapKeys : params_1.default.ciphers);
	    var decipher;
	    var body;
	    switch (name) {
	        case 'AES-GCM': {
	            decipher = nodeCrypto.createDecipheriv(alg, key, iv, { authTagLength: tagLength });
	            decipher.setAAD(additionalData);
	            body = data.slice(0, data.length - tagLength);
	            var tag = data.slice(data.length - tagLength);
	            decipher.setAuthTag(tag);
	            break;
	        }
	        case 'AES-CTR': {
	            if (iv.length === 0 || iv.length > 16)
	                throw new Error('InvalidIVLength');
	            var counter = new Uint8Array(16);
	            counter.set(iv);
	            counter[15] += 1;
	            decipher = nodeCrypto.createDecipheriv(alg, key, counter);
	            body = data;
	            break;
	        }
	        default: { // AES-CBC or AES-KW
	            decipher = nodeCrypto.createDecipheriv(alg, key, iv);
	            body = data;
	            break;
	        }
	    }
	    var decryptedBody;
	    var final;
	    try {
	        decryptedBody = decipher.update(body);
	        final = decipher.final();
	    }
	    catch (e) {
	        throw new Error('NodeCrypto_DecryptionFailure');
	    }
	    var msg = new Uint8Array(final.length + decryptedBody.length);
	    msg.set(decryptedBody);
	    msg.set(final, decryptedBody.length);
	    return msg;
	};
	exports.decrypt = decrypt;
	/**
	 * get node algorithm name
	 * @param name {string} - name of webcrypto alg like AES-GCM
	 * @param keyLength {number} - aes encryption key
	 * @param dict {object} - params.ciphers or params.wrapKeys
	 * @return {string} - node algorithm name
	 */
	var getNodeName = function (name, keyLength, dict) {
	    var alg = dict[name].nodePrefix;
	    alg = "" + alg + (keyLength * 8).toString();
	    return alg + dict[name].nodeSuffix;
	};

	}(nodeapi$1));

	var webapi$1 = {};

	/**
	 * webapi.js
	 */
	var __awaiter$6 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$6 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(webapi$1, "__esModule", { value: true });
	webapi$1.decrypt = webapi$1.encrypt = webapi$1.unwrapKey = webapi$1.wrapKey = void 0;
	/**
	 * WebCrypto KeyWrapping function simply uses encrypt function.
	 * @param keyToBeWrapped {Uint8Array} - plaintext key
	 * @param wrappingKey {Uint8Array} - wrapping key
	 * @param name {string} - 'AES-KW'
	 * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'
	 * @param webCrypto {Object} - crypto.subtle object
	 * @return {Uint8Array} - Unwrapped Key
	 */
	var wrapKey$1 = function (keyToBeWrapped, wrappingKey, _a, webCrypto) {
	    var name = _a.name, iv = _a.iv;
	    return __awaiter$6(void 0, void 0, void 0, function () {
	        var kek, cek, data, e_1;
	        return __generator$6(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    _b.trys.push([0, 4, , 5]);
	                    return [4 /*yield*/, webCrypto.importKey('raw', wrappingKey, { name: name }, false, ['wrapKey', 'unwrapKey'])];
	                case 1:
	                    kek = _b.sent();
	                    return [4 /*yield*/, webCrypto.importKey('raw', keyToBeWrapped, { name: name }, true, ['wrapKey', 'unwrapKey'])];
	                case 2:
	                    cek = _b.sent();
	                    return [4 /*yield*/, webCrypto.wrapKey('raw', cek, kek, { name: name, iv: iv })];
	                case 3:
	                    data = _b.sent();
	                    return [2 /*return*/, new Uint8Array(data)];
	                case 4:
	                    e_1 = _b.sent();
	                    throw new Error("WebCrypto_FailedToWrapKey - " + e_1.message);
	                case 5: return [2 /*return*/];
	            }
	        });
	    });
	};
	webapi$1.wrapKey = wrapKey$1;
	/**
	 * WebCrypto KeyUnwrapping function as well as keyWrapping
	 * @param wrappedKey {Uint8Array} - Wrapped key
	 * @param unwrappingKey {Uint8Array} - Key used for wrapping
	 * @param name {string} - 'AES-KW'
	 * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'
	 * @param webCrypto {Object} - crypto.subtle object
	 * @return {Uint8Array} - Unwrapped Key
	 */
	var unwrapKey$1 = function (wrappedKey, unwrappingKey, _a, webCrypto) {
	    var name = _a.name, iv = _a.iv;
	    return __awaiter$6(void 0, void 0, void 0, function () {
	        var kek, cek, _b, e_2;
	        return __generator$6(this, function (_c) {
	            switch (_c.label) {
	                case 0:
	                    _c.trys.push([0, 4, , 5]);
	                    return [4 /*yield*/, webCrypto.importKey('raw', unwrappingKey, { name: name }, false, ['wrapKey', 'unwrapKey'])];
	                case 1:
	                    kek = _c.sent();
	                    return [4 /*yield*/, webCrypto.unwrapKey('raw', wrappedKey, kek, { name: name, iv: iv }, { name: 'AES-GCM' }, true, ['encrypt', 'decrypt'])];
	                case 2:
	                    cek = _c.sent();
	                    _b = Uint8Array.bind;
	                    return [4 /*yield*/, webCrypto.exportKey('raw', cek)];
	                case 3: return [2 /*return*/, new (_b.apply(Uint8Array, [void 0, _c.sent()]))()];
	                case 4:
	                    e_2 = _c.sent();
	                    throw new Error("WebCrypto_FailedToUnwrapKey - " + e_2.message);
	                case 5: return [2 /*return*/];
	            }
	        });
	    });
	};
	webapi$1.unwrapKey = unwrapKey$1;
	/**
	 * Encrypt data through AES of WebCrypto API.
	 * @param {Uint8Array} msg - Plaintext message to be encrypted.
	 * @param {Uint8Array} key - Byte array of symmetric key.
	 * @param {String} name - Name of AES algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of initial vector if required.
	 * @param {Uint8Array} [additionalData] - Byte array of additional data if required.
	 * @param {Number} [tagLength] - Authentication tag length if required.
	 * @param {Object} webCrypto - WebCrypto object, i.e., window.crypto.subtle
	 * @return {Promise<Uint8Array>} - Encrypted data byte array.
	 * @throws {Error} - Throws if UnsupportedCipher.
	 */
	var encrypt$1 = function (msg, key, _a, webCrypto) {
	    var _b = _a.name, name = _b === void 0 ? 'AES-GCM' : _b, iv = _a.iv, additionalData = _a.additionalData, tagLength = _a.tagLength;
	    return __awaiter$6(void 0, void 0, void 0, function () {
	        var encryptionConfig, sessionKeyObj, data, e_3;
	        return __generator$6(this, function (_c) {
	            switch (_c.label) {
	                case 0:
	                    encryptionConfig = setCipherParams({ name: name, iv: iv, additionalData: additionalData, tagLength: tagLength });
	                    _c.label = 1;
	                case 1:
	                    _c.trys.push([1, 4, , 5]);
	                    return [4 /*yield*/, webCrypto.importKey('raw', key, encryptionConfig, false, ['encrypt', 'decrypt'])];
	                case 2:
	                    sessionKeyObj = _c.sent();
	                    return [4 /*yield*/, webCrypto.encrypt(encryptionConfig, sessionKeyObj, msg)];
	                case 3:
	                    data = _c.sent();
	                    return [2 /*return*/, new Uint8Array(data)];
	                case 4:
	                    e_3 = _c.sent();
	                    throw new Error("WebCrypto_EncryptionFailure: " + e_3.message);
	                case 5: return [2 /*return*/];
	            }
	        });
	    });
	};
	webapi$1.encrypt = encrypt$1;
	/**
	 * Decrypt data through AES of WebCrypto API.
	 * @param {Uint8Array} data - Encrypted message to be decrypted.
	 * @param {Uint8Array} key - Byte array of symmetric key.
	 * @param {String} name - Name of AES algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of initial vector if required.
	 * @param {Uint8Array} [additionalData] - Byte array of additional data if required.
	 * @param {Number} [tagLength] - Authentication tag length if required.
	 * @param {Object} webCrypto - WebCrypto object, i.e., window.crypto.subtle
	 * @return {Promise<Uint8Array>} - Decrypted plaintext message.
	 * @throws {Error} - Throws if UnsupportedCipher or DecryptionFailure.
	 */
	var decrypt$1 = function (data, key, _a, webCrypto) {
	    var name = _a.name, iv = _a.iv, additionalData = _a.additionalData, tagLength = _a.tagLength;
	    return __awaiter$6(void 0, void 0, void 0, function () {
	        var decryptionConfig, sessionKeyObj, msg, e_4;
	        return __generator$6(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    decryptionConfig = setCipherParams({ name: name, iv: iv, additionalData: additionalData, tagLength: tagLength });
	                    _b.label = 1;
	                case 1:
	                    _b.trys.push([1, 4, , 5]);
	                    return [4 /*yield*/, webCrypto.importKey('raw', key, decryptionConfig, false, ['encrypt', 'decrypt'])];
	                case 2:
	                    sessionKeyObj = _b.sent();
	                    return [4 /*yield*/, webCrypto.decrypt(decryptionConfig, sessionKeyObj, data)];
	                case 3:
	                    msg = _b.sent();
	                    return [2 /*return*/, new Uint8Array(msg)];
	                case 4:
	                    e_4 = _b.sent();
	                    throw new Error("WebCrypto_DecryptionFailure: " + e_4.message);
	                case 5: return [2 /*return*/];
	            }
	        });
	    });
	};
	webapi$1.decrypt = decrypt$1;
	/**
	 * Set params for encryption algorithms.
	 * @param {String} name - Name of AES algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of initial vector if required.
	 * @param {Uint8Array} [additionalData] - Byte array of additional data if required.
	 * @param {Number} [tagLength] - Authentication tag length if required.
	 */
	var setCipherParams = function (_a) {
	    var name = _a.name, iv = _a.iv, additionalData = _a.additionalData, tagLength = _a.tagLength;
	    var alg = { name: name, iv: iv, additionalData: additionalData, tagLength: tagLength };
	    switch (name) {
	        case 'AES-GCM': {
	            alg.tagLength = tagLength * 8;
	            break;
	        }
	        case 'AES-CBC': {
	            break;
	        }
	        case 'AES-CTR': {
	            if (iv.length === 0 || iv.length > 16)
	                throw new Error('InvalidIVLength');
	            alg.counter = new Uint8Array(16);
	            alg.counter.set(iv);
	            alg.counter[15] += 1;
	            alg.length = 128; // todo: this might be  (16 - iv.length) * 8.
	            break;
	        }
	    }
	    return alg;
	};

	/**
	 * aes.js
	 */
	var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
	    __setModuleDefault$4(result, mod);
	    return result;
	};
	var __awaiter$5 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$5 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(aes, "__esModule", { value: true });
	aes.unwrapKey = aes.wrapKey = aes.decrypt = aes.encrypt = void 0;
	var util$2 = __importStar$4(dist$3);
	var nodeapi = __importStar$4(nodeapi$1);
	var webapi = __importStar$4(webapi$1);
	var params_1$1 = __importDefault$4(params$1);
	/**
	 * Check if the given algorithm spec is valid.
	 * @param {String} name - Name of the specified algorithm like 'AES-GCM'.
	 * @param {Uint8Array} iv - IV byte array if required
	 * @param {Number} tagLength - Authentication tag length if required
	 * @throws {Error} - Throws if UnsupportedAlgorithm, InvalidArguments, InvalidIVLength, or InvalidTagLength.
	 */
	var assertAlgorithms = function (_a) {
	    var name = _a.name, iv = _a.iv, tagLength = _a.tagLength;
	    if (params_1$1.default.ciphers[name].ivLength) {
	        if (!(iv instanceof Uint8Array))
	            throw new Error('InvalidArguments');
	        if (iv.byteLength < 2 || iv.byteLength > 16)
	            throw new Error('InvalidIVLength');
	        if (params_1$1.default.ciphers[name].staticIvLength && (params_1$1.default.ciphers[name].ivLength !== iv.byteLength))
	            throw new Error('InvalidIVLength');
	    }
	    if (params_1$1.default.ciphers[name].tagLength && tagLength) {
	        if (!Number.isInteger(tagLength))
	            throw new Error('InvalidArguments');
	        if (tagLength < 4 || tagLength > 16)
	            throw new Error('InvalidTagLength');
	    }
	};
	/**
	 * Encrypt data with AES
	 * @param {Uint8Array} msg - Message to be encrypted.
	 * @param {Uint8Array} key - The symmetric key used to encrypt the message.
	 * @param {String} [name = 'AES-GCM'] - Name of the specified algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of the initial vector if required.
	 * @param {Uint8Array} [additionalData = new Uint8Array([])] - Byte array of additional data if required.
	 * @param {Number} [tagLength = params.ciphers[name].tagLength] - Authentication tag length if required.
	 * @return {Promise<Uint8Array>} - Encrypted message.
	 * @throws {Error} - Throws if InvalidArguments, FaildToEncryptWeb/Node, or UnsupportedEnvironment (no webcrypto/nodecrypto).
	 */
	var encrypt = function (msg, key, _a) {
	    var _b = _a.name, name = _b === void 0 ? 'AES-GCM' : _b, iv = _a.iv, _c = _a.additionalData, additionalData = _c === void 0 ? new Uint8Array([]) : _c, tagLength = _a.tagLength;
	    return __awaiter$5(void 0, void 0, void 0, function () {
	        var env;
	        return __generator$5(this, function (_d) {
	            // assertion and sanitizing
	            assertAlgorithms({ name: name, iv: iv, tagLength: tagLength });
	            if (params_1$1.default.ciphers[name].tagLength && !tagLength)
	                tagLength = params_1$1.default.ciphers[name].tagLength;
	            env = util$2.getCrypto();
	            if (env.name === 'webCrypto') { // for web API
	                if (typeof env.crypto.importKey !== 'function' || typeof env.crypto.encrypt !== 'function')
	                    throw new Error('UnsupportedWebCrypto');
	                return [2 /*return*/, webapi.encrypt(msg, key, { name: name, iv: iv, additionalData: additionalData, tagLength: tagLength }, env.crypto)];
	            }
	            else if (env.name === 'nodeCrypto') { // for node
	                return [2 /*return*/, nodeapi.encrypt(msg, key, { name: name, iv: iv, additionalData: additionalData, tagLength: tagLength }, env.crypto)];
	            }
	            else
	                throw new Error('UnsupportedEnvironment'); // TODO:fallback to native implementation
	        });
	    });
	};
	aes.encrypt = encrypt;
	/**
	 * Decrypt data with AES
	 * @param {Uint8Array} data - Byte array of encrypted data.
	 * @param {Uint8Array} key - Byte array of symmetric key to be used for decryption.
	 * @param {String} [name = 'AES-GCM'] - Name of the specified algorithm like 'AES-GCM'.
	 * @param {Uint8Array} [iv] - Byte array of the initial vector if required.
	 * @param {Uint8Array} [additionalData = new Uint8Array([])] - Byte array of additional data if required.
	 * @param {Number} [tagLength = params.ciphers[name].tagLength] - Authentication tag length if required.
	 * @return {Promise<Uint8Array>} - Decrypted plaintext message.
	 * @throws {Error} - Throws if InvalidArguments, FailedToDecryptWeb/Node, or UnsupportedEnvironment (no webcrypto/nodecrypto).
	 */
	var decrypt = function (data, key, _a) {
	    var _b = _a.name, name = _b === void 0 ? 'AES-GCM' : _b, iv = _a.iv, _c = _a.additionalData, additionalData = _c === void 0 ? new Uint8Array([]) : _c, tagLength = _a.tagLength;
	    return __awaiter$5(void 0, void 0, void 0, function () {
	        var env;
	        return __generator$5(this, function (_d) {
	            // assertion and sanitizing
	            assertAlgorithms({ name: name, iv: iv, tagLength: tagLength });
	            if (params_1$1.default.ciphers[name].tagLength && !tagLength)
	                tagLength = params_1$1.default.ciphers[name].tagLength;
	            env = util$2.getCrypto();
	            if (env.name === 'webCrypto') { // for web API
	                if (typeof env.crypto.importKey !== 'function' || typeof env.crypto.decrypt !== 'function')
	                    throw new Error('UnsupportedWebCrypto');
	                return [2 /*return*/, webapi.decrypt(data, key, { name: name, iv: iv, additionalData: additionalData, tagLength: tagLength }, env.crypto)];
	            }
	            else if (env.name === 'nodeCrypto') { // for node
	                return [2 /*return*/, nodeapi.decrypt(data, key, { name: name, iv: iv, additionalData: additionalData, tagLength: tagLength }, env.crypto)];
	            }
	            else
	                throw new Error('UnsupportedEnvironment');
	        });
	    });
	};
	aes.decrypt = decrypt;
	/**
	 * AES-KW wrapping
	 * @param keyToBeWrapped {Uint8Array} - key bytes to be wrapped
	 * @param wrappingKey {Uint8Array} - wrapping key encryption key
	 * @param name {'AES-KW'} - this is simply for future extension
	 * @return {Promise<Uint8Array>} - output wrapped key
	 */
	var wrapKey = function (keyToBeWrapped, wrappingKey, _a) {
	    var name = _a.name;
	    return __awaiter$5(void 0, void 0, void 0, function () {
	        var env, iv;
	        return __generator$5(this, function (_b) {
	            // assertion
	            if (keyToBeWrapped.length % 8 > 0)
	                throw new Error('WrappedKeyMustBeMultipleOf8');
	            env = util$2.getCrypto();
	            iv = (params_1$1.default.wrapKeys['AES-KW'].defaultIv);
	            if (env.name === 'webCrypto') { // for web API
	                if (typeof env.crypto.importKey !== 'function' || typeof env.crypto.wrapKey !== 'function')
	                    throw new Error('UnsupportedWebCrypto');
	                return [2 /*return*/, webapi.wrapKey(keyToBeWrapped, wrappingKey, { name: name, iv: iv }, env.crypto)];
	            }
	            else if (env.name === 'nodeCrypto') { // for node
	                return [2 /*return*/, nodeapi.wrapKey(keyToBeWrapped, wrappingKey, { name: name, iv: iv }, env.crypto)];
	            }
	            else {
	                throw new Error('UnsupportedEnvironment'); // TODO:fallback to native implementation
	            }
	        });
	    });
	};
	aes.wrapKey = wrapKey;
	/**
	 * AES-KW unwrapping
	 * @param wrappedKey {Uint8Array} - wrapped key bytes
	 * @param wrappingKey {Uint8Array} - wrapping key encryption key
	 * @param name {'AES-KW'} - this is simply for future extension
	 * @return {Promise<Uint8Array>} - output unwrapped key
	 */
	var unwrapKey = function (wrappedKey, wrappingKey, _a) {
	    var name = _a.name;
	    return __awaiter$5(void 0, void 0, void 0, function () {
	        var env, iv;
	        return __generator$5(this, function (_b) {
	            env = util$2.getCrypto();
	            iv = (params_1$1.default.wrapKeys['AES-KW'].defaultIv);
	            if (env.name === 'webCrypto') { // for web API
	                if (typeof env.crypto.importKey !== 'function' || typeof env.crypto.unwrapKey !== 'function')
	                    throw new Error('UnsupportedWebCrypto');
	                return [2 /*return*/, webapi.unwrapKey(wrappedKey, wrappingKey, { name: name, iv: iv }, env.crypto)];
	            }
	            else if (env.name === 'nodeCrypto') { // for node
	                return [2 /*return*/, nodeapi.unwrapKey(wrappedKey, wrappingKey, { name: name, iv: iv }, env.crypto)];
	            }
	            else {
	                throw new Error('UnsupportedEnvironment'); // TODO:fallback to native implementation
	            }
	        });
	    });
	};
	aes.unwrapKey = unwrapKey;

	(function (exports) {
	/**
	 * index.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.unwrapKey = exports.wrapKey = exports.decrypt = exports.encrypt = void 0;
	var aes$1 = __importStar(aes);
	exports.encrypt = aes$1.encrypt;
	exports.decrypt = aes$1.decrypt;
	exports.wrapKey = aes$1.wrapKey;
	exports.unwrapKey = aes$1.unwrapKey;
	exports.default = { encrypt: exports.encrypt, decrypt: exports.decrypt, wrapKey: exports.wrapKey, unwrapKey: exports.unwrapKey };

	}(dist$1));

	var dist = {};

	var random = {};

	(function (exports) {
	/**
	 * random.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getRandomBytes = exports.getRandomSampledString = exports.getRandomAsciiString = exports.getRandomString = void 0;
	var util = __importStar(dist$3);
	/**
	 * Secure random string generator based on getRandomBytes,
	 * which is composed of uppercase or lowercase alphanumeric characters;
	 * @param {Number} len - Length of string.
	 * @return {String} - Generated random ASCII string.
	 */
	var getRandomString = function (len) {
	    var array = exports.getRandomBytes(len);
	    var types = exports.getRandomBytes(len); // indicating alphanumeric, upper, lower
	    var finalString = '';
	    // Ascii code
	    // 1-0: 0x30 -- 0x39, 10 chars
	    // A-Z: 0x41 -- 0x5a,
	    // a-z: 0x61 -- 0x7a
	    for (var i = 0; i < len; i++) {
	        types[i] = (types[i] % 3);
	        array[i] = (types[i] === 0) ?
	            (array[i] % 10) + 0x30 :
	            (array[i] % 26) + ((types[i] === 1) ? 0x41 : 0x61);
	        finalString += String.fromCharCode(array[i]);
	    }
	    return finalString;
	};
	exports.getRandomString = getRandomString;
	/**
	 * Secure random 'ASCII' string generator based on getRandomBytes;
	 * @param {Number} len - Length of ASCII string.
	 * @return {String} - Generated random ASCII string.
	 */
	var getRandomAsciiString = function (len) {
	    var array = exports.getRandomBytes(len);
	    var finalString = '';
	    // Ascii code excluding control characters are in 0x20 -- 0x7e
	    for (var i = 0; i < len; i++) {
	        array[i] = (array[i] % 0x5e) + 0x20;
	        finalString += String.fromCharCode(array[i]);
	    }
	    return finalString;
	};
	exports.getRandomAsciiString = getRandomAsciiString;
	/**
	 * Secure random string generator based on getRandomBytes,
	 * which is composed of givin character candidates;
	 * @param {Number} len - Length of string.
	 * @param {String} candidates - Candidates string to sample randomly.
	 * @return {String} - Generated random string.
	 */
	var getRandomSampledString = function (len, candidates) {
	    var candidateLen = candidates.length;
	    if (candidateLen === 0)
	        return '';
	    var array = exports.getRandomBytes(len);
	    var finalString = '';
	    for (var i = 0; i < len; i++) {
	        finalString += candidates[array[i] % candidateLen];
	    }
	    return finalString;
	};
	exports.getRandomSampledString = getRandomSampledString;
	/**
	 * Secure random generator that returns a byte array filled with cryptographically secure random bytes
	 * @param {Number} len - Byte length of random sequence.
	 * @return {Uint8Array} - Generated random sequence.
	 * @throws {Error} - Throws if UnsupportedEnvironment.
	 */
	var getRandomBytes = function (len) {
	    var webCrypto = util.getRootWebCrypto(); // web crypto api
	    var nodeCrypto = util.getNodeCrypto(); // implementation on node.js
	    if (typeof webCrypto !== 'undefined' && typeof webCrypto.getRandomValues === 'function') {
	        var array = new Uint8Array(len);
	        webCrypto.getRandomValues(array); // for modern browsers
	        return array;
	    }
	    else if (typeof nodeCrypto !== 'undefined') { // for node
	        return new Uint8Array(nodeCrypto.randomBytes(len));
	    }
	    else {
	        throw new Error('UnsupportedEnvironment');
	    }
	};
	exports.getRandomBytes = getRandomBytes;

	}(random));

	(function (exports) {
	/**
	 * index.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getRandomSampledString = exports.getRandomString = exports.getRandomAsciiString = exports.getRandomBytes = void 0;
	var random$1 = __importStar(random);
	exports.getRandomBytes = random$1.getRandomBytes;
	exports.getRandomAsciiString = random$1.getRandomAsciiString;
	exports.getRandomString = random$1.getRandomString;
	exports.getRandomSampledString = random$1.getRandomSampledString;
	exports.default = { getRandomBytes: exports.getRandomBytes, getRandomAsciiString: exports.getRandomAsciiString, getRandomString: exports.getRandomString, getRandomSampledString: exports.getRandomSampledString };

	}(dist));

	/**
	 * rfc8081
	 */
	var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	    __setModuleDefault$3(result, mod);
	    return result;
	};
	var __awaiter$4 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$4 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(rfc8018, "__esModule", { value: true });
	rfc8018.decryptEncryptedPrivateKeyInfo = rfc8018.encryptEncryptedPrivateKeyInfo = void 0;
	var params = __importStar$3(params$b);
	var asn1def_1$1 = asn1def;
	var des_js_1 = __importDefault$3(des$2);
	var BufferMod$2 = __importStar$3(require$$2$3);
	var asn1_js_1 = __importDefault$3(asn1$2);
	var js_encoding_utils_1$3 = __importDefault$3(dist$6);
	var js_crypto_pbkdf_1 = __importDefault$3(dist$5);
	var js_crypto_aes_1 = __importDefault$3(dist$1);
	var js_crypto_random_1 = __importDefault$3(dist);
	var Buffer$2 = BufferMod$2.Buffer;
	var BN = asn1_js_1.default.bignum;
	///////////////////////////////////////////////////////////////////
	/**
	 * Generate EncryptedPrivateKeyInfo ASN.1 object.
	 * @param {DER} binKey - Binary key in DER format.
	 * @param {AsnEncryptOptionsWithPassphrase} [options={passphrase: ''}] - Encryption options for ASN.1 private key.
	 * @return {Promise<DER>} - Encrypted private key in DER.
	 */
	var encryptEncryptedPrivateKeyInfo = function (binKey, options) {
	    if (options === void 0) { options = { passphrase: '' }; }
	    return __awaiter$4(void 0, void 0, void 0, function () {
	        var kdfAlgorithm, encryptedPBES2, encryptedPBES1;
	        return __generator$4(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    // default params
	                    if (typeof options.algorithm === 'undefined')
	                        options.algorithm = 'pbes2';
	                    if (typeof options.iterationCount === 'undefined')
	                        options.iterationCount = 2048;
	                    if (!(options.algorithm === 'pbes2')) return [3 /*break*/, 2];
	                    if (typeof options.cipher === 'undefined')
	                        options.cipher = 'aes256-cbc';
	                    if (typeof options.prf === 'undefined')
	                        options.prf = 'hmacWithSHA256';
	                    kdfAlgorithm = 'pbkdf2';
	                    return [4 /*yield*/, encryptPBES2(binKey, options.passphrase, kdfAlgorithm, options.prf, options.iterationCount, options.cipher)];
	                case 1:
	                    encryptedPBES2 = _a.sent();
	                    return [2 /*return*/, encodePBES2(encryptedPBES2)];
	                case 2: return [4 /*yield*/, encryptPBES1(binKey, options.passphrase, options.algorithm, options.iterationCount)];
	                case 3:
	                    encryptedPBES1 = _a.sent();
	                    encryptedPBES1.encryptionAlgorithm.algorithm = params.passwordBasedEncryptionSchemes[encryptedPBES1.encryptionAlgorithm.algorithm].oid; // work around
	                    encryptedPBES1.encryptionAlgorithm.parameters = asn1def_1$1.PBEParameter.encode(encryptedPBES1.encryptionAlgorithm.parameters, 'der');
	                    return [2 /*return*/, asn1def_1$1.EncryptedPrivateKeyInfo.encode(encryptedPBES1, 'der')];
	            }
	        });
	    });
	};
	rfc8018.encryptEncryptedPrivateKeyInfo = encryptEncryptedPrivateKeyInfo;
	/**
	 * Decrypt EncryptedPrivateKeyInfo
	 * @param {Object} epki - Parsed encrypted
	 * @param {String} passphrase - Passphrase to decyrpt the object.
	 * @return {Promise<Object>} - Decrypted object.
	 */
	var decryptEncryptedPrivateKeyInfo = function (epki, passphrase) { return __awaiter$4(void 0, void 0, void 0, function () {
	    var decoded;
	    return __generator$4(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                decoded = {};
	                // encryptionAlgorithm.algorithm
	                decoded.encryptionAlgorithm = {
	                    algorithm: params.getAlgorithmFromOidStrict(epki.encryptionAlgorithm.algorithm, params.passwordBasedEncryptionSchemes)
	                };
	                if (decoded.encryptionAlgorithm.algorithm === 'pbes2') {
	                    decoded.encryptionAlgorithm.parameters = decodePBES2(epki.encryptionAlgorithm.parameters);
	                }
	                else {
	                    decoded.encryptionAlgorithm.parameters = asn1def_1$1.PBEParameter.decode(epki.encryptionAlgorithm.parameters, 'der');
	                }
	                decoded.encryptedData = epki.encryptedData;
	                if (!(decoded.encryptionAlgorithm.algorithm === 'pbes2')) return [3 /*break*/, 2];
	                return [4 /*yield*/, decryptPBES2(decoded, passphrase)];
	            case 1: return [2 /*return*/, _a.sent()]; // work around
	            case 2: return [4 /*yield*/, decryptPBES1(decoded, passphrase)];
	            case 3: return [2 /*return*/, _a.sent()];
	        }
	    });
	}); };
	rfc8018.decryptEncryptedPrivateKeyInfo = decryptEncryptedPrivateKeyInfo;
	//////////////////////////////
	var encodePBES2 = function (decoded // work around
	) {
	    var epki = { encryptionAlgorithm: {} }; // work around
	    // algorithm
	    epki.encryptionAlgorithm.algorithm = params.passwordBasedEncryptionSchemes[decoded.encryptionAlgorithm.algorithm].oid;
	    // kdf
	    var kdf = decoded.encryptionAlgorithm.parameters.keyDerivationFunc;
	    if (kdf.algorithm === 'pbkdf2') {
	        kdf.parameters.prf.algorithm = params.pbkdf2Prfs[kdf.parameters.prf.algorithm].oid;
	        kdf.parameters = asn1def_1$1.PBKDF2Params.encode(kdf.parameters, 'der');
	    }
	    else
	        throw new Error('UnsupportedKDF');
	    kdf.algorithm = params.keyDerivationFunctions[kdf.algorithm].oid;
	    // encryptionScheme
	    var eS = decoded.encryptionAlgorithm.parameters.encryptionScheme;
	    if (Object.keys(asn1def_1$1.PBES2ESParams).indexOf(eS.algorithm) >= 0) {
	        eS.parameters = asn1def_1$1.PBES2ESParams[eS.algorithm].encode(eS.parameters, 'der');
	    }
	    else
	        throw new Error('UnsupportedCipher');
	    eS.algorithm = params.encryptionSchemes[eS.algorithm].oid;
	    // params
	    epki.encryptionAlgorithm.parameters = asn1def_1$1.PBES2Params.encode({ keyDerivationFunc: kdf, encryptionScheme: eS }, 'der');
	    // encoded data
	    epki.encryptedData = decoded.encryptedData;
	    return asn1def_1$1.EncryptedPrivateKeyInfo.encode(epki, 'der');
	};
	var decodePBES2 = function (rawParams) {
	    var pbes2Params = asn1def_1$1.PBES2Params.decode(rawParams, 'der');
	    // keyDerivationFunc
	    var kdfAlgorithm = params.getAlgorithmFromOidStrict(pbes2Params.keyDerivationFunc.algorithm, params.keyDerivationFunctions);
	    var iterationCount;
	    var salt;
	    var prf;
	    if (kdfAlgorithm === 'pbkdf2') {
	        var pbkdf2Params = asn1def_1$1.PBKDF2Params.decode(pbes2Params.keyDerivationFunc.parameters, 'der');
	        prf = {
	            algorithm: params.getAlgorithmFromOidStrict(pbkdf2Params.prf.algorithm, params.pbkdf2Prfs),
	            parameters: pbkdf2Params.prf.parameters
	        };
	        iterationCount = pbkdf2Params.iterationCount;
	        salt = { type: pbkdf2Params.salt.type, value: pbkdf2Params.salt.value };
	    }
	    else
	        throw new Error('UnsupportedKDF');
	    //encryptionScheme
	    var encryptionScheme = params.getAlgorithmFromOidStrict(pbes2Params.encryptionScheme.algorithm, params.encryptionSchemes);
	    var encryptionParams;
	    if (Object.keys(asn1def_1$1.PBES2ESParams).indexOf(encryptionScheme) >= 0) {
	        encryptionParams = asn1def_1$1.PBES2ESParams[encryptionScheme].decode(pbes2Params.encryptionScheme.parameters, 'der');
	    }
	    else
	        throw new Error('UnsupportedCipher'); // TODO: Other Encryption Scheme
	    return {
	        keyDerivationFunc: {
	            algorithm: kdfAlgorithm,
	            parameters: { salt: salt, iterationCount: iterationCount, prf: prf }
	        },
	        encryptionScheme: {
	            algorithm: encryptionScheme,
	            parameters: encryptionParams
	        }
	    };
	};
	//////////////////////
	// PBES2 RFC8018 Section 6.2.1
	var encryptPBES2 = function (binKey, passphrase, kdfAlgorithm, prf, iterationCount, cipher) { return __awaiter$4(void 0, void 0, void 0, function () {
	    var pBuffer, salt, keyLength, key, iv, encryptedData, _a, _b, CBC, ct, _c, _d;
	    return __generator$4(this, function (_e) {
	        switch (_e.label) {
	            case 0:
	                pBuffer = js_encoding_utils_1$3.default.encoder.stringToArrayBuffer(passphrase);
	                return [4 /*yield*/, js_crypto_random_1.default.getRandomBytes(params.keyDerivationFunctions[kdfAlgorithm].defaultSaltLen)];
	            case 1:
	                salt = _e.sent();
	                keyLength = params.encryptionSchemes[cipher].keyLength;
	                if (!(kdfAlgorithm === 'pbkdf2')) return [3 /*break*/, 3];
	                return [4 /*yield*/, js_crypto_pbkdf_1.default.pbkdf2(pBuffer, salt, iterationCount, keyLength, params.pbkdf2Prfs[prf].hash)];
	            case 2:
	                key = _e.sent(); // work around
	                return [3 /*break*/, 4];
	            case 3: throw new Error('UnsupportedKDF');
	            case 4:
	                if (!(cipher === 'des-ede3-cbc')) return [3 /*break*/, 6];
	                _b = (_a = Buffer$2).from;
	                return [4 /*yield*/, js_crypto_random_1.default.getRandomBytes(params.encryptionSchemes[cipher].ivLength)];
	            case 5:
	                iv = _b.apply(_a, [_e.sent()]);
	                CBC = des_js_1.default.CBC.instantiate(des_js_1.default.EDE);
	                ct = CBC.create({ type: 'encrypt', key: Buffer$2.from(key), iv: iv });
	                encryptedData = Buffer$2.from(ct.update(binKey).concat(ct.final()));
	                return [3 /*break*/, 10];
	            case 6:
	                if (!(cipher === 'aes128-cbc' || cipher === 'aes192-cbc' || cipher === 'aes256-cbc')) return [3 /*break*/, 9];
	                return [4 /*yield*/, js_crypto_random_1.default.getRandomBytes(params.encryptionSchemes[cipher].ivLength)];
	            case 7:
	                iv = _e.sent();
	                _d = (_c = Buffer$2).from;
	                return [4 /*yield*/, js_crypto_aes_1.default.encrypt(new Uint8Array(binKey), key, { name: 'AES-CBC', iv: iv })];
	            case 8:
	                encryptedData = _d.apply(_c, [_e.sent()]);
	                iv = Buffer$2.from(iv);
	                return [3 /*break*/, 10];
	            case 9: throw new Error('UnsupportedCipher');
	            case 10: 
	            // structure
	            return [2 /*return*/, {
	                    encryptedData: encryptedData,
	                    encryptionAlgorithm: {
	                        algorithm: 'pbes2',
	                        parameters: {
	                            keyDerivationFunc: {
	                                algorithm: kdfAlgorithm,
	                                parameters: {
	                                    salt: { type: 'specified', value: Buffer$2.from(salt) },
	                                    iterationCount: new BN(iterationCount),
	                                    prf: { algorithm: prf, parameters: Buffer$2.from([0x05, 0x00]) }
	                                }
	                            },
	                            encryptionScheme: { algorithm: cipher, parameters: iv }
	                        }
	                    }
	                }];
	        }
	    });
	}); };
	//////////////////////////////
	// PBES2 RFC8018 Section 6.2.2
	var decryptPBES2 = function (decoded, passphrase) { return __awaiter$4(void 0, void 0, void 0, function () {
	    var kdf, eS, keyLength, key, pBuffer, salt, iterationCount, prf, out, iv, CBC, pt, iv, _a, _b;
	    return __generator$4(this, function (_c) {
	        switch (_c.label) {
	            case 0:
	                kdf = decoded.encryptionAlgorithm.parameters.keyDerivationFunc;
	                eS = decoded.encryptionAlgorithm.parameters.encryptionScheme;
	                keyLength = params.encryptionSchemes[eS.algorithm].keyLength;
	                if (!(kdf.algorithm === 'pbkdf2')) return [3 /*break*/, 2];
	                pBuffer = js_encoding_utils_1$3.default.encoder.stringToArrayBuffer(passphrase);
	                if (kdf.parameters.salt.type !== 'specified')
	                    throw new Error('UnsupportedSaltSource');
	                salt = new Uint8Array(kdf.parameters.salt.value);
	                iterationCount = kdf.parameters.iterationCount.toNumber();
	                prf = kdf.parameters.prf.algorithm;
	                return [4 /*yield*/, js_crypto_pbkdf_1.default.pbkdf2(pBuffer, salt, iterationCount, keyLength, params.pbkdf2Prfs[prf].hash)];
	            case 1:
	                key = _c.sent();
	                return [3 /*break*/, 3];
	            case 2: throw new Error('UnsupportedKDF');
	            case 3:
	                if (!(eS.algorithm === 'des-ede3-cbc')) return [3 /*break*/, 4];
	                iv = eS.parameters;
	                CBC = des_js_1.default.CBC.instantiate(des_js_1.default.EDE);
	                pt = CBC.create({ type: 'decrypt', key: key, iv: iv });
	                out = Buffer$2.from(pt.update(decoded.encryptedData).concat(pt.final()));
	                return [3 /*break*/, 7];
	            case 4:
	                if (!(eS.algorithm === 'aes128-cbc' || eS.algorithm === 'aes192-cbc' || eS.algorithm === 'aes256-cbc')) return [3 /*break*/, 6];
	                iv = new Uint8Array(eS.parameters);
	                _b = (_a = Buffer$2).from;
	                return [4 /*yield*/, js_crypto_aes_1.default.decrypt(new Uint8Array(decoded.encryptedData), key, { name: 'AES-CBC', iv: iv })];
	            case 5:
	                out = _b.apply(_a, [_c.sent()]);
	                return [3 /*break*/, 7];
	            case 6: throw new Error('UnsupportedEncryptionAlgorithm');
	            case 7: return [2 /*return*/, asn1def_1$1.OneAsymmetricKey.decode(out, 'der')];
	        }
	    });
	}); };
	//////////////////////////////
	// PBES1 RFC8018 Section 6.1.1
	var encryptPBES1 = function (binKey, passphrase, algorithm, iterationCount) { return __awaiter$4(void 0, void 0, void 0, function () {
	    var pBuffer, salt, hash, keyIv, key, iv, encrypt, out, CBC, ct;
	    return __generator$4(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                pBuffer = js_encoding_utils_1$3.default.encoder.stringToArrayBuffer(passphrase);
	                return [4 /*yield*/, js_crypto_random_1.default.getRandomBytes(8)];
	            case 1:
	                salt = _a.sent();
	                hash = params.passwordBasedEncryptionSchemes[algorithm].hash;
	                return [4 /*yield*/, js_crypto_pbkdf_1.default.pbkdf1(pBuffer, salt, iterationCount, 16, hash)];
	            case 2:
	                keyIv = _a.sent();
	                key = keyIv.slice(0, 8);
	                iv = keyIv.slice(8, 16);
	                encrypt = params.passwordBasedEncryptionSchemes[algorithm].encrypt;
	                // TODO: Other Encryption Scheme
	                if (encrypt === 'DES-CBC') {
	                    CBC = des_js_1.default.CBC.instantiate(des_js_1.default.DES);
	                    ct = CBC.create({ type: 'encrypt', key: key, iv: iv });
	                    out = Buffer$2.from(ct.update(binKey).concat(ct.final()));
	                }
	                else
	                    throw new Error('UnsupportedEncryptionAlgorithm');
	                return [2 /*return*/, {
	                        encryptionAlgorithm: {
	                            algorithm: algorithm,
	                            parameters: {
	                                salt: Buffer$2.from(salt),
	                                iterationCount: new BN(iterationCount)
	                            }
	                        },
	                        encryptedData: out
	                    }];
	        }
	    });
	}); };
	//////////////////////////////
	// PBES1 RFC8018 Section 6.1.2
	var decryptPBES1 = function (decoded, passphrase) { return __awaiter$4(void 0, void 0, void 0, function () {
	    var pBuffer, salt, hash, iterationCount, keyIv, key, iv, encrypt, out, CBC, ct;
	    return __generator$4(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                pBuffer = js_encoding_utils_1$3.default.encoder.stringToArrayBuffer(passphrase);
	                salt = new Uint8Array(decoded.encryptionAlgorithm.parameters.salt);
	                hash = params.passwordBasedEncryptionSchemes[decoded.encryptionAlgorithm.algorithm].hash;
	                iterationCount = decoded.encryptionAlgorithm.parameters.iterationCount.toNumber();
	                return [4 /*yield*/, js_crypto_pbkdf_1.default.pbkdf1(pBuffer, salt, iterationCount, 16, hash)];
	            case 1:
	                keyIv = _a.sent();
	                key = keyIv.slice(0, 8);
	                iv = keyIv.slice(8, 16);
	                encrypt = params.passwordBasedEncryptionSchemes[decoded.encryptionAlgorithm.algorithm].encrypt;
	                // TODO: Other Encryption Scheme
	                if (encrypt === 'DES-CBC') {
	                    CBC = des_js_1.default.CBC.instantiate(des_js_1.default.DES);
	                    ct = CBC.create({ type: 'decrypt', key: key, iv: iv });
	                    out = Buffer$2.from(ct.update(decoded.encryptedData).concat(ct.final()));
	                }
	                else
	                    throw new Error('UnsupportedEncryptionAlgorithm');
	                return [2 /*return*/, asn1def_1$1.OneAsymmetricKey.decode(out, 'der')];
	        }
	    });
	}); };

	/**
	 * asn1enc.js
	 */
	var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	    __setModuleDefault$2(result, mod);
	    return result;
	};
	var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$3 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(asn1enc$1, "__esModule", { value: true });
	asn1enc$1.toJwk = asn1enc$1.fromJwk = void 0;
	var asn1ec = __importStar$2(asn1ec$1);
	var asn1rsa = __importStar$2(asn1rsa$1);
	var params_1 = params$b;
	var js_encoding_utils_1$2 = __importDefault$2(dist$6);
	var BufferMod$1 = __importStar$2(require$$2$3);
	var asn1def_1 = asn1def;
	var rfc8018_1 = rfc8018;
	var util_1$1 = util$4;
	var Buffer$1 = BufferMod$1.Buffer;
	/**
	 * Convert jwk to spki/pkcs8 in string or binary format.
	 * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded.
	 * @param {boolean} outputPublic - Derive public key from private key when true
	 * @param {AsnFormat} format - 'pem' or 'der'
	 * @param {boolean} compact - 'true' or 'false' for EC public key compressed representation in der/pem
	 * @param {String} passphrase - if passphrase is given and the given key is private key, it will be encoded with the passphrase.
	 * @param {AsnEncryptOptionsWithPassphrase} encOptions - ASN.1 encryption options
	 * @return {Uint8Array|String} - Encoded private key in DER or PEM
	 */
	var fromJwk = function (jwkey, format, _a) {
	    var outputPublic = _a.outputPublic, _b = _a.compact, compact = _b === void 0 ? false : _b, encOptions = _a.encOptions;
	    return __awaiter$3(void 0, void 0, void 0, function () {
	        var orgType, type, decoded, binKey;
	        return __generator$3(this, function (_c) {
	            switch (_c.label) {
	                case 0:
	                    orgType = util_1$1.getJwkType(jwkey);
	                    type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;
	                    if (jwkey.kty === 'EC') {
	                        decoded = asn1ec.fromJWK(jwkey, type, compact);
	                    }
	                    else if (jwkey.kty === 'RSA') {
	                        decoded = asn1rsa.fromJwk(jwkey, type);
	                    }
	                    if (!(type === 'public')) return [3 /*break*/, 1];
	                    binKey = asn1def_1.SubjectPublicKeyInfo.encode(decoded, 'der');
	                    return [3 /*break*/, 3];
	                case 1:
	                    binKey = asn1def_1.OneAsymmetricKey.encode(decoded, 'der');
	                    if (!(typeof encOptions !== 'undefined' && typeof encOptions.passphrase !== 'undefined' && encOptions.passphrase.length > 0)) return [3 /*break*/, 3];
	                    return [4 /*yield*/, rfc8018_1.encryptEncryptedPrivateKeyInfo(binKey, encOptions)];
	                case 2:
	                    binKey = _c.sent();
	                    type = 'encryptedPrivate';
	                    _c.label = 3;
	                case 3:
	                    binKey = new Uint8Array(binKey);
	                    return [2 /*return*/, (format === 'pem') ? js_encoding_utils_1$2.default.formatter.binToPem(binKey, type) : binKey];
	            }
	        });
	    });
	};
	asn1enc$1.fromJwk = fromJwk;
	/**
	 * Convert SPKI/PKCS8 key in string or binary format to JWK.
	 * @param {PEM|DER} key - Key object.
	 * @param {AsnFormat} format - 'pem' or 'der'
	 * @param {boolean} [outputPublic] - Export public key even from private key if true.
	 * @param {String} [passphrase] - Encrypt private key if passphrase is given.
	 * @return {JsonWebKey} - Obtained key object in JWK format.
	 * @throws {Error} Throws if UnsupportedKeyStructure, UnsupportedKey or InvalidKeyType.
	 */
	var toJwk = function (key, format, _a) {
	    var outputPublic = _a.outputPublic, passphrase = _a.passphrase;
	    return __awaiter$3(void 0, void 0, void 0, function () {
	        var binKey, decoded, type, keyTypes;
	        return __generator$3(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    binKey = (format === 'pem') ? js_encoding_utils_1$2.default.formatter.pemToBin(key) : key;
	                    try {
	                        decoded = asn1def_1.KeyStructure.decode(Buffer$1.from(binKey), 'der');
	                    }
	                    catch (e) {
	                        throw new Error('FailedToDecodeKey');
	                    }
	                    if (!(decoded.type === 'subjectPublicKeyInfo')) return [3 /*break*/, 1];
	                    type = 'public';
	                    decoded = decoded.value;
	                    return [3 /*break*/, 4];
	                case 1:
	                    type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : 'private';
	                    if (!(decoded.type === 'encryptedPrivateKeyInfo')) return [3 /*break*/, 3];
	                    return [4 /*yield*/, rfc8018_1.decryptEncryptedPrivateKeyInfo(decoded.value, passphrase)];
	                case 2:
	                    decoded = _b.sent();
	                    return [3 /*break*/, 4];
	                case 3:
	                    if (decoded.type === 'oneAsymmetricKey')
	                        decoded = decoded.value;
	                    else
	                        throw new Error('UnsupportedKeyStructure');
	                    _b.label = 4;
	                case 4:
	                    keyTypes = params_1.getAlgorithmFromOid((type === 'public') ? decoded.algorithm.algorithm : decoded.privateKeyAlgorithm.algorithm, params_1.publicKeyAlgorithms);
	                    if (keyTypes.length < 1)
	                        throw new Error('UnsupportedKey');
	                    if (keyTypes[0] === 'EC') {
	                        return [2 /*return*/, asn1ec.toJWK(decoded, type)];
	                    }
	                    else if (keyTypes[0] === 'RSA') {
	                        return [2 /*return*/, asn1rsa.toJwk(decoded, type)];
	                    }
	                    else
	                        throw new Error('InvalidKeyType');
	            }
	        });
	    });
	};
	asn1enc$1.toJwk = toJwk;

	/**
	 * converter.js
	 */
	var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	    __setModuleDefault$1(result, mod);
	    return result;
	};
	var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$2 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(converter, "__esModule", { value: true });
	converter.toJwkFrom = converter.fromJwkTo = void 0;
	var asn1enc = __importStar$1(asn1enc$1);
	var octenc = __importStar$1(octenc$1);
	// ASN.1 in RFC5280 (SPKI) and RFC5208 (PKCS8) -> RSA and EC, encode='asn', format='pem' or 'der'
	// -> SPKI (in X.509): RFC5280 for public key, PKCS8: RFC5208 for private key
	// Octet Form in ANSI X9.63 -> EC, encode='oct', format='string' or 'binary', compact=true or false
	// -> Standards for Efficient Cryptography Group (SECG), "SEC1: Elliptic Curve Cryptography", Version 1.0, September 2000.
	/**
	 * Convert JWK to ASN.1 (for RSA and EC) and Octet (for EC) encoded keys.
	 * @param {'pem'|'der'|'oct'} output - 'pem', 'der', or 'oct' (only EC JWK), output format.
	 * @param {JsonWebKey} jwkey - A JWK to be encoded.
	 * @param {KeyExportOptions} options - Options to export key including encryption options.
	 *   For EC JWK : options.compact = true or false
	 *   For EC JWK with output = 'oct' : options.format = 'binary' or 'string'
	 *   For both: outputPublic (optional) : boolean. derived key type. from private key, public key can be derived when true.
	 * @return {PEM|DER|OctetEC} - Output key object.
	 */
	var fromJwkTo = function (output, jwkey, options) {
	    if (output === void 0) { output = 'pem'; }
	    if (options === void 0) { options = {}; }
	    return __awaiter$2(void 0, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    // assertion
	                    if (jwkey.kty !== 'EC' && jwkey.kty !== 'RSA')
	                        throw new Error('UnsupportedKeyType');
	                    // default values
	                    if (jwkey.kty === 'EC' && typeof options.compact === 'undefined')
	                        options.compact = false;
	                    if (output === 'oct' && options.output !== 'string')
	                        options.output = 'binary';
	                    if (typeof options.encryptParams === 'undefined')
	                        options.encryptParams = { passphrase: '' };
	                    if ((output === 'der' || output === 'pem') && typeof options.encryptParams.passphrase === 'undefined')
	                        options.encryptParams.passphrase = '';
	                    if (!(output === 'der' || output === 'pem')) return [3 /*break*/, 2];
	                    return [4 /*yield*/, asn1enc.fromJwk(jwkey, output, { outputPublic: options.outputPublic, compact: options.compact, encOptions: options.encryptParams })];
	                case 1: return [2 /*return*/, _a.sent()];
	                case 2:
	                    if (output === 'oct' && jwkey.kty === 'EC') {
	                        return [2 /*return*/, octenc.fromJwk(jwkey, { outputPublic: options.outputPublic, outputFormat: options.output, compact: options.compact })];
	                    }
	                    else
	                        throw new Error('UnsupportedConversion');
	                case 3: return [2 /*return*/];
	            }
	        });
	    });
	};
	converter.fromJwkTo = fromJwkTo;
	/**
	 * Convert ASN.1 encoded (for RSA and EC) or octet formed (for EC) keys to JWK.
	 * @param {'pem'|'der'|'oct'} input - 'pem', 'der' or 'oct', input key format.
	 * @param {PEM|DER|OctetEC} key - A key object to be encoded.
	 * @param {JwkExportOptionsInternal} [options={}] - options to export JWK keys.
	 * @return {JsonWebKey} - Obtained key object in JWK format.
	 * @throws {Error} - Throws if InvalidInputForm, InappropriateOptions, outputPublicMustBeBoolean or UnsupportedConversion
	 */
	var toJwkFrom = function (input, key, options) {
	    if (options === void 0) { options = {}; }
	    return __awaiter$2(void 0, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    // assertion
	                    if (input === 'oct' && !options.namedCurve)
	                        throw new Error('InappropriateOptions');
	                    // default values
	                    if ((input === 'der' || input === 'pem') && typeof options.passphrase === 'undefined')
	                        options.passphrase = '';
	                    if (!(input === 'der' || input === 'pem')) return [3 /*break*/, 2];
	                    return [4 /*yield*/, asn1enc.toJwk(key, input, { outputPublic: options.outputPublic, passphrase: options.passphrase })];
	                case 1: return [2 /*return*/, _a.sent()];
	                case 2:
	                    if (input === 'oct') {
	                        return [2 /*return*/, octenc.toJwk(key, options.namedCurve, { outputPublic: options.outputPublic })];
	                    }
	                    else
	                        throw new Error('UnsupportedConversion');
	                case 3: return [2 /*return*/];
	            }
	        });
	    });
	};
	converter.toJwkFrom = toJwkFrom;

	var thumbprint = {};

	/**
	 * thumbprint.js
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$1 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(thumbprint, "__esModule", { value: true });
	thumbprint.getJwkThumbprint = void 0;
	var js_encoding_utils_1$1 = __importDefault$1(dist$6);
	var js_crypto_hash_1 = __importDefault$1(dist$4);
	var BufferMod = __importStar(require$$2$3);
	var Buffer = BufferMod.Buffer;
	/**
	 * Compute JWK public key thumbprint specified in RFC7638
	 * https://tools.ietf.org/html/rfc7638
	 * @param {JsonWebKey} jwkey - A key object in JWK format
	 * @param {HashTypes} [alg='SHA-256'] - Name of hash algorithm to compute the thumbprint.
	 * @param {JwkThumbprintFormat} [output='binary'] - Output format, 'binary', 'hex' or 'base64'
	 * @return {Promise<String|Uint8Array>} - The computed JWK thumbprint.
	 */
	var getJwkThumbprint = function (jwkey, alg, output) {
	    if (alg === void 0) { alg = 'SHA-256'; }
	    if (output === void 0) { output = 'binary'; }
	    return __awaiter$1(void 0, void 0, void 0, function () {
	        var jsonString, uint8json, thumbPrintBuf;
	        return __generator$1(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    // assertion
	                    if (['hex', 'binary'].indexOf(output) < 0)
	                        throw new Error('UnsupportedOutputFormat');
	                    if (jwkey.kty === 'EC') {
	                        jsonString = JSON.stringify({ crv: jwkey.crv, kty: jwkey.kty, x: jwkey.x, y: jwkey.y });
	                    }
	                    else if (jwkey.kty === 'RSA') {
	                        jsonString = JSON.stringify({ e: jwkey.e, kty: jwkey.kty, n: jwkey.n });
	                    }
	                    else
	                        throw new Error('UnsupportedKeyType');
	                    uint8json = new Uint8Array(Buffer.from(jsonString, 'utf8'));
	                    return [4 /*yield*/, js_crypto_hash_1.default.compute(uint8json, alg)];
	                case 1:
	                    thumbPrintBuf = _a.sent();
	                    if (output === 'hex')
	                        return [2 /*return*/, js_encoding_utils_1$1.default.encoder.arrayBufferToHexString(thumbPrintBuf)];
	                    else if (output === 'base64')
	                        return [2 /*return*/, js_encoding_utils_1$1.default.encoder.encodeBase64(thumbPrintBuf)];
	                    else
	                        return [2 /*return*/, thumbPrintBuf]; // output === 'binary'
	            }
	        });
	    });
	};
	thumbprint.getJwkThumbprint = getJwkThumbprint;

	var lodash_clonedeep = {exports: {}};

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	(function (module, exports) {
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, true, true);
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = cloneDeep;
	}(lodash_clonedeep, lodash_clonedeep.exports));

	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(key, "__esModule", { value: true });
	key.Key = void 0;
	/**
	 * key.js
	 */
	var converter_1 = converter;
	var thumbprint_1 = thumbprint;
	var js_encoding_utils_1 = __importDefault(dist$6);
	var util_1 = util$4;
	var cloneDeep = lodash_clonedeep.exports;
	/**
	 * Key class to abstract public and private key objects in string or binary.
	 *   This class provides functions to interchangeably convert key formats,
	 *   and key objects will be used for the root package, js-crypto-utils, as inputs to exposed APIs.
	 */
	var Key = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {KeyFormat} format - Key format: 'jwk', 'der', 'pem' or 'oct' (only for ECC key).
	     * @param {JsonWebKey|PEM|DER|OctetEC} key - Key object in the specified format.
	     * @param {Object} [options={}] - Required if format='oct', and then it is {namedCurve: String}.
	     * @throws {Error} - Throws if the input format and key are incompatible to the constructor.
	     */
	    function Key(format, key, options) {
	        if (options === void 0) { options = {}; }
	        var localKey = cloneDeep(key);
	        var localOpt = cloneDeep(options);
	        this._type = null;
	        this._jwk = null;
	        this._der = null;
	        this._oct = {}; // only for EC keys
	        this._isEncrypted = false;
	        this._current = { jwk: false, der: false, oct: false };
	        if (format === 'jwk') {
	            this._setJwk(localKey);
	        }
	        else if (format === 'der' || format === 'pem') {
	            if (format === 'der' && !(localKey instanceof Uint8Array))
	                throw new Error('DerKeyMustBeUint8Array');
	            if (format === 'pem' && (typeof localKey !== 'string'))
	                throw new Error('PemKeyMustBeString');
	            this._setAsn1(localKey, format);
	        }
	        else if (format === 'oct') {
	            if (typeof localOpt.namedCurve !== 'string')
	                throw new Error('namedCurveMustBeSpecified');
	            if (!(localKey instanceof Uint8Array))
	                throw new Error('OctetKeyMustBeUint8Array');
	            this._setSec1(localKey, localOpt.namedCurve);
	        }
	        else
	            throw new Error('UnsupportedType');
	    }
	    ///////////////////////////////////////////////////////////
	    // private method handling instance variables
	    // all instance variables must be set via these methods
	    /**
	     * Set a key in JWK to the Key object.
	     * @param {JsonWebKey} jwkey - The Json Web Key.
	     * @private
	     */
	    Key.prototype._setJwk = function (jwkey) {
	        this._type = util_1.getJwkType(jwkey); // this also check key format
	        this._jwk = jwkey;
	        if (this._isEncrypted)
	            this._der = null;
	        this._isEncrypted = false;
	        this._setCurrentStatus();
	    };
	    /**
	     * Set a key in DER or PEM to the Key object.
	     * @param {DER|PEM} asn1key - The DER key byte array or PEM key string.
	     * @param {String} format - 'der' or 'pem' specifying the format.
	     * @private
	     */
	    Key.prototype._setAsn1 = function (asn1key, format) {
	        this._type = (util_1.isAsn1Public(asn1key, format)) ? 'public' : 'private'; // this also check key format
	        this._isEncrypted = util_1.isAsn1Encrypted(asn1key, format);
	        this._der = ((format === 'pem') ? js_encoding_utils_1.default.formatter.pemToBin(asn1key) : asn1key);
	        if (this._isEncrypted) {
	            this._jwk = null;
	            this._oct = {};
	        }
	        this._setCurrentStatus();
	    };
	    /**
	     * Set a key in SEC1 = Octet format to the Key Object.
	     * @param {OctetEC} sec1key - The Octet SEC1 key byte array.
	     * @param {CurveTypes} namedCurve - Name of curve like 'P-256'.
	     * @private
	     */
	    Key.prototype._setSec1 = function (sec1key, namedCurve) {
	        this._type = util_1.getSec1KeyType(sec1key, namedCurve); // this also check key format
	        this._oct = { namedCurve: namedCurve, key: sec1key };
	        if (this._isEncrypted)
	            this._der = null;
	        this._isEncrypted = false;
	        this._setCurrentStatus();
	    };
	    /**
	     * Set the current internal status. In particular, manage what the object is based on.
	     * @private
	     */
	    Key.prototype._setCurrentStatus = function () {
	        this._current.jwk = (this._jwk !== null && (this._jwk.kty === 'RSA' || this._jwk.kty === 'EC'));
	        this._current.der = (this._der !== null && this._der.length > 0);
	        this._current.oct = (typeof this._oct.key !== 'undefined'
	            && typeof this._oct.namedCurve !== 'undefined'
	            && this._oct.key.length > 0);
	    };
	    ///////////////////////////////////////////////////////////
	    // (pseudo) public methods allowed to be accessed from outside
	    /**
	     * Convert the stored key and export the key in desired format.
	     * Imported key must be basically decrypted except the case where the key is exported as-is.
	     * @param {String} format - Intended format of exported key. 'jwk', 'pem', 'der' or 'oct'
	     * @param {KeyExportOptions} [options={}] - Optional arguments.
	     * @return {Promise<JsonWebKey|PEM|DER|OctetEC>} - Exported key object.
	     */
	    Key.prototype.export = function (format, options) {
	        if (format === void 0) { format = 'jwk'; }
	        if (options === void 0) { options = {}; }
	        return __awaiter(this, void 0, void 0, function () {
	            var jwkey;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        // return 'as is' without passphrase when nothing is given as 'options'
	                        // only for the case to export der key from der key (considering encrypted key). expect to be called from getter
	                        if (this._isEncrypted && this._type === 'private') {
	                            if ((format === 'der' || format === 'pem') && Object.keys(options).length === 0 && this._current.der) {
	                                return [2 /*return*/, (format === 'pem') ? js_encoding_utils_1.default.formatter.binToPem((this._der), 'encryptedPrivate') : this._der];
	                            }
	                            else
	                                throw new Error('DecryptionRequired');
	                        }
	                        if (!this._current.jwk) return [3 /*break*/, 1];
	                        jwkey = this._jwk;
	                        return [3 /*break*/, 6];
	                    case 1:
	                        if (!this._current.oct) return [3 /*break*/, 3];
	                        return [4 /*yield*/, converter_1.toJwkFrom('oct', this._oct.key, { namedCurve: this._oct.namedCurve })];
	                    case 2:
	                        jwkey = _a.sent();
	                        return [3 /*break*/, 6];
	                    case 3:
	                        if (!this._current.der) return [3 /*break*/, 5];
	                        return [4 /*yield*/, converter_1.toJwkFrom('der', this._der)];
	                    case 4:
	                        jwkey = _a.sent();
	                        return [3 /*break*/, 6];
	                    case 5: throw new Error('InvalidStatus');
	                    case 6:
	                        this._setJwk(jwkey); // store jwk if the exiting private key is not encrypted
	                        if (!(format === 'der' || format === 'pem')) return [3 /*break*/, 8];
	                        return [4 /*yield*/, converter_1.fromJwkTo(format, jwkey, {
	                                outputPublic: options.outputPublic,
	                                compact: options.compact,
	                                //passphrase: options.encryptParams.passphrase,
	                                encryptParams: options.encryptParams
	                            })];
	                    case 7: return [2 /*return*/, _a.sent()];
	                    case 8:
	                        if (!(format === 'oct')) return [3 /*break*/, 10];
	                        return [4 /*yield*/, converter_1.fromJwkTo(format, jwkey, {
	                                outputPublic: options.outputPublic,
	                                output: options.output,
	                                compact: options.compact
	                            })];
	                    case 9: return [2 /*return*/, _a.sent()];
	                    case 10: return [2 /*return*/, jwkey];
	                }
	            });
	        });
	    };
	    /**
	     * Encrypt stored key and set the encrypted key to this instance.
	     * @param {String} passphrase - String passphrase.
	     * @return {Promise<boolean>} - Always true otherwise thrown.
	     * @throws {Error} - Throws if AlreadyEncrypted.
	     */
	    Key.prototype.encrypt = function (passphrase) {
	        return __awaiter(this, void 0, void 0, function () {
	            var options, _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (this._isEncrypted)
	                            throw new Error('AlreadyEncrypted');
	                        options = { encryptParams: { passphrase: passphrase } };
	                        _a = this._setAsn1;
	                        return [4 /*yield*/, this.export('der', options)];
	                    case 1:
	                        _a.apply(this, [(_b.sent()), 'der']);
	                        return [2 /*return*/, true];
	                }
	            });
	        });
	    };
	    /**
	     * Decrypted stored key and set the decrypted key in JWK to this instance.
	     * @param {String} passphrase - String passphrase.
	     * @return {Promise<boolean>} - Always true otherwise thrown.
	     * @throws {Error} - Throws if NotEncrypted or FailedToDecrypt.
	     */
	    Key.prototype.decrypt = function (passphrase) {
	        return __awaiter(this, void 0, void 0, function () {
	            var jwkey;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this._isEncrypted)
	                            throw new Error('NotEncrypted');
	                        if (!this._current.der) return [3 /*break*/, 2];
	                        return [4 /*yield*/, converter_1.toJwkFrom('der', this._der, { passphrase: passphrase })];
	                    case 1:
	                        jwkey = _a.sent(); // type is not specified here to import jwk
	                        return [3 /*break*/, 3];
	                    case 2: throw new Error('FailedToDecrypt');
	                    case 3:
	                        this._setJwk(jwkey);
	                        return [2 /*return*/, true];
	                }
	            });
	        });
	    };
	    /**
	     * Conpute JWK thumbprint specified in RFC7638 {@link https://tools.ietf.org/html/rfc7638}.
	     * @param {HashTypes} [alg='SHA-256'] - Name of hash algorithm for thumbprint computation like 'SHA-256'.
	     * @param {JwkThumbpirntFormat} [output='binary'] - Output format of JWK thumbprint. 'binary', 'hex' or 'base64'.
	     * @return {Promise<Uint8Array|String>} - Computed thumbprint.
	     * @throws {Error} - Throws if DecryptionRequired.
	     */
	    Key.prototype.getJwkThumbprint = function (alg, output) {
	        if (alg === void 0) { alg = 'SHA-256'; }
	        if (output === void 0) { output = 'binary'; }
	        return __awaiter(this, void 0, void 0, function () {
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (this._isEncrypted)
	                            throw new Error('DecryptionRequired');
	                        _a = thumbprint_1.getJwkThumbprint;
	                        return [4 /*yield*/, this.export('jwk')];
	                    case 1: return [4 /*yield*/, _a.apply(void 0, [(_b.sent()), alg, output])];
	                    case 2: return [2 /*return*/, _b.sent()];
	                }
	            });
	        });
	    };
	    Object.defineProperty(Key.prototype, "keyType", {
	        // getters
	        /**
	         * Get keyType in JWK format
	         * @return {Promise<String>} - 'RSA' or 'EC'
	         * @throws {Error} - Throws if DecryptionRequired.
	         */
	        get: function () {
	            var _this = this;
	            if (this._isEncrypted)
	                throw new Error('DecryptionRequired');
	            return new Promise(function (resolve, reject) {
	                _this.export('jwk')
	                    .then(function (r) {
	                    resolve((r.kty));
	                })
	                    .catch(function (e) { reject(e); });
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "jwkThumbprint", {
	        /**
	         * Get jwkThumbprint of this key.
	         * @return {Promise<Uint8Array>} - Returns binary thumbprint.
	         */
	        get: function () {
	            return this.getJwkThumbprint();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "isEncrypted", {
	        /**
	         * Check if this is encrypted.
	         * @return {boolean}
	         */
	        get: function () { return this._isEncrypted; },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "isPrivate", {
	        /**
	         * Check if this is a private key.
	         * @return {boolean}
	         */
	        get: function () { return this._type === 'private'; },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "der", {
	        /**
	         * Returns the key in DER format.
	         * @return {Promise<DER>}
	         */
	        get: function () { return this.export('der'); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "pem", {
	        /**
	         * Returns the key in PEM format.
	         * @return {Promise<PEM>}
	         */
	        get: function () { return this.export('pem'); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "jwk", {
	        /**
	         * Returns the key in JWK format
	         * @return {Promise<JsonWebKey>}
	         */
	        get: function () { return this.export('jwk'); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Key.prototype, "oct", {
	        /**
	         * Returns the 'EC' key in Octet SEC1 format.
	         * @return {Promise<OctetEC>}
	         */
	        get: function () { return this.export('oct', { output: 'string' }); },
	        enumerable: false,
	        configurable: true
	    });
	    return Key;
	}());
	key.Key = Key;

	(function (exports) {
	/**
	 * index
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Key = void 0;
	// import {fromJwkTo, toJwkFrom} from './converter.js';
	// import {getJwkThumbprint} from './thumbprint.js';
	// import {isAsn1Encrypted} from './util.js';
	var key$1 = __importStar(key);
	// export default {fromJwkTo, toJwkFrom, getJwkThumbprint, isAsn1Encrypted, Key};
	// export {fromJwkTo, toJwkFrom, getJwkThumbprint, isAsn1Encrypted, Key};
	exports.Key = key$1.Key;
	exports.default = { Key: exports.Key };

	}(dist$7));

	var keyutil = /*@__PURE__*/getDefaultExportFromCjs(dist$7);

	class Collections {
	    static sort(list) {
	        list.sort((n1, n2) => {
	            if (typeof n1 === "string") {
	                if (n1 < n2)
	                    return -1;
	                if (n1 > n2)
	                    return 1;
	                return 0;
	            }
	            else {
	                return n1.compareTo(n2);
	            }
	        });
	    }
	}

	class ComparableMap extends Map {
	    get(k) {
	        for (let e of this.entries()) {
	            if (e[0].equals(k))
	                return e[1];
	        }
	        return null;
	    }
	    delete(k) {
	        for (let e of this.entries()) {
	            if (e[0].equals(k))
	                return super.delete(e[0]);
	        }
	        return false;
	    }
	    has(k) {
	        for (let e of this.entries()) {
	            if (e[0].equals(k))
	                return true;
	        }
	        return false;
	    }
	    valuesAsSortedArray() {
	        let keysArray = Array.from(this.keys());
	        Collections.sort(keysArray);
	        return keysArray.map((k) => this.get(k));
	    }
	}

	class DIDDocument extends DIDEntity {
	    constructor(subject) {
	        super();
	        this.subject = subject;
	    }
	    static clone(doc, withProof) {
	        let newInstance = new DIDDocument(doc.subject);
	        newInstance.controllers = doc.controllers;
	        newInstance.controllerDocs = doc.controllerDocs;
	        newInstance.effectiveController = doc.effectiveController;
	        newInstance.multisig = doc.multisig;
	        newInstance.publicKeys = doc.publicKeys;
	        newInstance.authenticationKeys = doc.authenticationKeys;
	        newInstance.authorizationKeys = doc.authorizationKeys;
	        newInstance.defaultPublicKey = doc.defaultPublicKey;
	        newInstance.credentials = doc.credentials;
	        newInstance.services = doc.services;
	        newInstance.expires = doc.expires;
	        if (withProof) {
	            newInstance.proofs = doc.proofs;
	        }
	        newInstance.metadata = doc.metadata;
	        return newInstance;
	    }
	    getSubject() {
	        return this.subject;
	    }
	    canonicalId(id) {
	        if (id instanceof DIDURL) {
	            if (id == null || id.getDid() != null)
	                return id;
	            return DIDURL.from(id, this.getSubject());
	        }
	        else {
	            return DIDURL.from(id, this.getSubject());
	        }
	    }
	    checkAttachedStore() {
	        if (!this.getMetadata().attachedStore())
	            throw new NotAttachedWithStoreException();
	    }
	    checkIsPrimitive() {
	        if (this.isCustomizedDid())
	            throw new NotPrimitiveDIDException(this.getSubject().toString());
	    }
	    checkIsCustomized() {
	        if (!this.isCustomizedDid())
	            throw new NotCustomizedDIDException(this.getSubject().toString());
	    }
	    checkHasEffectiveController() {
	        if (this.getEffectiveController() == null)
	            throw new NoEffectiveControllerException(this.getSubject().toString());
	    }
	    isCustomizedDid() {
	        return this.defaultPublicKey == null;
	    }
	    getControllers() {
	        return this.controllers;
	    }
	    getControllerCount() {
	        return this.controllers.length;
	    }
	    getController() {
	        return this.controllers.length == 1 ? this.controllers[0] : null;
	    }
	    hasController(did = null) {
	        if (did)
	            return this.controllers.find((d) => d.equals(did)) !== undefined;
	        else
	            return this.controllers.length != 0;
	    }
	    getControllerDocument(did) {
	        return this.controllerDocs.get(did);
	    }
	    getEffectiveController() {
	        return this.effectiveController;
	    }
	    getEffectiveControllerDocument() {
	        return this.effectiveController == null ? null : this.getControllerDocument(this.effectiveController);
	    }
	    setEffectiveController(controller) {
	        this.checkIsCustomized();
	        if (controller == null) {
	            this.effectiveController = controller;
	            return;
	        }
	        else {
	            if (!this.hasController(controller))
	                throw new NotControllerException("Not contoller for target DID");
	            this.effectiveController = controller;
	            let doc = this.getControllerDocument(this.effectiveController);
	            if (!doc.getMetadata().attachedStore())
	                doc.getMetadata().attachStore(this.getMetadata().getStore());
	        }
	    }
	    isMultiSignature() {
	        return this.multisig != null;
	    }
	    getMultiSignature() {
	        return this.multisig;
	    }
	    getPublicKeyCount() {
	        let count = this.publicKeys.size;
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values())
	                count += doc.getAuthenticationKeyCount();
	        }
	        return count;
	    }
	    getPublicKeys() {
	        let pks = Array.from(this.publicKeys.values());
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values())
	                pks.push(...doc.getAuthenticationKeys());
	        }
	        return pks;
	    }
	    selectPublicKeys(id, type) {
	        checkArgument(id != null || type != null, "Invalid select args");
	        id = this.canonicalId(id);
	        let pks = [];
	        for (let pk of this.publicKeys.values()) {
	            if (id != null && !pk.getId().equals(id))
	                continue;
	            if (type != null && pk.getType() !== type)
	                continue;
	            pks.push(pk);
	        }
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values())
	                pks.push(...doc.selectAuthenticationKeys(id, type));
	        }
	        return pks;
	    }
	    getPublicKey(id) {
	        checkArgument(id != null, "Invalid publicKey id");
	        id = this.canonicalId(id);
	        let pk = this.publicKeys.get(id);
	        if (pk == null && this.hasController()) {
	            let doc = this.getControllerDocument(id.getDid());
	            if (doc != null)
	                pk = doc.getAuthenticationKey(id);
	        }
	        return pk;
	    }
	    hasPublicKey(id) {
	        return this.getPublicKey(this.canonicalId(id)) != null;
	    }
	    hasPrivateKey(idOrString) {
	        if (typeof idOrString === "string")
	            idOrString = this.canonicalId(idOrString);
	        checkArgument(idOrString != null, "Invalid publicKey id");
	        if (this.hasPublicKey(idOrString) && this.getMetadata().attachedStore())
	            return this.getMetadata().getStore().containsPrivateKey(idOrString);
	        else
	            return false;
	    }
	    getDefaultPublicKeyId() {
	        let pk = this.getDefaultPublicKey();
	        return pk != null ? pk.getId() : null;
	    }
	    getDefaultPublicKey() {
	        if (this.defaultPublicKey != null)
	            return this.defaultPublicKey;
	        if (this.effectiveController != null)
	            return this.getControllerDocument(this.effectiveController).getDefaultPublicKey();
	        return null;
	    }
	    derive(index, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            this.checkAttachedStore();
	            this.checkIsPrimitive();
	            let key = HDKey.deserialize(yield this.getMetadata().getStore().loadPrivateKey(this.getDefaultPublicKeyId(), storepass));
	            return key.deriveWithIndex(index).serializeBase58();
	        });
	    }
	    mapToDerivePath(identifier, securityCode) {
	        let digest = SHA256.encodeToBuffer(buffer$3.Buffer.from(identifier, "utf-8"));
	        let path = "m/";
	        let bb = ByteBuffer.wrap(digest);
	        while (bb.hasRemaining()) {
	            let idx = bb.readInt();
	            if (idx >= 0)
	                path = path.concat(idx.toString());
	            else
	                path = path.concat((idx & 0x7FFFFFFF).toString()).concat("'");
	            path = path.concat("/");
	        }
	        if (securityCode >= 0)
	            path = path.concat(securityCode.toString());
	        else
	            path = path.concat((securityCode & 0x7FFFFFFF).toString()).concat("'");
	        return path;
	    }
	    deriveFromIdentifier(identifier, securityCode, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(identifier && identifier != null, "Invalid identifier");
	            this.checkAttachedStore();
	            this.checkIsPrimitive();
	            let key = HDKey.deserialize(yield this.getMetadata().getStore().loadPrivateKey(this.getDefaultPublicKeyId(), storepass));
	            let path = this.mapToDerivePath(identifier, securityCode);
	            return key.deriveWithPath(path).serializeBase58();
	        });
	    }
	    getAuthenticationKeyCount() {
	        let count = this.authenticationKeys.size;
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values())
	                count += doc.getAuthenticationKeyCount();
	        }
	        return count;
	    }
	    getAuthenticationKeys() {
	        let pks = Array.from(this.authenticationKeys.values());
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values())
	                pks.push(...doc.getAuthenticationKeys());
	        }
	        return pks;
	    }
	    selectAuthenticationKeys(id, type) {
	        checkArgument(id != null || type != null, "Invalid select args");
	        id = this.canonicalId(id);
	        let pks = [];
	        for (let pk of this.authenticationKeys.values()) {
	            if (id != null && !pk.getId().equals(id))
	                continue;
	            if (type != null && pk.getType() !== type)
	                continue;
	            pks.push(pk);
	        }
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values())
	                pks.push(...doc.selectAuthenticationKeys(id, type));
	        }
	        return pks;
	    }
	    getAuthenticationKey(idOrString) {
	        checkArgument(idOrString != null, "Invalid publicKey id");
	        idOrString = this.canonicalId(idOrString);
	        let pk = this.authenticationKeys.get(idOrString);
	        if (pk != null)
	            return pk;
	        if (this.hasController()) {
	            let doc = this.controllerDocs.get(idOrString.getDid());
	            if (doc != null)
	                return doc.getAuthenticationKey(idOrString);
	        }
	        return null;
	    }
	    isAuthenticationKey(idOrString) {
	        return this.getAuthenticationKey(this.canonicalId(idOrString)) != null;
	    }
	    getAuthorizationKeyCount() {
	        return this.authorizationKeys.size;
	    }
	    getAuthorizationKeys() {
	        return Array.from(this.authorizationKeys.values());
	    }
	    selectAuthorizationKeys(idOrString, type) {
	        checkArgument(idOrString != null || type != null, "Invalid select args");
	        idOrString = this.canonicalId(idOrString);
	        let pks = [];
	        for (let pk of this.authorizationKeys.values()) {
	            if (idOrString != null && !pk.getId().equals(idOrString))
	                continue;
	            if (type != null && pk.getType() !== type)
	                continue;
	            pks.push(pk);
	        }
	        return pks;
	    }
	    getAuthorizationKey(idOrString) {
	        checkArgument(idOrString != null, "Invalid publicKey id");
	        return this.authorizationKeys.get(this.canonicalId(idOrString));
	    }
	    isAuthorizationKey(id) {
	        return this.getAuthorizationKey(id) != null;
	    }
	    getCredentialCount() {
	        return this.credentials.size;
	    }
	    getCredentials() {
	        return Array.from(this.credentials.values());
	    }
	    selectCredentials(id, type) {
	        checkArgument(id != null || type != null, "Invalid select args");
	        id = this.canonicalId(id);
	        let vcs = [];
	        for (let vc of this.credentials.values()) {
	            if (id != null && !vc.getId().equals(id))
	                continue;
	            if (type != null && vc.getType().indexOf(type) < 0)
	                continue;
	            vcs.push(vc);
	        }
	        return vcs;
	    }
	    getCredential(id) {
	        checkArgument(id != null, "Invalid Credential id");
	        return this.credentials.get(this.canonicalId(id));
	    }
	    getServiceCount() {
	        return this.services.size;
	    }
	    getServices() {
	        return Array.from(this.services.values());
	    }
	    selectServices(id, type) {
	        checkArgument(id != null || type != null, "Invalid select args");
	        id = this.canonicalId(id);
	        let svcs = [];
	        for (let svc of this.services.values()) {
	            if (id != null && !svc.getId().equals(id))
	                continue;
	            if (type != null && svc.getType() !== type)
	                continue;
	            svcs.push(svc);
	        }
	        return svcs;
	    }
	    getService(id) {
	        checkArgument(id != null, "Invalid service id");
	        return this.services.get(this.canonicalId(id));
	    }
	    getExpires() {
	        return this.expires;
	    }
	    getLastModified() {
	        return this.getProof().getCreated();
	    }
	    getSignature() {
	        return this.getProof().getSignature();
	    }
	    getProof() {
	        return this.getProofs()[0];
	    }
	    getProofs() {
	        return this.proofs.valuesAsSortedArray();
	    }
	    getSerializeContextDid() {
	        return this.getSubject();
	    }
	    toJSON(key = null) {
	        let context = key ? new DID(key) : null;
	        let json = {};
	        json.id = this.subject.toString();
	        if (this.controllers.length > 0)
	            json.controller = this.controllers.length == 1 ? this.controllers[0].toString() :
	                Array.from(this.controllers, (c) => c.toString());
	        if (this.multisig)
	            json.multisig = this.multisig.toString();
	        if (this.publicKeys.size > 0)
	            json.publicKey = Array.from(this.publicKeys.valuesAsSortedArray(), (pk) => pk.toJSON(key));
	        if (this.authenticationKeys.size > 0)
	            json.authentication = Array.from(this.authenticationKeys.valuesAsSortedArray(), (pk) => pk.getId().toString(context));
	        if (this.authorizationKeys.size > 0)
	            json.authorization = Array.from(this.authorizationKeys.valuesAsSortedArray(), (pk) => pk.getId().toString(context));
	        if (this.credentials.size > 0)
	            json.verifiableCredential = Array.from(this.credentials.valuesAsSortedArray(), (vc) => vc.toJSON(key));
	        if (this.services.size > 0)
	            json.service = Array.from(this.services.valuesAsSortedArray(), (svc) => svc.toJSON(key));
	        if (this.expires)
	            json.expires = this.dateToString(this.expires);
	        if (this.proofs && this.proofs.size > 0) {
	            let proofs = this.proofs.valuesAsSortedArray();
	            if (proofs.length == 1)
	                json.proof = proofs[0].toJSON(key);
	            else
	                json.proof = Array.from(proofs, v => v.toJSON(key));
	        }
	        return json;
	    }
	    fromJSON(json, context = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            this.fromJSONOnly(json, context);
	            if (this.controllers.length > 0)
	                yield this.resolveControllers();
	        });
	    }
	    resolveControllers() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.controllerDocs.size === this.controllers.length)
	                return;
	            let ps = [];
	            for (let controller of this.controllers) {
	                let rp = controller.resolve().then((doc) => {
	                    if (doc == null)
	                        throw new MalformedDocumentException("Can not resolve controller: " + controller);
	                    if (this.controllerDocs.has(controller))
	                        throw new MalformedDocumentException("Duplicated controller: " + controller);
	                    this.controllerDocs.set(controller, doc);
	                });
	                ps.push(rp);
	            }
	            try {
	                yield Promise.all(ps);
	            }
	            catch (e) {
	                throw new MalformedDocumentException("Can not resolve the controller's DID: " + e, e);
	            }
	        });
	    }
	    fromJSONOnly(json, context = null) {
	        this.subject = this.getDid("id", json.id, { mandatory: false, nullable: false, defaultValue: null });
	        context = this.subject;
	        this.controllers = this.getDids("controller", json.controller, { mandatory: false, nullable: false, defaultValue: [] });
	        let ms = this.getString("multisig", json.multisig, { mandatory: false, nullable: false });
	        if (ms)
	            this.multisig = DIDDocument.MultiSignature.fromString(ms);
	        this.controllerDocs = new ComparableMap();
	        if (this.controllers.length <= 1) {
	            if (this.multisig)
	                throw new MalformedDocumentException("Invalid multisig property");
	        }
	        else {
	            if (this.multisig == null)
	                throw new MalformedDocumentException("Missing multisig property");
	            if (this.multisig.n() != this.controllers.length)
	                throw new MalformedDocumentException("Invalid multisig property");
	        }
	        this.publicKeys = new ComparableMap();
	        if (json.publicKey) {
	            if (!Array.isArray(json.publicKey))
	                throw new MalformedDocumentException("Invalid property: publicKey, type error.");
	            for (let o of json.publicKey) {
	                let pk;
	                let obj = o;
	                try {
	                    pk = DIDDocument.PublicKey.deserialize(obj, DIDDocument.PublicKey, context);
	                }
	                catch (e) {
	                    throw new MalformedDocumentException("Invalid publicKey: " + obj.id, e);
	                }
	                if (this.publicKeys.has(pk.getId()))
	                    throw new MalformedDocumentException("Duplicated publicKey: " + pk.getId());
	                this.publicKeys.set(pk.getId(), pk);
	            }
	        }
	        this.authenticationKeys = new ComparableMap();
	        if (json.authentication) {
	            if (!Array.isArray(json.authentication))
	                throw new MalformedDocumentException("Invalid property: authentication, type error.");
	            for (let obj of json.authentication) {
	                let pk;
	                if (typeof obj === 'string') {
	                    let id = new DIDURL(obj, context);
	                    if (!this.publicKeys.has(id))
	                        throw new MalformedDocumentException("Not exists publicKey reference: " + id);
	                    pk = this.publicKeys.get(id);
	                }
	                else {
	                    obj = obj;
	                    try {
	                        pk = DIDDocument.PublicKey.deserialize(obj, DIDDocument.PublicKey, context);
	                    }
	                    catch (e) {
	                        throw new MalformedDocumentException("Invalid publicKey: " + obj.id, e);
	                    }
	                    if (this.publicKeys.has(pk.getId()))
	                        throw new MalformedDocumentException("Duplicated publicKey: " + pk.getId());
	                    this.publicKeys.set(pk.getId(), pk);
	                }
	                if (!pk.getController().equals(context))
	                    throw new MalformedDocumentException("Invalid authentication key: " + pk.getId());
	                this.authenticationKeys.set(pk.getId(), pk);
	            }
	        }
	        this.authorizationKeys = new ComparableMap();
	        if (json.authorization) {
	            if (!Array.isArray(json.authorization))
	                throw new MalformedDocumentException("Invalid property: authorization, type error.");
	            for (let obj of json.authorization) {
	                let pk;
	                if (typeof obj === 'string') {
	                    let id = new DIDURL(obj, context);
	                    if (!this.publicKeys.has(id))
	                        throw new MalformedDocumentException("Not exists publicKey reference: " + id);
	                    pk = this.publicKeys.get(id);
	                }
	                else {
	                    obj = obj;
	                    try {
	                        pk = DIDDocument.PublicKey.deserialize(obj, DIDDocument.PublicKey, context);
	                    }
	                    catch (e) {
	                        throw new MalformedDocumentException("Invalid publicKey: " + obj.id, e);
	                    }
	                    if (this.publicKeys.has(pk.getId()))
	                        throw new MalformedDocumentException("Duplicated publicKey: " + pk.getId());
	                    this.publicKeys.set(pk.getId(), pk);
	                }
	                if (pk.getController().equals(context))
	                    throw new MalformedDocumentException("Invalid authorization key: " + pk.getId());
	                this.authorizationKeys.set(pk.getId(), pk);
	            }
	        }
	        if (this.controllers.length > 0) {
	            if (this.controllers.length == 1)
	                this.effectiveController = this.controllers[0];
	        }
	        else {
	            if (!this.publicKeys || this.publicKeys.size == 0)
	                throw new MalformedDocumentException("Missing publicKeys");
	            for (let pk of this.publicKeys.values()) {
	                if (pk.getController().equals(this.subject)) {
	                    let address = HDKey.toAddress(pk.getPublicKeyBytes());
	                    if (address === this.subject.getMethodSpecificId()) {
	                        this.defaultPublicKey = pk;
	                        if (!this.authenticationKeys.has(pk.getId())) {
	                            this.authenticationKeys.set(pk.getId(), pk);
	                        }
	                        break;
	                    }
	                }
	            }
	            if (!this.defaultPublicKey)
	                throw new MalformedDocumentException("Missing default public key");
	        }
	        this.credentials = new ComparableMap();
	        if (json.verifiableCredential) {
	            if (!Array.isArray(json.verifiableCredential))
	                throw new MalformedDocumentException("Invalid property: verifiableCredential, type error.");
	            for (let obj of json.verifiableCredential) {
	                let vc;
	                let vcJson = obj;
	                try {
	                    vc = VerifiableCredential.deserialize(vcJson, VerifiableCredential, context);
	                }
	                catch (e) {
	                    throw new MalformedDocumentException("Invalid verifiableCredential: " + vcJson.id, e);
	                }
	                if (this.credentials.has(vc.getId()))
	                    throw new MalformedDocumentException("Duplicated verifiableCredential: " + vc.getId());
	                this.credentials.set(vc.getId(), vc);
	            }
	        }
	        this.services = new ComparableMap();
	        if (json.service) {
	            if (!Array.isArray(json.service))
	                throw new MalformedDocumentException("Invalid property: service, type error.");
	            for (let obj of json.service) {
	                let svc;
	                let svcJson = obj;
	                try {
	                    svc = DIDDocument.Service.deserialize(svcJson, DIDDocument.Service, context);
	                }
	                catch (e) {
	                    throw new MalformedDocumentException("Invalid service: " + svcJson.id, e);
	                }
	                if (this.services.has(svc.getId()))
	                    throw new MalformedDocumentException("Duplicated service: " + svc.getId());
	                this.services.set(svc.getId(), svc);
	            }
	        }
	        this.expires = this.getDate("expires", json.expires, { mandatory: true, nullable: false });
	        if (!json.proof)
	            throw new MalformedDocumentException("Missing property: proof");
	        this.proofs = new ComparableMap();
	        if (!Array.isArray(json.proof)) {
	            let po = json.proof;
	            if (!this.isCustomizedDid() && !po.creator)
	                po.creator = this.getDefaultPublicKeyId().toString();
	            let proof = DIDDocument.Proof.deserialize(po, DIDDocument.Proof, context);
	            if (proof.getCreator().getDid() == null)
	                throw new MalformedDocumentException("Invalid proof creater: " + proof.getCreator());
	            this.proofs.set(proof.getCreator().getDid(), proof);
	        }
	        else {
	            for (let v of json.proof) {
	                let po = v;
	                let proof = DIDDocument.Proof.deserialize(po, DIDDocument.Proof, context);
	                if (proof.getCreator().getDid() == null)
	                    throw new MalformedDocumentException("Invalid proof creater: " + proof.getCreator());
	                if (this.proofs.has(proof.getCreator().getDid()))
	                    throw new MalformedDocumentException("Aleady exist proof from " + proof.getCreator().getDid());
	                this.proofs.set(proof.getCreator().getDid(), proof);
	            }
	        }
	    }
	    setMetadata(metadata) {
	        this.metadata = metadata;
	        this.subject.setMetadata(metadata);
	    }
	    getMetadata() {
	        if (this.metadata == null) {
	            this.metadata = new DIDMetadata(this.getSubject());
	        }
	        return this.metadata;
	    }
	    getStore() {
	        return this.getMetadata().getStore();
	    }
	    isExpired() {
	        return dayjs().isAfter(dayjs(this.expires));
	    }
	    isGenuine(listener = null) {
	        let expectedProofs = this.multisig == null ? 1 : this.multisig.m();
	        if (this.proofs.size != expectedProofs) {
	            if (listener != null) {
	                listener.failed(this, "{}: proof size not matched with multisig, {} expected, actual is {}", this.getSubject(), this.multisig.m(), this.proofs.size);
	                listener.failed(this, "{}: is not genuine", this.getSubject());
	            }
	            return false;
	        }
	        let doc = DIDDocument.clone(this, false);
	        let json = doc.serialize(true);
	        let digest = EcdsaSigner.sha256Digest(buffer$3.Buffer.from(json, 'utf-8'));
	        if (!this.isCustomizedDid()) {
	            let proof = this.getProof();
	            if (proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                if (listener != null) {
	                    listener.failed(this, "{}: key type '{}' for proof is not supported", this.getSubject(), proof.getType());
	                    listener.failed(this, "{}: is not genuine", this.getSubject());
	                }
	                return false;
	            }
	            if (!proof.getCreator().equals(this.getDefaultPublicKeyId())) {
	                if (listener != null) {
	                    listener.failed(this, "{}: key '{}' for proof is not default key", this.getSubject(), proof.getCreator());
	                    listener.failed(this, "{}: is not genuine", this.getSubject());
	                }
	                return false;
	            }
	            let result = this.verifyDigest(proof.getCreator(), proof.getSignature(), digest);
	            if (listener != null) {
	                if (result) {
	                    listener.succeeded(this, "{}: is genuine", this.getSubject());
	                }
	                else {
	                    listener.failed(this, "{}: can not verify the signature", this.getSubject());
	                    listener.failed(this, "{}: is not genuine", this.getSubject());
	                }
	            }
	            return result;
	        }
	        else {
	            for (let proof of this.proofs.values()) {
	                if (proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: key type '{}' for proof is not supported", this.getSubject(), proof.getType());
	                        listener.failed(this, "{}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                let controllerDoc = this.getControllerDocument(proof.getCreator().getDid());
	                if (controllerDoc == null) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: can not resolve the document for controller '{}' to verify the proof", this.getSubject(), proof.getCreator().getDid());
	                        listener.failed(this, "{}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!controllerDoc.isGenuine(listener)) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: controller '{}' is not genuine, failed to verify the proof", this.getSubject(), proof.getCreator().getDid());
	                        listener.failed(this, "{}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!proof.getCreator().equals(controllerDoc.getDefaultPublicKeyId())) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: key '{}' for proof is not default key of '{}'", this.getSubject(), proof.getCreator(), proof.getCreator().getDid());
	                        listener.failed(this, "{}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!controllerDoc.verifyDigest(proof.getCreator(), proof.getSignature(), digest)) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: proof '{}' is invalid, signature mismatch", this.getSubject(), proof.getCreator());
	                        listener.failed(this, "{}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	            }
	            if (listener != null)
	                listener.succeeded(this, "{}: is genuine", this.getSubject());
	            return true;
	        }
	    }
	    isDeactivated() {
	        return this.getMetadata().isDeactivated();
	    }
	    isQualified() {
	        if (this.proofs == null || this.proofs.size == 0)
	            return false;
	        return this.proofs.size == (this.multisig == null ? 1 : this.multisig.m());
	    }
	    isValid(listener = null) {
	        if (this.isDeactivated()) {
	            if (listener != null) {
	                listener.failed(this, "{}: is deactivated", this.getSubject());
	                listener.failed(this, "{}: is invalid", this.getSubject());
	            }
	            return false;
	        }
	        if (this.isExpired()) {
	            if (listener != null) {
	                listener.failed(this, "{}: is expired", this.getSubject());
	                listener.failed(this, "{}: is invalid", this.getSubject());
	            }
	            return false;
	        }
	        if (!this.isGenuine(listener)) {
	            if (listener != null)
	                listener.failed(this, "{}: is invalid", this.getSubject());
	            return false;
	        }
	        if (this.hasController()) {
	            for (let doc of this.controllerDocs.values()) {
	                if (doc.isDeactivated()) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: controller '{}' is deactivated", this.getSubject(), doc.getSubject());
	                        listener.failed(this, "{}: is invalid", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!doc.isGenuine(listener)) {
	                    if (listener != null) {
	                        listener.failed(this, "{}: controller '{}' is not genuine", this.getSubject(), doc.getSubject());
	                        listener.failed(this, "{}: is invalid", this.getSubject());
	                    }
	                    return false;
	                }
	            }
	        }
	        if (listener != null)
	            listener.succeeded(this, "{}: is valid", this.getSubject());
	        return true;
	    }
	    copy() {
	        let doc = new DIDDocument(this.subject);
	        doc.controllers = Array.from(this.controllers);
	        doc.controllerDocs = new ComparableMap(this.controllerDocs);
	        if (this.multisig != null)
	            doc.multisig = DIDDocument.MultiSignature.newFromMultiSignature(this.multisig);
	        doc.effectiveController = this.effectiveController;
	        doc.publicKeys = new ComparableMap(this.publicKeys);
	        doc.authenticationKeys = new ComparableMap(this.authenticationKeys);
	        doc.authorizationKeys = new ComparableMap(this.authorizationKeys);
	        doc.defaultPublicKey = this.defaultPublicKey;
	        doc.credentials = new ComparableMap(this.credentials);
	        doc.services = new ComparableMap(this.services);
	        doc.expires = this.expires;
	        doc.proofs = new ComparableMap(this.proofs);
	        let metadata = this.getMetadata().clone();
	        doc.setMetadata(metadata);
	        return doc;
	    }
	    clone() {
	        let doc = new DIDDocument(this.subject);
	        doc.controllers = this.controllers;
	        doc.controllerDocs = this.controllerDocs;
	        doc.effectiveController = this.effectiveController;
	        doc.multisig = this.multisig;
	        doc.publicKeys = this.publicKeys;
	        doc.authenticationKeys = this.authenticationKeys;
	        doc.authorizationKeys = this.authorizationKeys;
	        doc.defaultPublicKey = this.defaultPublicKey;
	        doc.credentials = this.credentials;
	        doc.services = this.services;
	        doc.expires = this.expires;
	        doc.proofs = this.proofs;
	        doc.metadata = this.getMetadata().clone();
	        return doc;
	    }
	    signWithId(id, storepass, ...data) {
	        checkArgument(storepass && storepass != null, "Invalid storepass");
	        checkArgument(data != null && data.length > 0, "Invalid input data");
	        this.checkAttachedStore();
	        let signId;
	        if (typeof id === "string")
	            signId = this.canonicalId(id);
	        else
	            signId = id;
	        let digest = SHA256.encodeToBuffer(...data);
	        return this.signDigest(signId, storepass, digest);
	    }
	    signWithStorePass(storepass, ...data) {
	        return this.signWithId(null, storepass, ...data);
	    }
	    signWithTicket(ticket, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(ticket != null, "Invalid ticket");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkAttachedStore();
	            yield ticket.seal(this, storepass);
	            return ticket;
	        });
	    }
	    signWithDocument(doc, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(doc != null, "Invalid document");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkAttachedStore();
	            if (!doc.isCustomizedDid())
	                throw new NotCustomizedDIDException(doc.getSubject().toString());
	            if (!doc.hasController(this.getSubject()))
	                throw new NotControllerException();
	            if (this.isCustomizedDid()) {
	                if (this.getEffectiveController() == null)
	                    throw new NoEffectiveControllerException(this.getSubject().toString());
	            }
	            else {
	                if (!doc.hasController(this.getSubject()))
	                    throw new NotControllerException(this.getSubject().toString());
	            }
	            if (doc.proofs.has(this.getSubject()))
	                throw new AlreadySignedException(this.getSubject().toString());
	            let builder = DIDDocument.Builder.newFromDocument(doc).edit(this);
	            try {
	                return yield builder.seal(storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	        });
	    }
	    signDigest(id, storepass, digest) {
	        checkArgument(storepass && storepass != null, "Invalid storepass");
	        checkArgument(digest != null && digest.length > 0, "Invalid digest");
	        this.checkAttachedStore();
	        if (typeof id === "string")
	            id = this.canonicalId(id);
	        let pk = id != null ? this.getPublicKey(id) : this.getDefaultPublicKey();
	        if (pk == null) {
	            if (id != null)
	                throw new InvalidKeyException(id.toString());
	            else
	                throw new NoEffectiveControllerException(this.getSubject().toString());
	        }
	        return this.getMetadata().getStore().sign(pk.getId(), storepass, digest);
	    }
	    verify(id, signature, ...data) {
	        checkArgument(signature && signature != null, "Invalid signature");
	        checkArgument(data != null && data.length > 0, "Invalid digest");
	        let digest = EcdsaSigner.sha256Digest(...data);
	        return this.verifyDigest(id, signature, digest);
	    }
	    verifyDigest(id, signature, digest) {
	        checkArgument(signature && signature != null, "Invalid signature");
	        checkArgument(digest != null && digest.length > 0, "Invalid digest");
	        if (typeof id === "string")
	            id = this.canonicalId(id);
	        let pk = id != null ? this.getPublicKey(id) : this.getDefaultPublicKey();
	        if (pk == null) {
	            if (id != null)
	                throw new InvalidKeyException(id.toString());
	            else
	                throw new InvalidKeyException("No explicit publicKey");
	        }
	        let binkey = pk.getPublicKeyBytes();
	        let sig = buffer$3.Buffer.from(base64Decode(signature), "hex");
	        return EcdsaSigner.verify(binkey, sig, digest);
	    }
	    getKeyProvider() {
	        let doc = this;
	        return new class {
	            getPublicKey(keyid = null) {
	                return __awaiter$9(this, void 0, void 0, function* () {
	                    let key;
	                    if (keyid == null)
	                        key = doc.getDefaultPublicKeyId();
	                    else
	                        key = doc.canonicalId(keyid);
	                    if (!doc.hasPublicKey(key))
	                        return null;
	                    let pk = doc.getPublicKey(key).getPublicKeyBytes();
	                    const keyObj = new keyutil.Key('oct', pk, { namedCurve: "P-256" });
	                    let pemObj = yield keyObj.export('pem');
	                    let pemStr = pemObj.toString();
	                    return cryptoBrowserify.createPublicKey(pemStr);
	                });
	            }
	            getPrivateKey(keyid = null, password) {
	                return __awaiter$9(this, void 0, void 0, function* () {
	                    let key;
	                    if (keyid == null)
	                        key = doc.getDefaultPublicKeyId();
	                    else
	                        key = doc.canonicalId(keyid);
	                    let store = doc.getMetadata().getStore();
	                    if (!store.containsPrivateKey(key))
	                        return null;
	                    let hk = HDKey.deserialize(yield store.loadPrivateKey(key, password));
	                    const keyObj = new keyutil.Key('oct', hk.getPrivateKeyBytes(), { namedCurve: "P-256" });
	                    let pemObj = yield keyObj.export('pem');
	                    let pemStr = pemObj.toString();
	                    return cryptoBrowserify.createPrivateKey(pemStr);
	                });
	            }
	        }();
	    }
	    jwtBuilder() {
	        let builder = new JWTBuilder(this.getSubject(), this.getKeyProvider());
	        return builder.setIssuer(this.getSubject().toString());
	    }
	    jwtParserBuilder() {
	        let builder = JWTParserBuilder.newWithKeyProvider(this.getKeyProvider());
	        builder.requireIssuer(this.getSubject().toString());
	        return builder;
	    }
	    newCustomized(inputDID, multisig, storepass, force) {
	        return this.newCustomizedDidWithController(inputDID, [], 1, storepass, force);
	    }
	    newCustomizedDidWithController(inputDID, inputControllers, multisig, storepass, force) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(inputDID && inputDID != null, "Invalid DID");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkAttachedStore();
	            let did = DID.from(inputDID);
	            let controllers = [];
	            if (inputControllers && inputControllers.length) {
	                inputControllers.forEach((ctrl) => {
	                    let controller = DID.from(ctrl);
	                    if (!controller.equals(this.getSubject()) && !controllers.includes(ctrl))
	                        controllers.push(controller);
	                });
	            }
	            checkArgument(multisig >= 0 && multisig <= controllers.length + 1, "Invalid multisig");
	            DIDDocument.log.info("Creating new DID {} with controller {}...", did, this.getSubject());
	            let doc = null;
	            if (!force) {
	                doc = yield did.resolve(true);
	                if (doc)
	                    throw new DIDAlreadyExistException(did.toString());
	            }
	            DIDDocument.log.info("Creating new DID {} with controller {}...", did, this.getSubject());
	            let docBuilder = DIDDocument.Builder.newFromDID(did, this.getStore(), this);
	            for (let ctrl of controllers) {
	                yield docBuilder.addController(ctrl);
	            }
	            docBuilder.setMultiSignature(multisig);
	            try {
	                doc = yield docBuilder.seal(storepass);
	                yield this.getStore().storeDid(doc);
	                return doc;
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	        });
	    }
	    createTransferTicket(to, storepass, from) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(to && to != null, "Invalid to");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            let source = !from ? this : yield from.resolve(true);
	            if (from) {
	                this.checkIsPrimitive();
	                this.checkAttachedStore();
	                if (!source)
	                    throw new DIDNotFoundException("DID not found: " + from.toString());
	                if (source.isDeactivated())
	                    throw new DIDDeactivatedException(from.toString());
	                if (!source.isCustomizedDid())
	                    throw new NotCustomizedDIDException(from.toString());
	                if (!source.hasController(this.getSubject()))
	                    throw new NotControllerException(this.getSubject().toString());
	            }
	            else {
	                this.checkIsCustomized();
	                this.checkAttachedStore();
	                this.checkHasEffectiveController();
	            }
	            let ticket = yield TransferTicket.newForDIDDocument(source, to);
	            yield ticket.seal(this, storepass);
	            return ticket;
	        });
	    }
	    publishWithTicket(ticket, inputSignKey, storepass, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(yield ticket.isValid(), "Invalid ticket");
	            checkArgument(ticket.getSubject().equals(this.getSubject()), "Ticket mismatch with current DID");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkIsCustomized();
	            checkArgument(this.proofs.has(ticket.getTo()), "Document not signed by: " + ticket.getTo());
	            this.checkAttachedStore();
	            let signKey = typeof inputSignKey === "string" ? this.canonicalId(inputSignKey) : inputSignKey;
	            if (signKey == null && this.getDefaultPublicKeyId() == null)
	                throw new NoEffectiveControllerException(this.getSubject().toString());
	            let did = this.getSubject();
	            let targetDoc = yield did.resolve(true);
	            if (targetDoc == null)
	                throw new DIDNotFoundException("DID not found: " + did.toString());
	            if (targetDoc.isDeactivated())
	                throw new DIDDeactivatedException(did.toString());
	            if (signKey == null) {
	                signKey = this.getDefaultPublicKeyId();
	                if (signKey == null)
	                    throw new InvalidKeyException("No sign key.");
	            }
	            else {
	                if (this.getAuthenticationKey(signKey) == null)
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            yield DIDBackend.getInstance().transferDid(this, ticket, signKey, storepass, adapter);
	        });
	    }
	    publish(storepass, inputSignKey = null, force = false, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkAttachedStore();
	            let signKey = typeof inputSignKey === "string" ? this.canonicalId(inputSignKey) : inputSignKey;
	            if (signKey == null && this.getDefaultPublicKeyId() == null)
	                throw new NoEffectiveControllerException(this.getSubject().toString());
	            DIDDocument.log.info("Publishing DID {}, force={}...", this.getSubject(), force);
	            if (!this.isGenuine()) {
	                DIDDocument.log.error("Publish failed because document is not genuine.");
	                throw new DIDNotGenuineException(this.getSubject().toString());
	            }
	            if (this.isDeactivated()) {
	                DIDDocument.log.error("Publish failed because DID is deactivated.");
	                throw new DIDDeactivatedException(this.getSubject().toString());
	            }
	            if (this.isExpired() && !force) {
	                DIDDocument.log.error("Publish failed because document is expired.");
	                DIDDocument.log.info("You can publish the expired document using force mode.");
	                throw new DIDExpiredException(this.getSubject().toString());
	            }
	            let lastTxid = null;
	            let resolvedSignature = null;
	            let resolvedDoc = yield this.getSubject().resolve(true);
	            if (resolvedDoc != null) {
	                if (resolvedDoc.isDeactivated()) {
	                    this.getMetadata().setDeactivated(true);
	                    DIDDocument.log.error("Publish failed because DID is deactivated.");
	                    throw new DIDDeactivatedException(this.getSubject().toString());
	                }
	                if (this.isCustomizedDid()) {
	                    let curMultisig = this.getMultiSignature() == null ?
	                        DIDDocument.MultiSignature.ONE_OF_ONE : this.getMultiSignature();
	                    let orgMultisig = resolvedDoc.getMultiSignature() == null ?
	                        DIDDocument.MultiSignature.ONE_OF_ONE : resolvedDoc.getMultiSignature();
	                    if (!curMultisig.equals(orgMultisig))
	                        throw new DIDControllersChangedException();
	                    let orgControllers = resolvedDoc.getControllers();
	                    let curControllers = this.getControllers();
	                    if (orgControllers.length != curControllers.length)
	                        throw new DIDControllersChangedException();
	                    orgControllers.sort();
	                    curControllers.sort();
	                    for (let i = 0; i < orgControllers.length; i++)
	                        if (!orgControllers[i].equals(curControllers[i]))
	                            throw new DIDControllersChangedException();
	                }
	                resolvedSignature = resolvedDoc.getProof().getSignature();
	                if (!force) {
	                    let localPrevSignature = this.getMetadata().getPreviousSignature();
	                    let localSignature = this.getMetadata().getSignature();
	                    if (localPrevSignature == null && localSignature == null) {
	                        DIDDocument.log.error("Trying to publish over an existing document, but signatures information is missing. " +
	                            "DID SDK doesn't know how to handle it, " +
	                            "use force mode to ignore checks.");
	                        throw new DIDNotUpToDateException(this.getSubject().toString());
	                    }
	                    else if (localPrevSignature == null || localSignature == null) {
	                        let ls = localPrevSignature != null ? localPrevSignature : localSignature;
	                        if (ls !== resolvedSignature) {
	                            DIDDocument.log.error("Current copy not based on the latest on-chain copy, signature mismatch.");
	                            throw new DIDNotUpToDateException(this.getSubject().toString());
	                        }
	                    }
	                    else {
	                        if (localSignature !== resolvedSignature &&
	                            localPrevSignature !== resolvedSignature) {
	                            DIDDocument.log.error("Current copy not based on the latest on-chain copy, signature mismatch.");
	                            throw new DIDNotUpToDateException(this.getSubject().toString());
	                        }
	                    }
	                }
	                lastTxid = resolvedDoc.getMetadata().getTransactionId();
	            }
	            if (signKey == null) {
	                signKey = this.getDefaultPublicKeyId();
	            }
	            else {
	                if (this.getAuthenticationKey(signKey) == null)
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            if (!lastTxid || lastTxid == null) {
	                DIDDocument.log.info("Try to publish[create] {}...", this.getSubject());
	                yield DIDBackend.getInstance().createDid(this, signKey, storepass, adapter);
	            }
	            else {
	                DIDDocument.log.info("Try to publish[update] {}...", this.getSubject());
	                yield DIDBackend.getInstance().updateDid(this, lastTxid, signKey, storepass, adapter);
	            }
	            if (resolvedSignature != null)
	                this.getMetadata().setPreviousSignature(resolvedSignature);
	            this.getMetadata().setSignature(this.getProof().getSignature());
	        });
	    }
	    publishUntrusted(signKey, storepass, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass != null && storepass != "", "Invalid storepass");
	            this.checkIsPrimitive();
	            this.checkAttachedStore();
	            if (signKey == null && this.getDefaultPublicKeyId() == null)
	                throw new NoEffectiveControllerException(this.getSubject().toString());
	            DIDDocument.log.info("Publishing untrusted DID {}...", this.getSubject());
	            if (!this.isGenuine()) {
	                DIDDocument.log.error("Publish failed because document is not genuine.");
	                throw new DIDNotGenuineException(this.getSubject().toString());
	            }
	            if (this.isDeactivated()) {
	                DIDDocument.log.error("Publish failed because DID is deactivated.");
	                throw new DIDDeactivatedException(this.getSubject().toString());
	            }
	            if (this.isExpired()) {
	                DIDDocument.log.error("Publish failed because document is expired.");
	                throw new DIDExpiredException(this.getSubject().toString());
	            }
	            let lastTxid = null;
	            let resolvedSignature = null;
	            let resolvedDoc = yield DIDBackend.getInstance().resolveUntrustedDid(this.getSubject(), true);
	            if (resolvedDoc != null) {
	                if (resolvedDoc.isDeactivated()) {
	                    this.getMetadata().setDeactivated(true);
	                    DIDDocument.log.error("Publish failed because DID is deactivated.");
	                    throw new DIDDeactivatedException(this.getSubject().toString());
	                }
	                resolvedSignature = resolvedDoc.getProof().getSignature();
	                lastTxid = resolvedDoc.getMetadata().getTransactionId();
	            }
	            if (signKey == null) {
	                signKey = this.getDefaultPublicKeyId();
	            }
	            else {
	                if (this.getAuthenticationKey(signKey) == null)
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            if (!lastTxid || lastTxid == null) {
	                DIDDocument.log.info("Try to publish[create] {}...", this.getSubject());
	                yield DIDBackend.getInstance().createDid(this, signKey, storepass, adapter);
	            }
	            else {
	                DIDDocument.log.info("Try to publish[update] {}...", this.getSubject());
	                yield DIDBackend.getInstance().updateDid(this, lastTxid, signKey, storepass, adapter);
	            }
	            if (resolvedSignature != null)
	                this.getMetadata().setPreviousSignature(resolvedSignature);
	            this.getMetadata().setSignature(this.getProof().getSignature());
	        });
	    }
	    deactivate(signKey = null, storepass, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkAttachedStore();
	            if (signKey == null && this.getDefaultPublicKeyId() == null)
	                throw new NoEffectiveControllerException(this.getSubject().toString());
	            let doc = yield this.getSubject().resolve(true);
	            if (doc == null)
	                throw new DIDNotFoundException("DID not found: " + this.getSubject().toString());
	            else if (doc.isDeactivated())
	                throw new DIDDeactivatedException(this.getSubject().toString());
	            else
	                doc.getMetadata().attachStore(this.getStore());
	            doc.effectiveController = this.effectiveController;
	            if (signKey == null) {
	                signKey = doc.getDefaultPublicKeyId();
	            }
	            else {
	                if (!doc.isCustomizedDid()) {
	                    if (!signKey.equals(doc.getDefaultPublicKeyId()) &&
	                        doc.getAuthenticationKey(signKey) == null)
	                        throw new InvalidKeyException(signKey.toString());
	                }
	                else {
	                    let controllerdoc = this.getControllerDocument(signKey.getDid());
	                    if (controllerdoc == null || !signKey.equals(controllerdoc.getDefaultPublicKeyId()))
	                        throw new InvalidKeyException(signKey.toString());
	                }
	            }
	            yield DIDBackend.getInstance().deactivateDid(doc, signKey, storepass, adapter);
	            if (this.getSignature() !== doc.getSignature())
	                yield this.getStore().storeDid(doc);
	        });
	    }
	    deactivateTargetDID(target, signKey = null, storepass, adapter = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(target != null, "Invalid target DID");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            this.checkAttachedStore();
	            if (signKey == null && this.getDefaultPublicKeyId() == null)
	                throw new NoEffectiveControllerException(this.getSubject().toString());
	            let targetDoc = yield target.resolve(true);
	            if (targetDoc == null)
	                throw new DIDNotFoundException("DID not found: " + target.toString());
	            else if (targetDoc.isDeactivated())
	                throw new DIDDeactivatedException(target.toString());
	            targetDoc.getMetadata().attachStore(this.getStore());
	            if (!targetDoc.isCustomizedDid()) {
	                if (targetDoc.getAuthorizationKeyCount() == 0)
	                    throw new InvalidKeyException("No authorization key from: " + target);
	                let candidatePks = null;
	                if (signKey == null) {
	                    candidatePks = this.getAuthenticationKeys();
	                }
	                else {
	                    let pk = this.getAuthenticationKey(signKey);
	                    if (pk == null)
	                        throw new InvalidKeyException(signKey.toString());
	                    candidatePks = [];
	                    candidatePks.push(pk);
	                }
	                let realSignKey = null;
	                let targetSignKey = null;
	                lookup: for (let candidatePk of candidatePks) {
	                    for (let pk of targetDoc.getAuthorizationKeys()) {
	                        if (!pk.getController().equals(this.getSubject()))
	                            continue;
	                        if (pk.getPublicKeyBase58() === candidatePk.getPublicKeyBase58()) {
	                            realSignKey = candidatePk.getId();
	                            targetSignKey = pk.getId();
	                            break lookup;
	                        }
	                    }
	                }
	                if (realSignKey == null || targetSignKey == null)
	                    throw new InvalidKeyException("No matched authorization key.");
	                yield DIDBackend.getInstance().deactivateTargetDid(targetDoc, targetSignKey, this, realSignKey, storepass, adapter);
	            }
	            else {
	                if (!targetDoc.hasController(this.getSubject()))
	                    throw new NotControllerException(this.getSubject().toString());
	                if (signKey == null) {
	                    signKey = this.getDefaultPublicKeyId();
	                }
	                else {
	                    if (!signKey.equals(this.getDefaultPublicKeyId()))
	                        throw new InvalidKeyException(signKey.toString());
	                }
	                yield DIDBackend.getInstance().deactivateDid(targetDoc, signKey, storepass, adapter);
	                if (this.getStore().containsDid(target))
	                    yield this.getStore().storeDid(targetDoc);
	            }
	        });
	    }
	    static parseAsync(source) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            try {
	                return yield DIDEntity.deserializeAsync(source, DIDDocument);
	            }
	            catch (e) {
	                if (e instanceof MalformedDocumentException)
	                    throw e;
	                else
	                    throw new MalformedDocumentException(e);
	            }
	        });
	    }
	    static _parseOnly(source) {
	        checkArgument(source && source !== "", "Invalid JSON content");
	        try {
	            let content;
	            if (typeof source === "string") {
	                content = JSON.parse(source);
	            }
	            else {
	                content = source;
	            }
	            let obj = new DIDDocument();
	            obj.fromJSONOnly(content);
	            return obj;
	        }
	        catch (e) {
	            if (e instanceof MalformedDocumentException)
	                throw e;
	            else
	                throw new MalformedDocumentException(e);
	        }
	    }
	}
	DIDDocument.log = new Logger("DIDDocument");
	(function (DIDDocument) {
	    class PublicKey extends DIDEntity {
	        constructor(id = null, controller = null, publicKeyBase58 = null, type = Constants.DEFAULT_PUBLICKEY_TYPE) {
	            super();
	            this.id = id;
	            this.type = type != null ? type : Constants.DEFAULT_PUBLICKEY_TYPE;
	            this.controller = controller;
	            this.publicKeyBase58 = publicKeyBase58;
	        }
	        getId() {
	            return this.id;
	        }
	        getType() {
	            return this.type;
	        }
	        getController() {
	            return this.controller;
	        }
	        getPublicKeyBase58() {
	            return this.publicKeyBase58;
	        }
	        getPublicKeyBytes() {
	            return Base58.decode(this.publicKeyBase58);
	        }
	        equals(ref) {
	            if (this == ref)
	                return true;
	            return (this.getId().equals(ref.getId()) &&
	                this.getType() === ref.getType() &&
	                this.getController().equals(ref.getController()) &&
	                this.getPublicKeyBase58() === ref.getPublicKeyBase58());
	        }
	        compareTo(key) {
	            let rc = this.id.compareTo(key.id);
	            if (rc != 0)
	                return rc;
	            else
	                rc = this.publicKeyBase58.localeCompare(key.publicKeyBase58);
	            if (rc != 0)
	                return rc;
	            else
	                rc = this.type.localeCompare(key.type);
	            if (rc != 0)
	                return rc;
	            else
	                return this.controller.compareTo(key.controller);
	        }
	        toJSON(key = null) {
	            let context = key ? new DID(key) : null;
	            let json = {};
	            json.id = this.id.toString(context);
	            if (!context || this.type !== Constants.DEFAULT_PUBLICKEY_TYPE)
	                json.type = this.type;
	            if (!context || !this.controller.equals(context))
	                json.controller = this.controller.toString();
	            json.publicKeyBase58 = this.publicKeyBase58;
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.id = this.getDidUrl("publicKey.id", json.id, { mandatory: true, nullable: false, context: context });
	            this.type = this.getString("publicKey.type", json.type, { mandatory: false, defaultValue: Constants.DEFAULT_PUBLICKEY_TYPE });
	            this.controller = this.getDid("publicKey.controller", json.controller, { mandatory: false, nullable: false, defaultValue: context });
	            this.publicKeyBase58 = this.getString("publicKey.publicKeyBase58", json.publicKeyBase58, { mandatory: true, nullable: false });
	        }
	    }
	    DIDDocument.PublicKey = PublicKey;
	    class Service extends DIDEntity {
	        constructor(id = null, type = null, serviceEndpoint = null, properties) {
	            super();
	            this.id = id;
	            this.type = type;
	            this.serviceEndpoint = serviceEndpoint;
	            this.properties = properties ? sortJSONObject(properties) : {};
	            if (Object.keys(this.properties).length > 0) {
	                delete this.properties["id"];
	                delete this.properties["type"];
	                delete this.properties["serviceEndpoint"];
	            }
	        }
	        getId() {
	            return this.id;
	        }
	        getType() {
	            return this.type;
	        }
	        getServiceEndpoint() {
	            return this.serviceEndpoint;
	        }
	        getProperties() {
	            return Object.keys(this.properties).length > 0 ? this.properties : null;
	        }
	        equals(ref) {
	            if (this == ref)
	                return true;
	            return (this.getId().equals(ref.getId()) &&
	                this.getType() === ref.getType() &&
	                this.getServiceEndpoint() === ref.getServiceEndpoint());
	        }
	        compareTo(svc) {
	            let rc = this.id.compareTo(svc.id);
	            if (rc != 0)
	                return rc;
	            else
	                rc = this.type.localeCompare(svc.type);
	            if (rc != 0)
	                return rc;
	            else
	                return this.serviceEndpoint.localeCompare(svc.serviceEndpoint);
	        }
	        toJSON(key = null) {
	            let context = key ? new DID(key) : null;
	            let json = {};
	            json.id = this.id.toString(context);
	            json.type = this.type;
	            json.serviceEndpoint = this.serviceEndpoint;
	            return Object.assign(Object.assign({}, json), this.properties);
	        }
	        fromJSON(json, context = null) {
	            this.id = this.getDidUrl("service.id", json.id, { mandatory: true, nullable: false, context: context });
	            this.type = this.getString("service.type", json.type, { mandatory: true, nullable: false });
	            this.serviceEndpoint = this.getString("service.serviceEndpoint", json.serviceEndpoint, { mandatory: true, nullable: false });
	            if (Object.keys(json).length > 3) {
	                this.properties = sortJSONObject(json);
	                delete this.properties["id"];
	                delete this.properties["type"];
	                delete this.properties["serviceEndpoint"];
	            }
	        }
	    }
	    DIDDocument.Service = Service;
	    class Proof extends DIDEntity {
	        constructor(creator = null, signature = null, created = new Date(), type = Constants.DEFAULT_PUBLICKEY_TYPE) {
	            super();
	            this.type = type ? type : Constants.DEFAULT_PUBLICKEY_TYPE;
	            if (created === undefined)
	                this.created = new Date();
	            else if (created !== null)
	                this.created = new Date(created);
	            else
	                this.created = null;
	            if (this.created)
	                this.created.setMilliseconds(0);
	            this.creator = creator;
	            this.signature = signature;
	        }
	        equals(obj) {
	            return this.compareTo(obj) == 0;
	        }
	        getType() {
	            return this.type;
	        }
	        getCreated() {
	            return this.created;
	        }
	        getCreator() {
	            return this.creator;
	        }
	        getSignature() {
	            return this.signature;
	        }
	        compareTo(proof) {
	            let rc = this.created.getTime() - proof.created.getTime();
	            if (rc == 0)
	                rc = this.creator.compareTo(proof.creator);
	            return rc;
	        }
	        toJSON(key = null) {
	            let context = key ? new DID(key) : null;
	            let json = {};
	            if (!context || this.type !== Constants.DEFAULT_PUBLICKEY_TYPE)
	                json.type = this.type;
	            if (this.created)
	                json.created = this.dateToString(this.created);
	            json.creator = this.creator.toString(context);
	            json.signatureValue = this.signature;
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("proof.type", json.type, { mandatory: false, defaultValue: Constants.DEFAULT_PUBLICKEY_TYPE });
	            this.created = this.getDate("proof.created", json.created, { mandatory: false });
	            this.creator = this.getDidUrl("proof.creator", json.creator, { mandatory: true, nullable: false, context: context });
	            this.signature = this.getString("proof.signatureValue", json.signatureValue, { mandatory: true, nullable: false });
	        }
	    }
	    DIDDocument.Proof = Proof;
	    class MultiSignature {
	        constructor(m, n) {
	            this.apply(m, n);
	        }
	        static fromString(mOfN) {
	            if (!mOfN || mOfN == null)
	                throw new IllegalArgumentException("Invalid multisig spec");
	            let mn = mOfN.split(":");
	            if (mn == null || mn.length != 2)
	                throw new IllegalArgumentException("Invalid multisig spec");
	            return new MultiSignature(Number.parseInt(mn[0]), Number.parseInt(mn[1]));
	        }
	        static newFromMultiSignature(ms) {
	            return new MultiSignature(ms.m(), ms.n());
	        }
	        apply(m, n) {
	            checkArgument(n > 0, "Invalid multisig spec: n should > 0");
	            checkArgument(m > 0 && m <= n, "Invalid multisig spec: m should > 0 and <= n");
	            this.mv = m;
	            this.nv = n;
	        }
	        m() {
	            return this.mv;
	        }
	        n() {
	            return this.nv;
	        }
	        equals(multisig) {
	            if (this == multisig)
	                return true;
	            return this.mv == multisig.mv && this.nv == multisig.nv;
	        }
	        toString() {
	            return this.mv.toString() + ":" + this.nv.toString();
	        }
	    }
	    MultiSignature.ONE_OF_ONE = new MultiSignature(1, 1);
	    DIDDocument.MultiSignature = MultiSignature;
	    class Builder {
	        constructor() { }
	        static newFromDID(did, store, controller) {
	            let builder = new Builder();
	            builder.document = new DIDDocument(did);
	            builder.sourceDocument = builder.document;
	            if (controller !== undefined) {
	                builder.document.controllers = [];
	                builder.document.controllerDocs = new ComparableMap();
	                builder.document.controllers.push(controller.getSubject());
	                builder.document.controllerDocs.set(controller.getSubject(), controller);
	                builder.document.effectiveController = controller.getSubject();
	                builder.document.setMetadata(new DIDMetadata(did, store));
	                builder.controllerDoc = controller;
	            }
	            else {
	                let metadata = new DIDMetadata(did, store);
	                builder.document.setMetadata(metadata);
	            }
	            return builder;
	        }
	        static newFromDocument(doc, controller) {
	            let builder = new Builder();
	            builder.sourceDocument = doc;
	            builder.document = doc.copy();
	            if (controller !== undefined) {
	                builder.document.effectiveController = controller.getSubject();
	                builder.controllerDoc = controller;
	            }
	            return builder;
	        }
	        edit(controller) {
	            if (controller !== undefined) {
	                this.document.checkIsCustomized();
	                if (!this.document.getMetadata().attachedStore() && !controller.getMetadata().attachedStore())
	                    throw new NotAttachedWithStoreException();
	                if (!controller.getMetadata().attachedStore())
	                    controller.getMetadata().attachStore(this.document.getMetadata().getStore());
	                if (!this.sourceDocument.hasController(controller.getSubject()))
	                    throw new NotControllerException(controller.getSubject().toString());
	                this.document.effectiveController = controller.getSubject();
	                this.controllerDoc = controller;
	                return this;
	            }
	            else {
	                if (!this.document.isCustomizedDid()) {
	                    this.document.checkAttachedStore();
	                    return this;
	                }
	                else {
	                    if (this.sourceDocument.getEffectiveController() == null)
	                        throw new NoEffectiveControllerException("Unable to edit a customized DIDDocument without effective controller");
	                    return this.edit(this.sourceDocument.getEffectiveControllerDocument());
	                }
	            }
	        }
	        canonicalId(id) {
	            if (typeof id === "string") {
	                return DIDURL.from(id, this.getSubject());
	            }
	            else {
	                if (id == null || id.getDid() != null)
	                    return id;
	                return DIDURL.from(id, this.getSubject());
	            }
	        }
	        invalidateProof() {
	            if (this.document.proofs != null && this.document.proofs.size != 0)
	                this.document.proofs.clear();
	        }
	        checkNotSealed() {
	            if (this.document == null)
	                throw new AlreadySealedException();
	        }
	        checkIsCustomized() {
	            if (!this.document.isCustomizedDid())
	                throw new NotCustomizedDIDException(this.document.getSubject().toString());
	        }
	        getSubject() {
	            this.checkNotSealed();
	            return this.document.getSubject();
	        }
	        addController(controller) {
	            return __awaiter$9(this, void 0, void 0, function* () {
	                checkArgument(controller != null, "Invalid controller");
	                if (typeof controller === "string")
	                    controller = DID.from(controller);
	                this.checkNotSealed();
	                this.checkIsCustomized();
	                checkArgument(!this.document.controllers.includes(controller), "Controller already exists");
	                let controllerDoc = yield controller.resolve(true);
	                if (controllerDoc == null)
	                    throw new DIDNotFoundException("DID not found: " + controller.toString());
	                if (controllerDoc.isDeactivated())
	                    throw new DIDDeactivatedException(controller.toString());
	                if (controllerDoc.isExpired())
	                    throw new DIDExpiredException(controller.toString());
	                if (!controllerDoc.isGenuine())
	                    throw new DIDNotGenuineException(controller.toString());
	                if (controllerDoc.isCustomizedDid())
	                    throw new NotPrimitiveDIDException(controller.toString());
	                this.document.controllers.push(controller);
	                this.document.controllerDocs.set(controller, controllerDoc);
	                this.document.multisig = null;
	                this.invalidateProof();
	                return this;
	            });
	        }
	        removeController(controller) {
	            checkArgument(controller != null, "Invalid controller");
	            if (typeof controller === "string")
	                controller = DID.from(controller);
	            this.checkNotSealed();
	            this.checkIsCustomized();
	            if (controller.equals(this.controllerDoc.getSubject()))
	                throw new CanNotRemoveEffectiveController(controller.toString());
	            if (this.document.controllers.includes(controller)) {
	                this.document.controllers.splice(this.document.controllers.indexOf(controller), 1);
	                this.document.controllerDocs.delete(controller);
	                this.invalidateProof();
	            }
	            return this;
	        }
	        setMultiSignature(m) {
	            this.checkNotSealed();
	            this.checkIsCustomized();
	            checkArgument(m >= 1, "Invalid signature count");
	            let n = this.document.controllers.length;
	            checkArgument(m <= n, "Signature count exceeds the upper limit");
	            let multisig = null;
	            if (n > 1)
	                multisig = new MultiSignature(m, n);
	            if (this.document.multisig == null && multisig == null)
	                return this;
	            if (this.document.multisig != null && multisig != null &&
	                this.document.multisig.equals(multisig))
	                return this;
	            this.document.multisig = new MultiSignature(m, n);
	            this.invalidateProof();
	            return this;
	        }
	        addPublicKey(key) {
	            if (this.document.publicKeys == null) {
	                this.document.publicKeys = new ComparableMap();
	                this.document.authenticationKeys = new ComparableMap();
	                this.document.authorizationKeys = new ComparableMap();
	            }
	            else {
	                for (let pk of this.document.publicKeys.values()) {
	                    if (pk.getId().equals(key.getId()))
	                        throw new DIDObjectAlreadyExistException("PublicKey id '"
	                            + key.getId() + "' already exist.");
	                    if (pk.getPublicKeyBase58() === key.getPublicKeyBase58())
	                        throw new DIDObjectAlreadyExistException("PublicKey '"
	                            + key.getPublicKeyBase58() + "' already exist.");
	                }
	            }
	            this.document.publicKeys.set(key.getId(), key);
	            if (this.document.defaultPublicKey == null) {
	                let address = HDKey.toAddress(key.getPublicKeyBytes());
	                if (address === this.getSubject().getMethodSpecificId()) {
	                    this.document.defaultPublicKey = key;
	                    this.document.authenticationKeys.set(key.getId(), key);
	                }
	            }
	            this.invalidateProof();
	        }
	        createAndAddPublicKey(id, pk, controller, type = "ECDSAsecp256r1") {
	            this.checkNotSealed();
	            if (typeof id === "string")
	                id = this.canonicalId(id);
	            if (controller === undefined)
	                controller = null;
	            else if (typeof controller === "string")
	                controller = DID.from(controller);
	            checkArgument(id != null && (id.getDid() == null || id.getDid().equals(this.getSubject())), "Invalid publicKey id");
	            checkArgument(pk && pk != null, "Invalid publicKey");
	            if (controller == null)
	                controller = this.getSubject();
	            this.addPublicKey(new PublicKey(this.canonicalId(id), controller, pk, type));
	            return this;
	        }
	        removePublicKey(id, force = false) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid publicKey id");
	            if (this.document.publicKeys == null || this.document.publicKeys.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            id = this.canonicalId(id);
	            let pk = this.document.publicKeys.get(id);
	            if (pk == null)
	                throw new DIDObjectNotExistException(id.toString());
	            if (this.document.defaultPublicKey != null && this.document.defaultPublicKey.getId().equals(id))
	                throw new DIDObjectHasReference(id.toString() + "is default key");
	            if (!force) {
	                if (this.document.authenticationKeys.has(pk.getId()) ||
	                    this.document.authorizationKeys.has(pk.getId()))
	                    throw new DIDObjectHasReference(id.toString());
	            }
	            if (this.document.publicKeys.delete(id)) {
	                this.document.authenticationKeys.delete(id);
	                this.document.authorizationKeys.delete(id);
	                try {
	                    if (this.document.getMetadata().attachedStore())
	                        this.document.getMetadata().getStore().deletePrivateKey(id);
	                }
	                catch (ignore) {
	                    Builder.log.error("INTERNAL - Remove private key", ignore);
	                }
	                this.invalidateProof();
	            }
	            return this;
	        }
	        addExistingAuthenticationKey(id) {
	            checkArgument(id != null, "Invalid publicKey id");
	            if (this.document.publicKeys == null || this.document.publicKeys.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            id = this.canonicalId(id);
	            let key = this.document.publicKeys.get(id);
	            if (key == null)
	                throw new DIDObjectNotExistException(id.toString());
	            if (!key.getController().equals(this.getSubject()))
	                throw new IllegalUsage(id.toString());
	            if (!this.document.authenticationKeys.has(id)) {
	                this.document.authenticationKeys.set(id, key);
	                this.invalidateProof();
	            }
	            return this;
	        }
	        addAuthenticationKey(id, pk) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid publicKey id");
	            if (typeof id === "string")
	                id = this.canonicalId(id);
	            checkArgument(id != null && (id.getDid() == null || id.getDid().equals(this.getSubject())), "Invalid publicKey id");
	            checkArgument(pk && pk != null, "Invalid publicKey");
	            let key = new PublicKey(this.canonicalId(id), this.getSubject(), pk);
	            this.addPublicKey(key);
	            this.document.authenticationKeys.set(id, key);
	            return this;
	        }
	        removeAuthenticationKey(id) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid publicKey id");
	            if (this.document.publicKeys == null || this.document.publicKeys.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            id = this.canonicalId(id);
	            let key = this.document.publicKeys.get(id);
	            if (key == null || !this.document.authenticationKeys.has(key.getId()))
	                throw new DIDObjectNotExistException(id.toString());
	            if (this.document.defaultPublicKey != null && this.document.defaultPublicKey.getId().equals(id))
	                throw new DIDObjectHasReference("Cannot remove the default PublicKey from authentication.");
	            if (this.document.authenticationKeys.has(id)) {
	                this.document.authenticationKeys.delete(id);
	                this.invalidateProof();
	            }
	            else {
	                throw new DIDObjectNotExistException(id.toString());
	            }
	            return this;
	        }
	        addExistingAuthorizationKey(id) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid publicKey id");
	            if (this.document.isCustomizedDid())
	                throw new NotPrimitiveDIDException(this.getSubject().toString());
	            if (this.document.publicKeys == null || this.document.publicKeys.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            id = this.canonicalId(id);
	            let key = this.document.publicKeys.get(id);
	            if (key == null)
	                throw new DIDObjectNotExistException(id.toString());
	            if (key.getController().equals(this.getSubject()))
	                throw new IllegalUsage(id.toString());
	            if (!this.document.authorizationKeys.has(id)) {
	                this.document.authorizationKeys.set(id, key);
	                this.invalidateProof();
	            }
	            return this;
	        }
	        addAuthorizationKey(id, controller, pk) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid publicKey id");
	            if (typeof id === "string")
	                id = this.canonicalId(id);
	            if (typeof controller === "string")
	                controller = DID.from(controller);
	            checkArgument(id.getDid() == null || id.getDid().equals(this.getSubject()), "Invalid publicKey id");
	            checkArgument(pk && pk != null, "Invalid publicKey");
	            if (this.document.isCustomizedDid())
	                throw new NotPrimitiveDIDException(this.getSubject().toString());
	            if (controller.equals(this.getSubject()))
	                throw new IllegalUsage("Key's controller is self.");
	            let key = new PublicKey(this.canonicalId(id), controller, pk);
	            this.addPublicKey(key);
	            this.document.authorizationKeys.set(id, key);
	            return this;
	        }
	        authorizeDid(id, controller, key) {
	            return __awaiter$9(this, void 0, void 0, function* () {
	                this.checkNotSealed();
	                checkArgument(id != null && (id.getDid() == null || id.getDid().equals(this.getSubject())), "Invalid publicKey id");
	                checkArgument(controller != null && !controller.equals(this.getSubject()), "Invalid controller");
	                if (this.document.isCustomizedDid())
	                    throw new NotPrimitiveDIDException(this.getSubject().toString());
	                let controllerDoc = yield controller.resolve();
	                if (controllerDoc == null)
	                    throw new DIDNotFoundException("DID not found: " + id.toString());
	                if (controllerDoc.isDeactivated())
	                    throw new DIDDeactivatedException(controller.toString());
	                if (controllerDoc.isExpired())
	                    throw new DIDExpiredException(controller.toString());
	                if (!controllerDoc.isGenuine())
	                    throw new DIDNotGenuineException(controller.toString());
	                if (controllerDoc.isCustomizedDid())
	                    throw new NotPrimitiveDIDException(controller.toString());
	                if (key == null)
	                    key = controllerDoc.getDefaultPublicKeyId();
	                let targetPk = controllerDoc.getAuthenticationKey(key);
	                if (targetPk == null)
	                    throw new DIDObjectNotExistException(key.toString());
	                let pk = new PublicKey(this.canonicalId(id), controller, targetPk.getPublicKeyBase58(), targetPk.getType());
	                this.addPublicKey(pk);
	                this.document.authorizationKeys.set(id, pk);
	                return this;
	            });
	        }
	        removeAuthorizationKey(inputId) {
	            this.checkNotSealed();
	            checkArgument(inputId != null, "Invalid publicKey id");
	            let id = typeof inputId === "string" ? this.canonicalId(inputId) : inputId;
	            if (this.document.publicKeys == null || this.document.publicKeys.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            id = this.canonicalId(id);
	            let key = this.document.publicKeys.get(id);
	            if (key == null)
	                throw new DIDObjectNotExistException(id.toString());
	            if (this.document.authorizationKeys.has(id)) {
	                this.document.authorizationKeys.delete(id);
	                this.invalidateProof();
	            }
	            else {
	                throw new DIDObjectNotExistException(id.toString());
	            }
	            return this;
	        }
	        addCredential(vc) {
	            this.checkNotSealed();
	            checkArgument(vc != null, "Invalid credential");
	            if (!vc.getSubject().getId().equals(this.getSubject()))
	                throw new IllegalUsage(vc.getSubject().getId().toString());
	            if (this.document.credentials == null) {
	                this.document.credentials = new ComparableMap();
	            }
	            else {
	                if (this.document.credentials.has(vc.getId()))
	                    throw new DIDObjectAlreadyExistException(vc.getId().toString());
	            }
	            this.document.credentials.set(vc.getId(), vc);
	            this.invalidateProof();
	            return this;
	        }
	        createAndAddCredential(storepass, id, subject = null, types = null, expirationDate = null) {
	            return __awaiter$9(this, void 0, void 0, function* () {
	                this.checkNotSealed();
	                checkArgument(id != null, "Invalid publicKey id");
	                if (typeof id === "string")
	                    id = this.canonicalId(id);
	                checkArgument(id != null, "Invalid publicKey id");
	                checkArgument((id.getDid() == null || id.getDid().equals(this.getSubject())), "Invalid publicKey id");
	                checkArgument(storepass && storepass != null, "Invalid storepass");
	                let issuer = new Issuer(this.document);
	                let cb = issuer.issueFor(this.document.getSubject());
	                if (types == null)
	                    types = ["SelfProclaimedCredential"];
	                if (expirationDate == null)
	                    expirationDate = this.document.getExpires();
	                try {
	                    let vc = yield cb.id(this.canonicalId(id))
	                        .type(...types)
	                        .properties(subject)
	                        .expirationDate(expirationDate)
	                        .seal(storepass);
	                    this.addCredential(vc);
	                }
	                catch (ignore) {
	                    throw new UnknownInternalException(ignore);
	                }
	                return this;
	            });
	        }
	        removeCredential(id) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid credential id");
	            if (this.document.credentials == null || this.document.credentials.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            if (this.document.credentials.delete(this.canonicalId(id)))
	                this.invalidateProof();
	            else
	                throw new DIDObjectNotExistException(id.toString());
	            return this;
	        }
	        addService(id, type, endpoint, properties) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid publicKey id");
	            if (typeof id === "string")
	                id = this.canonicalId(id);
	            checkArgument(id != null && (id.getDid() == null || id.getDid().equals(this.getSubject())), "Invalid publicKey id");
	            checkArgument(type && type != null, "Invalid type");
	            checkArgument(endpoint && endpoint != null, "Invalid endpoint");
	            let svc = new DIDDocument.Service(this.canonicalId(id), type, endpoint, properties);
	            if (this.document.services == null)
	                this.document.services = new ComparableMap();
	            else {
	                if (this.document.services.has(svc.getId()))
	                    throw new DIDObjectAlreadyExistException("Service '"
	                        + svc.getId() + "' already exist.");
	            }
	            this.document.services.set(svc.getId(), svc);
	            this.invalidateProof();
	            return this;
	        }
	        removeService(id) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid credential id");
	            if (typeof id === "string")
	                id = this.canonicalId(id);
	            if (this.document.services == null || this.document.services.size == 0)
	                throw new DIDObjectNotExistException(id.toString());
	            if (this.document.services.delete(this.canonicalId(id)))
	                this.invalidateProof();
	            else
	                throw new DIDObjectNotExistException(id.toString());
	            return this;
	        }
	        getMaxExpires() {
	            return dayjs().add(Constants.MAX_VALID_YEARS, 'years').toDate();
	        }
	        setDefaultExpires() {
	            this.checkNotSealed();
	            this.document.expires = this.getMaxExpires();
	            if (this.document.expires)
	                this.document.expires.setMilliseconds(0);
	            this.invalidateProof();
	            return this;
	        }
	        setExpires(expires) {
	            this.checkNotSealed();
	            checkArgument(expires != null, "Invalid expires");
	            expires.setMilliseconds(0);
	            if (dayjs(expires).isAfter(this.getMaxExpires()))
	                throw new IllegalArgumentException("Invalid expires, out of range.");
	            this.document.expires = expires;
	            this.invalidateProof();
	            return this;
	        }
	        removeProof(controller) {
	            this.checkNotSealed();
	            checkArgument(controller != null, "Invalid controller");
	            if (this.document.proofs == null || this.document.proofs.size == 0)
	                return this;
	            if (this.document.proofs.delete(controller) == null)
	                throw new DIDObjectNotExistException("No proof signed by: " + controller);
	            return this;
	        }
	        sanitize() {
	            if (this.document.isCustomizedDid()) {
	                if (this.document.controllers == null || this.document.controllers.length == 0)
	                    throw new MalformedDocumentException("Missing controllers");
	                if (this.document.controllers.length > 1) {
	                    if (this.document.multisig == null)
	                        throw new MalformedDocumentException("Missing multisig");
	                    if (this.document.multisig.n() != this.document.controllers.length)
	                        throw new MalformedDocumentException("Invalid multisig, not matched with controllers");
	                }
	                else {
	                    if (this.document.multisig != null)
	                        throw new MalformedDocumentException("Invalid multisig");
	                }
	            }
	            let sigs = this.document.multisig == null ? 1 : this.document.multisig.m();
	            if (this.document.proofs != null && this.document.proofs.size == sigs)
	                throw new AlreadySealedException(this.getSubject().toString());
	            if (this.document.controllers == null || this.document.controllers.length == 0) {
	                this.document.controllers = [];
	                this.document.controllerDocs = new ComparableMap();
	            }
	            else {
	                Collections.sort(this.document.controllers);
	            }
	            if (this.document.publicKeys == null || this.document.publicKeys.size == 0) {
	                this.document.publicKeys = new ComparableMap();
	                this.document.authenticationKeys = new ComparableMap();
	                this.document.authorizationKeys = new ComparableMap();
	            }
	            if (this.document.credentials == null) {
	                this.document.credentials = new ComparableMap();
	            }
	            if (this.document.services == null) {
	                this.document.services = new ComparableMap();
	            }
	            if (this.document.proofs == null || this.document.proofs.size == 0) {
	                if (this.document.getExpires() == null)
	                    this.setDefaultExpires();
	            }
	            if (this.document.proofs == null)
	                this.document.proofs = new ComparableMap();
	        }
	        seal(storepass) {
	            return __awaiter$9(this, void 0, void 0, function* () {
	                this.checkNotSealed();
	                checkArgument(storepass && storepass != null, "Invalid storepass");
	                this.sanitize();
	                let signerDoc = this.document.isCustomizedDid() ? this.controllerDoc : this.document;
	                let signKey = signerDoc.getDefaultPublicKeyId();
	                if (this.document.proofs.has(signerDoc.getSubject()))
	                    throw new AlreadySignedException(signerDoc.getSubject().toString());
	                let proofs = this.document.proofs;
	                this.document.proofs = null;
	                let json = this.document.serialize(true);
	                this.document.proofs = proofs;
	                let sig = yield this.document.signWithId(signKey, storepass, buffer$3.Buffer.from(json));
	                let proof = new Proof(signKey, sig);
	                this.document.proofs.set(proof.getCreator().getDid(), proof);
	                let doc = this.document;
	                this.document = null;
	                return doc;
	            });
	        }
	    }
	    Builder.log = new Logger("DIDDocumentBuilder");
	    DIDDocument.Builder = Builder;
	})(DIDDocument || (DIDDocument = {}));

	const log$4 = new Logger("RootIdentity");
	class RootIdentity {
	    constructor() { }
	    static newFromMnemonic(mnemonic, passphrase) {
	        let rootIdentity = new RootIdentity();
	        rootIdentity.mnemonic = mnemonic;
	        if (passphrase == null)
	            passphrase = "";
	        rootIdentity.rootPrivateKey = HDKey.newWithMnemonic(mnemonic, passphrase);
	        rootIdentity.preDerivedPublicKey = rootIdentity.rootPrivateKey.deriveWithPath(HDKey.PRE_DERIVED_PUBLICKEY_PATH);
	        rootIdentity.index = 0;
	        return rootIdentity;
	    }
	    static newFromPrivateKey(rootPrivateKey) {
	        let rootIdentity = new RootIdentity();
	        rootIdentity.rootPrivateKey = rootPrivateKey;
	        rootIdentity.preDerivedPublicKey = rootPrivateKey.deriveWithPath(HDKey.PRE_DERIVED_PUBLICKEY_PATH);
	        rootIdentity.index = 0;
	        return rootIdentity;
	    }
	    static newFromPreDerivedPublicKey(preDerivedPublicKey, index) {
	        let rootIdentity = new RootIdentity();
	        rootIdentity.preDerivedPublicKey = preDerivedPublicKey;
	        rootIdentity.index = index;
	        return rootIdentity;
	    }
	    static getIdFromMnemonic(mnemonic, passphrase) {
	        let rootidentity = this.newFromMnemonic(mnemonic, passphrase);
	        return rootidentity.getId();
	    }
	    static createFromMnemonic(mnemonic, passphrase, store, storepass, overwrite = false) {
	        checkArgument(mnemonic != null && mnemonic !== "", "Invalid mnemonic");
	        checkArgument(store != null, "Invalid DID store");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        try {
	            checkArgument(Mnemonic.checkIsValid(mnemonic), "Invalid mnemonic.");
	        }
	        catch (e) {
	            throw new IllegalArgumentException(e);
	        }
	        if (passphrase == null)
	            passphrase = "";
	        let identity = RootIdentity.newFromMnemonic(mnemonic, passphrase);
	        if (store.containsRootIdentity(identity.getId()) && !overwrite)
	            throw new RootIdentityAlreadyExistException(identity.getId());
	        identity.setMetadata(new RootIdentity.Metadata(identity.getId(), store));
	        store.storeRootIdentity(identity, storepass);
	        identity.wipe();
	        return identity;
	    }
	    static createFromPrivateKey(extentedPrivateKey, store, storepass, overwrite = false) {
	        checkArgument(extentedPrivateKey != null && extentedPrivateKey !== "", "Invalid extended private key");
	        checkArgument(store != null, "Invalid DID store");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let rootPrivateKey = HDKey.deserializeBase58(extentedPrivateKey);
	        let identity = RootIdentity.newFromPrivateKey(rootPrivateKey);
	        if (store.containsRootIdentity(identity.getId()) && !overwrite)
	            throw new RootIdentityAlreadyExistException(identity.getId());
	        identity.setMetadata(new RootIdentity.Metadata(identity.getId(), store));
	        store.storeRootIdentity(identity, storepass);
	        identity.wipe();
	        return identity;
	    }
	    static createFromPreDerivedPublicKey(preDerivedPublicKey, index) {
	        let key = preDerivedPublicKey == null ? null : HDKey.deserializeBase58(preDerivedPublicKey);
	        return RootIdentity.newFromPreDerivedPublicKey(key, index);
	    }
	    wipe() {
	        this.rootPrivateKey.wipe();
	        this.mnemonic = null;
	        this.rootPrivateKey = null;
	    }
	    getStore() {
	        return this.metadata.getStore();
	    }
	    setMetadata(metadata) {
	        this.metadata = metadata;
	    }
	    static getId(key) {
	        checkArgument(key != null && key.length > 0, "Invalid key bytes");
	        return crypto.createHash('md5').update(key.toString('hex'), "hex").digest("hex");
	    }
	    getId() {
	        if (this.id == null)
	            this.id = RootIdentity.getId(this.preDerivedPublicKey.serializePublicKey());
	        return this.id;
	    }
	    getAlias() {
	        return this.metadata.getAlias();
	    }
	    setAlias(alias) {
	        this.metadata.setAlias(alias);
	    }
	    setAsDefault() {
	        this.getStore().setDefaultRootIdentity(this);
	    }
	    getDefaultDid() {
	        return this.metadata.getDefaultDid();
	    }
	    setDefaultDid(did) {
	        if (did instanceof DID)
	            this.metadata.setDefaultDid(did);
	        else
	            this.metadata.setDefaultDid(DID.from(did));
	    }
	    setDefaultDidByIndex(index) {
	        checkArgument(index >= 0, "Invalid index");
	        this.metadata.setDefaultDid(this.getDid(index));
	    }
	    getMnemonic() {
	        return this.mnemonic;
	    }
	    getRootPrivateKey() {
	        return this.rootPrivateKey;
	    }
	    getPreDerivedPublicKey() {
	        return this.preDerivedPublicKey;
	    }
	    getIndex() {
	        return this.index;
	    }
	    setIndex(idx) {
	        this.index = idx;
	        this.getStore().storeRootIdentity(this);
	    }
	    incrementIndex() {
	        let idx = ++this.index;
	        this.getStore().storeRootIdentity(this);
	        return idx;
	    }
	    getDid(index) {
	        checkArgument(index >= 0, "Invalid index");
	        let key = this.preDerivedPublicKey.deriveWithIndex(0).deriveWithIndex(index);
	        let did = new DID(DID.METHOD, key.getAddress());
	        return did;
	    }
	    static lazyCreateDidPrivateKey(id, store, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let doc = yield store.loadDid(id.getDid());
	            if (doc == null) {
	                log$4.error("INTERNAL - Missing document for DID: {}", id.getDid());
	                throw new DIDStoreException("Missing document for DID: " + id.getDid());
	            }
	            let identity = doc.getMetadata().getRootIdentityId();
	            if (identity == null)
	                return null;
	            let key = store.derive(identity, HDKey.DERIVE_PATH_PREFIX +
	                doc.getMetadata().getIndex(), storepass);
	            let pk = doc.getPublicKey(id);
	            if (pk == null) {
	                log$4.error("INTERNAL - Invalid public key: {}", id);
	                throw new DIDStoreException("Invalid public key: " + id);
	            }
	            if (key.getPublicKeyBase58() !== pk.getPublicKeyBase58()) {
	                log$4.error("INTERNAL - Invalid DID metadata: {}", id.getDid());
	                throw new DIDStoreException("Invalid DID metadata: " + id.getDid());
	            }
	            let sk = key.serialize();
	            store.storePrivateKey(id, sk, storepass);
	            return sk;
	        });
	    }
	    newDid(storepass, index = undefined, overwrite = false) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            let shouldIncrementIndexAfterCompletion = false;
	            if (index === undefined) {
	                index = this.getIndex();
	                shouldIncrementIndexAfterCompletion = true;
	            }
	            checkArgument(index >= 0, "Invalid index");
	            let did = this.getDid(index);
	            let doc = yield this.getStore().loadDid(did);
	            if (doc != null) {
	                if (doc.isDeactivated())
	                    throw new DIDDeactivatedException(did.toString());
	                if (!overwrite)
	                    throw new DIDAlreadyExistException("DID already exists in the store.");
	            }
	            try {
	                doc = yield did.resolve();
	                if (doc != null) {
	                    if (doc.isDeactivated())
	                        throw new DIDDeactivatedException(did.toString());
	                    if (!overwrite)
	                        throw new DIDAlreadyExistException("DID already published.");
	                }
	            }
	            catch (e) {
	                if (e instanceof DIDResolveException && !overwrite)
	                    throw e;
	            }
	            log$4.debug("Creating new DID {} at index {}...", did.toString(), index);
	            let key = this.getStore().derive(this.getId(), HDKey.DERIVE_PATH_PREFIX + index, storepass);
	            try {
	                let id = DIDURL.from("#primary", did);
	                this.getStore().storePrivateKey(id, key.serialize(), storepass);
	                let db = DIDDocument.Builder.newFromDID(did, this.getStore());
	                db.addAuthenticationKey(id, key.getPublicKeyBase58());
	                doc = yield db.seal(storepass);
	                yield this.getStore().storeDid(doc);
	                if (shouldIncrementIndexAfterCompletion)
	                    this.incrementIndex();
	                return doc;
	            }
	            catch (e) {
	                throw new UnknownInternalException(e);
	            }
	            finally {
	                key.wipe();
	            }
	        });
	    }
	    hasMnemonic() {
	        return this.getStore().containsRootIdentityMnemonic(this.getId());
	    }
	    exportMnemonic(storepass) {
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        return this.getStore().exportRootIdentityMnemonic(this.getId(), storepass);
	    }
	    synchronizeIndex(index, handle = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(index >= 0, "Invalid index");
	            if (handle == null)
	                handle = DefaultConflictHandle.getInstance();
	            let did = this.getDid(index);
	            log$4.info("Synchronize {}/{}...", did.toString(), index);
	            let resolvedDoc = yield did.resolve(true);
	            if (resolvedDoc == null) {
	                log$4.info("Synchronize {}/{}...not exists", did.toString(), index);
	                return false;
	            }
	            log$4.debug("Synchronize {}/{}..exists, got the on-chain copy.", did.toString(), index);
	            let finalDoc = resolvedDoc;
	            let localDoc = yield this.getStore().loadDid(did);
	            if (localDoc != null) {
	                localDoc.getMetadata().detachStore();
	                if (localDoc.getSignature() === resolvedDoc.getSignature() ||
	                    (localDoc.getMetadata().getSignature() != null &&
	                        localDoc.getProof().getSignature() ===
	                            localDoc.getMetadata().getSignature())) {
	                    finalDoc.getMetadata().merge(localDoc.getMetadata());
	                }
	                else {
	                    log$4.debug("{} on-chain copy conflict with local copy.", did.toString());
	                    finalDoc = handle.merge(resolvedDoc, localDoc);
	                    if (finalDoc == null || !finalDoc.getSubject().equals(did)) {
	                        log$4.error("Conflict handle merge the DIDDocument error.");
	                        throw new DIDStoreException("deal with local modification error.");
	                    }
	                    else {
	                        log$4.debug("Conflict handle return the final copy.");
	                    }
	                }
	            }
	            let metadata = finalDoc.getMetadata();
	            metadata.setPublished(resolvedDoc.getMetadata().getPublished());
	            metadata.setSignature(resolvedDoc.getProof().getSignature());
	            if (resolvedDoc.getMetadata().isDeactivated())
	                metadata.setDeactivated(true);
	            metadata.setRootIdentityId(this.getId());
	            metadata.setIndex(index);
	            if (localDoc != null)
	                localDoc.getMetadata().attachStore(this.getStore());
	            yield this.getStore().storeDid(finalDoc);
	            this.getStore().storeLazyPrivateKey(finalDoc.getDefaultPublicKeyId());
	            return true;
	        });
	    }
	    synchronize(handle = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$4.info("Synchronize root identity {}...", this.getId());
	            let lastIndex = this.getIndex() - 1;
	            let blanks = 0;
	            let i = 0;
	            while (i < lastIndex || blanks < 20) {
	                let exists = yield this.synchronizeIndex(i, handle);
	                if (exists) {
	                    if (i > lastIndex)
	                        lastIndex = i;
	                    blanks = 0;
	                }
	                else {
	                    if (i > lastIndex)
	                        blanks++;
	                }
	                i++;
	            }
	            if (lastIndex >= this.getIndex())
	                this.setIndex(lastIndex + 1);
	        });
	    }
	}
	(function (RootIdentity) {
	    class Metadata extends AbstractMetadata {
	        constructor(id = null, store = null) {
	            super(store);
	            this.id = id;
	        }
	        setId(id) {
	            this.id = id;
	        }
	        setDefaultDid(did) {
	            this.put(Metadata.DEFAULT_DID, did.toString());
	        }
	        getDefaultDid() {
	            return DID.from(this.get(Metadata.DEFAULT_DID));
	        }
	        save() {
	            if (this.attachedStore()) {
	                try {
	                    this.getStore().storeRootIdentityMetadata(this.id, this);
	                }
	                catch (e) {
	                    if (e instanceof DIDStoreException)
	                        log$4.error("INTERNAL - error store metadata for credential {}", this.id);
	                    throw e;
	                }
	            }
	        }
	        static parse(content, context = null) {
	            try {
	                return DIDEntity.deserialize(content, Metadata, context);
	            }
	            catch (e) {
	                if (e instanceof MalformedMetadataException)
	                    throw e;
	                else
	                    throw new MalformedMetadataException(e);
	            }
	        }
	    }
	    Metadata.DEFAULT_DID = "defaultDid";
	    RootIdentity.Metadata = Metadata;
	})(RootIdentity || (RootIdentity = {}));

	const log$3 = new Logger("FileSystemStorage");
	class FileSystemStorage {
	    constructor(context) {
	        this.storeRoot = new File(context);
	        this.currentDataDir = FileSystemStorage.DATA_DIR;
	    }
	    init() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.storeRoot.exists())
	                yield this.checkStore();
	            else
	                this.initializeStore();
	        });
	    }
	    initializeStore() {
	        try {
	            log$3.debug("Initializing DID store at {}", this.storeRoot.getAbsolutePath());
	            this.storeRoot.createDirectory();
	            let metadata = new DIDStoreMetadata();
	            let file = this.getFile(true, this.currentDataDir, FileSystemStorage.METADATA);
	            file.writeText(metadata.serialize());
	        }
	        catch (e) {
	            log$3.error("Initialize DID store error", e);
	            throw new DIDStorageException("Initialize DIDStore \"" + this.storeRoot.getAbsolutePath() + "\" error.", e);
	        }
	    }
	    checkStore() {
	        log$3.debug("Checking DID store at {}", this.storeRoot.getAbsolutePath());
	        if (this.storeRoot.isFile()) {
	            log$3.error("Path {} not a directory", this.storeRoot.getAbsolutePath());
	            throw new DIDStorageException("Invalid DIDStore \""
	                + this.storeRoot.getAbsolutePath() + "\".");
	        }
	        this.postOperations();
	        let file = this.getDir(this.currentDataDir);
	        if (!file.exists()) {
	            let storeRootFiles = this.storeRoot.list();
	            if (storeRootFiles == null || storeRootFiles.length == 0) {
	                this.initializeStore();
	                return;
	            }
	            else {
	                log$3.error("Path {} cannot be initialized as DID Store because it's not empty", this.storeRoot.getAbsolutePath());
	                throw new DIDStorageException("Path cannot be initialized as DID Store because it's not empty \""
	                    + this.storeRoot.getAbsolutePath() + "\".");
	            }
	        }
	        if (!file.isDirectory()) {
	            log$3.error("Path {} is not a DID store, missing data directory", this.storeRoot.getAbsolutePath());
	            throw new DIDStorageException("Invalid DIDStore \""
	                + this.storeRoot.getAbsolutePath() + "\".");
	        }
	        let metadataFile = this.getFile(false, this.currentDataDir, FileSystemStorage.METADATA);
	        if (!metadataFile.exists() || !metadataFile.isFile()) {
	            log$3.error("Path {} not a DID store, missing store metadata", this.storeRoot.getAbsolutePath());
	            throw new DIDStorageException("Invalid DIDStore \"" + this.storeRoot.getAbsolutePath() + "\".");
	        }
	        try {
	            let metadataContent = metadataFile.readText();
	            let metadata = DIDStoreMetadata.parse(metadataContent);
	            if (metadata.getType() !== DIDStoreMetadata.DID_STORE_TYPE)
	                throw new DIDStorageException("Unknown DIDStore type");
	            if (metadata.getVersion() != DIDStoreMetadata.DID_STORE_VERSION)
	                throw new DIDStorageException("Unsupported DIDStore version");
	        }
	        catch (e) {
	            log$3.error("Check DID store error, failed load store metadata", e);
	            throw new DIDStorageException("Can not check the store metadata", e);
	        }
	    }
	    static toPath(id) {
	        let path = id.toString(id.getDid());
	        return path.replace(';', '+').replace('/', '~').replace('?', '!');
	    }
	    static toDIDURL(did, path) {
	        path = path.replace('+', ';').replace('~', '/').replace('!', '?');
	        return DIDURL.from(path, did);
	    }
	    static copyFile(src, dest) {
	        dest.writeText(src.readText());
	    }
	    getFile(create, ...path) {
	        let file = null;
	        let relPath = this.storeRoot.getAbsolutePath();
	        for (let p of path) {
	            relPath += (File.SEPARATOR + p);
	        }
	        file = new File(relPath);
	        if (create)
	            file.getParentDirectory().createDirectory();
	        return file;
	    }
	    getDir(...paths) {
	        let relPath = this.storeRoot.getAbsolutePath() + File.SEPARATOR + paths.join(File.SEPARATOR);
	        return new File(relPath);
	    }
	    getLocation() {
	        return this.storeRoot.toString();
	    }
	    getStoreRoot() {
	        return this.storeRoot;
	    }
	    storeMetadata(metadata) {
	        try {
	            let file = this.getFile(true, this.currentDataDir, FileSystemStorage.METADATA);
	            if (metadata == null || metadata.isEmpty())
	                file.delete();
	            else
	                file.writeText(metadata.serialize());
	        }
	        catch (e) {
	            throw new DIDStorageException("Store DIDStore metadata error", e);
	        }
	    }
	    loadMetadata() {
	        try {
	            let file = this.getFile(false, this.currentDataDir, FileSystemStorage.METADATA);
	            let metadata = null;
	            if (file.exists())
	                metadata = DIDStoreMetadata.parse(file.readText());
	            return metadata;
	        }
	        catch (e) {
	            throw new DIDStorageException("Load DIDStore metadata error", e);
	        }
	    }
	    getRootIdentityFile(id, file, create) {
	        return this.getFile(create, this.currentDataDir, FileSystemStorage.ROOT_IDENTITIES_DIR, id, file);
	    }
	    getRootIdentityDir(id) {
	        return this.getDir(this.currentDataDir, FileSystemStorage.ROOT_IDENTITIES_DIR, id);
	    }
	    storeRootIdentityMetadata(id, metadata) {
	        try {
	            let file = this.getRootIdentityFile(id, FileSystemStorage.METADATA, true);
	            if (metadata == null || metadata.isEmpty())
	                file.delete();
	            else
	                file.writeText(metadata.serialize());
	        }
	        catch (e) {
	            throw new DIDStorageException("Store root identity metadata error: " + id, e);
	        }
	    }
	    loadRootIdentityMetadata(id) {
	        try {
	            let file = this.getRootIdentityFile(id, FileSystemStorage.METADATA, false);
	            let metadata = null;
	            if (file.exists())
	                metadata = RootIdentity.Metadata.parse(file.readText());
	            return metadata;
	        }
	        catch (e) {
	            throw new DIDStorageException("Load root identity metadata error: " + id, e);
	        }
	    }
	    storeRootIdentity(id, mnemonic, privateKey, publicKey, index) {
	        try {
	            let file;
	            if (mnemonic != null) {
	                file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_MNEMONIC_FILE, true);
	                file.writeText(mnemonic);
	            }
	            if (privateKey != null) {
	                file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_PRIVATEKEY_FILE, true);
	                file.writeText(privateKey);
	            }
	            if (publicKey != null) {
	                file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_PUBLICKEY_FILE, true);
	                file.writeText(publicKey);
	            }
	            file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_INDEX_FILE, true);
	            file.writeText(index.toFixed());
	        }
	        catch (e) {
	            throw new DIDStorageException("Store root identity error: " + id, e);
	        }
	    }
	    loadRootIdentity(id) {
	        try {
	            let file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_PUBLICKEY_FILE, false);
	            if (!file.exists())
	                return null;
	            let publicKey = file.readText();
	            file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_INDEX_FILE, false);
	            let index = Number.parseInt(file.readText());
	            return RootIdentity.createFromPreDerivedPublicKey(publicKey, index);
	        }
	        catch (e) {
	            throw new DIDStorageException("Load public key for identity error: " + id, e);
	        }
	    }
	    updateRootIdentityIndex(id, index) {
	        try {
	            let file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_INDEX_FILE, false);
	            file.writeText("" + index);
	        }
	        catch (e) {
	            throw new DIDStorageException("Update index for indentiy error: " + id, e);
	        }
	    }
	    loadRootIdentityPrivateKey(id) {
	        try {
	            let file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_PRIVATEKEY_FILE, false);
	            if (!file.exists())
	                return null;
	            return file.readText();
	        }
	        catch (e) {
	            throw new DIDStorageException("Load private key for identity error: " + id, e);
	        }
	    }
	    deleteRootIdentity(id) {
	        let dir = this.getRootIdentityDir(id);
	        if (dir.exists()) {
	            dir.delete();
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    listRootIdentities() {
	        let dir = this.getDir(this.currentDataDir, FileSystemStorage.ROOT_IDENTITIES_DIR);
	        if (!dir.exists())
	            return [];
	        let children = dir.listFiles().filter((file) => {
	            return file.isDirectory();
	        });
	        if (children == null || children.length == 0)
	            return [];
	        let ids = [];
	        for (let id of children) {
	            let identity = this.loadRootIdentity(id.getName());
	            ids.push(identity);
	        }
	        return ids;
	    }
	    containsRootIdenities() {
	        let dir = this.getDir(this.currentDataDir, FileSystemStorage.ROOT_IDENTITIES_DIR);
	        if (!dir.exists())
	            return false;
	        let children = dir.listFiles().filter((file) => {
	            return file.isDirectory();
	        });
	        return (children != null && children.length > 0);
	    }
	    loadRootIdentityMnemonic(id) {
	        try {
	            let file = this.getRootIdentityFile(id, FileSystemStorage.ROOT_IDENTITY_MNEMONIC_FILE, false);
	            return file.readText();
	        }
	        catch (e) {
	            throw new DIDStorageException("Load mnemonic for identity error: " + id, e);
	        }
	    }
	    getDidFile(did, create) {
	        return this.getFile(create, this.currentDataDir, FileSystemStorage.DID_DIR, did.getMethodSpecificId(), FileSystemStorage.DOCUMENT_FILE);
	    }
	    getDidMetadataFile(did, create) {
	        return this.getFile(create, this.currentDataDir, FileSystemStorage.DID_DIR, did.getMethodSpecificId(), FileSystemStorage.METADATA);
	    }
	    getDidDir(did) {
	        return this.getDir(this.currentDataDir, FileSystemStorage.DID_DIR, did.getMethodSpecificId());
	    }
	    storeDidMetadata(did, metadata) {
	        try {
	            let file = this.getDidMetadataFile(did, true);
	            if (metadata == null || metadata.isEmpty())
	                file.delete();
	            else
	                file.writeText(metadata.serialize());
	        }
	        catch (e) {
	            throw new DIDStorageException("Store DID metadata error: " + did, e);
	        }
	    }
	    loadDidMetadata(did) {
	        try {
	            let file = this.getDidMetadataFile(did, false);
	            let metadata = null;
	            if (file.exists())
	                metadata = DIDMetadata.parse(file.readText());
	            return metadata;
	        }
	        catch (e) {
	            throw new DIDStorageException("Load DID metadata error: " + did, e);
	        }
	    }
	    storeDid(doc) {
	        try {
	            let file = this.getDidFile(doc.getSubject(), true);
	            file.writeText(doc.serialize(true));
	        }
	        catch (e) {
	            throw new DIDStorageException("Store DID document error: " + doc.getSubject(), e);
	        }
	    }
	    loadDid(did) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            try {
	                let file = this.getDidFile(did, false);
	                if (!file.exists())
	                    return null;
	                return yield DIDDocument.parseAsync(file.readText());
	            }
	            catch (e) {
	                throw new DIDStorageException("Load DID document error: " + did, e);
	            }
	        });
	    }
	    deleteDid(did) {
	        let dir = this.getDidDir(did);
	        if (dir.exists()) {
	            dir.delete();
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    listDids() {
	        let dir = this.getDir(this.currentDataDir, FileSystemStorage.DID_DIR);
	        if (!dir.exists())
	            return [];
	        let children = dir.listFiles().filter((file) => {
	            return file.isDirectory();
	        });
	        if (children == null || children.length == 0)
	            return [];
	        let dids = [];
	        for (let didRoot of children) {
	            let did = new DID(DID.METHOD, didRoot.getName());
	            dids.push(did);
	        }
	        return dids;
	    }
	    getCredentialFile(id, create) {
	        return this.getFile(create, this.currentDataDir, FileSystemStorage.DID_DIR, id.getDid().getMethodSpecificId(), FileSystemStorage.CREDENTIALS_DIR, FileSystemStorage.toPath(id), FileSystemStorage.CREDENTIAL_FILE);
	    }
	    getCredentialMetadataFile(id, create) {
	        return this.getFile(create, this.currentDataDir, FileSystemStorage.DID_DIR, id.getDid().getMethodSpecificId(), FileSystemStorage.CREDENTIALS_DIR, FileSystemStorage.toPath(id), FileSystemStorage.METADATA);
	    }
	    getCredentialDir(id) {
	        return this.getDir(this.currentDataDir, FileSystemStorage.DID_DIR, id.getDid().getMethodSpecificId(), FileSystemStorage.CREDENTIALS_DIR, FileSystemStorage.toPath(id));
	    }
	    getCredentialsDir(did) {
	        return this.getDir(this.currentDataDir, FileSystemStorage.DID_DIR, did.getMethodSpecificId(), FileSystemStorage.CREDENTIALS_DIR);
	    }
	    storeCredentialMetadata(id, metadata) {
	        try {
	            let file = this.getCredentialMetadataFile(id, true);
	            if (metadata == null || metadata.isEmpty())
	                file.delete();
	            else
	                file.writeText(metadata.serialize());
	        }
	        catch (e) {
	            throw new DIDStorageException("Store credential metadata error: " + id, e);
	        }
	    }
	    loadCredentialMetadata(id) {
	        try {
	            let file = this.getCredentialMetadataFile(id, false);
	            if (!file.exists())
	                return null;
	            return CredentialMetadata.parse(file.readText());
	        }
	        catch (e) {
	            throw new DIDStorageException("Load credential metadata error: " + id, e);
	        }
	    }
	    storeCredential(credential) {
	        try {
	            let file = this.getCredentialFile(credential.getId(), true);
	            file.writeText(credential.serialize(true));
	        }
	        catch (e) {
	            throw new DIDStorageException("Store credential error: " + credential.getId(), e);
	        }
	    }
	    loadCredential(id) {
	        try {
	            let file = this.getCredentialFile(id, false);
	            if (!file.exists())
	                return null;
	            return VerifiableCredential.parse(file.readText());
	        }
	        catch (e) {
	            throw new DIDStorageException("Load credential error: " + id, e);
	        }
	    }
	    containsCredentials(did) {
	        let dir = this.getCredentialsDir(did);
	        if (!dir.exists())
	            return false;
	        let creds = dir.listFiles().filter((file) => {
	            return file.isDirectory();
	        });
	        return creds == null ? false : creds.length > 0;
	    }
	    deleteCredential(id) {
	        let dir = this.getCredentialDir(id);
	        if (dir.exists()) {
	            dir.delete();
	            dir = this.getCredentialsDir(id.getDid());
	            if (dir.list().length == 0)
	                dir.delete();
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    listCredentials(did) {
	        let dir = this.getCredentialsDir(did);
	        if (!dir.exists())
	            return [];
	        let children = dir.listFiles().filter((file) => {
	            return file.isDirectory();
	        });
	        if (children == null || children.length == 0)
	            return [];
	        let credentials = [];
	        for (let credential of children)
	            credentials.push(FileSystemStorage.toDIDURL(did, credential.getName()));
	        return credentials;
	    }
	    getPrivateKeyFile(id, create) {
	        return this.getFile(create, this.currentDataDir, FileSystemStorage.DID_DIR, id.getDid().getMethodSpecificId(), FileSystemStorage.PRIVATEKEYS_DIR, FileSystemStorage.toPath(id));
	    }
	    getPrivateKeysDir(did) {
	        return this.getDir(this.currentDataDir, FileSystemStorage.DID_DIR, did.getMethodSpecificId(), FileSystemStorage.PRIVATEKEYS_DIR);
	    }
	    storePrivateKey(id, privateKey) {
	        try {
	            let file = this.getPrivateKeyFile(id, true);
	            file.writeText(privateKey);
	        }
	        catch (e) {
	            throw new DIDStorageException("Store private key error: " + id, e);
	        }
	    }
	    loadPrivateKey(id) {
	        try {
	            let file = this.getPrivateKeyFile(id, false);
	            if (!file.exists())
	                return null;
	            return file.readText();
	        }
	        catch (e) {
	            throw new DIDStorageException("Load private key error: " + id, e);
	        }
	    }
	    containsPrivateKeys(did) {
	        let dir = this.getPrivateKeysDir(did);
	        if (!dir.exists())
	            return false;
	        let keys = dir.listFiles().filter((file) => {
	            return file.isFile();
	        });
	        return keys == null ? false : keys.length > 0;
	    }
	    deletePrivateKey(id) {
	        let file = this.getPrivateKeyFile(id, false);
	        if (file.exists()) {
	            file.delete();
	            let dir = this.getPrivateKeysDir(id.getDid());
	            if (dir.list().length == 0)
	                dir.delete();
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    listPrivateKeys(did) {
	        let dir = this.getPrivateKeysDir(did);
	        if (!dir.exists())
	            return [];
	        let keys = dir.listFiles().filter((file) => {
	            return file.isFile();
	        });
	        if (keys == null || keys.length == 0)
	            return [];
	        let sks = [];
	        for (let key of keys)
	            sks.push(FileSystemStorage.toDIDURL(did, key.getName()));
	        return sks;
	    }
	    needReencrypt(file) {
	        let patterns = [
	            "(.+)\\" + File.SEPARATOR + FileSystemStorage.DATA_DIR + "\\" + File.SEPARATOR +
	                FileSystemStorage.ROOT_IDENTITIES_DIR + "\\" + File.SEPARATOR + "(.+)\\" +
	                File.SEPARATOR + FileSystemStorage.ROOT_IDENTITY_PRIVATEKEY_FILE,
	            "(.+)\\" + File.SEPARATOR + FileSystemStorage.DATA_DIR + "\\" + File.SEPARATOR +
	                FileSystemStorage.ROOT_IDENTITIES_DIR + "\\" + File.SEPARATOR + "(.+)\\" +
	                File.SEPARATOR + FileSystemStorage.ROOT_IDENTITY_MNEMONIC_FILE,
	            "(.+)\\" + File.SEPARATOR + FileSystemStorage.DATA_DIR + "\\" + File.SEPARATOR +
	                FileSystemStorage.DID_DIR + "\\" + File.SEPARATOR + "(.+)\\" + File.SEPARATOR +
	                FileSystemStorage.PRIVATEKEYS_DIR + "\\" + File.SEPARATOR + "(.+)"
	        ];
	        let path = file.getAbsolutePath();
	        for (let pattern of patterns) {
	            if (path.match(pattern))
	                return true;
	        }
	        return false;
	    }
	    copy(src, dest, reEncryptor) {
	        if (src.isDirectory()) {
	            let dir = src;
	            if (!dest.exists()) {
	                dest.createDirectory();
	            }
	            let files = dir.list();
	            for (let file of files) {
	                let srcFile = new File(dir, file);
	                let destFile = new File(dest, file);
	                this.copy(srcFile, destFile, reEncryptor);
	            }
	        }
	        else {
	            if (this.needReencrypt(src)) {
	                let text = src.readText();
	                dest.writeText(reEncryptor.reEncrypt(text));
	            }
	            else {
	                FileSystemStorage.copyFile(src, dest);
	            }
	        }
	    }
	    postChangePassword() {
	        let dataDir = this.getDir(FileSystemStorage.DATA_DIR);
	        let dataJournal = this.getDir(FileSystemStorage.DATA_DIR + FileSystemStorage.JOURNAL_SUFFIX);
	        let timestamp = new Date().getTime() / 1000;
	        let dataDeprecated = this.getDir(FileSystemStorage.DATA_DIR + "_" + timestamp);
	        let stageFile = this.getFile(false, "postChangePassword");
	        if (stageFile.exists()) {
	            if (dataJournal.exists()) {
	                if (dataDir.exists())
	                    dataDir.rename(dataDeprecated.getAbsolutePath());
	                dataJournal.rename(dataDir.getAbsolutePath());
	            }
	            stageFile.delete();
	        }
	        else {
	            if (dataJournal.exists())
	                dataJournal.delete();
	        }
	    }
	    changePassword(reEncryptor) {
	        try {
	            let dataDir = this.getDir(FileSystemStorage.DATA_DIR);
	            let dataJournal = this.getDir(FileSystemStorage.DATA_DIR + FileSystemStorage.JOURNAL_SUFFIX);
	            this.copy(dataDir, dataJournal, reEncryptor);
	            let stageFile = this.getFile(true, "postChangePassword");
	            stageFile.createFile();
	        }
	        catch (e) {
	            if (e instanceof WrongPasswordException)
	                throw e;
	            throw new DIDStorageException("Change store password failed.");
	        }
	        finally {
	            this.postChangePassword();
	        }
	    }
	    postOperations() {
	        let stageFile = this.getFile(false, "postChangePassword");
	        if (stageFile.exists()) {
	            this.postChangePassword();
	            return;
	        }
	    }
	}
	FileSystemStorage.DATA_DIR = "data";
	FileSystemStorage.ROOT_IDENTITIES_DIR = "roots";
	FileSystemStorage.ROOT_IDENTITY_MNEMONIC_FILE = "mnemonic";
	FileSystemStorage.ROOT_IDENTITY_PRIVATEKEY_FILE = "private";
	FileSystemStorage.ROOT_IDENTITY_PUBLICKEY_FILE = "public";
	FileSystemStorage.ROOT_IDENTITY_INDEX_FILE = "index";
	FileSystemStorage.DID_DIR = "ids";
	FileSystemStorage.DOCUMENT_FILE = "document";
	FileSystemStorage.CREDENTIALS_DIR = "credentials";
	FileSystemStorage.CREDENTIAL_FILE = "credential";
	FileSystemStorage.PRIVATEKEYS_DIR = "privatekeys";
	FileSystemStorage.METADATA = ".metadata";
	FileSystemStorage.JOURNAL_SUFFIX = ".journal";

	class TransferTicket extends DIDEntity {
	    constructor(did = null, to = null, txid = null) {
	        super();
	        this.id = did;
	        this.to = to;
	        this.txid = txid;
	    }
	    static newForDIDDocument(target, to) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(target != null, "Invalid target DID document");
	            checkArgument(to != null, "Invalid to DID");
	            if (!target.isCustomizedDid())
	                throw new NotCustomizedDIDException(target.getSubject().toString());
	            let doc = yield target.getSubject().resolve();
	            target.getMetadata().setTransactionId(doc.getMetadata().getTransactionId());
	            let newTicket = new TransferTicket(target.getSubject(), to, target.getMetadata().getTransactionId());
	            newTicket.doc = target;
	            return newTicket;
	        });
	    }
	    static newWithTicket(ticket, withProof) {
	        let newTicket = new TransferTicket(ticket.id, ticket.to, ticket.txid);
	        newTicket.doc = ticket.doc;
	        if (withProof) {
	            newTicket.proofs = ticket.proofs;
	        }
	        return newTicket;
	    }
	    getSubject() {
	        return this.id;
	    }
	    getTo() {
	        return this.to;
	    }
	    getTransactionId() {
	        return this.txid;
	    }
	    getProof() {
	        return this.getProofs()[0];
	    }
	    getProofs() {
	        return this.proofs.valuesAsSortedArray();
	    }
	    getDocument() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.doc == null)
	                this.doc = yield this.id.resolve();
	            return this.doc;
	        });
	    }
	    isGenuine(listener = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let doc = yield this.getDocument();
	            if (doc == null) {
	                if (listener != null) {
	                    listener.failed(this, "Ticket {}: can not resolve the owner document", this.getSubject());
	                    listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                }
	                return false;
	            }
	            if (!doc.isGenuine(listener)) {
	                if (listener != null) {
	                    listener.failed(this, "Ticket {}: the owner document is not genuine", this.getSubject());
	                    listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                }
	                return false;
	            }
	            if ((doc.getControllerCount() > 1 && this.proofs.size != doc.getMultiSignature().m()) ||
	                (doc.getControllerCount() <= 1 && this.proofs.size != 1)) {
	                if (listener != null) {
	                    listener.failed(this, "Ticket {}: proof size not matched with multisig, {} expected, actual is {}", this.getSubject(), doc.getMultiSignature().m(), doc.proofs.size);
	                    listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                }
	                return false;
	            }
	            let tt = TransferTicket.newWithTicket(this, false);
	            let json = tt.serialize(true);
	            let digest = EcdsaSigner.sha256Digest(buffer$3.Buffer.from(json, 'utf-8'));
	            for (let proof of this.proofs.values()) {
	                if (proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                    if (listener != null) {
	                        listener.failed(this, "Ticket {}: key type '{}' for proof is not supported", this.getSubject(), proof.getType());
	                        listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                let controllerDoc = doc.getControllerDocument(proof.getVerificationMethod().getDid());
	                if (controllerDoc == null) {
	                    if (listener != null) {
	                        listener.failed(this, "Ticket {}: can not resolve the document for controller '{}' to verify the proof", this.getSubject(), proof.getVerificationMethod().getDid());
	                        listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!controllerDoc.isValid(listener)) {
	                    if (listener != null) {
	                        listener.failed(this, "Ticket {}: controller '{}' is invalid, failed to verify the proof", this.getSubject(), proof.getVerificationMethod().getDid());
	                        listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!proof.getVerificationMethod().equals(controllerDoc.getDefaultPublicKeyId())) {
	                    if (listener != null) {
	                        listener.failed(this, "Ticket {}: key '{}' for proof is not default key of '{}'", this.getSubject(), proof.getVerificationMethod(), proof.getVerificationMethod().getDid());
	                        listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	                if (!doc.verifyDigest(proof.getVerificationMethod(), proof.getSignature(), digest)) {
	                    if (listener != null) {
	                        listener.failed(this, "Ticket {}: proof '{}' is invalid, signature mismatch", this.getSubject(), proof.getVerificationMethod());
	                        listener.failed(this, "Ticket {}: is not genuine", this.getSubject());
	                    }
	                    return false;
	                }
	            }
	            if (listener != null)
	                listener.succeeded(this, "Ticket {}: is genuine", this.getSubject());
	            return true;
	        });
	    }
	    isValid(listener = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let doc = yield this.getDocument();
	            if (doc == null) {
	                if (listener != null) {
	                    listener.failed(this, "Ticket {}: can not resolve the owners document", this.getSubject());
	                    listener.failed(this, "Ticket {}: is not valid", this.getSubject());
	                }
	                return false;
	            }
	            if (!doc.isValid(listener)) {
	                if (listener != null) {
	                    listener.failed(this, "Ticket {}: the owners document is not valid", this.getSubject());
	                    listener.failed(this, "Ticket {}: is not valid", this.getSubject());
	                }
	                return false;
	            }
	            if (!(yield this.isGenuine(listener))) {
	                if (listener != null)
	                    listener.failed(this, "Ticket {}: is not valid", this.getSubject());
	                return false;
	            }
	            if (this.txid !== doc.getMetadata().getTransactionId()) {
	                if (listener != null) {
	                    listener.failed(this, "Ticket {}: the transaction id already out date", this.getSubject());
	                    listener.failed(this, "Ticket {}: is not valid", this.getSubject());
	                }
	                return false;
	            }
	            if (listener != null)
	                listener.succeeded(this, "Ticket {}: is valid", this.getSubject());
	            return true;
	        });
	    }
	    isQualified() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.proofs == null || this.proofs.size == 0)
	                return false;
	            let multisig = (yield this.getDocument()).getMultiSignature();
	            return this.proofs.size == (multisig == null ? 1 : multisig.m());
	        });
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.id = this.id.toString();
	        json.to = this.to.toString();
	        json.txid = this.txid;
	        if (this.proofs) {
	            let proofs = this.proofs.valuesAsSortedArray();
	            if (proofs.length == 1)
	                json.proof = proofs[0].toJSON(key);
	            else
	                json.proof = Array.from(proofs, v => v.toJSON(key));
	        }
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.id = this.getDid("id", json.id, { mandatory: true, nullable: false });
	        this.to = this.getDid("to", json.to, { mandatory: true, nullable: false });
	        this.txid = this.getString("txid", json.txid, { mandatory: true, nullable: false });
	        if (!json.proof)
	            throw new MalformedTransferTicketException("Missing property: proof");
	        this.proofs = new ComparableMap();
	        if (!Array.isArray(json.proof)) {
	            let po = json.proof;
	            let proof = TransferTicket.Proof.deserialize(po, TransferTicket.Proof, this.id);
	            if (proof.getVerificationMethod().getDid() == null)
	                throw new MalformedTransferTicketException("Invalid verification method: " + proof.getVerificationMethod());
	            this.proofs.set(proof.getVerificationMethod().getDid(), proof);
	        }
	        else {
	            for (let v of json.proof) {
	                let po = v;
	                let proof = TransferTicket.Proof.deserialize(po, TransferTicket.Proof, this.id);
	                if (proof.getVerificationMethod().getDid() == null)
	                    throw new MalformedTransferTicketException("Invalid verification method: " + proof.getVerificationMethod());
	                if (this.proofs.has(proof.getVerificationMethod().getDid()))
	                    throw new MalformedTransferTicketException("Aleady exist proof from " + proof.getVerificationMethod().getDid());
	                this.proofs.set(proof.getVerificationMethod().getDid(), proof);
	            }
	        }
	    }
	    seal(controller, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            try {
	                if (yield this.isQualified())
	                    return;
	                if (controller.isCustomizedDid()) {
	                    if (controller.getEffectiveController() == null)
	                        throw new NoEffectiveControllerException(controller.getSubject().toString());
	                }
	                else {
	                    try {
	                        if (!(yield this.getDocument()).hasController(controller.getSubject()))
	                            throw new NotControllerException(controller.getSubject().toString());
	                    }
	                    catch (e) {
	                        throw new UnknownInternalException(e);
	                    }
	                }
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            let signKey = controller.getDefaultPublicKeyId();
	            if (this.proofs == null) {
	                this.proofs = new ComparableMap();
	            }
	            else {
	                if (this.proofs.has(signKey.getDid()))
	                    throw new AlreadySignedException(signKey.getDid().toString());
	            }
	            let tt = TransferTicket.newWithTicket(this, false);
	            let json = tt.serialize(true);
	            let sig = yield controller.signWithStorePass(storepass, buffer$3.Buffer.from(json));
	            let proof = new TransferTicket.Proof(signKey, sig);
	            this.proofs.set(proof.getVerificationMethod().getDid(), proof);
	        });
	    }
	    static parse(content) {
	        try {
	            return DIDEntity.deserialize(content, TransferTicket);
	        }
	        catch (e) {
	            if (e instanceof MalformedTransferTicketException)
	                throw e;
	            else
	                throw new MalformedTransferTicketException(e);
	        }
	    }
	}
	(function (TransferTicket) {
	    class Proof extends DIDEntity {
	        constructor(method = null, signature = null, created = new Date(), type = Constants.DEFAULT_PUBLICKEY_TYPE) {
	            super();
	            this.type = type != null ? type : Constants.DEFAULT_PUBLICKEY_TYPE;
	            this.created = created == null ? new Date() : created;
	            if (this.created)
	                this.created.setMilliseconds(0);
	            this.verificationMethod = method;
	            this.signature = signature;
	        }
	        getType() {
	            return this.type;
	        }
	        getVerificationMethod() {
	            return this.verificationMethod;
	        }
	        getCreated() {
	            return this.created;
	        }
	        getSignature() {
	            return this.signature;
	        }
	        equals(proof) {
	            return this.compareTo(proof) === 0;
	        }
	        compareTo(proof) {
	            let rc = (this.created.getTime() - proof.created.getTime());
	            if (rc == 0)
	                rc = this.verificationMethod.compareTo(proof.verificationMethod);
	            return rc;
	        }
	        toJSON(key = null) {
	            let context = key ? new DID(key) : null;
	            let json = {};
	            if (!context || this.type !== Constants.DEFAULT_PUBLICKEY_TYPE)
	                json.type = this.type;
	            if (this.created)
	                json.created = this.dateToString(this.created);
	            json.verificationMethod = this.verificationMethod.toString(context);
	            json.signature = this.signature;
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("proof.type", json.type, { mandatory: false, defaultValue: Constants.DEFAULT_PUBLICKEY_TYPE });
	            this.created = this.getDate("proof.created", json.created, { mandatory: false });
	            this.verificationMethod = this.getDidUrl("proof.verificationMethod", json.verificationMethod, { mandatory: true, nullable: false, context: context });
	            this.signature = this.getString("proof.signature", json.signature, { mandatory: true, nullable: false });
	        }
	    }
	    TransferTicket.Proof = Proof;
	})(TransferTicket || (TransferTicket = {}));

	class VerifiablePresentation extends DIDEntity {
	    constructor(holder) {
	        super();
	        this.holder = holder;
	        this.credentials = new ComparableMap();
	    }
	    static newFromPresentation(vp, withProof) {
	        let presentation = new VerifiablePresentation();
	        presentation.id = vp.id;
	        presentation.type = vp.type;
	        presentation.holder = vp.holder;
	        presentation.created = vp.created;
	        presentation.credentials = vp.credentials;
	        if (withProof)
	            presentation.proof = vp.proof;
	        return presentation;
	    }
	    getId() {
	        return this.id ? this.id : null;
	    }
	    getType() {
	        return this.type;
	    }
	    getHolder() {
	        return this.holder != null ? this.holder : this.proof.getVerificationMethod().getDid();
	    }
	    getCreated() {
	        return this.created;
	    }
	    getCredentialCount() {
	        return this.credentials.size;
	    }
	    getCredentials() {
	        return this.credentials.valuesAsSortedArray();
	    }
	    getCredential(id) {
	        checkArgument(id != null, "Invalid credential id");
	        if (typeof id === "string")
	            id = DIDURL.from(id, this.getHolder());
	        else if (id.getDid() == null)
	            id = DIDURL.from(id, this.getHolder());
	        return this.credentials.get(id);
	    }
	    getProof() {
	        return this.proof;
	    }
	    isGenuine(listener = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let holderDoc = yield this.getHolder().resolve();
	            if (holderDoc == null) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: can not resolve the holder's document", this.getId());
	                    listener.failed(this, "VP {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (!holderDoc.isGenuine(listener)) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: holder's document is not genuine", this.getId());
	                    listener.failed(this, "VP {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (this.proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: key type '{}' for proof is not supported", this.getId(), this.proof.getType());
	                    listener.failed(this, "VP {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            if (!holderDoc.isAuthenticationKey(this.proof.getVerificationMethod())) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: Key '{}' for proof is not an authencation key of '{}'", this.getId(), this.proof.getVerificationMethod(), this.proof.getVerificationMethod().getDid());
	                    listener.failed(this, "VP {}: is not genuine", this.getId());
	                }
	                return false;
	            }
	            for (let vc of this.credentials.values()) {
	                if (!vc.getSubject().getId().equals(this.getHolder())) {
	                    if (listener != null) {
	                        listener.failed(this, "VP {}: credential '{}' not owned by the holder '{}'", this.getId(), vc.getId(), this.getHolder());
	                        listener.failed(this, "VP {}: is not genuine", this.getId());
	                    }
	                    return false;
	                }
	                if (!(yield vc.isGenuine(listener))) {
	                    if (listener != null) {
	                        listener.failed(this, "VP {}: credential '{}' is not genuine", this.getId(), vc.getId());
	                        listener.failed(this, "VP {}: is not genuine", this.getId());
	                    }
	                    return false;
	                }
	            }
	            let vp = VerifiablePresentation.newFromPresentation(this, false);
	            let json = vp.serialize(true);
	            let result = holderDoc.verify(this.proof.getVerificationMethod(), this.proof.getSignature(), buffer$3.Buffer.from(json), buffer$3.Buffer.from(this.proof.getRealm()), buffer$3.Buffer.from(this.proof.getNonce()));
	            if (listener != null) {
	                if (result) {
	                    listener.succeeded(this, "VP {}: is genuine", this.getId());
	                }
	                else {
	                    listener.failed(this, "VP {}: proof is invalid, signature mismatch", this.getId());
	                    listener.failed(this, "VP {}: is not genuine", this.getId());
	                }
	            }
	            return result;
	        });
	    }
	    isValid(listener = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let holderDoc = yield this.getHolder().resolve();
	            if (holderDoc == null) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: can not resolve the holder's document", this.getId());
	                    listener.failed(this, "VP {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            if (!holderDoc.isValid(listener)) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: holder's document is invalid", this.getId());
	                    listener.failed(this, "VP {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            if (this.proof.getType() !== Constants.DEFAULT_PUBLICKEY_TYPE) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: Key type '{}' for proof is not supported", this.getId(), this.proof.getType());
	                    listener.failed(this, "VP {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            if (!holderDoc.isAuthenticationKey(this.proof.getVerificationMethod())) {
	                if (listener != null) {
	                    listener.failed(this, "VP {}: Key '{}' for proof is not an authencation key of '{}'", this.getId(), this.proof.getVerificationMethod(), this.proof.getVerificationMethod().getDid());
	                    listener.failed(this, "VP {}: is invalid", this.getId());
	                }
	                return false;
	            }
	            for (let vc of this.credentials.values()) {
	                if (!vc.getSubject().getId().equals(this.getHolder())) {
	                    if (listener != null) {
	                        listener.failed(this, "VP {}: credential '{}' not owned by the holder '{}'", this.getId(), vc.getId(), this.getHolder());
	                        listener.failed(this, "VP {}: is not genuine", this.getId());
	                    }
	                    return false;
	                }
	                if (!(yield vc.isValid(listener))) {
	                    if (listener != null) {
	                        listener.failed(this, "VP {}: credential '{}' is invalid", this.getId(), vc.getId());
	                        listener.failed(this, "VP {}: is invalid", this.getId());
	                    }
	                    return false;
	                }
	            }
	            let vp = VerifiablePresentation.newFromPresentation(this, false);
	            let json = vp.serialize(true);
	            let result = holderDoc.verify(this.proof.getVerificationMethod(), this.proof.getSignature(), buffer$3.Buffer.from(json), buffer$3.Buffer.from(this.proof.getRealm()), buffer$3.Buffer.from(this.proof.getNonce()));
	            if (listener != null) {
	                if (result) {
	                    listener.succeeded(this, "VP {}: is valid", this.getId());
	                }
	                else {
	                    listener.failed(this, "VP {}: proof is invalid, signature mismatch", this.getId());
	                    listener.failed(this, "VP {}: is invalid", this.getId());
	                }
	            }
	            return result;
	        });
	    }
	    toJSON(key = null) {
	        let json = {};
	        if (this.id)
	            json.id = this.id.toString();
	        json.type = this.type.length == 1 ? this.type[0] : this.type;
	        if (this.holder)
	            json.holder = this.holder.toString();
	        json.created = this.dateToString(this.created);
	        json.verifiableCredential = Array.from(this.credentials.valuesAsSortedArray(), (vc) => vc.toJSON());
	        if (this.proof)
	            json.proof = this.proof.toJSON();
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.holder = this.getDid("holder", json.holder, { mandatory: false, nullable: false, defaultValue: null });
	        this.id = this.getDidUrl("id", json.id, { mandatory: false, nullable: false, context: this.holder, defaultValue: null });
	        this.type = this.getStrings("type", json.type, { mandatory: true, nullable: false, defaultValue: [VerifiablePresentation.DEFAULT_PRESENTATION_TYPE] });
	        this.created = this.getDate("created", json.created, { mandatory: true, nullable: false });
	        this.credentials = new ComparableMap();
	        if (json.verifiableCredential) {
	            if (!Array.isArray(json.verifiableCredential))
	                throw new MalformedPresentationException("Invalid property: verifiableCredential, type error.");
	            for (let obj of json.verifiableCredential) {
	                let vc;
	                let vcJson = obj;
	                try {
	                    vc = VerifiableCredential.deserialize(vcJson, VerifiableCredential, this.holder);
	                }
	                catch (e) {
	                    throw new MalformedPresentationException("credential invalid: " + vcJson.id, e);
	                }
	                if (this.credentials.has(vc.getId()))
	                    throw new MalformedPresentationException("Duplicated credential id: " + vc.getId());
	                this.credentials.set(vc.getId(), vc);
	            }
	        }
	        if (!json.proof)
	            throw new MalformedPresentationException("Missing property: proof");
	        let proof = json.proof;
	        this.proof = VerifiablePresentation.Proof.deserialize(proof, VerifiablePresentation.Proof, this.holder);
	    }
	    static parse(content) {
	        try {
	            return DIDEntity.deserialize(content, VerifiablePresentation);
	        }
	        catch (e) {
	            if (e instanceof MalformedPresentationException)
	                throw e;
	            else
	                throw new MalformedPresentationException(e);
	        }
	    }
	    static createFor(did, signKey, store) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(did != null, "Invalid did");
	            checkArgument(store != null, "Invalid store");
	            if (typeof did === "string")
	                did = DID.from(did);
	            if (typeof signKey === "string")
	                signKey = DIDURL.from(signKey, did);
	            let holder = yield store.loadDid(did);
	            if (holder == null)
	                throw new DIDNotFoundException(did.toString());
	            if (signKey == null) {
	                signKey = holder.getDefaultPublicKeyId();
	            }
	            else {
	                if (!holder.isAuthenticationKey(signKey))
	                    throw new InvalidKeyException(signKey.toString());
	            }
	            if (!holder.hasPrivateKey(signKey))
	                throw new InvalidKeyException("No private key: " + signKey);
	            return new VerifiablePresentation.Builder(holder, signKey);
	        });
	    }
	}
	VerifiablePresentation.DEFAULT_PRESENTATION_TYPE = "VerifiablePresentation";
	(function (VerifiablePresentation) {
	    class Builder {
	        constructor(holder, signKey) {
	            this.holder = holder;
	            this.signKey = signKey;
	            this.presentation = new VerifiablePresentation(holder.getSubject());
	        }
	        checkNotSealed() {
	            if (this.presentation == null)
	                throw new AlreadySealedException();
	        }
	        id(id) {
	            this.checkNotSealed();
	            checkArgument(id != null, "Invalid id");
	            if (typeof id === "string")
	                id = DIDURL.from(id, this.holder.getSubject());
	            checkArgument(id != null && (id.getDid() == null || id.getDid().equals(this.holder.getSubject())), "Invalid id");
	            this.presentation.id = DIDURL.from(id, this.holder.getSubject());
	            return this;
	        }
	        type(...types) {
	            this.checkNotSealed();
	            checkArgument(types != null && types.length > 0, "Invalid types");
	            this.presentation.type = Array.from(types);
	            return this;
	        }
	        credentials(...credentials) {
	            this.checkNotSealed();
	            for (let vc of credentials) {
	                if (!vc.getSubject().getId().equals(this.holder.getSubject()))
	                    throw new IllegalUsage(vc.getId().toString());
	                if (this.presentation.credentials.has(vc.getId()))
	                    throw new DIDObjectAlreadyExistException(vc.getId().toString());
	                this.presentation.credentials.set(vc.getId(), vc);
	            }
	            return this;
	        }
	        realm(realm) {
	            this.checkNotSealed();
	            checkArgument(realm && realm != null, "Invalid realm");
	            this._realm = realm;
	            return this;
	        }
	        nonce(nonce) {
	            this.checkNotSealed();
	            checkArgument(nonce && nonce != null, "Invalid nonce");
	            this._nonce = nonce;
	            return this;
	        }
	        seal(storepass) {
	            return __awaiter$9(this, void 0, void 0, function* () {
	                this.checkNotSealed();
	                checkArgument(storepass && storepass != null, "Invalid storepass");
	                if (this.presentation.type == null || this.presentation.type.length == 0) {
	                    this.presentation.type = [];
	                    this.presentation.type.push(VerifiablePresentation.DEFAULT_PRESENTATION_TYPE);
	                }
	                else {
	                    Collections.sort(this.presentation.type);
	                }
	                this.presentation.created = new Date();
	                if (this.presentation.created)
	                    this.presentation.created.setMilliseconds(0);
	                let json = this.presentation.serialize(true);
	                let sig = yield this.holder.signWithId(this.signKey, storepass, buffer$3.Buffer.from(json), buffer$3.Buffer.from(this._realm), buffer$3.Buffer.from(this._nonce));
	                let proof = new Proof(this.signKey, this._realm, this._nonce, sig);
	                this.presentation.proof = proof;
	                let vp = this.presentation;
	                this.presentation = null;
	                return vp;
	            });
	        }
	    }
	    VerifiablePresentation.Builder = Builder;
	    class Proof extends DIDEntity {
	        constructor(method = null, realm = null, nonce = null, signature = null, type = Constants.DEFAULT_PUBLICKEY_TYPE) {
	            super();
	            this.type = type != null ? type : Constants.DEFAULT_PUBLICKEY_TYPE;
	            this.verificationMethod = method;
	            this.realm = realm;
	            this.nonce = nonce;
	            this.signature = signature;
	        }
	        getType() {
	            return this.type;
	        }
	        getVerificationMethod() {
	            return this.verificationMethod;
	        }
	        getRealm() {
	            return this.realm;
	        }
	        getNonce() {
	            return this.nonce;
	        }
	        getSignature() {
	            return this.signature;
	        }
	        toJSON(key = null) {
	            key ? new DID(key) : null;
	            return {
	                type: this.type,
	                verificationMethod: this.verificationMethod.toString(),
	                realm: this.realm,
	                nonce: this.nonce,
	                signature: this.signature
	            };
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("proof.type", json.type, { mandatory: false, defaultValue: Constants.DEFAULT_PUBLICKEY_TYPE });
	            this.verificationMethod = this.getDidUrl("proof.verificationMethod", json.verificationMethod, { mandatory: true, nullable: false, context: context });
	            this.realm = this.getString("proof.realm", json.realm, { mandatory: true, nullable: false });
	            this.nonce = this.getString("proof.nonce", json.nonce, { mandatory: true, nullable: false });
	            this.signature = this.getString("proof.signature", json.signature, { mandatory: true, nullable: false });
	        }
	    }
	    VerifiablePresentation.Proof = Proof;
	})(VerifiablePresentation || (VerifiablePresentation = {}));

	var jszip_min = {exports: {}};

	(function (module, exports) {
	!function(e){module.exports=e();}(function(){return function s(o,a,f){function u(r,e){if(!a[r]){if(!o[r]){var t="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&t)return t(r,!0);if(d)return d(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[r]={exports:{}};o[r][0].call(i.exports,function(e){var t=o[r][1][e];return u(t||e)},i,i.exports,s,o,a,f);}return a[r].exports}for(var d="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(h,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e();}(function(){return function s(o,a,f){function u(t,e){if(!a[t]){if(!o[t]){var r="function"==typeof h&&h;if(!e&&r)return r(t,!0);if(d)return d(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};o[t][0].call(i.exports,function(e){return u(o[t][1][e]||e)},i,i.exports,s,o,a,f);}return a[t].exports}for(var d="function"==typeof h&&h,e=0;e<f.length;e++)u(f[e]);return u}({1:[function(e,t,r){var c=e("./utils"),h=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,o,a,f=[],u=0,d=e.length,h=d,l="string"!==c.getTypeOf(e);u<e.length;)h=d-u,n=l?(t=e[u++],r=u<d?e[u++]:0,u<d?e[u++]:0):(t=e.charCodeAt(u++),r=u<d?e.charCodeAt(u++):0,u<d?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,o=1<h?(15&r)<<2|n>>6:64,a=2<h?63&n:64,f.push(p.charAt(i)+p.charAt(s)+p.charAt(o)+p.charAt(a));return f.join("")},r.decode=function(e){var t,r,n,i,s,o,a=0,f=0;if("data:"===e.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var u,d=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&d--,e.charAt(e.length-2)===p.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(u=h.uint8array?new Uint8Array(0|d):new Array(0|d);a<e.length;)t=p.indexOf(e.charAt(a++))<<2|(i=p.indexOf(e.charAt(a++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(a++)))>>2,n=(3&s)<<6|(o=p.indexOf(e.charAt(a++))),u[f++]=t,64!==s&&(u[f++]=r),64!==o&&(u[f++]=n);return u};},{"./support":30,"./utils":32}],2:[function(e,t,r){var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),o=e("./stream/DataLengthProbe");function a(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i;}a.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new o("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new o("compressedSize")).withStreamInfo("compression",t)},t.exports=a;},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(e){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate");},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){var n=e("./utils"),o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=o,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t[s])];return -1^e}(0|t,e,e.length):function(e,t,r){var n=o,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t.charCodeAt(s))];return -1^e}(0|t,e,e.length):0};},{"./utils":32}],5:[function(e,t,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null;},{}],6:[function(e,t,r){var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n};},{lie:37}],7:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),o=e("./stream/GenericWorker"),a=n?"uint8array":"array";function f(e,t){o.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={};}r.magic="\b\0",s.inherits(f,o),f.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(a,e.data),!1);},f.prototype.flush=function(){o.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0);},f.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null;},f.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta});};},r.compressWorker=function(e){return new f("Deflate",e)},r.uncompressWorker=function(){return new f("Inflate",{})};},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){function O(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,r,n,i,s){var o,a,f=e.file,u=e.compression,d=s!==D.utf8encode,h=I.transformTo("string",s(f.name)),l=I.transformTo("string",D.utf8encode(f.name)),c=f.comment,p=I.transformTo("string",s(c)),m=I.transformTo("string",D.utf8encode(c)),_=l.length!==f.name.length,w=m.length!==c.length,v="",g="",y="",b=f.dir,k=f.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),d||!_&&!w||(S|=2048);var E,z=0,C=0;b&&(z|=16),"UNIX"===i?(C=798,z|=((E=f.unixPermissions)||(E=b?16893:33204),(65535&E)<<16)):(C=20,z|=63&(f.dosPermissions||0)),o=k.getUTCHours(),o<<=6,o|=k.getUTCMinutes(),o<<=5,o|=k.getUTCSeconds()/2,a=k.getUTCFullYear()-1980,a<<=4,a|=k.getUTCMonth()+1,a<<=5,a|=k.getUTCDate(),_&&(v+="up"+O((g=O(1,1)+O(B(h),4)+l).length,2)+g),w&&(v+="uc"+O((y=O(1,1)+O(B(p),4)+m).length,2)+y);var A="";return A+="\n\0",A+=O(S,2),A+=u.magic,A+=O(o,2),A+=O(a,2),A+=O(x.crc32,4),A+=O(x.compressedSize,4),A+=O(x.uncompressedSize,4),A+=O(h.length,2),A+=O(v.length,2),{fileRecord:T.LOCAL_FILE_HEADER+A+h+v,dirRecord:T.CENTRAL_FILE_HEADER+O(C,2)+A+O(p.length,2)+"\0\0\0\0"+O(z,4)+O(n,4)+h+v+p}}var I=e("../utils"),s=e("../stream/GenericWorker"),D=e("../utf8"),B=e("../crc32"),T=e("../signature");function n(e,t,r,n){s.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[];}I.inherits(n,s),n.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,s.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}));},n.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}});}else this.accumulate=!0;},n.prototype.closedSource=function(e){this.accumulate=!1;var t,r=this.streamFiles&&!e.file.dir,n=i(e,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),r)this.push({data:(t=e,T.DATA_DESCRIPTOR+O(t.crc32,4)+O(t.compressedSize,4)+O(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null;},n.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r,n,i,s,o,a,f=this.bytesWritten-e,u=(r=this.dirRecords.length,n=f,i=e,s=this.zipComment,o=this.encodeFileName,a=I.transformTo("string",o(s)),T.CENTRAL_DIRECTORY_END+"\0\0\0\0"+O(r,2)+O(r,2)+O(n,4)+O(i,4)+O(a.length,2)+a);this.push({data:u,meta:{percent:100}});},n.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume();},n.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end();}),e.on("error",function(e){t.error(e);}),this},n.prototype.resume=function(){return !!s.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},n.prototype.error=function(e){var t=this._sources;if(!s.prototype.error.call(this,e))return !1;for(var r=0;r<t.length;r++)try{t[r].error(e);}catch(e){}return !0},n.prototype.lock=function(){s.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock();},t.exports=n;},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){var u=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,o,t){var a=new n(o.streamFiles,t,o.platform,o.encodeFileName),f=0;try{e.forEach(function(e,t){f++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,o.compression),n=t.options.compressionOptions||o.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(a);}),a.entriesCount=f;}catch(e){a.error(e);}return a};},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e};}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.5.0",n.loadAsync=function(e,t){return (new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n;},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){var n=e("./utils"),i=e("./external"),a=e("./utf8"),f=e("./zipEntries"),s=e("./stream/Crc32Probe"),u=e("./nodejsUtils");function d(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new s);r.on("error",function(e){t(e);}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e();}).resume();})}t.exports=function(e,s){var o=this;return s=n.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:a.utf8decode}),u.isNode&&u.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,s.optimizedBinaryString,s.base64).then(function(e){var t=new f(s);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(s.checkCRC32)for(var n=0;n<r.length;n++)t.push(d(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n];o.file(i.fileNameStr,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:s.createFolders});}return t.zipComment.length&&(o.comment=t.zipComment),o})};},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t);}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}});}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e);}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end();});},s.prototype.pause=function(){return !!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s;},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t);}).on("error",function(e){n.emit("error",e);}).on("end",function(){n.push(null);});}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume();},t.exports=n;},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){t.exports={isNode:"undefined"!=typeof Buffer$M,newBufferFrom:function(e,t){if(Buffer$M.from&&Buffer$M.from!==Uint8Array.from)return Buffer$M.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer$M(e,t)},allocBuffer:function(e){if(Buffer$M.alloc)return Buffer$M.alloc(e);var t=new Buffer$M(e);return t.fill(0),t},isBuffer:function(e){return isBuffer$2(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}};},{}],15:[function(e,t,r){function s(e,t,r){var n,i=d.getTypeOf(t),s=d.extend(r||{},l);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=u(e)),s.createFolders&&(n=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""}(e))&&w.call(this,n,!0);var o,a="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string"),o=t instanceof c||t instanceof h?t:m.isNode&&m.isStream(t)?new _(e,t):d.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var f=new p(e,o,s);this.files[e]=f;}function u(e){return "/"!==e.slice(-1)&&(e+="/"),e}var i=e("./utf8"),d=e("./utils"),h=e("./stream/GenericWorker"),o=e("./stream/StreamHelper"),l=e("./defaults"),c=e("./compressedObject"),p=e("./zipObject"),a=e("./generate"),m=e("./nodejsUtils"),_=e("./nodejs/NodejsStreamInputAdapter"),w=function(e,t){return t=void 0!==t?t:l.createFolders,e=u(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function f(e){return "[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n));},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t);}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(f(e)){var n=e;return this.filter(function(e,t){return !t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(f(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=w.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=d.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");d.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=a.generateWorker(this,r,n);}catch(e){(t=new h("error")).error(e);}return new o(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return (e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n;},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream");},{stream:void 0}],17:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t];}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return -1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return [];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0;}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e);},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e;},skip:function(e){this.setIndex(this.index+e);},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i;},{"../utils":32}],19:[function(e,t,r){var n=e("./Uint8ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){var n=e("./ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),o=e("./StringReader"),a=e("./NodeBufferReader"),f=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new a(e):i.uint8array?new f(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new o(e)};},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b";},{}],24:[function(e,t,r){var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e;}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta});},t.exports=s;},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0);}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e);},t.exports=s;},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0);}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length;}i.prototype.processChunk.call(this,e);},t.exports=s;},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat();},function(e){t.error(e);});}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null;},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0));},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return !1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t);}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s;},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null;}n.prototype={push:function(e){this.emit("data",e);},end:function(){if(this.isFinished)return !1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0;}catch(e){this.emit("error",e);}return !0},error:function(e){return !this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[];},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t);},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.end();}),e.on("error",function(e){t.error(e);}),this},pause:function(){return !this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return !1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e);},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e]);},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock();},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n;},{}],29:[function(e,t,r){var u=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),d=e("../base64"),n=e("../support"),o=e("../external"),a=null;if(n.nodestream)try{a=e("../nodejs/NodejsStreamOutputAdapter");}catch(e){}function f(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string";}try{this._internalType=n,this._outputType=t,this._mimeType=r,u.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock();}catch(e){this._worker=new s("error"),this._worker.error(e);}}f.prototype={accumulate:function(e){return a=this,f=e,new o.Promise(function(t,r){var n=[],i=a._internalType,s=a._outputType,o=a._mimeType;a.on("data",function(e,t){n.push(e),f&&f(t);}).on("error",function(e){n=[],r(e);}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return u.newBlob(u.transformTo("arraybuffer",t),r);case"base64":return d.encode(t);default:return u.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer$M.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),o);t(e);}catch(e){r(e);}n=[];}).resume();});var a,f;},on:function(e,t){var r=this;return "data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta);}):this._worker.on(e,function(){u.delay(t,arguments,r);}),this},resume:function(){return u.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(u.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new a(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=f;},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer$M,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else {var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size;}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size;}catch(e){r.blob=!1;}}}try{r.nodestream=!!e("readable-stream").Readable;}catch(e){r.nodestream=!1;}},{"readable-stream":16}],31:[function(e,t,s){for(var a=e("./utils"),f=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function o(){n.call(this,"utf-8 decode"),this.leftOver=null;}function d(){n.call(this,"utf-8 encode");}u[254]=u[254]=1,s.utf8encode=function(e){return f.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,o=e.length,a=0;for(i=0;i<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<o&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),a+=r<128?1:r<2048?2:r<65536?3:4;for(t=f.uint8array?new Uint8Array(a):new Array(a),i=s=0;s<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<o&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return f.nodebuffer?a.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,o=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)o[r++]=n;else if(4<(i=u[n]))o[r++]=65533,t+=i-1;else {for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?o[r++]=65533:n<65536?o[r++]=n:(n-=65536,o[r++]=55296|n>>10&1023,o[r++]=56320|1023&n);}return o.length!==r&&(o.subarray?o=o.subarray(0,r):o.length=r),a.applyFromCharCode(o)}(e=a.transformTo(f.uint8array?"uint8array":"array",e))},a.inherits(o,n),o.prototype.processChunk=function(e){var t=a.transformTo(f.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(f.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length);}else t=this.leftOver.concat(t);this.leftOver=null;}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(f.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta});},o.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null);},s.Utf8DecodeWorker=o,a.inherits(d,n),d.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta});},s.Utf8EncodeWorker=d;},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,a){var f=e("./support"),u=e("./base64"),r=e("./nodejsUtils"),n=e("set-immediate-shim"),d=e("./external");function i(e){return e}function h(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}a.newBlob=function(t,r){a.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return f.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return !1}}(),nodebuffer:function(){try{return f.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return !1}}()}};function o(e){var t=65536,r=a.getTypeOf(e),n=!0;if("uint8array"===r?n=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=s.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return s.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2);}return s.stringifyByChar(e)}function l(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=o;var c={};c.string={string:i,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return h(e,new Uint8Array(e.length))},nodebuffer:function(e){return h(e,r.allocBuffer(e.length))}},c.array={string:o,array:i,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return o(new Uint8Array(e))},array:function(e){return l(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:i,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:o,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:i,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:o,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:i},a.transformTo=function(e,t){if(t=t||"",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.getTypeOf=function(e){return "string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":f.nodebuffer&&r.isBuffer(e)?"nodebuffer":f.uint8array&&e instanceof Uint8Array?"uint8array":f.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(e){if(!f[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){n(function(){e.apply(r||null,t||[]);});},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r;},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(n,e,i,s,o){return d.Promise.resolve(e).then(function(n){return f.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new d.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result);},e.onerror=function(e){r(e.target.error);},e.readAsArrayBuffer(n);}):n}).then(function(e){var t,r=a.getTypeOf(e);return r?("arraybuffer"===r?e=a.transformTo("uint8array",e):"string"===r&&(o?e=u.decode(e):i&&!0!==s&&(e=h(t=e,f.uint8array?new Uint8Array(t.length):new Array(t.length)))),e):d.Promise.reject(new Error("Can't read the data of '"+n+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})};},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,r){var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),o=e("./zipEntry"),a=(e("./utf8"),e("./support"));function f(e){this.files=[],this.loadOptions=e;}f.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r);},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r};},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes();},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral();}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e);},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles();}},t.exports=f;},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),o=e("./crc32"),a=e("./utf8"),f=e("./compressions"),u=e("./support");function d(e,t){this.options=e,this.loadOptions=t;}d.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in f)if(f.hasOwnProperty(t)&&f[t].magic===e)return f[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize));},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength);},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0);},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4));}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i);},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else {var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else {var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r);}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else {var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i);}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:o(this.fileName)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:o(this.fileComment)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null}},t.exports=d;},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions};}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),o=e("./utf8"),a=e("./compressedObject"),f=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new o.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new o.Utf8DecodeWorker));}catch(e){(t=new f("error")).error(e);}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof a&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new o.Utf8EncodeWorker)),a.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof f?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],d=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<u.length;h++)n.prototype[u[h]]=d;t.exports=n;},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,d,t){(function(t){var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),o=t.document.createTextNode("");s.observe(o,{characterData:!0}),r=function(){o.data=i=++i%2;};}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null;},t.document.documentElement.appendChild(e);}:function(){setTimeout(u,0);};else {var a=new t.MessageChannel;a.port1.onmessage=u,r=function(){a.port2.postMessage(0);};}var f=[];function u(){var e,t;n=!0;for(var r=f.length;r;){for(t=f,f=[],e=-1;++e<r;)t[e]();r=f.length;}n=!1;}d.exports=function(e){1!==f.push(e)||n||r();};}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],37:[function(e,t,r){var i=e("immediate");function u(){}var d={},s=["REJECTED"],o=["FULFILLED"],n=["PENDING"];function a(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&c(this,e);}function f(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected);}function h(t,r,n){i(function(){var e;try{e=r(n);}catch(e){return d.reject(t,e)}e===t?d.reject(t,new TypeError("Cannot resolve promise with itself")):d.resolve(t,e);});}function l(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments);}}function c(t,e){var r=!1;function n(e){r||(r=!0,d.reject(t,e));}function i(e){r||(r=!0,d.resolve(t,e));}var s=p(function(){e(i,n);});"error"===s.status&&n(s.value);}function p(e,t){var r={};try{r.value=e(t),r.status="success";}catch(e){r.status="error",r.value=e;}return r}(t.exports=a).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},a.prototype.catch=function(e){return this.then(null,e)},a.prototype.then=function(e,t){if("function"!=typeof e&&this.state===o||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);return this.state!==n?h(r,this.state===o?e:t,this.outcome):this.queue.push(new f(r,e,t)),r},f.prototype.callFulfilled=function(e){d.resolve(this.promise,e);},f.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e);},f.prototype.callRejected=function(e){d.reject(this.promise,e);},f.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e);},d.resolve=function(e,t){var r=p(l,t);if("error"===r.status)return d.reject(e,r.value);var n=r.value;if(n)c(e,n);else {e.state=o,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t);}return e},d.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},a.resolve=function(e){return e instanceof this?e:d.resolve(new this(u),e)},a.reject=function(e){var t=new this(u);return d.reject(t,e)},a.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);for(var s=new Array(n),o=0,t=-1,a=new this(u);++t<n;)f(e[t],t);return a;function f(e,t){r.resolve(e).then(function(e){s[t]=e,++o!==n||i||(i=!0,d.resolve(a,s));},function(e){i||(i=!0,d.reject(a,e));});}},a.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,i=-1,s=new this(u);++i<t;)n=e[i],this.resolve(n).then(function(e){r||(r=!0,d.resolve(s,e));},function(e){r||(r=!0,d.reject(s,e));});return s};},{immediate:36}],38:[function(e,t,r){var n={};(0, e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n;},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){var o=e("./zlib/deflate"),a=e("./utils/common"),f=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),u=Object.prototype.toString,d=0,h=-1,l=0,c=8;function p(e){if(!(this instanceof p))return new p(e);this.options=a.assign({level:h,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:l,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=o.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==d)throw new Error(i[r]);if(t.header&&o.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?f.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=o.deflateSetDictionary(this.strm,n))!==d)throw new Error(i[r]);this._dict_set=!0;}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return !1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=f.string2buf(e):"[object ArrayBuffer]"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new a.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=o.deflate(i,n))&&r!==d)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(f.buf2binstring(a.shrinkBuf(i.output,i.next_out))):this.onData(a.shrinkBuf(i.output,i.next_out)));}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=o.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===d):2!==n||(this.onEnd(d),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e);},p.prototype.onEnd=function(e){e===d&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return (t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return (t=t||{}).gzip=!0,n(e,t)};},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){var l=e("./zlib/inflate"),c=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function o(e){if(!(this instanceof o))return new o(e);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=l.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,l.inflateGetHeader(this.strm,this.header);}function a(e,t){var r=new o(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}o.prototype.push=function(e,t){var r,n,i,s,o,a,f=this.strm,u=this.options.chunkSize,d=this.options.dictionary,h=!1;if(this.ended)return !1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?f.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?f.input=new Uint8Array(e):f.input=e,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new c.Buf8(u),f.next_out=0,f.avail_out=u),(r=l.inflate(f,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&d&&(a="string"==typeof d?p.string2buf(d):"[object ArrayBuffer]"===_.call(d)?new Uint8Array(d):d,r=l.inflateSetDictionary(this.strm,a)),r===m.Z_BUF_ERROR&&!0===h&&(r=m.Z_OK,h=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);f.next_out&&(0!==f.avail_out&&r!==m.Z_STREAM_END&&(0!==f.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(f.output,f.next_out),s=f.next_out-i,o=p.buf2string(f.output,i),f.next_out=s,f.avail_out=u-s,s&&c.arraySet(f.output,f.output,i,s,0),this.onData(o)):this.onData(c.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(h=!0);}while((0<f.avail_in||0===f.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=l.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(f.avail_out=0))},o.prototype.onData=function(e){this.chunks.push(e);},o.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Inflate=o,r.inflate=a,r.inflateRaw=function(e,t){return (t=t||{}).raw=!0,a(e,t)},r.ungzip=a;},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n]);}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){var t,r,n,i,s,o;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(o=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],o.set(s,i),i+=s.length;return o}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){return [].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s));},r.setTyped(n);},{}],42:[function(e,t,r){var f=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0]);}catch(e){i=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(e){s=!1;}for(var u=new f.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function d(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,f.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,o=e.length,a=0;for(i=0;i<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<o&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),a+=r<128?1:r<2048?2:r<65536?3:4;for(t=new f.Buf8(a),i=s=0;s<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<o&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return d(e,e.length)},r.binstring2buf=function(e){for(var t=new f.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,o=t||e.length,a=new Array(2*o);for(r=n=0;r<o;)if((i=e[r++])<128)a[n++]=i;else if(4<(s=u[i]))a[n++]=65533,r+=s-1;else {for(i&=2===s?31:3===s?15:7;1<s&&r<o;)i=i<<6|63&e[r++],s--;1<s?a[n++]=65533:i<65536?a[n++]=i:(i-=65536,a[n++]=55296|i>>10&1023,a[n++]=56320|1023&i);}return d(a,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t};},{"./common":41}],43:[function(e,t,r){t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,o=0;0!==r;){for(r-=o=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--o;);i%=65521,s%=65521;}return i|s<<16|0};},{}],44:[function(e,t,r){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};},{}],45:[function(e,t,r){var a=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t,r,n){var i=a,s=n+r;e^=-1;for(var o=n;o<s;o++)e=e>>>8^i[255&(e^t[o])];return -1^e};},{}],46:[function(e,t,r){var f,l=e("../utils/common"),u=e("./trees"),c=e("./adler32"),p=e("./crc32"),n=e("./messages"),d=0,h=0,m=-2,i=2,_=8,s=286,o=30,a=19,w=2*s+1,v=15,g=3,y=258,b=y+g+1,k=42,x=113;function S(e,t){return e.msg=n[t],t}function E(e){return (e<<1)-(4<e?9:0)}function z(e){for(var t=e.length;0<=--t;)e[t]=0;}function C(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(l.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0));}function A(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,C(e.strm);}function O(e,t){e.pending_buf[e.pending++]=t;}function I(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t;}function D(e,t){var r,n,i=e.max_chain_length,s=e.strstart,o=e.prev_length,a=e.nice_match,f=e.strstart>e.w_size-b?e.strstart-(e.w_size-b):0,u=e.window,d=e.w_mask,h=e.prev,l=e.strstart+y,c=u[s+o-1],p=u[s+o];e.prev_length>=e.good_match&&(i>>=2),a>e.lookahead&&(a=e.lookahead);do{if(u[(r=t)+o]===p&&u[r+o-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<l);if(n=y-(l-s),s=l-y,o<n){if(e.match_start=t,a<=(o=n))break;c=u[s+o-1],p=u[s+o];}}}while((t=h[t&d])>f&&0!=--i);return o<=e.lookahead?o:e.lookahead}function B(e){var t,r,n,i,s,o,a,f,u,d,h=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=h+(h-b)){for(l.arraySet(e.window,e.window,h,h,0),e.match_start-=h,e.strstart-=h,e.block_start-=h,t=r=e.hash_size;n=e.head[--t],e.head[t]=h<=n?n-h:0,--r;);for(t=r=h;n=e.prev[--t],e.prev[t]=h<=n?n-h:0,--r;);i+=h;}if(0===e.strm.avail_in)break;if(o=e.strm,a=e.window,f=e.strstart+e.lookahead,d=void 0,(u=i)<(d=o.avail_in)&&(d=u),r=0===d?0:(o.avail_in-=d,l.arraySet(a,o.input,o.next_in,d,f),1===o.state.wrap?o.adler=c(o.adler,a,d,f):2===o.state.wrap&&(o.adler=p(o.adler,a,d,f)),o.next_in+=d,o.total_in+=d,d),e.lookahead+=r,e.lookahead+e.insert>=g)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+g-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<g)););}while(e.lookahead<b&&0!==e.strm.avail_in)}function T(e,t){for(var r,n;;){if(e.lookahead<b){if(B(e),e.lookahead<b&&t===d)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=g&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+g-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-b&&(e.match_length=D(e,r)),e.match_length>=g)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-g),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=g){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+g-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++;}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<g-1?e.strstart:g-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function R(e,t){for(var r,n,i;;){if(e.lookahead<b){if(B(e),e.lookahead<b&&t===d)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=g&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+g-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=g-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-b&&(e.match_length=D(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===g&&4096<e.strstart-e.match_start)&&(e.match_length=g-1)),e.prev_length>=g&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-g,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-g),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+g-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=g-1,e.strstart++,n&&(A(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&A(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--;}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<g-1?e.strstart:g-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function F(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i;}function N(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new l.Buf16(2*w),this.dyn_dtree=new l.Buf16(2*(2*o+1)),this.bl_tree=new l.Buf16(2*(2*a+1)),z(this.dyn_ltree),z(this.dyn_dtree),z(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new l.Buf16(v+1),this.heap=new l.Buf16(2*s+1),z(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new l.Buf16(2*s+1),z(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function U(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?k:x,e.adler=2===t.wrap?0:1,t.last_flush=d,u._tr_init(t),h):S(e,m)}function L(e){var t,r=U(e);return r===h&&((t=e.state).window_size=2*t.w_size,z(t.head),t.max_lazy_match=f[t.level].max_lazy,t.good_match=f[t.level].good_length,t.nice_match=f[t.level].nice_length,t.max_chain_length=f[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=g-1,t.match_available=0,t.ins_h=0),r}function P(e,t,r,n,i,s){if(!e)return m;var o=1;if(-1===t&&(t=6),n<0?(o=0,n=-n):15<n&&(o=2,n-=16),i<1||9<i||r!==_||n<8||15<n||t<0||9<t||s<0||4<s)return S(e,m);8===n&&(n=9);var a=new N;return (e.state=a).strm=e,a.wrap=o,a.gzhead=null,a.w_bits=n,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=i+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+g-1)/g),a.window=new l.Buf8(2*a.w_size),a.head=new l.Buf16(a.hash_size),a.prev=new l.Buf16(a.w_size),a.lit_bufsize=1<<i+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new l.Buf8(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=t,a.strategy=s,a.method=r,L(e)}f=[new F(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(B(e),0===e.lookahead&&t===d)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,A(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-b&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(A(e,!1),e.strm.avail_out),1)}),new F(4,4,8,4,T),new F(4,5,16,8,T),new F(4,6,32,32,T),new F(4,4,16,16,R),new F(8,16,32,32,R),new F(8,16,128,128,R),new F(8,32,128,256,R),new F(32,128,258,1024,R),new F(32,258,258,4096,R)],r.deflateInit=function(e,t){return P(e,t,_,15,8,0)},r.deflateInit2=P,r.deflateReset=L,r.deflateResetKeep=U,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?m:(e.state.gzhead=t,h):m},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?S(e,m):m;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&4!==t)return S(e,0===e.avail_out?-5:m);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===k)if(2===n.wrap)e.adler=0,O(n,31),O(n,139),O(n,8),n.gzhead?(O(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),O(n,255&n.gzhead.time),O(n,n.gzhead.time>>8&255),O(n,n.gzhead.time>>16&255),O(n,n.gzhead.time>>24&255),O(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),O(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(O(n,255&n.gzhead.extra.length),O(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(O(n,0),O(n,0),O(n,0),O(n,0),O(n,0),O(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),O(n,3),n.status=x);else {var o=_+(n.w_bits-8<<4)<<8;o|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(o|=32),o+=31-o%31,n.status=x,I(n,o),0!==n.strstart&&(I(n,e.adler>>>16),I(n,65535&e.adler)),e.adler=1;}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending!==n.pending_buf_size));)O(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73);}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,O(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91);}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,O(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103);}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&C(e),n.pending+2<=n.pending_buf_size&&(O(n,255&e.adler),O(n,e.adler>>8&255),e.adler=0,n.status=x)):n.status=x),0!==n.pending){if(C(e),0===e.avail_out)return n.last_flush=-1,h}else if(0===e.avail_in&&E(t)<=E(r)&&4!==t)return S(e,-5);if(666===n.status&&0!==e.avail_in)return S(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==d&&666!==n.status){var a=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(B(e),0===e.lookahead)){if(t===d)return 1;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,o=e.window;;){if(e.lookahead<=y){if(B(e),e.lookahead<=y&&t===d)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=g&&0<e.strstart&&(n=o[i=e.strstart-1])===o[++i]&&n===o[++i]&&n===o[++i]){s=e.strstart+y;do{}while(n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&i<s);e.match_length=y-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead);}if(e.match_length>=g?(r=u._tr_tally(e,1,e.match_length-g),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):f[n.level].func(n,t);if(3!==a&&4!==a||(n.status=666),1===a||3===a)return 0===e.avail_out&&(n.last_flush=-1),h;if(2===a&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(z(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),C(e),0===e.avail_out))return n.last_flush=-1,h}return 4!==t?h:n.wrap<=0?1:(2===n.wrap?(O(n,255&e.adler),O(n,e.adler>>8&255),O(n,e.adler>>16&255),O(n,e.adler>>24&255),O(n,255&e.total_in),O(n,e.total_in>>8&255),O(n,e.total_in>>16&255),O(n,e.total_in>>24&255)):(I(n,e.adler>>>16),I(n,65535&e.adler)),C(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?h:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==k&&69!==t&&73!==t&&91!==t&&103!==t&&t!==x&&666!==t?S(e,m):(e.state=null,t===x?S(e,-3):h):m},r.deflateSetDictionary=function(e,t){var r,n,i,s,o,a,f,u,d=t.length;if(!e||!e.state)return m;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==k||r.lookahead)return m;for(1===s&&(e.adler=c(e.adler,t,d,0)),r.wrap=0,d>=r.w_size&&(0===s&&(z(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new l.Buf8(r.w_size),l.arraySet(u,t,d-r.w_size,r.w_size,0),t=u,d=r.w_size),o=e.avail_in,a=e.next_in,f=e.input,e.avail_in=d,e.next_in=0,e.input=t,B(r);r.lookahead>=g;){for(n=r.strstart,i=r.lookahead-(g-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+g-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=g-1,B(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=g-1,r.match_available=0,e.next_in=a,e.input=f,e.avail_in=o,r.wrap=s,h},r.deflateInfo="pako deflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;};},{}],48:[function(e,t,r){t.exports=function(e,t){var r,n,i,s,o,a,f,u,d,h,l,c,p,m,_,w,v,g,y,b,k,x,S,E,z;r=e.state,n=e.next_in,E=e.input,i=n+(e.avail_in-5),s=e.next_out,z=e.output,o=s-(t-e.avail_out),a=s+(e.avail_out-257),f=r.dmax,u=r.wsize,d=r.whave,h=r.wnext,l=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,w=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;e:do{p<15&&(c+=E[n++]<<p,p+=8,c+=E[n++]<<p,p+=8),g=m[c&w];t:for(;;){if(c>>>=y=g>>>24,p-=y,0==(y=g>>>16&255))z[s++]=65535&g;else {if(!(16&y)){if(0==(64&y)){g=m[(65535&g)+(c&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}b=65535&g,(y&=15)&&(p<y&&(c+=E[n++]<<p,p+=8),b+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=E[n++]<<p,p+=8,c+=E[n++]<<p,p+=8),g=_[c&v];r:for(;;){if(c>>>=y=g>>>24,p-=y,!(16&(y=g>>>16&255))){if(0==(64&y)){g=_[(65535&g)+(c&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&g,p<(y&=15)&&(c+=E[n++]<<p,(p+=8)<y&&(c+=E[n++]<<p,p+=8)),f<(k+=c&(1<<y)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(c>>>=y,p-=y,(y=s-o)<k){if(d<(y=k-y)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=l,(x=0)===h){if(x+=u-y,y<b){for(b-=y;z[s++]=l[x++],--y;);x=s-k,S=z;}}else if(h<y){if(x+=u+h-y,(y-=h)<b){for(b-=y;z[s++]=l[x++],--y;);if(x=0,h<b){for(b-=y=h;z[s++]=l[x++],--y;);x=s-k,S=z;}}}else if(x+=h-y,y<b){for(b-=y;z[s++]=l[x++],--y;);x=s-k,S=z;}for(;2<b;)z[s++]=S[x++],z[s++]=S[x++],z[s++]=S[x++],b-=3;b&&(z[s++]=S[x++],1<b&&(z[s++]=S[x++]));}else {for(x=s-k;z[s++]=z[x++],z[s++]=z[x++],z[s++]=z[x++],2<(b-=3););b&&(z[s++]=z[x++],1<b&&(z[s++]=z[x++]));}break}}break}}while(n<i&&s<a);n-=b=p>>3,c&=(1<<(p-=b<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<a?a-s+257:257-(s-a),r.hold=c,r.bits=p;};},{}],49:[function(e,t,r){var O=e("../utils/common"),I=e("./adler32"),D=e("./crc32"),B=e("./inffast"),T=e("./inftrees"),R=1,F=2,N=0,U=-2,L=1,n=852,i=592;function P(e){return (e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new O.Buf16(320),this.work=new O.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function o(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=L,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new O.Buf32(n),t.distcode=t.distdyn=new O.Buf32(i),t.sane=1,t.back=-1,N):U}function a(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,o(e)):U}function f(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,a(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=f(e,t))!==N&&(e.state=null),r):U}var d,h,l=!0;function j(e){if(l){var t;for(d=new O.Buf32(512),h=new O.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(R,e.lens,0,288,d,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,h,0,e.work,{bits:5}),l=!1;}e.lencode=d,e.lenbits=9,e.distcode=h,e.distbits=5;}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new O.Buf8(s.wsize)),n>=s.wsize?(O.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),O.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(O.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=a,r.inflateReset2=f,r.inflateResetKeep=o,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,o,a,f,u,d,h,l,c,p,m,_,w,v,g,y,b,k,x,S,E,z=0,C=new O.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),o=e.next_out,i=e.output,f=e.avail_out,s=e.next_in,n=e.input,a=e.avail_in,u=r.hold,d=r.bits,h=a,l=f,x=N;e:for(;;)switch(r.mode){case L:if(0===r.wrap){r.mode=13;break}for(;d<16;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(2&r.wrap&&35615===u){C[r.check=0]=255&u,C[1]=u>>>8&255,r.check=D(r.check,C,2,0),d=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){e.msg="unknown compression method",r.mode=30;break}if(d-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,d=u=0;break;case 2:for(;d<16;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(r.flags=u,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(C[0]=255&u,C[1]=u>>>8&255,r.check=D(r.check,C,2,0)),d=u=0,r.mode=3;case 3:for(;d<32;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}r.head&&(r.head.time=u),512&r.flags&&(C[0]=255&u,C[1]=u>>>8&255,C[2]=u>>>16&255,C[3]=u>>>24&255,r.check=D(r.check,C,4,0)),d=u=0,r.mode=4;case 4:for(;d<16;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(C[0]=255&u,C[1]=u>>>8&255,r.check=D(r.check,C,2,0)),d=u=0,r.mode=5;case 5:if(1024&r.flags){for(;d<16;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(C[0]=255&u,C[1]=u>>>8&255,r.check=D(r.check,C,2,0)),d=u=0;}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(a<(c=r.length)&&(c=a),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),O.arraySet(r.head.extra,n,s,c,k)),512&r.flags&&(r.check=D(r.check,n,c,s)),a-=c,s+=c,r.length-=c),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===a)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<a;);if(512&r.flags&&(r.check=D(r.check,n,c,s)),a-=c,s+=c,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===a)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<a;);if(512&r.flags&&(r.check=D(r.check,n,c,s)),a-=c,s+=c,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;d<16;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(u!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}d=u=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;d<32;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}e.adler=r.check=P(u),d=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=o,e.avail_out=f,e.next_in=s,e.avail_in=a,r.hold=u,r.bits=d,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&d,d-=7&d,r.mode=27;break}for(;d<3;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}switch(r.last=1&u,d-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,d-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30;}u>>>=2,d-=2;break;case 14:for(u>>>=7&d,d-=7&d;d<32;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if((65535&u)!=(u>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,d=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(c=r.length){if(a<c&&(c=a),f<c&&(c=f),0===c)break e;O.arraySet(i,n,s,c,o),a-=c,s+=c,f-=c,o+=c,r.length-=c;break}r.mode=12;break;case 17:for(;d<14;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(r.nlen=257+(31&u),u>>>=5,d-=5,r.ndist=1+(31&u),u>>>=5,d-=5,r.ncode=4+(15&u),u>>>=4,d-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;d<3;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}r.lens[A[r.have++]]=7&u,u>>>=3,d-=3;}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;w=(z=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,v=65535&z,!((_=z>>>24)<=d);){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(v<16)u>>>=_,d-=_,r.lens[r.have++]=v;else {if(16===v){for(E=_+2;d<E;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(u>>>=_,d-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,d-=2;}else if(17===v){for(E=_+3;d<E;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}d-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,d-=3;}else {for(E=_+7;d<E;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}d-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,d-=7;}if(r.have+c>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k;}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(R,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=a&&258<=f){e.next_out=o,e.avail_out=f,e.next_in=s,e.avail_in=a,r.hold=u,r.bits=d,B(e,l),o=e.next_out,i=e.output,f=e.avail_out,s=e.next_in,n=e.input,a=e.avail_in,u=r.hold,d=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;w=(z=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,v=65535&z,!((_=z>>>24)<=d);){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(w&&0==(240&w)){for(g=_,y=w,b=v;w=(z=r.lencode[b+((u&(1<<g+y)-1)>>g)])>>>16&255,v=65535&z,!(g+(_=z>>>24)<=d);){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}u>>>=g,d-=g,r.back+=g;}if(u>>>=_,d-=_,r.back+=_,r.length=v,0===w){r.mode=26;break}if(32&w){r.back=-1,r.mode=12;break}if(64&w){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&w,r.mode=22;case 22:if(r.extra){for(E=r.extra;d<E;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,d-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=23;case 23:for(;w=(z=r.distcode[u&(1<<r.distbits)-1])>>>16&255,v=65535&z,!((_=z>>>24)<=d);){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(0==(240&w)){for(g=_,y=w,b=v;w=(z=r.distcode[b+((u&(1<<g+y)-1)>>g)])>>>16&255,v=65535&z,!(g+(_=z>>>24)<=d);){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}u>>>=g,d-=g,r.back+=g;}if(u>>>=_,d-=_,r.back+=_,64&w){e.msg="invalid distance code",r.mode=30;break}r.offset=v,r.extra=15&w,r.mode=24;case 24:if(r.extra){for(E=r.extra;d<E;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,d-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===f)break e;if(c=l-f,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window;}else m=i,p=o-r.offset,c=r.length;for(f<c&&(c=f),f-=c,r.length-=c;i[o++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===f)break e;i[o++]=r.length,f--,r.mode=21;break;case 27:if(r.wrap){for(;d<32;){if(0===a)break e;a--,u|=n[s++]<<d,d+=8;}if(l-=f,e.total_out+=l,r.total+=l,l&&(e.adler=r.check=r.flags?D(r.check,i,l,o-l):I(r.check,i,l,o-l)),l=f,(r.flags?u:P(u))!==r.check){e.msg="incorrect data check",r.mode=30;break}d=u=0;}r.mode=28;case 28:if(r.wrap&&r.flags){for(;d<32;){if(0===a)break e;a--,u+=n[s++]<<d,d+=8;}if(u!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}d=u=0;}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return -4;case 32:default:return U}return e.next_out=o,e.avail_out=f,e.next_in=s,e.avail_in=a,r.hold=u,r.bits=d,(r.wsize||l!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,l-e.avail_out)?(r.mode=31,-4):(h-=e.avail_in,l-=e.avail_out,e.total_in+=h,e.total_out+=l,r.total+=l,r.wrap&&l&&(e.adler=r.check=r.flags?D(r.check,i,l,e.next_out-l):I(r.check,i,l,e.next_out-l)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==h&&0===l||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&I(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){var R=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],L=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,o,a){var f,u,d,h,l,c,p,m,_,w=a.bits,v=0,g=0,y=0,b=0,k=0,x=0,S=0,E=0,z=0,C=0,A=null,O=0,I=new R.Buf16(16),D=new R.Buf16(16),B=null,T=0;for(v=0;v<=15;v++)I[v]=0;for(g=0;g<n;g++)I[t[r+g]]++;for(k=w,b=15;1<=b&&0===I[b];b--);if(b<k&&(k=b),0===b)return i[s++]=20971520,i[s++]=20971520,a.bits=1,0;for(y=1;y<b&&0===I[y];y++);for(k<y&&(k=y),v=E=1;v<=15;v++)if(E<<=1,(E-=I[v])<0)return -1;if(0<E&&(0===e||1!==b))return -1;for(D[1]=0,v=1;v<15;v++)D[v+1]=D[v]+I[v];for(g=0;g<n;g++)0!==t[r+g]&&(o[D[t[r+g]]++]=g);if(c=0===e?(A=B=o,19):1===e?(A=F,O-=257,B=N,T-=257,256):(A=U,B=L,-1),v=y,l=s,S=g=C=0,d=-1,h=(z=1<<(x=k))-1,1===e&&852<z||2===e&&592<z)return 1;for(;;){for(p=v-S,_=o[g]<c?(m=0,o[g]):o[g]>c?(m=B[T+o[g]],A[O+o[g]]):(m=96,0),f=1<<v-S,y=u=1<<x;i[l+(C>>S)+(u-=f)]=p<<24|m<<16|_|0,0!==u;);for(f=1<<v-1;C&f;)f>>=1;if(0!==f?(C&=f-1,C+=f):C=0,g++,0==--I[v]){if(v===b)break;v=t[r+o[g]];}if(k<v&&(C&h)!==d){for(0===S&&(S=k),l+=y,E=1<<(x=v-S);x+S<b&&!((E-=I[x+S])<=0);)x++,E<<=1;if(z+=1<<x,1===e&&852<z||2===e&&592<z)return 1;i[d=C&h]=k<<24|x<<16|l-s|0;}}return 0!==C&&(i[l+C]=v-S<<24|64<<16|0),a.bits=k,0};},{"../utils/common":41}],51:[function(e,t,r){t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};},{}],52:[function(e,t,r){var a=e("../utils/common");function n(e){for(var t=e.length;0<=--t;)e[t]=0;}var _=15,i=16,f=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],u=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],d=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],h=new Array(576);n(h);var l=new Array(60);n(l);var c=new Array(512);n(c);var p=new Array(256);n(p);var m=new Array(29);n(m);var w,v,g,y=new Array(30);function b(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length;}function s(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t;}function k(e){return e<256?c[e]:c[256+(e>>>7)]}function x(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255;}function S(e,t,r){e.bi_valid>i-r?(e.bi_buf|=t<<e.bi_valid&65535,x(e,e.bi_buf),e.bi_buf=t>>i-e.bi_valid,e.bi_valid+=r-i):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r);}function E(e,t,r){S(e,r[2*t],r[2*t+1]);}function z(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function C(e,t,r){var n,i,s=new Array(_+1),o=0;for(n=1;n<=_;n++)s[n]=o=o+r[n-1]<<1;for(i=0;i<=t;i++){var a=e[2*i+1];0!==a&&(e[2*i]=z(s[a]++,a));}}function A(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0;}function O(e){8<e.bi_valid?x(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0;}function I(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function D(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&I(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!I(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n;}function B(e,t,r){var n,i,s,o,a=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*a]<<8|e.pending_buf[e.d_buf+2*a+1],i=e.pending_buf[e.l_buf+a],a++,0===n?E(e,i,t):(E(e,(s=p[i])+256+1,t),0!==(o=f[s])&&S(e,i-=m[s],o),E(e,s=k(--n),r),0!==(o=u[s])&&S(e,n-=y[s],o)),a<e.last_lit;);E(e,256,t);}function T(e,t){var r,n,i,s=t.dyn_tree,o=t.stat_desc.static_tree,a=t.stat_desc.has_stree,f=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<f;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,a&&(e.static_len-=o[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)D(e,s,r);for(i=f;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],D(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,D(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,o,a,f=t.dyn_tree,u=t.max_code,d=t.stat_desc.static_tree,h=t.stat_desc.has_stree,l=t.stat_desc.extra_bits,c=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=_;s++)e.bl_count[s]=0;for(f[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)p<(s=f[2*f[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),f[2*n+1]=s,u<n||(e.bl_count[s]++,o=0,c<=n&&(o=l[n-c]),a=f[2*n],e.opt_len+=a*(s+o),h&&(e.static_len+=a*(d[2*n+1]+o)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2;}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(f[2*i+1]!==s&&(e.opt_len+=(s-f[2*i+1])*f[2*i],f[2*i+1]=s),n--);}}(e,t),C(s,u,e.bl_count);}function R(e,t,r){var n,i,s=-1,o=t[1],a=0,f=7,u=4;for(0===o&&(f=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=o,o=t[2*(n+1)+1],++a<f&&i===o||(a<u?e.bl_tree[2*i]+=a:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=i,u=(a=0)===o?(f=138,3):i===o?(f=6,3):(f=7,4));}function F(e,t,r){var n,i,s=-1,o=t[1],a=0,f=7,u=4;for(0===o&&(f=138,u=3),n=0;n<=r;n++)if(i=o,o=t[2*(n+1)+1],!(++a<f&&i===o)){if(a<u)for(;E(e,i,e.bl_tree),0!=--a;);else 0!==i?(i!==s&&(E(e,i,e.bl_tree),a--),E(e,16,e.bl_tree),S(e,a-3,2)):a<=10?(E(e,17,e.bl_tree),S(e,a-3,3)):(E(e,18,e.bl_tree),S(e,a-11,7));s=i,u=(a=0)===o?(f=138,3):i===o?(f=6,3):(f=7,4);}}n(y);var N=!1;function U(e,t,r,n){var i,s,o;S(e,0+(n?1:0),3),s=t,o=r,O(i=e),x(i,o),x(i,~o),a.arraySet(i.pending_buf,i.window,s,o,i.pending),i.pending+=o;}r._tr_init=function(e){N||(function(){var e,t,r,n,i,s=new Array(_+1);for(n=r=0;n<28;n++)for(m[n]=r,e=0;e<1<<f[n];e++)p[r++]=n;for(p[r-1]=n,n=i=0;n<16;n++)for(y[n]=i,e=0;e<1<<u[n];e++)c[i++]=n;for(i>>=7;n<30;n++)for(y[n]=i<<7,e=0;e<1<<u[n]-7;e++)c[256+i++]=n;for(t=0;t<=_;t++)s[t]=0;for(e=0;e<=143;)h[2*e+1]=8,e++,s[8]++;for(;e<=255;)h[2*e+1]=9,e++,s[9]++;for(;e<=279;)h[2*e+1]=7,e++,s[7]++;for(;e<=287;)h[2*e+1]=8,e++,s[8]++;for(C(h,287,s),e=0;e<30;e++)l[2*e+1]=5,l[2*e]=z(e,5);w=new b(h,f,257,286,_),v=new b(l,u,0,30,_),g=new b(new Array(0),o,0,19,7);}(),N=!0),e.l_desc=new s(e.dyn_ltree,w),e.d_desc=new s(e.dyn_dtree,v),e.bl_desc=new s(e.bl_tree,g),e.bi_buf=0,e.bi_valid=0,A(e);},r._tr_stored_block=U,r._tr_flush_block=function(e,t,r,n){var i,s,o=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),T(e,e.l_desc),T(e,e.d_desc),o=function(e){var t;for(R(e,e.dyn_ltree,e.l_desc.max_code),R(e,e.dyn_dtree,e.d_desc.max_code),T(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*d[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?U(e,t,r,n):4===e.strategy||s===i?(S(e,2+(n?1:0),3),B(e,h,l)):(S(e,4+(n?1:0),3),function(e,t,r,n){var i;for(S(e,t-257,5),S(e,r-1,5),S(e,n-4,4),i=0;i<n;i++)S(e,e.bl_tree[2*d[i]+1],3);F(e,e.dyn_ltree,t-1),F(e,e.dyn_dtree,r-1);}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),B(e,e.dyn_ltree,e.dyn_dtree)),A(e),n&&O(e);},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(p[r]+256+1)]++,e.dyn_dtree[2*k(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){var t;S(e,2,3),E(e,256,h),16===(t=e).bi_valid?(x(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8);};},{"../utils/common":41}],53:[function(e,t,r){t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;};},{}],54:[function(e,t,r){t.exports="function"==typeof setImmediate?setImmediate:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e);};},{}]},{},[10])(10)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[1])(1)});
	}(jszip_min));

	var JSZip = jszip_min.exports;

	var browserfs = {exports: {}};

	(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory();
	})(commonjsGlobal, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer, global, module, process) {	
		Object.defineProperty(exports, '__esModule', { value: true });
		
		var buffer = __webpack_require__(2);
		var path = __webpack_require__(9);
		
		/**
		 * Standard libc error codes. Add more to this enum and ErrorStrings as they are
		 * needed.
		 * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
		 */
		/**
		 * Standard libc error codes. Add more to this enum and ErrorStrings as they are
		 * needed.
		 * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
		 */ var ErrorCode;
		(function (ErrorCode) {
		    ErrorCode[ErrorCode["EPERM"] = 1] = "EPERM";
		    ErrorCode[ErrorCode["ENOENT"] = 2] = "ENOENT";
		    ErrorCode[ErrorCode["EIO"] = 5] = "EIO";
		    ErrorCode[ErrorCode["EBADF"] = 9] = "EBADF";
		    ErrorCode[ErrorCode["EACCES"] = 13] = "EACCES";
		    ErrorCode[ErrorCode["EBUSY"] = 16] = "EBUSY";
		    ErrorCode[ErrorCode["EEXIST"] = 17] = "EEXIST";
		    ErrorCode[ErrorCode["ENOTDIR"] = 20] = "ENOTDIR";
		    ErrorCode[ErrorCode["EISDIR"] = 21] = "EISDIR";
		    ErrorCode[ErrorCode["EINVAL"] = 22] = "EINVAL";
		    ErrorCode[ErrorCode["EFBIG"] = 27] = "EFBIG";
		    ErrorCode[ErrorCode["ENOSPC"] = 28] = "ENOSPC";
		    ErrorCode[ErrorCode["EROFS"] = 30] = "EROFS";
		    ErrorCode[ErrorCode["ENOTEMPTY"] = 39] = "ENOTEMPTY";
		    ErrorCode[ErrorCode["ENOTSUP"] = 95] = "ENOTSUP";
		})(ErrorCode || (ErrorCode = {}));
		/* tslint:disable:variable-name */
		/**
		 * Strings associated with each error code.
		 * @hidden
		 */
		var ErrorStrings = {};
		ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';
		ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';
		ErrorStrings[ErrorCode.EIO] = 'Input/output error.';
		ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';
		ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';
		ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';
		ErrorStrings[ErrorCode.EEXIST] = 'File exists.';
		ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';
		ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';
		ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';
		ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';
		ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';
		ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';
		ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';
		ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';
		/* tslint:enable:variable-name */
		/**
		 * Represents a BrowserFS error. Passed back to applications after a failed
		 * call to the BrowserFS API.
		 */
		var ApiError = (function (Error) {
		     function ApiError(type, message, path$$1) {
		        if ( message === void 0 ) message = ErrorStrings[type];
		
		        Error.call(this, message);
		        // Unsupported.
		        this.syscall = "";
		        this.errno = type;
		        this.code = ErrorCode[type];
		        this.path = path$$1;
		        this.stack = new Error().stack;
		        this.message = "Error: " + (this.code) + ": " + message + (this.path ? (", '" + (this.path) + "'") : '');
		    }
		
		     if ( Error ) ApiError.__proto__ = Error;
		     ApiError.prototype = Object.create( Error && Error.prototype );
		     ApiError.prototype.constructor = ApiError;
		    ApiError.fromJSON = function fromJSON (json) {
		        var err = new ApiError(0);
		        err.errno = json.errno;
		        err.code = json.code;
		        err.path = json.path;
		        err.stack = json.stack;
		        err.message = json.message;
		        return err;
		    };
		    /**
		     * Creates an ApiError object from a buffer.
		     */
		    ApiError.fromBuffer = function fromBuffer (buffer$$1, i) {
		        if ( i === void 0 ) i = 0;
		
		        return ApiError.fromJSON(JSON.parse(buffer$$1.toString('utf8', i + 4, i + 4 + buffer$$1.readUInt32LE(i))));
		    };
		    ApiError.FileError = function FileError (code, p) {
		        return new ApiError(code, ErrorStrings[code], p);
		    };
		    ApiError.ENOENT = function ENOENT (path$$1) {
		        return this.FileError(ErrorCode.ENOENT, path$$1);
		    };
		    ApiError.EEXIST = function EEXIST (path$$1) {
		        return this.FileError(ErrorCode.EEXIST, path$$1);
		    };
		    ApiError.EISDIR = function EISDIR (path$$1) {
		        return this.FileError(ErrorCode.EISDIR, path$$1);
		    };
		    ApiError.ENOTDIR = function ENOTDIR (path$$1) {
		        return this.FileError(ErrorCode.ENOTDIR, path$$1);
		    };
		    ApiError.EPERM = function EPERM (path$$1) {
		        return this.FileError(ErrorCode.EPERM, path$$1);
		    };
		    ApiError.ENOTEMPTY = function ENOTEMPTY (path$$1) {
		        return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
		    };
		    /**
		     * @return A friendly error message.
		     */
		    ApiError.prototype.toString = function toString () {
		        return this.message;
		    };
		    ApiError.prototype.toJSON = function toJSON () {
		        return {
		            errno: this.errno,
		            code: this.code,
		            path: this.path,
		            stack: this.stack,
		            message: this.message
		        };
		    };
		    /**
		     * Writes the API error into a buffer.
		     */
		    ApiError.prototype.writeToBuffer = function writeToBuffer (buffer$$1, i) {
		        if ( buffer$$1 === void 0 ) buffer$$1 = Buffer.alloc(this.bufferSize());
		        if ( i === void 0 ) i = 0;
		
		        var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i + 4);
		        buffer$$1.writeUInt32LE(bytesWritten, i);
		        return buffer$$1;
		    };
		    /**
		     * The size of the API error in buffer-form in bytes.
		     */
		    ApiError.prototype.bufferSize = function bufferSize () {
		        // 4 bytes for string length.
		        return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));
		    };
		
		     return ApiError;
		 }(Error));
		
		
		var api_error = Object.freeze({
			get ErrorCode () { return ErrorCode; },
			ErrorStrings: ErrorStrings,
			ApiError: ApiError
		});
		
		var ActionType;
		(function (ActionType) {
		    // Indicates that the code should not do anything.
		    ActionType[ActionType["NOP"] = 0] = "NOP";
		    // Indicates that the code should throw an exception.
		    ActionType[ActionType["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION";
		    // Indicates that the code should truncate the file, but only if it is a file.
		    ActionType[ActionType["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE";
		    // Indicates that the code should create the file.
		    ActionType[ActionType["CREATE_FILE"] = 3] = "CREATE_FILE";
		})(ActionType || (ActionType = {}));
		/**
		 * Represents one of the following file flags. A convenience object.
		 *
		 * * `'r'` - Open file for reading. An exception occurs if the file does not exist.
		 * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.
		 * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.
		 * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.
		 * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).
		 * * `'wx'` - Like 'w' but opens the file in exclusive mode.
		 * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).
		 * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.
		 * * `'a'` - Open file for appending. The file is created if it does not exist.
		 * * `'ax'` - Like 'a' but opens the file in exclusive mode.
		 * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.
		 * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.
		 *
		 * Exclusive mode ensures that the file path is newly created.
		 */
		var FileFlag = function FileFlag(flagStr) {
		    this.flagStr = flagStr;
		    if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {
		        throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
		    }
		};
		/**
		 * Get an object representing the given file flag.
		 * @param modeStr The string representing the flag
		 * @return The FileFlag object representing the flag
		 * @throw when the flag string is invalid
		 */
		FileFlag.getFileFlag = function getFileFlag (flagStr) {
		    // Check cache first.
		    if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
		        return FileFlag.flagCache[flagStr];
		    }
		    return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
		};
		/**
		 * Get the underlying flag string for this flag.
		 */
		FileFlag.prototype.getFlagString = function getFlagString () {
		    return this.flagStr;
		};
		/**
		 * Returns true if the file is readable.
		 */
		FileFlag.prototype.isReadable = function isReadable () {
		    return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;
		};
		/**
		 * Returns true if the file is writeable.
		 */
		FileFlag.prototype.isWriteable = function isWriteable () {
		    return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;
		};
		/**
		 * Returns true if the file mode should truncate.
		 */
		FileFlag.prototype.isTruncating = function isTruncating () {
		    return this.flagStr.indexOf('w') !== -1;
		};
		/**
		 * Returns true if the file is appendable.
		 */
		FileFlag.prototype.isAppendable = function isAppendable () {
		    return this.flagStr.indexOf('a') !== -1;
		};
		/**
		 * Returns true if the file is open in synchronous mode.
		 */
		FileFlag.prototype.isSynchronous = function isSynchronous () {
		    return this.flagStr.indexOf('s') !== -1;
		};
		/**
		 * Returns true if the file is open in exclusive mode.
		 */
		FileFlag.prototype.isExclusive = function isExclusive () {
		    return this.flagStr.indexOf('x') !== -1;
		};
		/**
		 * Returns one of the static fields on this object that indicates the
		 * appropriate response to the path existing.
		 */
		FileFlag.prototype.pathExistsAction = function pathExistsAction () {
		    if (this.isExclusive()) {
		        return ActionType.THROW_EXCEPTION;
		    }
		    else if (this.isTruncating()) {
		        return ActionType.TRUNCATE_FILE;
		    }
		    else {
		        return ActionType.NOP;
		    }
		};
		/**
		 * Returns one of the static fields on this object that indicates the
		 * appropriate response to the path not existing.
		 */
		FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction () {
		    if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {
		        return ActionType.CREATE_FILE;
		    }
		    else {
		        return ActionType.THROW_EXCEPTION;
		    }
		};
		// Contains cached FileMode instances.
		FileFlag.flagCache = {};
		// Array of valid mode strings.
		FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];
		
		/**
		 * Indicates the type of the given file. Applied to 'mode'.
		 */
		var FileType;
		(function (FileType) {
		    FileType[FileType["FILE"] = 32768] = "FILE";
		    FileType[FileType["DIRECTORY"] = 16384] = "DIRECTORY";
		    FileType[FileType["SYMLINK"] = 40960] = "SYMLINK";
		})(FileType || (FileType = {}));
		/**
		 * Emulation of Node's `fs.Stats` object.
		 *
		 * Attribute descriptions are from `man 2 stat'
		 * @see http://nodejs.org/api/fs.html#fs_class_fs_stats
		 * @see http://man7.org/linux/man-pages/man2/stat.2.html
		 */
		var Stats = function Stats(itemType, size, mode, atime, mtime, ctime) {
		    if ( atime === void 0 ) atime = new Date();
		    if ( mtime === void 0 ) mtime = new Date();
		    if ( ctime === void 0 ) ctime = new Date();
		
		    this.size = size;
		    this.atime = atime;
		    this.mtime = mtime;
		    this.ctime = ctime;
		    /**
		     * UNSUPPORTED ATTRIBUTES
		     * I assume no one is going to need these details, although we could fake
		     * appropriate values if need be.
		     */
		    // ID of device containing file
		    this.dev = 0;
		    // inode number
		    this.ino = 0;
		    // device ID (if special file)
		    this.rdev = 0;
		    // number of hard links
		    this.nlink = 1;
		    // blocksize for file system I/O
		    this.blksize = 4096;
		    // @todo Maybe support these? atm, it's a one-user filesystem.
		    // user ID of owner
		    this.uid = 0;
		    // group ID of owner
		    this.gid = 0;
		    // time file was created (currently unsupported)
		    this.birthtime = new Date(0);
		    // XXX: Some file systems stash data on stats objects.
		    this.fileData = null;
		    if (!mode) {
		        switch (itemType) {
		            case FileType.FILE:
		                this.mode = 0x1a4;
		                break;
		            case FileType.DIRECTORY:
		            default:
		                this.mode = 0x1ff;
		        }
		    }
		    else {
		        this.mode = mode;
		    }
		    // number of 512B blocks allocated
		    this.blocks = Math.ceil(size / 512);
		    // Check if mode also includes top-most bits, which indicate the file's
		    // type.
		    if (this.mode < 0x1000) {
		        this.mode |= itemType;
		    }
		};
		Stats.fromBuffer = function fromBuffer (buffer$$1) {
		    var size = buffer$$1.readUInt32LE(0), mode = buffer$$1.readUInt32LE(4), atime = buffer$$1.readDoubleLE(8), mtime = buffer$$1.readDoubleLE(16), ctime = buffer$$1.readDoubleLE(24);
		    return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));
		};
		Stats.prototype.toBuffer = function toBuffer () {
		    var buffer$$1 = Buffer.alloc(32);
		    buffer$$1.writeUInt32LE(this.size, 0);
		    buffer$$1.writeUInt32LE(this.mode, 4);
		    buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
		    buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
		    buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
		    return buffer$$1;
		};
		/**
		 * **Nonstandard**: Clone the stats object.
		 * @return [BrowserFS.node.fs.Stats]
		 */
		Stats.prototype.clone = function clone () {
		    return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);
		};
		/**
		 * @return [Boolean] True if this item is a file.
		 */
		Stats.prototype.isFile = function isFile () {
		    return (this.mode & 0xF000) === FileType.FILE;
		};
		/**
		 * @return [Boolean] True if this item is a directory.
		 */
		Stats.prototype.isDirectory = function isDirectory () {
		    return (this.mode & 0xF000) === FileType.DIRECTORY;
		};
		/**
		 * @return [Boolean] True if this item is a symbolic link (only valid through lstat)
		 */
		Stats.prototype.isSymbolicLink = function isSymbolicLink () {
		    return (this.mode & 0xF000) === FileType.SYMLINK;
		};
		/**
		 * Change the mode of the file. We use this helper function to prevent messing
		 * up the type of the file, which is encoded in mode.
		 */
		Stats.prototype.chmod = function chmod (mode) {
		    this.mode = (this.mode & 0xF000) | mode;
		};
		// We don't support the following types of files.
		Stats.prototype.isSocket = function isSocket () {
		    return false;
		};
		Stats.prototype.isBlockDevice = function isBlockDevice () {
		    return false;
		};
		Stats.prototype.isCharacterDevice = function isCharacterDevice () {
		    return false;
		};
		Stats.prototype.isFIFO = function isFIFO () {
		    return false;
		};
		
		/**
		 * Wraps a callback function. Used for unit testing. Defaults to a NOP.
		 * @hidden
		 */
		var wrapCb = function (cb, numArgs) {
		    return cb;
		};
		/**
		 * @hidden
		 */
		function assertRoot(fs) {
		    if (fs) {
		        return fs;
		    }
		    throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
		}
		/**
		 * @hidden
		 */
		function normalizeMode(mode, def) {
		    switch (typeof mode) {
		        case 'number':
		            // (path, flag, mode, cb?)
		            return mode;
		        case 'string':
		            // (path, flag, modeString, cb?)
		            var trueMode = parseInt(mode, 8);
		            if (!isNaN(trueMode)) {
		                return trueMode;
		            }
		            // Invalid string.
		            return def;
		        default:
		            return def;
		    }
		}
		/**
		 * @hidden
		 */
		function normalizeTime(time) {
		    if (time instanceof Date) {
		        return time;
		    }
		    else if (typeof time === 'number') {
		        return new Date(time * 1000);
		    }
		    else {
		        throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
		    }
		}
		/**
		 * @hidden
		 */
		function normalizePath(p) {
		    // Node doesn't allow null characters in paths.
		    if (p.indexOf('\u0000') >= 0) {
		        throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');
		    }
		    else if (p === '') {
		        throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');
		    }
		    return path.resolve(p);
		}
		/**
		 * @hidden
		 */
		function normalizeOptions(options, defEnc, defFlag, defMode) {
		    switch (typeof options) {
		        case 'object':
		            return {
		                encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,
		                flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,
		                mode: normalizeMode(options['mode'], defMode)
		            };
		        case 'string':
		            return {
		                encoding: options,
		                flag: defFlag,
		                mode: defMode
		            };
		        default:
		            return {
		                encoding: defEnc,
		                flag: defFlag,
		                mode: defMode
		            };
		    }
		}
		/**
		 * The default callback is a NOP.
		 * @hidden
		 * @private
		 */
		function nopCb() {
		    // NOP.
		}
		/**
		 * The node frontend to all filesystems.
		 * This layer handles:
		 *
		 * * Sanity checking inputs.
		 * * Normalizing paths.
		 * * Resetting stack depth for asynchronous operations which may not go through
		 *   the browser by wrapping all input callbacks using `setImmediate`.
		 * * Performing the requested operation through the filesystem or the file
		 *   descriptor, as appropriate.
		 * * Handling optional arguments and setting default arguments.
		 * @see http://nodejs.org/api/fs.html
		 */
		var FS = function FS() {
		    /* tslint:enable:variable-name */
		    this.F_OK = 0;
		    this.R_OK = 4;
		    this.W_OK = 2;
		    this.X_OK = 1;
		    this.root = null;
		    this.fdMap = {};
		    this.nextFd = 100;
		};
		FS.prototype.initialize = function initialize (rootFS) {
		    if (!rootFS.constructor.isAvailable()) {
		        throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');
		    }
		    return this.root = rootFS;
		};
		/**
		 * converts Date or number to a fractional UNIX timestamp
		 * Grabbed from NodeJS sources (lib/fs.js)
		 */
		FS.prototype._toUnixTimestamp = function _toUnixTimestamp (time) {
		    if (typeof time === 'number') {
		        return time;
		    }
		    else if (time instanceof Date) {
		        return time.getTime() / 1000;
		    }
		    throw new Error("Cannot parse time: " + time);
		};
		/**
		 * **NONSTANDARD**: Grab the FileSystem instance that backs this API.
		 * @return [BrowserFS.FileSystem | null] Returns null if the file system has
		 *   not been initialized.
		 */
		FS.prototype.getRootFS = function getRootFS () {
		    if (this.root) {
		        return this.root;
		    }
		    else {
		        return null;
		    }
		};
		// FILE OR DIRECTORY METHODS
		/**
		 * Asynchronous rename. No arguments other than a possible exception are given
		 * to the completion callback.
		 * @param oldPath
		 * @param newPath
		 * @param callback
		 */
		FS.prototype.rename = function rename (oldPath, newPath, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous rename.
		 * @param oldPath
		 * @param newPath
		 */
		FS.prototype.renameSync = function renameSync (oldPath, newPath) {
		    assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
		};
		/**
		 * Test whether or not the given path exists by checking with the file system.
		 * Then call the callback argument with either true or false.
		 * @example Sample invocation
		 *   fs.exists('/etc/passwd', function (exists) {
		 * util.debug(exists ? "it's there" : "no passwd!");
		 *   });
		 * @param path
		 * @param callback
		 */
		FS.prototype.exists = function exists (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
		    }
		    catch (e) {
		        // Doesn't return an error. If something bad happens, we assume it just
		        // doesn't exist.
		        return newCb(false);
		    }
		};
		/**
		 * Test whether or not the given path exists by checking with the file system.
		 * @param path
		 * @return [boolean]
		 */
		FS.prototype.existsSync = function existsSync (path$$1) {
		    try {
		        return assertRoot(this.root).existsSync(normalizePath(path$$1));
		    }
		    catch (e) {
		        // Doesn't return an error. If something bad happens, we assume it just
		        // doesn't exist.
		        return false;
		    }
		};
		/**
		 * Asynchronous `stat`.
		 * @param path
		 * @param callback
		 */
		FS.prototype.stat = function stat (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 2);
		    try {
		        return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
		    }
		    catch (e) {
		        return newCb(e);
		    }
		};
		/**
		 * Synchronous `stat`.
		 * @param path
		 * @return [BrowserFS.node.fs.Stats]
		 */
		FS.prototype.statSync = function statSync (path$$1) {
		    return assertRoot(this.root).statSync(normalizePath(path$$1), false);
		};
		/**
		 * Asynchronous `lstat`.
		 * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
		 * then the link itself is stat-ed, not the file that it refers to.
		 * @param path
		 * @param callback
		 */
		FS.prototype.lstat = function lstat (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 2);
		    try {
		        return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
		    }
		    catch (e) {
		        return newCb(e);
		    }
		};
		/**
		 * Synchronous `lstat`.
		 * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
		 * then the link itself is stat-ed, not the file that it refers to.
		 * @param path
		 * @return [BrowserFS.node.fs.Stats]
		 */
		FS.prototype.lstatSync = function lstatSync (path$$1) {
		    return assertRoot(this.root).statSync(normalizePath(path$$1), true);
		};
		FS.prototype.truncate = function truncate (path$$1, arg2, cb) {
		        if ( arg2 === void 0 ) arg2 = 0;
		        if ( cb === void 0 ) cb = nopCb;
		
		    var len = 0;
		    if (typeof arg2 === 'function') {
		        cb = arg2;
		    }
		    else if (typeof arg2 === 'number') {
		        len = arg2;
		    }
		    var newCb = wrapCb(cb, 1);
		    try {
		        if (len < 0) {
		            throw new ApiError(ErrorCode.EINVAL);
		        }
		        return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
		    }
		    catch (e) {
		        return newCb(e);
		    }
		};
		/**
		 * Synchronous `truncate`.
		 * @param path
		 * @param len
		 */
		FS.prototype.truncateSync = function truncateSync (path$$1, len) {
		        if ( len === void 0 ) len = 0;
		
		    if (len < 0) {
		        throw new ApiError(ErrorCode.EINVAL);
		    }
		    return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
		};
		/**
		 * Asynchronous `unlink`.
		 * @param path
		 * @param callback
		 */
		FS.prototype.unlink = function unlink (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
		    }
		    catch (e) {
		        return newCb(e);
		    }
		};
		/**
		 * Synchronous `unlink`.
		 * @param path
		 */
		FS.prototype.unlinkSync = function unlinkSync (path$$1) {
		    return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
		};
		FS.prototype.open = function open (path$$1, flag, arg2, cb) {
		        var this$1$1 = this;
		        if ( cb === void 0 ) cb = nopCb;
		
		    var mode = normalizeMode(arg2, 0x1a4);
		    cb = typeof arg2 === 'function' ? arg2 : cb;
		    var newCb = wrapCb(cb, 2);
		    try {
		        assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function (e, file) {
		            if (file) {
		                newCb(e, this$1$1.getFdForFile(file));
		            }
		            else {
		                newCb(e);
		            }
		        });
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous file open.
		 * @see http://www.manpagez.com/man/2/open/
		 * @param path
		 * @param flags
		 * @param mode defaults to `0644`
		 * @return [BrowserFS.File]
		 */
		FS.prototype.openSync = function openSync (path$$1, flag, mode) {
		        if ( mode === void 0 ) mode = 0x1a4;
		
		    return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));
		};
		FS.prototype.readFile = function readFile (filename, arg2, cb) {
		        if ( arg2 === void 0 ) arg2 = {};
		        if ( cb === void 0 ) cb = nopCb;
		
		    var options = normalizeOptions(arg2, null, 'r', null);
		    cb = typeof arg2 === 'function' ? arg2 : cb;
		    var newCb = wrapCb(cb, 2);
		    try {
		        var flag = FileFlag.getFileFlag(options['flag']);
		        if (!flag.isReadable()) {
		            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));
		        }
		        return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);
		    }
		    catch (e) {
		        return newCb(e);
		    }
		};
		FS.prototype.readFileSync = function readFileSync (filename, arg2) {
		        if ( arg2 === void 0 ) arg2 = {};
		
		    var options = normalizeOptions(arg2, null, 'r', null);
		    var flag = FileFlag.getFileFlag(options.flag);
		    if (!flag.isReadable()) {
		        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');
		    }
		    return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);
		};
		FS.prototype.writeFile = function writeFile (filename, data, arg3, cb) {
		        if ( arg3 === void 0 ) arg3 = {};
		        if ( cb === void 0 ) cb = nopCb;
		
		    var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
		    cb = typeof arg3 === 'function' ? arg3 : cb;
		    var newCb = wrapCb(cb, 1);
		    try {
		        var flag = FileFlag.getFileFlag(options.flag);
		        if (!flag.isWriteable()) {
		            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));
		        }
		        return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
		    }
		    catch (e) {
		        return newCb(e);
		    }
		};
		FS.prototype.writeFileSync = function writeFileSync (filename, data, arg3) {
		    var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
		    var flag = FileFlag.getFileFlag(options.flag);
		    if (!flag.isWriteable()) {
		        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');
		    }
		    return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
		};
		FS.prototype.appendFile = function appendFile (filename, data, arg3, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
		    cb = typeof arg3 === 'function' ? arg3 : cb;
		    var newCb = wrapCb(cb, 1);
		    try {
		        var flag = FileFlag.getFileFlag(options.flag);
		        if (!flag.isAppendable()) {
		            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));
		        }
		        assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		FS.prototype.appendFileSync = function appendFileSync (filename, data, arg3) {
		    var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
		    var flag = FileFlag.getFileFlag(options.flag);
		    if (!flag.isAppendable()) {
		        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');
		    }
		    return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
		};
		// FILE DESCRIPTOR METHODS
		/**
		 * Asynchronous `fstat`.
		 * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
		 * specified by the file descriptor `fd`.
		 * @param fd
		 * @param callback
		 */
		FS.prototype.fstat = function fstat (fd, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 2);
		    try {
		        var file = this.fd2file(fd);
		        file.stat(newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `fstat`.
		 * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
		 * specified by the file descriptor `fd`.
		 * @param fd
		 * @return [BrowserFS.node.fs.Stats]
		 */
		FS.prototype.fstatSync = function fstatSync (fd) {
		    return this.fd2file(fd).statSync();
		};
		/**
		 * Asynchronous close.
		 * @param fd
		 * @param callback
		 */
		FS.prototype.close = function close (fd, cb) {
		        var this$1$1 = this;
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        this.fd2file(fd).close(function (e) {
		            if (!e) {
		                this$1$1.closeFd(fd);
		            }
		            newCb(e);
		        });
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous close.
		 * @param fd
		 */
		FS.prototype.closeSync = function closeSync (fd) {
		    this.fd2file(fd).closeSync();
		    this.closeFd(fd);
		};
		FS.prototype.ftruncate = function ftruncate (fd, arg2, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var length = typeof arg2 === 'number' ? arg2 : 0;
		    cb = typeof arg2 === 'function' ? arg2 : cb;
		    var newCb = wrapCb(cb, 1);
		    try {
		        var file = this.fd2file(fd);
		        if (length < 0) {
		            throw new ApiError(ErrorCode.EINVAL);
		        }
		        file.truncate(length, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous ftruncate.
		 * @param fd
		 * @param len
		 */
		FS.prototype.ftruncateSync = function ftruncateSync (fd, len) {
		        if ( len === void 0 ) len = 0;
		
		    var file = this.fd2file(fd);
		    if (len < 0) {
		        throw new ApiError(ErrorCode.EINVAL);
		    }
		    file.truncateSync(len);
		};
		/**
		 * Asynchronous fsync.
		 * @param fd
		 * @param callback
		 */
		FS.prototype.fsync = function fsync (fd, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        this.fd2file(fd).sync(newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous fsync.
		 * @param fd
		 */
		FS.prototype.fsyncSync = function fsyncSync (fd) {
		    this.fd2file(fd).syncSync();
		};
		/**
		 * Asynchronous fdatasync.
		 * @param fd
		 * @param callback
		 */
		FS.prototype.fdatasync = function fdatasync (fd, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        this.fd2file(fd).datasync(newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous fdatasync.
		 * @param fd
		 */
		FS.prototype.fdatasyncSync = function fdatasyncSync (fd) {
		    this.fd2file(fd).datasyncSync();
		};
		FS.prototype.write = function write (fd, arg2, arg3, arg4, arg5, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var buffer$$1, offset, length, position = null;
		    if (typeof arg2 === 'string') {
		        // Signature 1: (fd, string, [position?, [encoding?]], cb?)
		        var encoding = 'utf8';
		        switch (typeof arg3) {
		            case 'function':
		                // (fd, string, cb)
		                cb = arg3;
		                break;
		            case 'number':
		                // (fd, string, position, encoding?, cb?)
		                position = arg3;
		                encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
		                cb = typeof arg5 === 'function' ? arg5 : cb;
		                break;
		            default:
		                // ...try to find the callback and get out of here!
		                cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;
		                return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));
		        }
		        buffer$$1 = Buffer.from(arg2, encoding);
		        offset = 0;
		        length = buffer$$1.length;
		    }
		    else {
		        // Signature 2: (fd, buffer, offset, length, position?, cb?)
		        buffer$$1 = arg2;
		        offset = arg3;
		        length = arg4;
		        position = typeof arg5 === 'number' ? arg5 : null;
		        cb = typeof arg5 === 'function' ? arg5 : cb;
		    }
		    var newCb = wrapCb(cb, 3);
		    try {
		        var file = this.fd2file(fd);
		        if (position === undefined || position === null) {
		            position = file.getPos();
		        }
		        file.write(buffer$$1, offset, length, position, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		FS.prototype.writeSync = function writeSync (fd, arg2, arg3, arg4, arg5) {
		    var buffer$$1, offset = 0, length, position;
		    if (typeof arg2 === 'string') {
		        // Signature 1: (fd, string, [position?, [encoding?]])
		        position = typeof arg3 === 'number' ? arg3 : null;
		        var encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
		        offset = 0;
		        buffer$$1 = Buffer.from(arg2, encoding);
		        length = buffer$$1.length;
		    }
		    else {
		        // Signature 2: (fd, buffer, offset, length, position?)
		        buffer$$1 = arg2;
		        offset = arg3;
		        length = arg4;
		        position = typeof arg5 === 'number' ? arg5 : null;
		    }
		    var file = this.fd2file(fd);
		    if (position === undefined || position === null) {
		        position = file.getPos();
		    }
		    return file.writeSync(buffer$$1, offset, length, position);
		};
		FS.prototype.read = function read (fd, arg2, arg3, arg4, arg5, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var position, offset, length, buffer$$1, newCb;
		    if (typeof arg2 === 'number') {
		        // legacy interface
		        // (fd, length, position, encoding, callback)
		        length = arg2;
		        position = arg3;
		        var encoding = arg4;
		        cb = typeof arg5 === 'function' ? arg5 : cb;
		        offset = 0;
		        buffer$$1 = Buffer.alloc(length);
		        // XXX: Inefficient.
		        // Wrap the cb so we shelter upper layers of the API from these
		        // shenanigans.
		        newCb = wrapCb(function (err, bytesRead, buf) {
		            if (err) {
		                return cb(err);
		            }
		            cb(err, buf.toString(encoding), bytesRead);
		        }, 3);
		    }
		    else {
		        buffer$$1 = arg2;
		        offset = arg3;
		        length = arg4;
		        position = arg5;
		        newCb = wrapCb(cb, 3);
		    }
		    try {
		        var file = this.fd2file(fd);
		        if (position === undefined || position === null) {
		            position = file.getPos();
		        }
		        file.read(buffer$$1, offset, length, position, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		FS.prototype.readSync = function readSync (fd, arg2, arg3, arg4, arg5) {
		    var shenanigans = false;
		    var buffer$$1, offset, length, position, encoding = 'utf8';
		    if (typeof arg2 === 'number') {
		        length = arg2;
		        position = arg3;
		        encoding = arg4;
		        offset = 0;
		        buffer$$1 = Buffer.alloc(length);
		        shenanigans = true;
		    }
		    else {
		        buffer$$1 = arg2;
		        offset = arg3;
		        length = arg4;
		        position = arg5;
		    }
		    var file = this.fd2file(fd);
		    if (position === undefined || position === null) {
		        position = file.getPos();
		    }
		    var rv = file.readSync(buffer$$1, offset, length, position);
		    if (!shenanigans) {
		        return rv;
		    }
		    else {
		        return [buffer$$1.toString(encoding), rv];
		    }
		};
		/**
		 * Asynchronous `fchown`.
		 * @param fd
		 * @param uid
		 * @param gid
		 * @param callback
		 */
		FS.prototype.fchown = function fchown (fd, uid, gid, callback) {
		        if ( callback === void 0 ) callback = nopCb;
		
		    var newCb = wrapCb(callback, 1);
		    try {
		        this.fd2file(fd).chown(uid, gid, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `fchown`.
		 * @param fd
		 * @param uid
		 * @param gid
		 */
		FS.prototype.fchownSync = function fchownSync (fd, uid, gid) {
		    this.fd2file(fd).chownSync(uid, gid);
		};
		/**
		 * Asynchronous `fchmod`.
		 * @param fd
		 * @param mode
		 * @param callback
		 */
		FS.prototype.fchmod = function fchmod (fd, mode, cb) {
		    var newCb = wrapCb(cb, 1);
		    try {
		        var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
		        this.fd2file(fd).chmod(numMode, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `fchmod`.
		 * @param fd
		 * @param mode
		 */
		FS.prototype.fchmodSync = function fchmodSync (fd, mode) {
		    var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
		    this.fd2file(fd).chmodSync(numMode);
		};
		/**
		 * Change the file timestamps of a file referenced by the supplied file
		 * descriptor.
		 * @param fd
		 * @param atime
		 * @param mtime
		 * @param callback
		 */
		FS.prototype.futimes = function futimes (fd, atime, mtime, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        var file = this.fd2file(fd);
		        if (typeof atime === 'number') {
		            atime = new Date(atime * 1000);
		        }
		        if (typeof mtime === 'number') {
		            mtime = new Date(mtime * 1000);
		        }
		        file.utimes(atime, mtime, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Change the file timestamps of a file referenced by the supplied file
		 * descriptor.
		 * @param fd
		 * @param atime
		 * @param mtime
		 */
		FS.prototype.futimesSync = function futimesSync (fd, atime, mtime) {
		    this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
		};
		// DIRECTORY-ONLY METHODS
		/**
		 * Asynchronous `rmdir`.
		 * @param path
		 * @param callback
		 */
		FS.prototype.rmdir = function rmdir (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).rmdir(path$$1, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `rmdir`.
		 * @param path
		 */
		FS.prototype.rmdirSync = function rmdirSync (path$$1) {
		    path$$1 = normalizePath(path$$1);
		    return assertRoot(this.root).rmdirSync(path$$1);
		};
		/**
		 * Asynchronous `mkdir`.
		 * @param path
		 * @param mode defaults to `0777`
		 * @param callback
		 */
		FS.prototype.mkdir = function mkdir (path$$1, mode, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    if (typeof mode === 'function') {
		        cb = mode;
		        mode = 0x1ff;
		    }
		    var newCb = wrapCb(cb, 1);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).mkdir(path$$1, mode, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `mkdir`.
		 * @param path
		 * @param mode defaults to `0777`
		 */
		FS.prototype.mkdirSync = function mkdirSync (path$$1, mode) {
		    assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 0x1ff));
		};
		/**
		 * Asynchronous `readdir`. Reads the contents of a directory.
		 * The callback gets two arguments `(err, files)` where `files` is an array of
		 * the names of the files in the directory excluding `'.'` and `'..'`.
		 * @param path
		 * @param callback
		 */
		FS.prototype.readdir = function readdir (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 2);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).readdir(path$$1, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `readdir`. Reads the contents of a directory.
		 * @param path
		 * @return [String[]]
		 */
		FS.prototype.readdirSync = function readdirSync (path$$1) {
		    path$$1 = normalizePath(path$$1);
		    return assertRoot(this.root).readdirSync(path$$1);
		};
		// SYMLINK METHODS
		/**
		 * Asynchronous `link`.
		 * @param srcpath
		 * @param dstpath
		 * @param callback
		 */
		FS.prototype.link = function link (srcpath, dstpath, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        srcpath = normalizePath(srcpath);
		        dstpath = normalizePath(dstpath);
		        assertRoot(this.root).link(srcpath, dstpath, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `link`.
		 * @param srcpath
		 * @param dstpath
		 */
		FS.prototype.linkSync = function linkSync (srcpath, dstpath) {
		    srcpath = normalizePath(srcpath);
		    dstpath = normalizePath(dstpath);
		    return assertRoot(this.root).linkSync(srcpath, dstpath);
		};
		FS.prototype.symlink = function symlink (srcpath, dstpath, arg3, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var type = typeof arg3 === 'string' ? arg3 : 'file';
		    cb = typeof arg3 === 'function' ? arg3 : cb;
		    var newCb = wrapCb(cb, 1);
		    try {
		        if (type !== 'file' && type !== 'dir') {
		            return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
		        }
		        srcpath = normalizePath(srcpath);
		        dstpath = normalizePath(dstpath);
		        assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `symlink`.
		 * @param srcpath
		 * @param dstpath
		 * @param type can be either `'dir'` or `'file'` (default is `'file'`)
		 */
		FS.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
		    if (!type) {
		        type = 'file';
		    }
		    else if (type !== 'file' && type !== 'dir') {
		        throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
		    }
		    srcpath = normalizePath(srcpath);
		    dstpath = normalizePath(dstpath);
		    return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
		};
		/**
		 * Asynchronous readlink.
		 * @param path
		 * @param callback
		 */
		FS.prototype.readlink = function readlink (path$$1, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 2);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).readlink(path$$1, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous readlink.
		 * @param path
		 * @return [String]
		 */
		FS.prototype.readlinkSync = function readlinkSync (path$$1) {
		    path$$1 = normalizePath(path$$1);
		    return assertRoot(this.root).readlinkSync(path$$1);
		};
		// PROPERTY OPERATIONS
		/**
		 * Asynchronous `chown`.
		 * @param path
		 * @param uid
		 * @param gid
		 * @param callback
		 */
		FS.prototype.chown = function chown (path$$1, uid, gid, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `chown`.
		 * @param path
		 * @param uid
		 * @param gid
		 */
		FS.prototype.chownSync = function chownSync (path$$1, uid, gid) {
		    path$$1 = normalizePath(path$$1);
		    assertRoot(this.root).chownSync(path$$1, false, uid, gid);
		};
		/**
		 * Asynchronous `lchown`.
		 * @param path
		 * @param uid
		 * @param gid
		 * @param callback
		 */
		FS.prototype.lchown = function lchown (path$$1, uid, gid, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `lchown`.
		 * @param path
		 * @param uid
		 * @param gid
		 */
		FS.prototype.lchownSync = function lchownSync (path$$1, uid, gid) {
		    path$$1 = normalizePath(path$$1);
		    assertRoot(this.root).chownSync(path$$1, true, uid, gid);
		};
		/**
		 * Asynchronous `chmod`.
		 * @param path
		 * @param mode
		 * @param callback
		 */
		FS.prototype.chmod = function chmod (path$$1, mode, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        var numMode = normalizeMode(mode, -1);
		        if (numMode < 0) {
		            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
		        }
		        assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `chmod`.
		 * @param path
		 * @param mode
		 */
		FS.prototype.chmodSync = function chmodSync (path$$1, mode) {
		    var numMode = normalizeMode(mode, -1);
		    if (numMode < 0) {
		        throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
		    }
		    path$$1 = normalizePath(path$$1);
		    assertRoot(this.root).chmodSync(path$$1, false, numMode);
		};
		/**
		 * Asynchronous `lchmod`.
		 * @param path
		 * @param mode
		 * @param callback
		 */
		FS.prototype.lchmod = function lchmod (path$$1, mode, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        var numMode = normalizeMode(mode, -1);
		        if (numMode < 0) {
		            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
		        }
		        assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `lchmod`.
		 * @param path
		 * @param mode
		 */
		FS.prototype.lchmodSync = function lchmodSync (path$$1, mode) {
		    var numMode = normalizeMode(mode, -1);
		    if (numMode < 1) {
		        throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
		    }
		    assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
		};
		/**
		 * Change file timestamps of the file referenced by the supplied path.
		 * @param path
		 * @param atime
		 * @param mtime
		 * @param callback
		 */
		FS.prototype.utimes = function utimes (path$$1, atime, mtime, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var newCb = wrapCb(cb, 1);
		    try {
		        assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Change file timestamps of the file referenced by the supplied path.
		 * @param path
		 * @param atime
		 * @param mtime
		 */
		FS.prototype.utimesSync = function utimesSync (path$$1, atime, mtime) {
		    assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
		};
		FS.prototype.realpath = function realpath (path$$1, arg2, cb) {
		        if ( cb === void 0 ) cb = nopCb;
		
		    var cache = typeof (arg2) === 'object' ? arg2 : {};
		    cb = typeof (arg2) === 'function' ? arg2 : nopCb;
		    var newCb = wrapCb(cb, 2);
		    try {
		        path$$1 = normalizePath(path$$1);
		        assertRoot(this.root).realpath(path$$1, cache, newCb);
		    }
		    catch (e) {
		        newCb(e);
		    }
		};
		/**
		 * Synchronous `realpath`.
		 * @param path
		 * @param cache An object literal of mapped paths that can be used to
		 *   force a specific path resolution or avoid additional `fs.stat` calls for
		 *   known real paths.
		 * @return [String]
		 */
		FS.prototype.realpathSync = function realpathSync (path$$1, cache) {
		        if ( cache === void 0 ) cache = {};
		
		    path$$1 = normalizePath(path$$1);
		    return assertRoot(this.root).realpathSync(path$$1, cache);
		};
		FS.prototype.watchFile = function watchFile (filename, arg2, listener) {
		
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		FS.prototype.unwatchFile = function unwatchFile (filename, listener) {
		
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		FS.prototype.watch = function watch (filename, arg2, listener) {
		
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		FS.prototype.access = function access (path$$1, arg2, cb) {
		
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		FS.prototype.accessSync = function accessSync (path$$1, mode) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		FS.prototype.createReadStream = function createReadStream (path$$1, options) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		FS.prototype.createWriteStream = function createWriteStream (path$$1, options) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		/**
		 * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.
		 */
		FS.prototype.wrapCallbacks = function wrapCallbacks (cbWrapper) {
		    wrapCb = cbWrapper;
		};
		FS.prototype.getFdForFile = function getFdForFile (file) {
		    var fd = this.nextFd++;
		    this.fdMap[fd] = file;
		    return fd;
		};
		FS.prototype.fd2file = function fd2file (fd) {
		    var rv = this.fdMap[fd];
		    if (rv) {
		        return rv;
		    }
		    else {
		        throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');
		    }
		};
		FS.prototype.closeFd = function closeFd (fd) {
		    delete this.fdMap[fd];
		};
		
		/* tslint:disable:variable-name */
		// Exported fs.Stats.
		FS.Stats = Stats;
		
		// Manually export the individual public functions of fs.
		// Required because some code will invoke functions off of the module.
		// e.g.:
		// let writeFile = fs.writeFile;
		// writeFile(...)
		/**
		 * @hidden
		 */
		var fs = new FS();
		/**
		 * @hidden
		 */
		var _fsMock = {};
		/**
		 * @hidden
		 */
		var fsProto = FS.prototype;
		Object.keys(fsProto).forEach(function (key) {
		    if (typeof fs[key] === 'function') {
		        _fsMock[key] = function () {
		            return fs[key].apply(fs, arguments);
		        };
		    }
		    else {
		        _fsMock[key] = fs[key];
		    }
		});
		_fsMock['changeFSModule'] = function (newFs) {
		    fs = newFs;
		};
		_fsMock['getFSModule'] = function () {
		    return fs;
		};
		_fsMock['FS'] = FS;
		
		/*
		 * Levenshtein distance, from the `js-levenshtein` NPM module.
		 * Copied here to avoid complexity of adding another CommonJS module dependency.
		 */
		function _min(d0, d1, d2, bx, ay) {
		    return d0 < d1 || d2 < d1
		        ? d0 > d2
		            ? d2 + 1
		            : d0 + 1
		        : bx === ay
		            ? d1
		            : d1 + 1;
		}
		/**
		 * Calculates levenshtein distance.
		 * @param a
		 * @param b
		 */
		function levenshtein(a, b) {
		    if (a === b) {
		        return 0;
		    }
		    if (a.length > b.length) {
		        var tmp = a;
		        a = b;
		        b = tmp;
		    }
		    var la = a.length;
		    var lb = b.length;
		    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
		        la--;
		        lb--;
		    }
		    var offset = 0;
		    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
		        offset++;
		    }
		    la -= offset;
		    lb -= offset;
		    if (la === 0 || lb === 1) {
		        return lb;
		    }
		    var vector = new Array(la << 1);
		    for (var y = 0; y < la;) {
		        vector[la + y] = a.charCodeAt(offset + y);
		        vector[y] = ++y;
		    }
		    var x;
		    var d0;
		    var d1;
		    var d2;
		    var d3;
		    for (x = 0; (x + 3) < lb;) {
		        var bx0 = b.charCodeAt(offset + (d0 = x));
		        var bx1 = b.charCodeAt(offset + (d1 = x + 1));
		        var bx2 = b.charCodeAt(offset + (d2 = x + 2));
		        var bx3 = b.charCodeAt(offset + (d3 = x + 3));
		        var dd$1 = (x += 4);
		        for (var y$1 = 0; y$1 < la;) {
		            var ay = vector[la + y$1];
		            var dy = vector[y$1];
		            d0 = _min(dy, d0, d1, bx0, ay);
		            d1 = _min(d0, d1, d2, bx1, ay);
		            d2 = _min(d1, d2, d3, bx2, ay);
		            dd$1 = _min(d2, d3, dd$1, bx3, ay);
		            vector[y$1++] = dd$1;
		            d3 = d2;
		            d2 = d1;
		            d1 = d0;
		            d0 = dy;
		        }
		    }
		    var dd = 0;
		    for (; x < lb;) {
		        var bx0$1 = b.charCodeAt(offset + (d0 = x));
		        dd = ++x;
		        for (var y$2 = 0; y$2 < la; y$2++) {
		            var dy$1 = vector[y$2];
		            vector[y$2] = dd = dy$1 < d0 || dd < d0
		                ? dy$1 > dd ? dd + 1 : dy$1 + 1
		                : bx0$1 === vector[la + y$2]
		                    ? d0
		                    : d0 + 1;
		            d0 = dy$1;
		        }
		    }
		    return dd;
		}
		
		function deprecationMessage(print, fsName, opts) {
		    if (print) {
		        console.warn(("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + (JSON.stringify(opts)) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details."));
		    }
		}
		/**
		 * Checks for any IE version, including IE11 which removed MSIE from the
		 * userAgent string.
		 * @hidden
		 */
		var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf('Trident') !== -1);
		/**
		 * Check if we're in a web worker.
		 * @hidden
		 */
		var isWebWorker = typeof window === "undefined";
		/**
		 * Throws an exception. Called on code paths that should be impossible.
		 * @hidden
		 */
		function fail() {
		    throw new Error("BFS has reached an impossible code path; please file a bug.");
		}
		/**
		 * Synchronous recursive makedir.
		 * @hidden
		 */
		function mkdirpSync(p, mode, fs) {
		    if (!fs.existsSync(p)) {
		        mkdirpSync(path.dirname(p), mode, fs);
		        fs.mkdirSync(p, mode);
		    }
		}
		/**
		 * Converts a buffer into an array buffer. Attempts to do so in a
		 * zero-copy manner, e.g. the array references the same memory.
		 * @hidden
		 */
		function buffer2ArrayBuffer(buff) {
		    var u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;
		    if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
		        return u8.buffer;
		    }
		    else {
		        return u8.buffer.slice(u8offset, u8offset + u8Len);
		    }
		}
		/**
		 * Converts a buffer into a Uint8Array. Attempts to do so in a
		 * zero-copy manner, e.g. the array references the same memory.
		 * @hidden
		 */
		function buffer2Uint8array(buff) {
		    if (buff instanceof Uint8Array) {
		        // BFS & Node v4.0 buffers *are* Uint8Arrays.
		        return buff;
		    }
		    else {
		        // Uint8Arrays can be constructed from arrayish numbers.
		        // At this point, we assume this isn't a BFS array.
		        return new Uint8Array(buff);
		    }
		}
		/**
		 * Converts the given arrayish object into a Buffer. Attempts to
		 * be zero-copy.
		 * @hidden
		 */
		function arrayish2Buffer(arr) {
		    if (arr instanceof Buffer) {
		        return arr;
		    }
		    else if (arr instanceof Uint8Array) {
		        return uint8Array2Buffer(arr);
		    }
		    else {
		        return Buffer.from(arr);
		    }
		}
		/**
		 * Converts the given Uint8Array into a Buffer. Attempts to be zero-copy.
		 * @hidden
		 */
		function uint8Array2Buffer(u8) {
		    if (u8 instanceof Buffer) {
		        return u8;
		    }
		    else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
		        return arrayBuffer2Buffer(u8.buffer);
		    }
		    else {
		        return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);
		    }
		}
		/**
		 * Converts the given array buffer into a Buffer. Attempts to be
		 * zero-copy.
		 * @hidden
		 */
		function arrayBuffer2Buffer(ab) {
		    return Buffer.from(ab);
		}
		/**
		 * Copies a slice of the given buffer
		 * @hidden
		 */
		function copyingSlice(buff, start, end) {
		    if ( start === void 0 ) start = 0;
		    if ( end === void 0 ) end = buff.length;
		
		    if (start < 0 || end < 0 || end > buff.length || start > end) {
		        throw new TypeError(("Invalid slice bounds on buffer of length " + (buff.length) + ": [" + start + ", " + end + "]"));
		    }
		    if (buff.length === 0) {
		        // Avoid s0 corner case in ArrayBuffer case.
		        return emptyBuffer();
		    }
		    else {
		        var u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 0xFF;
		        buff[0] = newS0;
		        if (u8[0] === newS0) {
		            // Same memory. Revert & copy.
		            u8[0] = s0;
		            return uint8Array2Buffer(u8.slice(start, end));
		        }
		        else {
		            // Revert.
		            buff[0] = s0;
		            return uint8Array2Buffer(u8.subarray(start, end));
		        }
		    }
		}
		/**
		 * @hidden
		 */
		var emptyBuff = null;
		/**
		 * Returns an empty buffer.
		 * @hidden
		 */
		function emptyBuffer() {
		    if (emptyBuff) {
		        return emptyBuff;
		    }
		    return emptyBuff = Buffer.alloc(0);
		}
		/**
		 * Option validator for a Buffer file system option.
		 * @hidden
		 */
		function bufferValidator(v, cb) {
		    if (Buffer.isBuffer(v)) {
		        cb();
		    }
		    else {
		        cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
		    }
		}
		/**
		 * Checks that the given options object is valid for the file system options.
		 * @hidden
		 */
		function checkOptions(fsType, opts, cb) {
		    var optsInfo = fsType.Options;
		    var fsName = fsType.Name;
		    var pendingValidators = 0;
		    var callbackCalled = false;
		    var loopEnded = false;
		    function validatorCallback(e) {
		        if (!callbackCalled) {
		            if (e) {
		                callbackCalled = true;
		                cb(e);
		            }
		            pendingValidators--;
		            if (pendingValidators === 0 && loopEnded) {
		                cb();
		            }
		        }
		    }
		    // Check for required options.
		    var loop = function ( optName ) {
		        if (optsInfo.hasOwnProperty(optName)) {
		            var opt = optsInfo[optName];
		            var providedValue = opts[optName];
		            if (providedValue === undefined || providedValue === null) {
		                if (!opt.optional) {
		                    // Required option, not provided.
		                    // Any incorrect options provided? Which ones are close to the provided one?
		                    // (edit distance 5 === close)
		                    var incorrectOptions = Object.keys(opts).filter(function (o) { return !(o in optsInfo); }).map(function (a) {
		                        return { str: a, distance: levenshtein(optName, a) };
		                    }).filter(function (o) { return o.distance < 5; }).sort(function (a, b) { return a.distance - b.distance; });
		                    // Validators may be synchronous.
		                    if (callbackCalled) {
		                        return {};
		                    }
		                    callbackCalled = true;
		                    return { v: cb(new ApiError(ErrorCode.EINVAL, ("[" + fsName + "] Required option '" + optName + "' not provided." + (incorrectOptions.length > 0 ? (" You provided unrecognized option '" + (incorrectOptions[0].str) + "'; perhaps you meant to type '" + optName + "'.") : '') + "\nOption description: " + (opt.description)))) };
		                }
		                // Else: Optional option, not provided. That is OK.
		            }
		            else {
		                // Option provided! Check type.
		                var typeMatches = false;
		                if (Array.isArray(opt.type)) {
		                    typeMatches = opt.type.indexOf(typeof (providedValue)) !== -1;
		                }
		                else {
		                    typeMatches = typeof (providedValue) === opt.type;
		                }
		                if (!typeMatches) {
		                    // Validators may be synchronous.
		                    if (callbackCalled) {
		                        return {};
		                    }
		                    callbackCalled = true;
		                    return { v: cb(new ApiError(ErrorCode.EINVAL, ("[" + fsName + "] Value provided for option " + optName + " is not the proper type. Expected " + (Array.isArray(opt.type) ? ("one of {" + (opt.type.join(", ")) + "}") : opt.type) + ", but received " + (typeof (providedValue)) + "\nOption description: " + (opt.description)))) };
		                }
		                else if (opt.validator) {
		                    pendingValidators++;
		                    opt.validator(providedValue, validatorCallback);
		                }
		                // Otherwise: All good!
		            }
		        }
		    };
		
		    for (var optName in optsInfo) {
		        var returned = loop( optName );
		
		        if ( returned ) return returned.v;
		    }
		    loopEnded = true;
		    if (pendingValidators === 0 && !callbackCalled) {
		        cb();
		    }
		}
		
		
		var BFSUtils = Object.freeze({
			deprecationMessage: deprecationMessage,
			isIE: isIE,
			isWebWorker: isWebWorker,
			fail: fail,
			mkdirpSync: mkdirpSync,
			buffer2ArrayBuffer: buffer2ArrayBuffer,
			buffer2Uint8array: buffer2Uint8array,
			arrayish2Buffer: arrayish2Buffer,
			uint8Array2Buffer: uint8Array2Buffer,
			arrayBuffer2Buffer: arrayBuffer2Buffer,
			copyingSlice: copyingSlice,
			emptyBuffer: emptyBuffer,
			bufferValidator: bufferValidator,
			checkOptions: checkOptions
		});
		
		var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps(fs) {
		    this.fs = fs;
		    this.nodefs = fs.getNodeFS();
		    this.FS = fs.getFS();
		    this.PATH = fs.getPATH();
		    this.ERRNO_CODES = fs.getERRNO_CODES();
		};
		BFSEmscriptenStreamOps.prototype.open = function open (stream) {
		    var path$$1 = this.fs.realPath(stream.node);
		    var FS = this.FS;
		    try {
		        if (FS.isFile(stream.node.mode)) {
		            stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
		        }
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenStreamOps.prototype.close = function close (stream) {
		    var FS = this.FS;
		    try {
		        if (FS.isFile(stream.node.mode) && stream.nfd) {
		            this.nodefs.closeSync(stream.nfd);
		        }
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenStreamOps.prototype.read = function read (stream, buffer$$1, offset, length, position) {
		    // Avoid copying overhead by reading directly into buffer.
		    try {
		        return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
		    }
		    catch (e) {
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenStreamOps.prototype.write = function write (stream, buffer$$1, offset, length, position) {
		    // Avoid copying overhead.
		    try {
		        return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
		    }
		    catch (e) {
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenStreamOps.prototype.llseek = function llseek (stream, offset, whence) {
		    var position = offset;
		    if (whence === 1) {
		        position += stream.position;
		    }
		    else if (whence === 2) {
		        if (this.FS.isFile(stream.node.mode)) {
		            try {
		                var stat = this.nodefs.fstatSync(stream.nfd);
		                position += stat.size;
		            }
		            catch (e) {
		                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		            }
		        }
		    }
		    if (position < 0) {
		        throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
		    }
		    stream.position = position;
		    return position;
		};
		var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps(fs) {
		    this.fs = fs;
		    this.nodefs = fs.getNodeFS();
		    this.FS = fs.getFS();
		    this.PATH = fs.getPATH();
		    this.ERRNO_CODES = fs.getERRNO_CODES();
		};
		BFSEmscriptenNodeOps.prototype.getattr = function getattr (node) {
		    var path$$1 = this.fs.realPath(node);
		    var stat;
		    try {
		        stat = this.nodefs.lstatSync(path$$1);
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		    return {
		        dev: stat.dev,
		        ino: stat.ino,
		        mode: stat.mode,
		        nlink: stat.nlink,
		        uid: stat.uid,
		        gid: stat.gid,
		        rdev: stat.rdev,
		        size: stat.size,
		        atime: stat.atime,
		        mtime: stat.mtime,
		        ctime: stat.ctime,
		        blksize: stat.blksize,
		        blocks: stat.blocks
		    };
		};
		BFSEmscriptenNodeOps.prototype.setattr = function setattr (node, attr) {
		    var path$$1 = this.fs.realPath(node);
		    try {
		        if (attr.mode !== undefined) {
		            this.nodefs.chmodSync(path$$1, attr.mode);
		            // update the common node structure mode as well
		            node.mode = attr.mode;
		        }
		        if (attr.timestamp !== undefined) {
		            var date = new Date(attr.timestamp);
		            this.nodefs.utimesSync(path$$1, date, date);
		        }
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        // Ignore not supported errors. Emscripten does utimesSync when it
		        // writes files, but never really requires the value to be set.
		        if (e.code !== "ENOTSUP") {
		            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		        }
		    }
		    if (attr.size !== undefined) {
		        try {
		            this.nodefs.truncateSync(path$$1, attr.size);
		        }
		        catch (e) {
		            if (!e.code) {
		                throw e;
		            }
		            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		        }
		    }
		};
		BFSEmscriptenNodeOps.prototype.lookup = function lookup (parent, name) {
		    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
		    var mode = this.fs.getMode(path$$1);
		    return this.fs.createNode(parent, name, mode);
		};
		BFSEmscriptenNodeOps.prototype.mknod = function mknod (parent, name, mode, dev) {
		    var node = this.fs.createNode(parent, name, mode, dev);
		    // create the backing node for this in the fs root as well
		    var path$$1 = this.fs.realPath(node);
		    try {
		        if (this.FS.isDir(node.mode)) {
		            this.nodefs.mkdirSync(path$$1, node.mode);
		        }
		        else {
		            this.nodefs.writeFileSync(path$$1, '', { mode: node.mode });
		        }
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		    return node;
		};
		BFSEmscriptenNodeOps.prototype.rename = function rename (oldNode, newDir, newName) {
		    var oldPath = this.fs.realPath(oldNode);
		    var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);
		    try {
		        this.nodefs.renameSync(oldPath, newPath);
		        // This logic is missing from the original NodeFS,
		        // causing Emscripten's filesystem to think that the old file still exists.
		        oldNode.name = newName;
		        oldNode.parent = newDir;
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenNodeOps.prototype.unlink = function unlink (parent, name) {
		    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
		    try {
		        this.nodefs.unlinkSync(path$$1);
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenNodeOps.prototype.rmdir = function rmdir (parent, name) {
		    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
		    try {
		        this.nodefs.rmdirSync(path$$1);
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenNodeOps.prototype.readdir = function readdir (node) {
		    var path$$1 = this.fs.realPath(node);
		    try {
		        // Node does not list . and .. in directory listings,
		        // but Emscripten expects it.
		        var contents = this.nodefs.readdirSync(path$$1);
		        contents.push('.', '..');
		        return contents;
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenNodeOps.prototype.symlink = function symlink (parent, newName, oldPath) {
		    var newPath = this.PATH.join2(this.fs.realPath(parent), newName);
		    try {
		        this.nodefs.symlinkSync(oldPath, newPath);
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		BFSEmscriptenNodeOps.prototype.readlink = function readlink (node) {
		    var path$$1 = this.fs.realPath(node);
		    try {
		        return this.nodefs.readlinkSync(path$$1);
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		};
		var BFSEmscriptenFS = function BFSEmscriptenFS(_FS, _PATH, _ERRNO_CODES, nodefs) {
		    if ( _FS === void 0 ) _FS = self['FS'];
		    if ( _PATH === void 0 ) _PATH = self['PATH'];
		    if ( _ERRNO_CODES === void 0 ) _ERRNO_CODES = self['ERRNO_CODES'];
		    if ( nodefs === void 0 ) nodefs = _fsMock;
		
		    // This maps the integer permission modes from http://linux.die.net/man/3/open
		    // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
		    this.flagsToPermissionStringMap = {
		        0 /*O_RDONLY*/: 'r',
		        1 /*O_WRONLY*/: 'r+',
		        2 /*O_RDWR*/: 'r+',
		        64 /*O_CREAT*/: 'r',
		        65 /*O_WRONLY|O_CREAT*/: 'r+',
		        66 /*O_RDWR|O_CREAT*/: 'r+',
		        129 /*O_WRONLY|O_EXCL*/: 'rx+',
		        193 /*O_WRONLY|O_CREAT|O_EXCL*/: 'rx+',
		        514 /*O_RDWR|O_TRUNC*/: 'w+',
		        577 /*O_WRONLY|O_CREAT|O_TRUNC*/: 'w',
		        578 /*O_CREAT|O_RDWR|O_TRUNC*/: 'w+',
		        705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: 'wx',
		        706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: 'wx+',
		        1024 /*O_APPEND*/: 'a',
		        1025 /*O_WRONLY|O_APPEND*/: 'a',
		        1026 /*O_RDWR|O_APPEND*/: 'a+',
		        1089 /*O_WRONLY|O_CREAT|O_APPEND*/: 'a',
		        1090 /*O_RDWR|O_CREAT|O_APPEND*/: 'a+',
		        1153 /*O_WRONLY|O_EXCL|O_APPEND*/: 'ax',
		        1154 /*O_RDWR|O_EXCL|O_APPEND*/: 'ax+',
		        1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: 'ax',
		        1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: 'ax+',
		        4096 /*O_RDONLY|O_DSYNC*/: 'rs',
		        4098 /*O_RDWR|O_DSYNC*/: 'rs+'
		    };
		    this.nodefs = nodefs;
		    this.FS = _FS;
		    this.PATH = _PATH;
		    this.ERRNO_CODES = _ERRNO_CODES;
		    this.node_ops = new BFSEmscriptenNodeOps(this);
		    this.stream_ops = new BFSEmscriptenStreamOps(this);
		};
		BFSEmscriptenFS.prototype.mount = function mount (m) {
		    return this.createNode(null, '/', this.getMode(m.opts.root), 0);
		};
		BFSEmscriptenFS.prototype.createNode = function createNode (parent, name, mode, dev) {
		    var FS = this.FS;
		    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
		        throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);
		    }
		    var node = FS.createNode(parent, name, mode);
		    node.node_ops = this.node_ops;
		    node.stream_ops = this.stream_ops;
		    return node;
		};
		BFSEmscriptenFS.prototype.getMode = function getMode (path$$1) {
		    var stat;
		    try {
		        stat = this.nodefs.lstatSync(path$$1);
		    }
		    catch (e) {
		        if (!e.code) {
		            throw e;
		        }
		        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
		    }
		    return stat.mode;
		};
		BFSEmscriptenFS.prototype.realPath = function realPath (node) {
		    var parts = [];
		    while (node.parent !== node) {
		        parts.push(node.name);
		        node = node.parent;
		    }
		    parts.push(node.mount.opts.root);
		    parts.reverse();
		    return this.PATH.join.apply(null, parts);
		};
		BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString (flags) {
		    var parsedFlags = (typeof flags === "string") ? parseInt(flags, 10) : flags;
		    parsedFlags &= 0x1FFF;
		    if (parsedFlags in this.flagsToPermissionStringMap) {
		        return this.flagsToPermissionStringMap[parsedFlags];
		    }
		    else {
		        return flags;
		    }
		};
		BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS () {
		    return this.nodefs;
		};
		BFSEmscriptenFS.prototype.getFS = function getFS () {
		    return this.FS;
		};
		BFSEmscriptenFS.prototype.getPATH = function getPATH () {
		    return this.PATH;
		};
		BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES () {
		    return this.ERRNO_CODES;
		};
		
		/**
		 * Basic filesystem class. Most filesystems should extend this class, as it
		 * provides default implementations for a handful of methods.
		 */
		var BaseFileSystem = function BaseFileSystem () {};
		
		BaseFileSystem.prototype.supportsLinks = function supportsLinks () {
		    return false;
		};
		BaseFileSystem.prototype.diskSpace = function diskSpace (p, cb) {
		    cb(0, 0);
		};
		/**
		 * Opens the file at path p with the given flag. The file must exist.
		 * @param p The path to open.
		 * @param flag The flag to use when opening the file.
		 */
		BaseFileSystem.prototype.openFile = function openFile (p, flag, cb) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		/**
		 * Create the file at path p with the given mode. Then, open it with the given
		 * flag.
		 */
		BaseFileSystem.prototype.createFile = function createFile (p, flag, mode, cb) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.open = function open (p, flag, mode, cb) {
		        var this$1$1 = this;
		
		    var mustBeFile = function (e, stats) {
		        if (e) {
		            // File does not exist.
		            switch (flag.pathNotExistsAction()) {
		                case ActionType.CREATE_FILE:
		                    // Ensure parent exists.
		                    return this$1$1.stat(path.dirname(p), false, function (e, parentStats) {
		                        if (e) {
		                            cb(e);
		                        }
		                        else if (parentStats && !parentStats.isDirectory()) {
		                            cb(ApiError.ENOTDIR(path.dirname(p)));
		                        }
		                        else {
		                            this$1$1.createFile(p, flag, mode, cb);
		                        }
		                    });
		                case ActionType.THROW_EXCEPTION:
		                    return cb(ApiError.ENOENT(p));
		                default:
		                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
		            }
		        }
		        else {
		            // File exists.
		            if (stats && stats.isDirectory()) {
		                return cb(ApiError.EISDIR(p));
		            }
		            switch (flag.pathExistsAction()) {
		                case ActionType.THROW_EXCEPTION:
		                    return cb(ApiError.EEXIST(p));
		                case ActionType.TRUNCATE_FILE:
		                    // NOTE: In a previous implementation, we deleted the file and
		                    // re-created it. However, this created a race condition if another
		                    // asynchronous request was trying to read the file, as the file
		                    // would not exist for a small period of time.
		                    return this$1$1.openFile(p, flag, function (e, fd) {
		                        if (e) {
		                            cb(e);
		                        }
		                        else if (fd) {
		                            fd.truncate(0, function () {
		                                fd.sync(function () {
		                                    cb(null, fd);
		                                });
		                            });
		                        }
		                        else {
		                            fail();
		                        }
		                    });
		                case ActionType.NOP:
		                    return this$1$1.openFile(p, flag, cb);
		                default:
		                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
		            }
		        }
		    };
		    this.stat(p, false, mustBeFile);
		};
		BaseFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.stat = function stat (p, isLstat, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.statSync = function statSync (p, isLstat) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		/**
		 * Opens the file at path p with the given flag. The file must exist.
		 * @param p The path to open.
		 * @param flag The flag to use when opening the file.
		 * @return A File object corresponding to the opened file.
		 */
		BaseFileSystem.prototype.openFileSync = function openFileSync (p, flag, mode) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		/**
		 * Create the file at path p with the given mode. Then, open it with the given
		 * flag.
		 */
		BaseFileSystem.prototype.createFileSync = function createFileSync (p, flag, mode) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.openSync = function openSync (p, flag, mode) {
		    // Check if the path exists, and is a file.
		    var stats;
		    try {
		        stats = this.statSync(p, false);
		    }
		    catch (e) {
		        // File does not exist.
		        switch (flag.pathNotExistsAction()) {
		            case ActionType.CREATE_FILE:
		                // Ensure parent exists.
		                var parentStats = this.statSync(path.dirname(p), false);
		                if (!parentStats.isDirectory()) {
		                    throw ApiError.ENOTDIR(path.dirname(p));
		                }
		                return this.createFileSync(p, flag, mode);
		            case ActionType.THROW_EXCEPTION:
		                throw ApiError.ENOENT(p);
		            default:
		                throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
		        }
		    }
		    // File exists.
		    if (stats.isDirectory()) {
		        throw ApiError.EISDIR(p);
		    }
		    switch (flag.pathExistsAction()) {
		        case ActionType.THROW_EXCEPTION:
		            throw ApiError.EEXIST(p);
		        case ActionType.TRUNCATE_FILE:
		            // Delete file.
		            this.unlinkSync(p);
		            // Create file. Use the same mode as the old file.
		            // Node itself modifies the ctime when this occurs, so this action
		            // will preserve that behavior if the underlying file system
		            // supports those properties.
		            return this.createFileSync(p, flag, stats.mode);
		        case ActionType.NOP:
		            return this.openFileSync(p, flag, mode);
		        default:
		            throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
		    }
		};
		BaseFileSystem.prototype.unlink = function unlink (p, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.unlinkSync = function unlinkSync (p) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.rmdir = function rmdir (p, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.rmdirSync = function rmdirSync (p) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.readdir = function readdir (p, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.readdirSync = function readdirSync (p) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.exists = function exists (p, cb) {
		    this.stat(p, null, function (err) {
		        cb(!err);
		    });
		};
		BaseFileSystem.prototype.existsSync = function existsSync (p) {
		    try {
		        this.statSync(p, true);
		        return true;
		    }
		    catch (e) {
		        return false;
		    }
		};
		BaseFileSystem.prototype.realpath = function realpath (p, cache, cb) {
		    if (this.supportsLinks()) {
		        // The path could contain symlinks. Split up the path,
		        // resolve any symlinks, return the resolved string.
		        var splitPath = p.split(path.sep);
		        // TODO: Simpler to just pass through file, find sep and such.
		        for (var i = 0; i < splitPath.length; i++) {
		            var addPaths = splitPath.slice(0, i + 1);
		            splitPath[i] = path.join.apply(null, addPaths);
		        }
		    }
		    else {
		        // No symlinks. We just need to verify that it exists.
		        this.exists(p, function (doesExist) {
		            if (doesExist) {
		                cb(null, p);
		            }
		            else {
		                cb(ApiError.ENOENT(p));
		            }
		        });
		    }
		};
		BaseFileSystem.prototype.realpathSync = function realpathSync (p, cache) {
		    if (this.supportsLinks()) {
		        // The path could contain symlinks. Split up the path,
		        // resolve any symlinks, return the resolved string.
		        var splitPath = p.split(path.sep);
		        // TODO: Simpler to just pass through file, find sep and such.
		        for (var i = 0; i < splitPath.length; i++) {
		            var addPaths = splitPath.slice(0, i + 1);
		            splitPath[i] = path.join.apply(path, addPaths);
		        }
		        return splitPath.join(path.sep);
		    }
		    else {
		        // No symlinks. We just need to verify that it exists.
		        if (this.existsSync(p)) {
		            return p;
		        }
		        else {
		            throw ApiError.ENOENT(p);
		        }
		    }
		};
		BaseFileSystem.prototype.truncate = function truncate (p, len, cb) {
		    this.open(p, FileFlag.getFileFlag('r+'), 0x1a4, (function (er, fd) {
		        if (er) {
		            return cb(er);
		        }
		        fd.truncate(len, (function (er) {
		            fd.close((function (er2) {
		                cb(er || er2);
		            }));
		        }));
		    }));
		};
		BaseFileSystem.prototype.truncateSync = function truncateSync (p, len) {
		    var fd = this.openSync(p, FileFlag.getFileFlag('r+'), 0x1a4);
		    // Need to safely close FD, regardless of whether or not truncate succeeds.
		    try {
		        fd.truncateSync(len);
		    }
		    catch (e) {
		        throw e;
		    }
		    finally {
		        fd.closeSync();
		    }
		};
		BaseFileSystem.prototype.readFile = function readFile (fname, encoding, flag, cb) {
		    // Wrap cb in file closing code.
		    var oldCb = cb;
		    // Get file.
		    this.open(fname, flag, 0x1a4, function (err, fd) {
		        if (err) {
		            return cb(err);
		        }
		        cb = function (err, arg) {
		            fd.close(function (err2) {
		                if (!err) {
		                    err = err2;
		                }
		                return oldCb(err, arg);
		            });
		        };
		        fd.stat(function (err, stat) {
		            if (err) {
		                return cb(err);
		            }
		            // Allocate buffer.
		            var buf = Buffer.alloc(stat.size);
		            fd.read(buf, 0, stat.size, 0, function (err) {
		                if (err) {
		                    return cb(err);
		                }
		                else if (encoding === null) {
		                    return cb(err, buf);
		                }
		                try {
		                    cb(null, buf.toString(encoding));
		                }
		                catch (e) {
		                    cb(e);
		                }
		            });
		        });
		    });
		};
		BaseFileSystem.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
		    // Get file.
		    var fd = this.openSync(fname, flag, 0x1a4);
		    try {
		        var stat = fd.statSync();
		        // Allocate buffer.
		        var buf = Buffer.alloc(stat.size);
		        fd.readSync(buf, 0, stat.size, 0);
		        fd.closeSync();
		        if (encoding === null) {
		            return buf;
		        }
		        return buf.toString(encoding);
		    }
		    finally {
		        fd.closeSync();
		    }
		};
		BaseFileSystem.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
		    // Wrap cb in file closing code.
		    var oldCb = cb;
		    // Get file.
		    this.open(fname, flag, 0x1a4, function (err, fd) {
		        if (err) {
		            return cb(err);
		        }
		        cb = function (err) {
		            fd.close(function (err2) {
		                oldCb(err ? err : err2);
		            });
		        };
		        try {
		            if (typeof data === 'string') {
		                data = Buffer.from(data, encoding);
		            }
		        }
		        catch (e) {
		            return cb(e);
		        }
		        // Write into file.
		        fd.write(data, 0, data.length, 0, cb);
		    });
		};
		BaseFileSystem.prototype.writeFileSync = function writeFileSync (fname, data, encoding, flag, mode) {
		    // Get file.
		    var fd = this.openSync(fname, flag, mode);
		    try {
		        if (typeof data === 'string') {
		            data = Buffer.from(data, encoding);
		        }
		        // Write into file.
		        fd.writeSync(data, 0, data.length, 0);
		    }
		    finally {
		        fd.closeSync();
		    }
		};
		BaseFileSystem.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
		    // Wrap cb in file closing code.
		    var oldCb = cb;
		    this.open(fname, flag, mode, function (err, fd) {
		        if (err) {
		            return cb(err);
		        }
		        cb = function (err) {
		            fd.close(function (err2) {
		                oldCb(err ? err : err2);
		            });
		        };
		        if (typeof data === 'string') {
		            data = Buffer.from(data, encoding);
		        }
		        fd.write(data, 0, data.length, null, cb);
		    });
		};
		BaseFileSystem.prototype.appendFileSync = function appendFileSync (fname, data, encoding, flag, mode) {
		    var fd = this.openSync(fname, flag, mode);
		    try {
		        if (typeof data === 'string') {
		            data = Buffer.from(data, encoding);
		        }
		        fd.writeSync(data, 0, data.length, null);
		    }
		    finally {
		        fd.closeSync();
		    }
		};
		BaseFileSystem.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.utimes = function utimes (p, atime, mtime, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.utimesSync = function utimesSync (p, atime, mtime) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.link = function link (srcpath, dstpath, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.linkSync = function linkSync (srcpath, dstpath) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFileSystem.prototype.readlink = function readlink (p, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFileSystem.prototype.readlinkSync = function readlinkSync (p) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		/**
		 * Implements the asynchronous API in terms of the synchronous API.
		 * @class SynchronousFileSystem
		 */
		var SynchronousFileSystem = (function (BaseFileSystem) {
		    function SynchronousFileSystem () {
		        BaseFileSystem.apply(this, arguments);
		    }
		
		    if ( BaseFileSystem ) SynchronousFileSystem.__proto__ = BaseFileSystem;
		    SynchronousFileSystem.prototype = Object.create( BaseFileSystem && BaseFileSystem.prototype );
		    SynchronousFileSystem.prototype.constructor = SynchronousFileSystem;
		
		    SynchronousFileSystem.prototype.supportsSynch = function supportsSynch () {
		        return true;
		    };
		    SynchronousFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
		        try {
		            this.renameSync(oldPath, newPath);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.stat = function stat (p, isLstat, cb) {
		        try {
		            cb(null, this.statSync(p, isLstat));
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.open = function open (p, flags, mode, cb) {
		        try {
		            cb(null, this.openSync(p, flags, mode));
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.unlink = function unlink (p, cb) {
		        try {
		            this.unlinkSync(p);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.rmdir = function rmdir (p, cb) {
		        try {
		            this.rmdirSync(p);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
		        try {
		            this.mkdirSync(p, mode);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.readdir = function readdir (p, cb) {
		        try {
		            cb(null, this.readdirSync(p));
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
		        try {
		            this.chmodSync(p, isLchmod, mode);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
		        try {
		            this.chownSync(p, isLchown, uid, gid);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.utimes = function utimes (p, atime, mtime, cb) {
		        try {
		            this.utimesSync(p, atime, mtime);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.link = function link (srcpath, dstpath, cb) {
		        try {
		            this.linkSync(srcpath, dstpath);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
		        try {
		            this.symlinkSync(srcpath, dstpath, type);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    SynchronousFileSystem.prototype.readlink = function readlink (p, cb) {
		        try {
		            cb(null, this.readlinkSync(p));
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		
		    return SynchronousFileSystem;
		}(BaseFileSystem));
		
		/**
		 * Base class that contains shared implementations of functions for the file
		 * object.
		 */
		var BaseFile = function BaseFile () {};
		
		BaseFile.prototype.sync = function sync (cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFile.prototype.syncSync = function syncSync () {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFile.prototype.datasync = function datasync (cb) {
		    this.sync(cb);
		};
		BaseFile.prototype.datasyncSync = function datasyncSync () {
		    return this.syncSync();
		};
		BaseFile.prototype.chown = function chown (uid, gid, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFile.prototype.chownSync = function chownSync (uid, gid) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFile.prototype.chmod = function chmod (mode, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFile.prototype.chmodSync = function chmodSync (mode) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		BaseFile.prototype.utimes = function utimes (atime, mtime, cb) {
		    cb(new ApiError(ErrorCode.ENOTSUP));
		};
		BaseFile.prototype.utimesSync = function utimesSync (atime, mtime) {
		    throw new ApiError(ErrorCode.ENOTSUP);
		};
		
		/**
		 * An implementation of the File interface that operates on a file that is
		 * completely in-memory. PreloadFiles are backed by a Buffer.
		 *
		 * This is also an abstract class, as it lacks an implementation of 'sync' and
		 * 'close'. Each filesystem that wishes to use this file representation must
		 * extend this class and implement those two methods.
		 * @todo 'close' lever that disables functionality once closed.
		 */
		var PreloadFile = (function (BaseFile$$1) {
		    function PreloadFile(_fs, _path, _flag, _stat, contents) {
		        BaseFile$$1.call(this);
		        this._pos = 0;
		        this._dirty = false;
		        this._fs = _fs;
		        this._path = _path;
		        this._flag = _flag;
		        this._stat = _stat;
		        if (contents) {
		            this._buffer = contents;
		        }
		        else {
		            // Empty buffer. It'll expand once we write stuff to it.
		            this._buffer = emptyBuffer();
		        }
		        // Note: This invariant is *not* maintained once the file starts getting
		        // modified.
		        // Note: Only actually matters if file is readable, as writeable modes may
		        // truncate/append to file.
		        if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
		            throw new Error(("Invalid buffer: Buffer is " + (this._buffer.length) + " long, yet Stats object specifies that file is " + (this._stat.size) + " long."));
		        }
		    }
		
		    if ( BaseFile$$1 ) PreloadFile.__proto__ = BaseFile$$1;
		    PreloadFile.prototype = Object.create( BaseFile$$1 && BaseFile$$1.prototype );
		    PreloadFile.prototype.constructor = PreloadFile;
		    /**
		     * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.
		     */
		    PreloadFile.prototype.getBuffer = function getBuffer () {
		        return this._buffer;
		    };
		    /**
		     * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!
		     */
		    PreloadFile.prototype.getStats = function getStats () {
		        return this._stat;
		    };
		    PreloadFile.prototype.getFlag = function getFlag () {
		        return this._flag;
		    };
		    /**
		     * Get the path to this file.
		     * @return [String] The path to the file.
		     */
		    PreloadFile.prototype.getPath = function getPath () {
		        return this._path;
		    };
		    /**
		     * Get the current file position.
		     *
		     * We emulate the following bug mentioned in the Node documentation:
		     * > On Linux, positional writes don't work when the file is opened in append
		     *   mode. The kernel ignores the position argument and always appends the data
		     *   to the end of the file.
		     * @return [Number] The current file position.
		     */
		    PreloadFile.prototype.getPos = function getPos () {
		        if (this._flag.isAppendable()) {
		            return this._stat.size;
		        }
		        return this._pos;
		    };
		    /**
		     * Advance the current file position by the indicated number of positions.
		     * @param [Number] delta
		     */
		    PreloadFile.prototype.advancePos = function advancePos (delta) {
		        return this._pos += delta;
		    };
		    /**
		     * Set the file position.
		     * @param [Number] newPos
		     */
		    PreloadFile.prototype.setPos = function setPos (newPos) {
		        return this._pos = newPos;
		    };
		    /**
		     * **Core**: Asynchronous sync. Must be implemented by subclasses of this
		     * class.
		     * @param [Function(BrowserFS.ApiError)] cb
		     */
		    PreloadFile.prototype.sync = function sync (cb) {
		        try {
		            this.syncSync();
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    /**
		     * **Core**: Synchronous sync.
		     */
		    PreloadFile.prototype.syncSync = function syncSync () {
		        throw new ApiError(ErrorCode.ENOTSUP);
		    };
		    /**
		     * **Core**: Asynchronous close. Must be implemented by subclasses of this
		     * class.
		     * @param [Function(BrowserFS.ApiError)] cb
		     */
		    PreloadFile.prototype.close = function close (cb) {
		        try {
		            this.closeSync();
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    /**
		     * **Core**: Synchronous close.
		     */
		    PreloadFile.prototype.closeSync = function closeSync () {
		        throw new ApiError(ErrorCode.ENOTSUP);
		    };
		    /**
		     * Asynchronous `stat`.
		     * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb
		     */
		    PreloadFile.prototype.stat = function stat (cb) {
		        try {
		            cb(null, this._stat.clone());
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    /**
		     * Synchronous `stat`.
		     */
		    PreloadFile.prototype.statSync = function statSync () {
		        return this._stat.clone();
		    };
		    /**
		     * Asynchronous truncate.
		     * @param [Number] len
		     * @param [Function(BrowserFS.ApiError)] cb
		     */
		    PreloadFile.prototype.truncate = function truncate (len, cb) {
		        try {
		            this.truncateSync(len);
		            if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
		                this.sync(cb);
		            }
		            cb();
		        }
		        catch (e) {
		            return cb(e);
		        }
		    };
		    /**
		     * Synchronous truncate.
		     * @param [Number] len
		     */
		    PreloadFile.prototype.truncateSync = function truncateSync (len) {
		        this._dirty = true;
		        if (!this._flag.isWriteable()) {
		            throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
		        }
		        this._stat.mtime = new Date();
		        if (len > this._buffer.length) {
		            var buf = Buffer.alloc(len - this._buffer.length, 0);
		            // Write will set @_stat.size for us.
		            this.writeSync(buf, 0, buf.length, this._buffer.length);
		            if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
		                this.syncSync();
		            }
		            return;
		        }
		        this._stat.size = len;
		        // Truncate buffer to 'len'.
		        var newBuff = Buffer.alloc(len);
		        this._buffer.copy(newBuff, 0, 0, len);
		        this._buffer = newBuff;
		        if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
		            this.syncSync();
		        }
		    };
		    /**
		     * Write buffer to the file.
		     * Note that it is unsafe to use fs.write multiple times on the same file
		     * without waiting for the callback.
		     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
		     *  the file.
		     * @param [Number] offset Offset in the buffer to start reading data from.
		     * @param [Number] length The amount of bytes to write to the file.
		     * @param [Number] position Offset from the beginning of the file where this
		     *   data should be written. If position is null, the data will be written at
		     *   the current position.
		     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]
		     *   cb The number specifies the number of bytes written into the file.
		     */
		    PreloadFile.prototype.write = function write (buffer$$1, offset, length, position, cb) {
		        try {
		            cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    /**
		     * Write buffer to the file.
		     * Note that it is unsafe to use fs.writeSync multiple times on the same file
		     * without waiting for the callback.
		     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
		     *  the file.
		     * @param [Number] offset Offset in the buffer to start reading data from.
		     * @param [Number] length The amount of bytes to write to the file.
		     * @param [Number] position Offset from the beginning of the file where this
		     *   data should be written. If position is null, the data will be written at
		     *   the current position.
		     * @return [Number]
		     */
		    PreloadFile.prototype.writeSync = function writeSync (buffer$$1, offset, length, position) {
		        this._dirty = true;
		        if (position === undefined || position === null) {
		            position = this.getPos();
		        }
		        if (!this._flag.isWriteable()) {
		            throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
		        }
		        var endFp = position + length;
		        if (endFp > this._stat.size) {
		            this._stat.size = endFp;
		            if (endFp > this._buffer.length) {
		                // Extend the buffer!
		                var newBuff = Buffer.alloc(endFp);
		                this._buffer.copy(newBuff);
		                this._buffer = newBuff;
		            }
		        }
		        var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
		        this._stat.mtime = new Date();
		        if (this._flag.isSynchronous()) {
		            this.syncSync();
		            return len;
		        }
		        this.setPos(position + len);
		        return len;
		    };
		    /**
		     * Read data from the file.
		     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
		     *   written to.
		     * @param [Number] offset The offset within the buffer where writing will
		     *   start.
		     * @param [Number] length An integer specifying the number of bytes to read.
		     * @param [Number] position An integer specifying where to begin reading from
		     *   in the file. If position is null, data will be read from the current file
		     *   position.
		     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The
		     *   number is the number of bytes read
		     */
		    PreloadFile.prototype.read = function read (buffer$$1, offset, length, position, cb) {
		        try {
		            cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    /**
		     * Read data from the file.
		     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
		     *   written to.
		     * @param [Number] offset The offset within the buffer where writing will
		     *   start.
		     * @param [Number] length An integer specifying the number of bytes to read.
		     * @param [Number] position An integer specifying where to begin reading from
		     *   in the file. If position is null, data will be read from the current file
		     *   position.
		     * @return [Number]
		     */
		    PreloadFile.prototype.readSync = function readSync (buffer$$1, offset, length, position) {
		        if (!this._flag.isReadable()) {
		            throw new ApiError(ErrorCode.EPERM, 'File not opened with a readable mode.');
		        }
		        if (position === undefined || position === null) {
		            position = this.getPos();
		        }
		        var endRead = position + length;
		        if (endRead > this._stat.size) {
		            length = this._stat.size - position;
		        }
		        var rv = this._buffer.copy(buffer$$1, offset, position, position + length);
		        this._stat.atime = new Date();
		        this._pos = position + length;
		        return rv;
		    };
		    /**
		     * Asynchronous `fchmod`.
		     * @param [Number|String] mode
		     * @param [Function(BrowserFS.ApiError)] cb
		     */
		    PreloadFile.prototype.chmod = function chmod (mode, cb) {
		        try {
		            this.chmodSync(mode);
		            cb();
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    /**
		     * Asynchronous `fchmod`.
		     * @param [Number] mode
		     */
		    PreloadFile.prototype.chmodSync = function chmodSync (mode) {
		        if (!this._fs.supportsProps()) {
		            throw new ApiError(ErrorCode.ENOTSUP);
		        }
		        this._dirty = true;
		        this._stat.chmod(mode);
		        this.syncSync();
		    };
		    PreloadFile.prototype.isDirty = function isDirty () {
		        return this._dirty;
		    };
		    /**
		     * Resets the dirty bit. Should only be called after a sync has completed successfully.
		     */
		    PreloadFile.prototype.resetDirty = function resetDirty () {
		        this._dirty = false;
		    };
		
		    return PreloadFile;
		}(BaseFile));
		
		/**
		 * File class for the InMemory and XHR file systems.
		 * Doesn't sync to anything, so it works nicely for memory-only files.
		 */
		var NoSyncFile = (function (PreloadFile) {
		    function NoSyncFile(_fs, _path, _flag, _stat, contents) {
		        PreloadFile.call(this, _fs, _path, _flag, _stat, contents);
		    }
		
		    if ( PreloadFile ) NoSyncFile.__proto__ = PreloadFile;
		    NoSyncFile.prototype = Object.create( PreloadFile && PreloadFile.prototype );
		    NoSyncFile.prototype.constructor = NoSyncFile;
		    /**
		     * Asynchronous sync. Doesn't do anything, simply calls the cb.
		     * @param [Function(BrowserFS.ApiError)] cb
		     */
		    NoSyncFile.prototype.sync = function sync (cb) {
		        cb();
		    };
		    /**
		     * Synchronous sync. Doesn't do anything.
		     */
		    NoSyncFile.prototype.syncSync = function syncSync () {
		        // NOP.
		    };
		    /**
		     * Asynchronous close. Doesn't do anything, simply calls the cb.
		     * @param [Function(BrowserFS.ApiError)] cb
		     */
		    NoSyncFile.prototype.close = function close (cb) {
		        cb();
		    };
		    /**
		     * Synchronous close. Doesn't do anything.
		     */
		    NoSyncFile.prototype.closeSync = function closeSync () {
		        // NOP.
		    };
		
		    return NoSyncFile;
		}(PreloadFile));
		
		/**
		 * We define our own file to interpose on syncSync() for mirroring purposes.
		 */
		var MirrorFile = (function (PreloadFile$$1) {
		    function MirrorFile(fs, path$$1, flag, stat, data) {
		        PreloadFile$$1.call(this, fs, path$$1, flag, stat, data);
		    }
		
		    if ( PreloadFile$$1 ) MirrorFile.__proto__ = PreloadFile$$1;
		    MirrorFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    MirrorFile.prototype.constructor = MirrorFile;
		    MirrorFile.prototype.syncSync = function syncSync () {
		        if (this.isDirty()) {
		            this._fs._syncSync(this);
		            this.resetDirty();
		        }
		    };
		    MirrorFile.prototype.closeSync = function closeSync () {
		        this.syncSync();
		    };
		
		    return MirrorFile;
		}(PreloadFile));
		/**
		 * AsyncMirrorFS mirrors a synchronous filesystem into an asynchronous filesystem
		 * by:
		 *
		 * * Performing operations over the in-memory copy, while asynchronously pipelining them
		 *   to the backing store.
		 * * During application loading, the contents of the async file system can be reloaded into
		 *   the synchronous store, if desired.
		 *
		 * The two stores will be kept in sync. The most common use-case is to pair a synchronous
		 * in-memory filesystem with an asynchronous backing store.
		 *
		 * Example: Mirroring an IndexedDB file system to an in memory file system. Now, you can use
		 * IndexedDB synchronously.
		 *
		 * ```javascript
		 * BrowserFS.configure({
		 *   fs: "AsyncMirror",
		 *   options: {
		 *     sync: { fs: "InMemory" },
		 *     async: { fs: "IndexedDB" }
		 *   }
		 * }, function(e) {
		 *   // BrowserFS is initialized and ready-to-use!
		 * });
		 * ```
		 *
		 * Or, alternatively:
		 *
		 * ```javascript
		 * BrowserFS.FileSystem.IndexedDB.Create(function(e, idbfs) {
		 *   BrowserFS.FileSystem.InMemory.Create(function(e, inMemory) {
		 *     BrowserFS.FileSystem.AsyncMirror({
		 *       sync: inMemory, async: idbfs
		 *     }, function(e, mirrored) {
		 *       BrowserFS.initialize(mirrored);
		 *     });
		 *   });
		 * });
		 * ```
		 */
		var AsyncMirror = (function (SynchronousFileSystem$$1) {
		    function AsyncMirror(sync, async, deprecateMsg) {
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        SynchronousFileSystem$$1.call(this);
		        /**
		         * Queue of pending asynchronous operations.
		         */
		        this._queue = [];
		        this._queueRunning = false;
		        this._isInitialized = false;
		        this._initializeCallbacks = [];
		        this._sync = sync;
		        this._async = async;
		        if (!sync.supportsSynch()) {
		            throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
		        }
		        deprecationMessage(deprecateMsg, AsyncMirror.Name, { sync: "sync file system instance", async: "async file system instance" });
		    }
		
		    if ( SynchronousFileSystem$$1 ) AsyncMirror.__proto__ = SynchronousFileSystem$$1;
		    AsyncMirror.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
		    AsyncMirror.prototype.constructor = AsyncMirror;
		    /**
		     * Constructs and initializes an AsyncMirror file system with the given options.
		     */
		    AsyncMirror.Create = function Create (opts, cb) {
		        try {
		            var fs = new AsyncMirror(opts.sync, opts.async, false);
		            fs.initialize(function (e) {
		                if (e) {
		                    cb(e);
		                }
		                else {
		                    cb(null, fs);
		                }
		            }, false);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    AsyncMirror.isAvailable = function isAvailable () {
		        return true;
		    };
		    AsyncMirror.prototype.getName = function getName () {
		        return AsyncMirror.Name;
		    };
		    AsyncMirror.prototype._syncSync = function _syncSync (fd) {
		        this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag('w'), fd.getStats().mode);
		        this.enqueueOp({
		            apiMethod: 'writeFile',
		            arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
		        });
		    };
		    /**
		     * Called once to load up files from async storage into sync storage.
		     */
		    AsyncMirror.prototype.initialize = function initialize (userCb, deprecateMsg) {
		        var this$1$1 = this;
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        if (deprecateMsg) {
		            console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
		        }
		        var callbacks = this._initializeCallbacks;
		        var end = function (e) {
		            this$1$1._isInitialized = !e;
		            this$1$1._initializeCallbacks = [];
		            callbacks.forEach(function (cb) { return cb(e); });
		        };
		        if (!this._isInitialized) {
		            // First call triggers initialization, the rest wait.
		            if (callbacks.push(userCb) === 1) {
		                var copyDirectory = function (p, mode, cb) {
		                    if (p !== '/') {
		                        this$1$1._sync.mkdirSync(p, mode);
		                    }
		                    this$1$1._async.readdir(p, function (err, files) {
		                        var i = 0;
		                        // NOTE: This function must not be in a lexically nested statement,
		                        // such as an if or while statement. Safari refuses to run the
		                        // script since it is undefined behavior.
		                        function copyNextFile(err) {
		                            if (err) {
		                                cb(err);
		                            }
		                            else if (i < files.length) {
		                                copyItem(path.join(p, files[i]), copyNextFile);
		                                i++;
		                            }
		                            else {
		                                cb();
		                            }
		                        }
		                        if (err) {
		                            cb(err);
		                        }
		                        else {
		                            copyNextFile();
		                        }
		                    });
		                }, copyFile = function (p, mode, cb) {
		                    this$1$1._async.readFile(p, null, FileFlag.getFileFlag('r'), function (err, data) {
		                        if (err) {
		                            cb(err);
		                        }
		                        else {
		                            try {
		                                this$1$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag('w'), mode);
		                            }
		                            catch (e) {
		                                err = e;
		                            }
		                            finally {
		                                cb(err);
		                            }
		                        }
		                    });
		                }, copyItem = function (p, cb) {
		                    this$1$1._async.stat(p, false, function (err, stats) {
		                        if (err) {
		                            cb(err);
		                        }
		                        else if (stats.isDirectory()) {
		                            copyDirectory(p, stats.mode, cb);
		                        }
		                        else {
		                            copyFile(p, stats.mode, cb);
		                        }
		                    });
		                };
		                copyDirectory('/', 0, end);
		            }
		        }
		        else {
		            userCb();
		        }
		    };
		    AsyncMirror.prototype.isReadOnly = function isReadOnly () { return false; };
		    AsyncMirror.prototype.supportsSynch = function supportsSynch () { return true; };
		    AsyncMirror.prototype.supportsLinks = function supportsLinks () { return false; };
		    AsyncMirror.prototype.supportsProps = function supportsProps () { return this._sync.supportsProps() && this._async.supportsProps(); };
		    AsyncMirror.prototype.renameSync = function renameSync (oldPath, newPath) {
		        this.checkInitialized();
		        this._sync.renameSync(oldPath, newPath);
		        this.enqueueOp({
		            apiMethod: 'rename',
		            arguments: [oldPath, newPath]
		        });
		    };
		    AsyncMirror.prototype.statSync = function statSync (p, isLstat) {
		        this.checkInitialized();
		        return this._sync.statSync(p, isLstat);
		    };
		    AsyncMirror.prototype.openSync = function openSync (p, flag, mode) {
		        this.checkInitialized();
		        // Sanity check: Is this open/close permitted?
		        var fd = this._sync.openSync(p, flag, mode);
		        fd.closeSync();
		        return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag('r')));
		    };
		    AsyncMirror.prototype.unlinkSync = function unlinkSync (p) {
		        this.checkInitialized();
		        this._sync.unlinkSync(p);
		        this.enqueueOp({
		            apiMethod: 'unlink',
		            arguments: [p]
		        });
		    };
		    AsyncMirror.prototype.rmdirSync = function rmdirSync (p) {
		        this.checkInitialized();
		        this._sync.rmdirSync(p);
		        this.enqueueOp({
		            apiMethod: 'rmdir',
		            arguments: [p]
		        });
		    };
		    AsyncMirror.prototype.mkdirSync = function mkdirSync (p, mode) {
		        this.checkInitialized();
		        this._sync.mkdirSync(p, mode);
		        this.enqueueOp({
		            apiMethod: 'mkdir',
		            arguments: [p, mode]
		        });
		    };
		    AsyncMirror.prototype.readdirSync = function readdirSync (p) {
		        this.checkInitialized();
		        return this._sync.readdirSync(p);
		    };
		    AsyncMirror.prototype.existsSync = function existsSync (p) {
		        this.checkInitialized();
		        return this._sync.existsSync(p);
		    };
		    AsyncMirror.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
		        this.checkInitialized();
		        this._sync.chmodSync(p, isLchmod, mode);
		        this.enqueueOp({
		            apiMethod: 'chmod',
		            arguments: [p, isLchmod, mode]
		        });
		    };
		    AsyncMirror.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
		        this.checkInitialized();
		        this._sync.chownSync(p, isLchown, uid, gid);
		        this.enqueueOp({
		            apiMethod: 'chown',
		            arguments: [p, isLchown, uid, gid]
		        });
		    };
		    AsyncMirror.prototype.utimesSync = function utimesSync (p, atime, mtime) {
		        this.checkInitialized();
		        this._sync.utimesSync(p, atime, mtime);
		        this.enqueueOp({
		            apiMethod: 'utimes',
		            arguments: [p, atime, mtime]
		        });
		    };
		    AsyncMirror.prototype.checkInitialized = function checkInitialized () {
		        if (!this._isInitialized) {
		            throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
		        }
		    };
		    AsyncMirror.prototype.enqueueOp = function enqueueOp (op) {
		        var this$1$1 = this;
		
		        this._queue.push(op);
		        if (!this._queueRunning) {
		            this._queueRunning = true;
		            var doNextOp = function (err) {
		                if (err) {
		                    console.error(("WARNING: File system has desynchronized. Received following error: " + err + "\n$"));
		                }
		                if (this$1$1._queue.length > 0) {
		                    var op = this$1$1._queue.shift(), args = op.arguments;
		                    args.push(doNextOp);
		                    this$1$1._async[op.apiMethod].apply(this$1$1._async, args);
		                }
		                else {
		                    this$1$1._queueRunning = false;
		                }
		            };
		            doNextOp();
		        }
		    };
		
		    return AsyncMirror;
		}(SynchronousFileSystem));
		
		AsyncMirror.Name = "AsyncMirror";
		AsyncMirror.Options = {
		    sync: {
		        type: "object",
		        description: "The synchronous file system to mirror the asynchronous file system to."
		    },
		    async: {
		        type: "object",
		        description: "The asynchronous file system to mirror."
		    }
		};
		
		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
		
		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
		
		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();
		
		/** Built-in value references. */
		var Symbol$1 = root.Symbol;
		
		/** Used for built-in method references. */
		var objectProto = Object.prototype;
		
		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;
		
		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString = objectProto.toString;
		
		/** Built-in value references. */
		var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
		
		/**
		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the raw `toStringTag`.
		 */
		function getRawTag(value) {
		  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
		      tag = value[symToStringTag$1];
		
		  try {
		    value[symToStringTag$1] = undefined;
		    var unmasked = true;
		  } catch (e) {}
		
		  var result = nativeObjectToString.call(value);
		  if (unmasked) {
		    if (isOwn) {
		      value[symToStringTag$1] = tag;
		    } else {
		      delete value[symToStringTag$1];
		    }
		  }
		  return result;
		}
		
		/** Used for built-in method references. */
		var objectProto$1 = Object.prototype;
		
		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString$1 = objectProto$1.toString;
		
		/**
		 * Converts `value` to a string using `Object.prototype.toString`.
		 *
		 * @private
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 */
		function objectToString(value) {
		  return nativeObjectToString$1.call(value);
		}
		
		/** `Object#toString` result references. */
		var nullTag = '[object Null]';
		var undefinedTag = '[object Undefined]';
		
		/** Built-in value references. */
		var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
		
		/**
		 * The base implementation of `getTag` without fallbacks for buggy environments.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
		  if (value == null) {
		    return value === undefined ? undefinedTag : nullTag;
		  }
		  return (symToStringTag && symToStringTag in Object(value))
		    ? getRawTag(value)
		    : objectToString(value);
		}
		
		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
		  var type = typeof value;
		  return value != null && (type == 'object' || type == 'function');
		}
		
		/** `Object#toString` result references. */
		var asyncTag = '[object AsyncFunction]';
		var funcTag = '[object Function]';
		var genTag = '[object GeneratorFunction]';
		var proxyTag = '[object Proxy]';
		
		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  if (!isObject(value)) {
		    return false;
		  }
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in Safari 9 which returns 'object' for typed arrays and other constructors.
		  var tag = baseGetTag(value);
		  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		}
		
		/** Used as references for various `Number` constants. */
		var MAX_SAFE_INTEGER = 9007199254740991;
		
		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' &&
		    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}
		
		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}
		
		// A temporary value used to identify if the loop should be broken.
		// See #1064, #1293
		var breakLoop = {};
		
		/**
		 * This method returns `undefined`.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.3.0
		 * @category Util
		 * @example
		 *
		 * _.times(2, _.noop);
		 * // => [undefined, undefined]
		 */
		function noop() {
		  // No operation performed.
		}
		
		function once(fn) {
		    return function () {
		        if (fn === null) { return; }
		        var callFn = fn;
		        fn = null;
		        callFn.apply(this, arguments);
		    };
		}
		
		var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
		
		var getIterator = function (coll) {
		    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
		};
		
		/**
		 * The base implementation of `_.times` without support for iteratee shorthands
		 * or max array length checks.
		 *
		 * @private
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 */
		function baseTimes(n, iteratee) {
		  var index = -1,
		      result = Array(n);
		
		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}
		
		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
		  return value != null && typeof value == 'object';
		}
		
		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]';
		
		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
		  return isObjectLike(value) && baseGetTag(value) == argsTag;
		}
		
		/** Used for built-in method references. */
		var objectProto$3 = Object.prototype;
		
		/** Used to check objects for own properties. */
		var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
		
		/** Built-in value references. */
		var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
		
		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
		    !propertyIsEnumerable.call(value, 'callee');
		};
		
		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;
		
		/**
		 * This method returns `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `false`.
		 * @example
		 *
		 * _.times(2, _.stubFalse);
		 * // => [false, false]
		 */
		function stubFalse() {
		  return false;
		}
		
		/** Detect free variable `exports`. */
		var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
		
		/** Detect free variable `module`. */
		var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
		
		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;
		
		/** Built-in value references. */
		var Buffer$1 = moduleExports ? root.Buffer : undefined;
		
		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;
		
		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;
		
		/** Used as references for various `Number` constants. */
		var MAX_SAFE_INTEGER$1 = 9007199254740991;
		
		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;
		
		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  length = length == null ? MAX_SAFE_INTEGER$1 : length;
		  return !!length &&
		    (typeof value == 'number' || reIsUint.test(value)) &&
		    (value > -1 && value % 1 == 0 && value < length);
		}
		
		/** `Object#toString` result references. */
		var argsTag$1 = '[object Arguments]';
		var arrayTag = '[object Array]';
		var boolTag = '[object Boolean]';
		var dateTag = '[object Date]';
		var errorTag = '[object Error]';
		var funcTag$1 = '[object Function]';
		var mapTag = '[object Map]';
		var numberTag = '[object Number]';
		var objectTag = '[object Object]';
		var regexpTag = '[object RegExp]';
		var setTag = '[object Set]';
		var stringTag = '[object String]';
		var weakMapTag = '[object WeakMap]';
		
		var arrayBufferTag = '[object ArrayBuffer]';
		var dataViewTag = '[object DataView]';
		var float32Tag = '[object Float32Array]';
		var float64Tag = '[object Float64Array]';
		var int8Tag = '[object Int8Array]';
		var int16Tag = '[object Int16Array]';
		var int32Tag = '[object Int32Array]';
		var uint8Tag = '[object Uint8Array]';
		var uint8ClampedTag = '[object Uint8ClampedArray]';
		var uint16Tag = '[object Uint16Array]';
		var uint32Tag = '[object Uint32Array]';
		
		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
		typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
		typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		typedArrayTags[setTag] = typedArrayTags[stringTag] =
		typedArrayTags[weakMapTag] = false;
		
		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
		  return isObjectLike(value) &&
		    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		}
		
		/**
		 * The base implementation of `_.unary` without support for storing metadata.
		 *
		 * @private
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 */
		function baseUnary(func) {
		  return function(value) {
		    return func(value);
		  };
		}
		
		/** Detect free variable `exports`. */
		var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
		
		/** Detect free variable `module`. */
		var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
		
		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
		
		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports$1 && freeGlobal.process;
		
		/** Used to access faster Node.js helpers. */
		var nodeUtil = (function() {
		  try {
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}());
		
		/* Node.js helper references. */
		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
		
		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
		
		/** Used for built-in method references. */
		var objectProto$2 = Object.prototype;
		
		/** Used to check objects for own properties. */
		var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
		
		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  var isArr = isArray(value),
		      isArg = !isArr && isArguments(value),
		      isBuff = !isArr && !isArg && isBuffer(value),
		      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		      skipIndexes = isArr || isArg || isBuff || isType,
		      result = skipIndexes ? baseTimes(value.length, String) : [],
		      length = result.length;
		
		  for (var key in value) {
		    if ((inherited || hasOwnProperty$1.call(value, key)) &&
		        !(skipIndexes && (
		           // Safari 9 has enumerable `arguments.length` in strict mode.
		           key == 'length' ||
		           // Node.js 0.10 has enumerable non-index properties on buffers.
		           (isBuff && (key == 'offset' || key == 'parent')) ||
		           // PhantomJS 2 has enumerable non-index properties on typed arrays.
		           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		           // Skip index properties.
		           isIndex(key, length)
		        ))) {
		      result.push(key);
		    }
		  }
		  return result;
		}
		
		/** Used for built-in method references. */
		var objectProto$5 = Object.prototype;
		
		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;
		
		  return value === proto;
		}
		
		/**
		 * Creates a unary function that invokes `func` with its argument transformed.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {Function} transform The argument transform.
		 * @returns {Function} Returns the new function.
		 */
		function overArg(func, transform) {
		  return function(arg) {
		    return func(transform(arg));
		  };
		}
		
		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeKeys = overArg(Object.keys, Object);
		
		/** Used for built-in method references. */
		var objectProto$4 = Object.prototype;
		
		/** Used to check objects for own properties. */
		var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
		
		/**
		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeys(object) {
		  if (!isPrototype(object)) {
		    return nativeKeys(object);
		  }
		  var result = [];
		  for (var key in Object(object)) {
		    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
		      result.push(key);
		    }
		  }
		  return result;
		}
		
		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		function keys(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}
		
		function createArrayIterator(coll) {
		    var i = -1;
		    var len = coll.length;
		    return function next() {
		        return ++i < len ? {value: coll[i], key: i} : null;
		    }
		}
		
		function createES2015Iterator(iterator) {
		    var i = -1;
		    return function next() {
		        var item = iterator.next();
		        if (item.done)
		            { return null; }
		        i++;
		        return {value: item.value, key: i};
		    }
		}
		
		function createObjectIterator(obj) {
		    var okeys = keys(obj);
		    var i = -1;
		    var len = okeys.length;
		    return function next() {
		        var key = okeys[++i];
		        return i < len ? {value: obj[key], key: key} : null;
		    };
		}
		
		function iterator(coll) {
		    if (isArrayLike(coll)) {
		        return createArrayIterator(coll);
		    }
		
		    var iterator = getIterator(coll);
		    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
		}
		
		function onlyOnce(fn) {
		    return function() {
		        if (fn === null) { throw new Error("Callback was already called."); }
		        var callFn = fn;
		        fn = null;
		        callFn.apply(this, arguments);
		    };
		}
		
		function _eachOfLimit(limit) {
		    return function (obj, iteratee, callback) {
		        callback = once(callback || noop);
		        if (limit <= 0 || !obj) {
		            return callback(null);
		        }
		        var nextElem = iterator(obj);
		        var done = false;
		        var running = 0;
		
		        function iterateeCallback(err, value) {
		            running -= 1;
		            if (err) {
		                done = true;
		                callback(err);
		            }
		            else if (value === breakLoop || (done && running <= 0)) {
		                done = true;
		                return callback(null);
		            }
		            else {
		                replenish();
		            }
		        }
		
		        function replenish () {
		            while (running < limit && !done) {
		                var elem = nextElem();
		                if (elem === null) {
		                    done = true;
		                    if (running <= 0) {
		                        callback(null);
		                    }
		                    return;
		                }
		                running += 1;
		                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
		            }
		        }
		
		        replenish();
		    };
		}
		
		/**
		 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
		 * time.
		 *
		 * @name eachOfLimit
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @see [async.eachOf]{@link module:Collections.eachOf}
		 * @alias forEachOfLimit
		 * @category Collection
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {number} limit - The maximum number of async operations at a time.
		 * @param {Function} iteratee - A function to apply to each
		 * item in `coll`. The `key` is the item's key, or index in the case of an
		 * array. The iteratee is passed a `callback(err)` which must be called once it
		 * has completed. If no error has occurred, the callback should be run without
		 * arguments or with an explicit `null` argument. Invoked with
		 * (item, key, callback).
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 */
		function eachOfLimit(coll, limit, iteratee, callback) {
		    _eachOfLimit(limit)(coll, iteratee, callback);
		}
		
		function doLimit(fn, limit) {
		    return function (iterable, iteratee, callback) {
		        return fn(iterable, limit, iteratee, callback);
		    };
		}
		
		// eachOf implementation optimized for array-likes
		function eachOfArrayLike(coll, iteratee, callback) {
		    callback = once(callback || noop);
		    var index = 0,
		        completed = 0,
		        length = coll.length;
		    if (length === 0) {
		        callback(null);
		    }
		
		    function iteratorCallback(err, value) {
		        if (err) {
		            callback(err);
		        } else if ((++completed === length) || value === breakLoop) {
		            callback(null);
		        }
		    }
		
		    for (; index < length; index++) {
		        iteratee(coll[index], index, onlyOnce(iteratorCallback));
		    }
		}
		
		// a generic version of eachOf which can handle array, object, and iterator cases.
		var eachOfGeneric = doLimit(eachOfLimit, Infinity);
		
		/**
		 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
		 * to the iteratee.
		 *
		 * @name eachOf
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @alias forEachOf
		 * @category Collection
		 * @see [async.each]{@link module:Collections.each}
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {Function} iteratee - A function to apply to each
		 * item in `coll`. The `key` is the item's key, or index in the case of an
		 * array. The iteratee is passed a `callback(err)` which must be called once it
		 * has completed. If no error has occurred, the callback should be run without
		 * arguments or with an explicit `null` argument. Invoked with
		 * (item, key, callback).
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 * @example
		 *
		 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
		 * var configs = {};
		 *
		 * async.forEachOf(obj, function (value, key, callback) {
		 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
		 *         if (err) return callback(err);
		 *         try {
		 *             configs[key] = JSON.parse(data);
		 *         } catch (e) {
		 *             return callback(e);
		 *         }
		 *         callback();
		 *     });
		 * }, function (err) {
		 *     if (err) console.error(err.message);
		 *     // configs is now a map of JSON data
		 *     doSomethingWith(configs);
		 * });
		 */
		var eachOf = function(coll, iteratee, callback) {
		    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
		    eachOfImplementation(coll, iteratee, callback);
		};
		
		var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
		var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
		
		if (hasSetImmediate) {
		    setImmediate;
		}
		
		function _withoutIndex(iteratee) {
		    return function (value, index, callback) {
		        return iteratee(value, callback);
		    };
		}
		
		/**
		 * Applies the function `iteratee` to each item in `coll`, in parallel.
		 * The `iteratee` is called with an item from the list, and a callback for when
		 * it has finished. If the `iteratee` passes an error to its `callback`, the
		 * main `callback` (for the `each` function) is immediately called with the
		 * error.
		 *
		 * Note, that since this function applies `iteratee` to each item in parallel,
		 * there is no guarantee that the iteratee functions will complete in order.
		 *
		 * @name each
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @alias forEach
		 * @category Collection
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {Function} iteratee - A function to apply to each item
		 * in `coll`. The iteratee is passed a `callback(err)` which must be called once
		 * it has completed. If no error has occurred, the `callback` should be run
		 * without arguments or with an explicit `null` argument. The array index is not
		 * passed to the iteratee. Invoked with (item, callback). If you need the index,
		 * use `eachOf`.
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 * @example
		 *
		 * // assuming openFiles is an array of file names and saveFile is a function
		 * // to save the modified contents of that file:
		 *
		 * async.each(openFiles, saveFile, function(err){
		 *   // if any of the saves produced an error, err would equal that error
		 * });
		 *
		 * // assuming openFiles is an array of file names
		 * async.each(openFiles, function(file, callback) {
		 *
		 *     // Perform operation on file here.
		 *     console.log('Processing file ' + file);
		 *
		 *     if( file.length > 32 ) {
		 *       console.log('This file name is too long');
		 *       callback('File name too long');
		 *     } else {
		 *       // Do work to process file here
		 *       console.log('File processed');
		 *       callback();
		 *     }
		 * }, function(err) {
		 *     // if any of the file processing produced an error, err would equal that error
		 *     if( err ) {
		 *       // One of the iterations produced an error.
		 *       // All processing will now stop.
		 *       console.log('A file failed to process');
		 *     } else {
		 *       console.log('All files have been processed successfully');
		 *     }
		 * });
		 */
		function eachLimit(coll, iteratee, callback) {
		    eachOf(coll, _withoutIndex(iteratee), callback);
		}
		
		if (hasNextTick) ; else if (hasSetImmediate) {
		    setImmediate;
		} else ;
		
		/**
		 * Calls the `iteratee` function `n` times, and accumulates results in the same
		 * manner you would use with [map]{@link module:Collections.map}.
		 *
		 * @name times
		 * @static
		 * @memberOf module:ControlFlow
		 * @method
		 * @see [async.map]{@link module:Collections.map}
		 * @category Control Flow
		 * @param {number} n - The number of times to run the function.
		 * @param {Function} iteratee - The function to call `n` times. Invoked with the
		 * iteration index and a callback (n, next).
		 * @param {Function} callback - see {@link module:Collections.map}.
		 * @example
		 *
		 * // Pretend this is some complicated async factory
		 * var createUser = function(id, callback) {
		 *     callback(null, {
		 *         id: 'user' + id
		 *     });
		 * };
		 *
		 * // generate 5 users
		 * async.times(5, function(n, next) {
		 *     createUser(n, function(err, user) {
		 *         next(err, user);
		 *     });
		 * }, function(err, users) {
		 *     // we should now have 5 users
		 * });
		 */
		
		/**
		 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
		 *
		 * @name timesSeries
		 * @static
		 * @memberOf module:ControlFlow
		 * @method
		 * @see [async.times]{@link module:ControlFlow.times}
		 * @category Control Flow
		 * @param {number} n - The number of times to run the function.
		 * @param {Function} iteratee - The function to call `n` times. Invoked with the
		 * iteration index and a callback (n, next).
		 * @param {Function} callback - see {@link module:Collections.map}.
		 */
		
		/**
		 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
		 * unmemoized form. Handy for testing.
		 *
		 * @name unmemoize
		 * @static
		 * @memberOf module:Utils
		 * @method
		 * @see [async.memoize]{@link module:Utils.memoize}
		 * @category Util
		 * @param {Function} fn - the memoized function
		 * @returns {Function} a function that calls the original unmemoized function
		 */
		
		/**
		 * Runs the `tasks` array of functions in series, each passing their results to
		 * the next in the array. However, if any of the `tasks` pass an error to their
		 * own callback, the next function is not executed, and the main `callback` is
		 * immediately called with the error.
		 *
		 * @name waterfall
		 * @static
		 * @memberOf module:ControlFlow
		 * @method
		 * @category Control Flow
		 * @param {Array} tasks - An array of functions to run, each function is passed
		 * a `callback(err, result1, result2, ...)` it must call on completion. The
		 * first argument is an error (which can be `null`) and any further arguments
		 * will be passed as arguments in order to the next task.
		 * @param {Function} [callback] - An optional callback to run once all the
		 * functions have completed. This will be passed the results of the last task's
		 * callback. Invoked with (err, [results]).
		 * @returns undefined
		 * @example
		 *
		 * async.waterfall([
		 *     function(callback) {
		 *         callback(null, 'one', 'two');
		 *     },
		 *     function(arg1, arg2, callback) {
		 *         // arg1 now equals 'one' and arg2 now equals 'two'
		 *         callback(null, 'three');
		 *     },
		 *     function(arg1, callback) {
		 *         // arg1 now equals 'three'
		 *         callback(null, 'done');
		 *     }
		 * ], function (err, result) {
		 *     // result now equals 'done'
		 * });
		 *
		 * // Or, with named functions:
		 * async.waterfall([
		 *     myFirstFunction,
		 *     mySecondFunction,
		 *     myLastFunction,
		 * ], function (err, result) {
		 *     // result now equals 'done'
		 * });
		 * function myFirstFunction(callback) {
		 *     callback(null, 'one', 'two');
		 * }
		 * function mySecondFunction(arg1, arg2, callback) {
		 *     // arg1 now equals 'one' and arg2 now equals 'two'
		 *     callback(null, 'three');
		 * }
		 * function myLastFunction(arg1, callback) {
		 *     // arg1 now equals 'three'
		 *     callback(null, 'done');
		 * }
		 */
		
		/**
		 * Async is a utility module which provides straight-forward, powerful functions
		 * for working with asynchronous JavaScript. Although originally designed for
		 * use with [Node.js](http://nodejs.org) and installable via
		 * `npm install --save async`, it can also be used directly in the browser.
		 * @module async
		 */
		
		/**
		 * A collection of `async` functions for manipulating collections, such as
		 * arrays and objects.
		 * @module Collections
		 */
		
		/**
		 * A collection of `async` functions for controlling the flow through a script.
		 * @module ControlFlow
		 */
		
		 /**
		  * A collection of `async` utility functions.
		  * @module Utils
		  */
		
		/**
		 * @hidden
		 */
		var errorCodeLookup;
		/**
		 * Lazily construct error code lookup, since DropboxJS might be loaded *after* BrowserFS (or not at all!)
		 * @hidden
		 */
		function constructErrorCodeLookup() {
		    if (errorCodeLookup) {
		        return;
		    }
		    errorCodeLookup = {};
		    // This indicates a network transmission error on modern browsers. Internet Explorer might cause this code to be reported on some API server errors.
		    errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO;
		    // This happens when the contentHash parameter passed to a Dropbox.Client#readdir or Dropbox.Client#stat matches the most recent content, so the API call response is omitted, to save bandwidth.
		    // errorCodeLookup[Dropbox.ApiError.NO_CONTENT];
		    // The error property on {Dropbox.ApiError#response} should indicate which input parameter is invalid and why.
		    errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL;
		    // The OAuth token used for the request will never become valid again, so the user should be re-authenticated.
		    errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM;
		    // This indicates a bug in dropbox.js and should never occur under normal circumstances.
		    // ^ Actually, that's false. This occurs when you try to move folders to themselves, or move a file over another file.
		    errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM;
		    // This happens when trying to read from a non-existing file, readdir a non-existing directory, write a file into a non-existing directory, etc.
		    errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT;
		    // This indicates a bug in dropbox.js and should never occur under normal circumstances.
		    errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL;
		    // This happens when a Dropbox.Client#readdir or Dropbox.Client#stat call would return more than a maximum amount of directory entries.
		    errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL;
		    // This is used by some backend methods to indicate that the client needs to download server-side changes and perform conflict resolution. Under normal usage, errors with this code should never surface to the code using dropbox.js.
		    errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL;
		    // Status value indicating that the application is making too many requests.
		    errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY;
		    // The request should be retried after some time.
		    errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY;
		    // Status value indicating that the user's Dropbox is over its storage quota.
		    errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
		}
		/**
		 * @hidden
		 */
		function isFileInfo(cache) {
		    return cache && cache.stat.isFile;
		}
		/**
		 * @hidden
		 */
		function isDirInfo(cache) {
		    return cache && cache.stat.isFolder;
		}
		/**
		 * @hidden
		 */
		function isArrayBuffer(ab) {
		    // Accept null / undefined, too.
		    return ab === null || ab === undefined || (typeof (ab) === 'object' && typeof (ab['byteLength']) === 'number');
		}
		/**
		 * Wraps a Dropbox client and caches operations.
		 * @hidden
		 */
		var CachedDropboxClient = function CachedDropboxClient(client) {
		    this._cache = {};
		    this._client = client;
		};
		CachedDropboxClient.prototype.readdir = function readdir (p, cb) {
		        var this$1$1 = this;
		
		    var cacheInfo = this.getCachedDirInfo(p);
		    this._wrap(function (interceptCb) {
		        if (cacheInfo !== null && cacheInfo.contents) {
		            this$1$1._client.readdir(p, {
		                contentHash: cacheInfo.stat.contentHash
		            }, interceptCb);
		        }
		        else {
		            this$1$1._client.readdir(p, interceptCb);
		        }
		    }, function (err, filenames, stat, folderEntries) {
		        if (err) {
		            if (err.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
		                cb(null, cacheInfo.contents.slice(0));
		            }
		            else {
		                cb(err);
		            }
		        }
		        else {
		            this$1$1.updateCachedDirInfo(p, stat, filenames.slice(0));
		            folderEntries.forEach(function (entry) {
		                this$1$1.updateCachedInfo(path.join(p, entry.name), entry);
		            });
		            cb(null, filenames);
		        }
		    });
		};
		CachedDropboxClient.prototype.remove = function remove (p, cb) {
		        var this$1$1 = this;
		
		    this._wrap(function (interceptCb) {
		        this$1$1._client.remove(p, interceptCb);
		    }, function (err, stat) {
		        if (!err) {
		            this$1$1.updateCachedInfo(p, stat);
		        }
		        cb(err);
		    });
		};
		CachedDropboxClient.prototype.move = function move (src, dest, cb) {
		        var this$1$1 = this;
		
		    this._wrap(function (interceptCb) {
		        this$1$1._client.move(src, dest, interceptCb);
		    }, function (err, stat) {
		        if (!err) {
		            this$1$1.deleteCachedInfo(src);
		            this$1$1.updateCachedInfo(dest, stat);
		        }
		        cb(err);
		    });
		};
		CachedDropboxClient.prototype.stat = function stat (p, cb) {
		        var this$1$1 = this;
		
		    this._wrap(function (interceptCb) {
		        this$1$1._client.stat(p, interceptCb);
		    }, function (err, stat) {
		        if (!err) {
		            this$1$1.updateCachedInfo(p, stat);
		        }
		        cb(err, stat);
		    });
		};
		CachedDropboxClient.prototype.readFile = function readFile (p, cb) {
		        var this$1$1 = this;
		
		    var cacheInfo = this.getCachedFileInfo(p);
		    if (cacheInfo !== null && cacheInfo.contents !== null) {
		        // Try to use cached info; issue a stat to see if contents are up-to-date.
		        this.stat(p, function (error, stat) {
		            if (error) {
		                cb(error);
		            }
		            else if (stat.contentHash === cacheInfo.stat.contentHash) {
		                // No file changes.
		                cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
		            }
		            else {
		                // File changes; rerun to trigger actual readFile.
		                this$1$1.readFile(p, cb);
		            }
		        });
		    }
		    else {
		        this._wrap(function (interceptCb) {
		            this$1$1._client.readFile(p, { arrayBuffer: true }, interceptCb);
		        }, function (err, contents, stat) {
		            if (!err) {
		                this$1$1.updateCachedInfo(p, stat, contents.slice(0));
		            }
		            cb(err, contents, stat);
		        });
		    }
		};
		CachedDropboxClient.prototype.writeFile = function writeFile (p, contents, cb) {
		        var this$1$1 = this;
		
		    this._wrap(function (interceptCb) {
		        this$1$1._client.writeFile(p, contents, interceptCb);
		    }, function (err, stat) {
		        if (!err) {
		            this$1$1.updateCachedInfo(p, stat, contents.slice(0));
		        }
		        cb(err, stat);
		    });
		};
		CachedDropboxClient.prototype.mkdir = function mkdir (p, cb) {
		        var this$1$1 = this;
		
		    this._wrap(function (interceptCb) {
		        this$1$1._client.mkdir(p, interceptCb);
		    }, function (err, stat) {
		        if (!err) {
		            this$1$1.updateCachedInfo(p, stat, []);
		        }
		        cb(err);
		    });
		};
		/**
		 * Wraps an operation such that we retry a failed operation 3 times.
		 * Necessary to deal with Dropbox rate limiting.
		 *
		 * @param performOp Function that performs the operation. Will be called up to three times.
		 * @param cb Called when the operation succeeds, fails in a non-temporary manner, or fails three times.
		 */
		CachedDropboxClient.prototype._wrap = function _wrap (performOp, cb) {
		    var numRun = 0;
		    var interceptCb = function (error) {
		        // Timeout duration, in seconds.
		        var timeoutDuration = 2;
		        if (error && 3 > (++numRun)) {
		            switch (error.status) {
		                case Dropbox.ApiError.SERVER_ERROR:
		                case Dropbox.ApiError.NETWORK_ERROR:
		                case Dropbox.ApiError.RATE_LIMITED:
		                    setTimeout(function () {
		                        performOp(interceptCb);
		                    }, timeoutDuration * 1000);
		                    break;
		                default:
		                    cb.apply(null, arguments);
		                    break;
		            }
		        }
		        else {
		            cb.apply(null, arguments);
		        }
		    };
		    performOp(interceptCb);
		};
		CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo (p) {
		    return this._cache[p.toLowerCase()];
		};
		CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo (p, cache) {
		    this._cache[p.toLowerCase()] = cache;
		};
		CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo (p) {
		    delete this._cache[p.toLowerCase()];
		};
		CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo (p) {
		    var info = this.getCachedInfo(p);
		    if (isDirInfo(info)) {
		        return info;
		    }
		    else {
		        return null;
		    }
		};
		CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo (p) {
		    var info = this.getCachedInfo(p);
		    if (isFileInfo(info)) {
		        return info;
		    }
		    else {
		        return null;
		    }
		};
		CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo (p, stat, contents) {
		        if ( contents === void 0 ) contents = null;
		
		    var cachedInfo = this.getCachedInfo(p);
		    // Dropbox uses the *contentHash* property for directories.
		    // Ignore stat objects w/o a contentHash defined; those actually exist!!!
		    // (Example: readdir returns an array of stat objs; stat objs for dirs in that context have no contentHash)
		    if (stat.contentHash !== null && (cachedInfo === undefined || cachedInfo.stat.contentHash !== stat.contentHash)) {
		        this.putCachedInfo(p, {
		            stat: stat,
		            contents: contents
		        });
		    }
		};
		CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo (p, stat, contents) {
		        if ( contents === void 0 ) contents = null;
		
		    var cachedInfo = this.getCachedInfo(p);
		    // Dropbox uses the *versionTag* property for files.
		    // Ignore stat objects w/o a versionTag defined.
		    if (stat.versionTag !== null && (cachedInfo === undefined || cachedInfo.stat.versionTag !== stat.versionTag)) {
		        this.putCachedInfo(p, {
		            stat: stat,
		            contents: contents
		        });
		    }
		};
		CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo (p, stat, contents) {
		        if ( contents === void 0 ) contents = null;
		
		    if (stat.isFile && isArrayBuffer(contents)) {
		        this.updateCachedFileInfo(p, stat, contents);
		    }
		    else if (stat.isFolder && Array.isArray(contents)) {
		        this.updateCachedDirInfo(p, stat, contents);
		    }
		};
		var DropboxFile = (function (PreloadFile$$1) {
		    function DropboxFile(_fs, _path, _flag, _stat, contents) {
		        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
		    }
		
		    if ( PreloadFile$$1 ) DropboxFile.__proto__ = PreloadFile$$1;
		    DropboxFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    DropboxFile.prototype.constructor = DropboxFile;
		    DropboxFile.prototype.sync = function sync (cb) {
		        var this$1$1 = this;
		
		        if (this.isDirty()) {
		            var buffer$$1 = this.getBuffer(), arrayBuffer = buffer2ArrayBuffer(buffer$$1);
		            this._fs._writeFileStrict(this.getPath(), arrayBuffer, function (e) {
		                if (!e) {
		                    this$1$1.resetDirty();
		                }
		                cb(e);
		            });
		        }
		        else {
		            cb();
		        }
		    };
		    DropboxFile.prototype.close = function close (cb) {
		        this.sync(cb);
		    };
		
		    return DropboxFile;
		}(PreloadFile));
		/**
		 * A read/write file system backed by Dropbox cloud storage.
		 *
		 * Uses the Dropbox V1 API.
		 *
		 * NOTE: You must use the v0.10 version of the [Dropbox JavaScript SDK](https://www.npmjs.com/package/dropbox).
		 */
		var DropboxFileSystem = (function (BaseFileSystem$$1) {
		    function DropboxFileSystem(client, deprecateMsg) {
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        BaseFileSystem$$1.call(this);
		        this._client = new CachedDropboxClient(client);
		        deprecationMessage(deprecateMsg, DropboxFileSystem.Name, { client: "authenticated dropbox client instance" });
		        constructErrorCodeLookup();
		    }
		
		    if ( BaseFileSystem$$1 ) DropboxFileSystem.__proto__ = BaseFileSystem$$1;
		    DropboxFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    DropboxFileSystem.prototype.constructor = DropboxFileSystem;
		    /**
		     * Creates a new DropboxFileSystem instance with the given options.
		     * Must be given an *authenticated* DropboxJS client from the old v0.10 version of the Dropbox JS SDK.
		     */
		    DropboxFileSystem.Create = function Create (opts, cb) {
		        cb(null, new DropboxFileSystem(opts.client, false));
		    };
		    DropboxFileSystem.isAvailable = function isAvailable () {
		        // Checks if the Dropbox library is loaded.
		        return typeof Dropbox !== 'undefined';
		    };
		    DropboxFileSystem.prototype.getName = function getName () {
		        return DropboxFileSystem.Name;
		    };
		    DropboxFileSystem.prototype.isReadOnly = function isReadOnly () {
		        return false;
		    };
		    // Dropbox doesn't support symlinks, properties, or synchronous calls
		    DropboxFileSystem.prototype.supportsSymlinks = function supportsSymlinks () {
		        return false;
		    };
		    DropboxFileSystem.prototype.supportsProps = function supportsProps () {
		        return false;
		    };
		    DropboxFileSystem.prototype.supportsSynch = function supportsSynch () {
		        return false;
		    };
		    DropboxFileSystem.prototype.empty = function empty (mainCb) {
		        var this$1$1 = this;
		
		        this._client.readdir('/', function (error, files) {
		            if (error) {
		                mainCb(this$1$1.convert(error, '/'));
		            }
		            else {
		                var deleteFile = function (file, cb) {
		                    var p = path.join('/', file);
		                    this$1$1._client.remove(p, function (err) {
		                        cb(err ? this$1$1.convert(err, p) : null);
		                    });
		                };
		                var finished = function (err) {
		                    if (err) {
		                        mainCb(err);
		                    }
		                    else {
		                        mainCb();
		                    }
		                };
		                // XXX: <any> typing is to get around overly-restrictive ErrorCallback typing.
		                eachLimit(files, deleteFile, finished);
		            }
		        });
		    };
		    DropboxFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
		        var this$1$1 = this;
		
		        this._client.move(oldPath, newPath, function (error) {
		            if (error) {
		                // the move is permitted if newPath is a file.
		                // Check if this is the case, and remove if so.
		                this$1$1._client.stat(newPath, function (error2, stat) {
		                    if (error2 || stat.isFolder) {
		                        var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
		                        cb(this$1$1.convert(error, missingPath));
		                    }
		                    else {
		                        // Delete file, repeat rename.
		                        this$1$1._client.remove(newPath, function (error2) {
		                            if (error2) {
		                                cb(this$1$1.convert(error2, newPath));
		                            }
		                            else {
		                                this$1$1.rename(oldPath, newPath, cb);
		                            }
		                        });
		                    }
		                });
		            }
		            else {
		                cb();
		            }
		        });
		    };
		    DropboxFileSystem.prototype.stat = function stat (path$$1, isLstat, cb) {
		        var this$1$1 = this;
		
		        // Ignore lstat case -- Dropbox doesn't support symlinks
		        // Stat the file
		        this._client.stat(path$$1, function (error, stat) {
		            if (error) {
		                cb(this$1$1.convert(error, path$$1));
		            }
		            else if (stat && stat.isRemoved) {
		                // Dropbox keeps track of deleted files, so if a file has existed in the
		                // past but doesn't any longer, you wont get an error
		                cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
		            }
		            else {
		                var stats = new Stats(this$1$1._statType(stat), stat.size);
		                return cb(null, stats);
		            }
		        });
		    };
		    DropboxFileSystem.prototype.open = function open (path$$1, flags, mode, cb) {
		        var this$1$1 = this;
		
		        // Try and get the file's contents
		        this._client.readFile(path$$1, function (error, content, dbStat) {
		            if (error) {
		                // If the file's being opened for reading and doesn't exist, return an
		                // error
		                if (flags.isReadable()) {
		                    cb(this$1$1.convert(error, path$$1));
		                }
		                else {
		                    switch (error.status) {
		                        // If it's being opened for writing or appending, create it so that
		                        // it can be written to
		                        case Dropbox.ApiError.NOT_FOUND:
		                            var ab = new ArrayBuffer(0);
		                            return this$1$1._writeFileStrict(path$$1, ab, function (error2, stat) {
		                                if (error2) {
		                                    cb(error2);
		                                }
		                                else {
		                                    var file = this$1$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));
		                                    cb(null, file);
		                                }
		                            });
		                        default:
		                            return cb(this$1$1.convert(error, path$$1));
		                    }
		                }
		            }
		            else {
		                // No error
		                var buffer$$1;
		                // Dropbox.js seems to set `content` to `null` rather than to an empty
		                // buffer when reading an empty file. Not sure why this is.
		                if (content === null) {
		                    buffer$$1 = emptyBuffer();
		                }
		                else {
		                    buffer$$1 = arrayBuffer2Buffer(content);
		                }
		                var file = this$1$1._makeFile(path$$1, flags, dbStat, buffer$$1);
		                return cb(null, file);
		            }
		        });
		    };
		    DropboxFileSystem.prototype._writeFileStrict = function _writeFileStrict (p, data, cb) {
		        var this$1$1 = this;
		
		        var parent = path.dirname(p);
		        this.stat(parent, false, function (error, stat) {
		            if (error) {
		                cb(ApiError.FileError(ErrorCode.ENOENT, parent));
		            }
		            else {
		                this$1$1._client.writeFile(p, data, function (error2, stat) {
		                    if (error2) {
		                        cb(this$1$1.convert(error2, p));
		                    }
		                    else {
		                        cb(null, stat);
		                    }
		                });
		            }
		        });
		    };
		    /**
		     * Private
		     * Returns a BrowserFS object representing the type of a Dropbox.js stat object
		     */
		    DropboxFileSystem.prototype._statType = function _statType (stat) {
		        return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
		    };
		    /**
		     * Private
		     * Returns a BrowserFS object representing a File, created from the data
		     * returned by calls to the Dropbox API.
		     */
		    DropboxFileSystem.prototype._makeFile = function _makeFile (path$$1, flag, stat, buffer$$1) {
		        var type = this._statType(stat);
		        var stats = new Stats(type, stat.size);
		        return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
		    };
		    /**
		     * Private
		     * Delete a file or directory from Dropbox
		     * isFile should reflect which call was made to remove the it (`unlink` or
		     * `rmdir`). If this doesn't match what's actually at `path`, an error will be
		     * returned
		     */
		    DropboxFileSystem.prototype._remove = function _remove (path$$1, cb, isFile) {
		        var this$1$1 = this;
		
		        this._client.stat(path$$1, function (error, stat) {
		            if (error) {
		                cb(this$1$1.convert(error, path$$1));
		            }
		            else {
		                if (stat.isFile && !isFile) {
		                    cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
		                }
		                else if (!stat.isFile && isFile) {
		                    cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
		                }
		                else {
		                    this$1$1._client.remove(path$$1, function (error) {
		                        if (error) {
		                            cb(this$1$1.convert(error, path$$1));
		                        }
		                        else {
		                            cb(null);
		                        }
		                    });
		                }
		            }
		        });
		    };
		    /**
		     * Delete a file
		     */
		    DropboxFileSystem.prototype.unlink = function unlink (path$$1, cb) {
		        this._remove(path$$1, cb, true);
		    };
		    /**
		     * Delete a directory
		     */
		    DropboxFileSystem.prototype.rmdir = function rmdir (path$$1, cb) {
		        this._remove(path$$1, cb, false);
		    };
		    /**
		     * Create a directory
		     */
		    DropboxFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
		        var this$1$1 = this;
		
		        // Dropbox.js' client.mkdir() behaves like `mkdir -p`, i.e. it creates a
		        // directory and all its ancestors if they don't exist.
		        // Node's fs.mkdir() behaves like `mkdir`, i.e. it throws an error if an attempt
		        // is made to create a directory without a parent.
		        // To handle this inconsistency, a check for the existence of `path`'s parent
		        // must be performed before it is created, and an error thrown if it does
		        // not exist
		        var parent = path.dirname(p);
		        this._client.stat(parent, function (error, stat) {
		            if (error) {
		                cb(this$1$1.convert(error, parent));
		            }
		            else {
		                this$1$1._client.mkdir(p, function (error) {
		                    if (error) {
		                        cb(ApiError.FileError(ErrorCode.EEXIST, p));
		                    }
		                    else {
		                        cb(null);
		                    }
		                });
		            }
		        });
		    };
		    /**
		     * Get the names of the files in a directory
		     */
		    DropboxFileSystem.prototype.readdir = function readdir (path$$1, cb) {
		        var this$1$1 = this;
		
		        this._client.readdir(path$$1, function (error, files) {
		            if (error) {
		                return cb(this$1$1.convert(error));
		            }
		            else {
		                return cb(null, files);
		            }
		        });
		    };
		    /**
		     * Converts a Dropbox-JS error into a BFS error.
		     */
		    DropboxFileSystem.prototype.convert = function convert (err, path$$1) {
		        if ( path$$1 === void 0 ) path$$1 = null;
		
		        var errorCode = errorCodeLookup[err.status];
		        if (errorCode === undefined) {
		            errorCode = ErrorCode.EIO;
		        }
		        if (!path$$1) {
		            return new ApiError(errorCode);
		        }
		        else {
		            return ApiError.FileError(errorCode, path$$1);
		        }
		    };
		
		    return DropboxFileSystem;
		}(BaseFileSystem));
		
		DropboxFileSystem.Name = "Dropbox";
		DropboxFileSystem.Options = {
		    client: {
		        type: "object",
		        description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
		        validator: function (opt, cb) {
		            if (opt.isAuthenticated && opt.isAuthenticated()) {
		                cb();
		            }
		            else {
		                cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
		            }
		        }
		    }
		};
		
		/**
		 * @hidden
		 */
		function convertError(e, path$$1) {
		    if ( path$$1 === void 0 ) path$$1 = '';
		
		    var errno = e.errno;
		    var parent = e.node;
		    var paths = [];
		    while (parent) {
		        paths.unshift(parent.name);
		        if (parent === parent.parent) {
		            break;
		        }
		        parent = parent.parent;
		    }
		    return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? '/' + paths.join('/') : path$$1);
		}
		var EmscriptenFile = (function (BaseFile$$1) {
		    function EmscriptenFile(_fs, _FS, _path, _stream) {
		        BaseFile$$1.call(this);
		        this._fs = _fs;
		        this._FS = _FS;
		        this._path = _path;
		        this._stream = _stream;
		    }
		
		    if ( BaseFile$$1 ) EmscriptenFile.__proto__ = BaseFile$$1;
		    EmscriptenFile.prototype = Object.create( BaseFile$$1 && BaseFile$$1.prototype );
		    EmscriptenFile.prototype.constructor = EmscriptenFile;
		    EmscriptenFile.prototype.getPos = function getPos () {
		        return undefined;
		    };
		    EmscriptenFile.prototype.close = function close (cb) {
		        var err = null;
		        try {
		            this.closeSync();
		        }
		        catch (e) {
		            err = e;
		        }
		        finally {
		            cb(err);
		        }
		    };
		    EmscriptenFile.prototype.closeSync = function closeSync () {
		        try {
		            this._FS.close(this._stream);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.stat = function stat (cb) {
		        try {
		            cb(null, this.statSync());
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    EmscriptenFile.prototype.statSync = function statSync () {
		        try {
		            return this._fs.statSync(this._path, false);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.truncate = function truncate (len, cb) {
		        var err = null;
		        try {
		            this.truncateSync(len);
		        }
		        catch (e) {
		            err = e;
		        }
		        finally {
		            cb(err);
		        }
		    };
		    EmscriptenFile.prototype.truncateSync = function truncateSync (len) {
		        try {
		            this._FS.ftruncate(this._stream.fd, len);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.write = function write (buffer$$1, offset, length, position, cb) {
		        try {
		            cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    EmscriptenFile.prototype.writeSync = function writeSync (buffer$$1, offset, length, position) {
		        try {
		            var u8 = buffer2Uint8array(buffer$$1);
		            // Emscripten is particular about what position is set to.
		            var emPosition = position === null ? undefined : position;
		            return this._FS.write(this._stream, u8, offset, length, emPosition);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.read = function read (buffer$$1, offset, length, position, cb) {
		        try {
		            cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    EmscriptenFile.prototype.readSync = function readSync (buffer$$1, offset, length, position) {
		        try {
		            var u8 = buffer2Uint8array(buffer$$1);
		            // Emscripten is particular about what position is set to.
		            var emPosition = position === null ? undefined : position;
		            return this._FS.read(this._stream, u8, offset, length, emPosition);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.sync = function sync (cb) {
		        // NOP.
		        cb();
		    };
		    EmscriptenFile.prototype.syncSync = function syncSync () {
		        // NOP.
		    };
		    EmscriptenFile.prototype.chown = function chown (uid, gid, cb) {
		        var err = null;
		        try {
		            this.chownSync(uid, gid);
		        }
		        catch (e) {
		            err = e;
		        }
		        finally {
		            cb(err);
		        }
		    };
		    EmscriptenFile.prototype.chownSync = function chownSync (uid, gid) {
		        try {
		            this._FS.fchown(this._stream.fd, uid, gid);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.chmod = function chmod (mode, cb) {
		        var err = null;
		        try {
		            this.chmodSync(mode);
		        }
		        catch (e) {
		            err = e;
		        }
		        finally {
		            cb(err);
		        }
		    };
		    EmscriptenFile.prototype.chmodSync = function chmodSync (mode) {
		        try {
		            this._FS.fchmod(this._stream.fd, mode);
		        }
		        catch (e) {
		            throw convertError(e, this._path);
		        }
		    };
		    EmscriptenFile.prototype.utimes = function utimes (atime, mtime, cb) {
		        var err = null;
		        try {
		            this.utimesSync(atime, mtime);
		        }
		        catch (e) {
		            err = e;
		        }
		        finally {
		            cb(err);
		        }
		    };
		    EmscriptenFile.prototype.utimesSync = function utimesSync (atime, mtime) {
		        this._fs.utimesSync(this._path, atime, mtime);
		    };
		
		    return EmscriptenFile;
		}(BaseFile));
		/**
		 * Mounts an Emscripten file system into the BrowserFS file system.
		 */
		var EmscriptenFileSystem = (function (SynchronousFileSystem$$1) {
		    function EmscriptenFileSystem(_FS) {
		        SynchronousFileSystem$$1.call(this);
		        this._FS = _FS;
		    }
		
		    if ( SynchronousFileSystem$$1 ) EmscriptenFileSystem.__proto__ = SynchronousFileSystem$$1;
		    EmscriptenFileSystem.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
		    EmscriptenFileSystem.prototype.constructor = EmscriptenFileSystem;
		    /**
		     * Create an EmscriptenFileSystem instance with the given options.
		     */
		    EmscriptenFileSystem.Create = function Create (opts, cb) {
		        cb(null, new EmscriptenFileSystem(opts.FS));
		    };
		    EmscriptenFileSystem.isAvailable = function isAvailable () { return true; };
		    EmscriptenFileSystem.prototype.getName = function getName () { return this._FS.DB_NAME(); };
		    EmscriptenFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
		    EmscriptenFileSystem.prototype.supportsLinks = function supportsLinks () { return true; };
		    EmscriptenFileSystem.prototype.supportsProps = function supportsProps () { return true; };
		    EmscriptenFileSystem.prototype.supportsSynch = function supportsSynch () { return true; };
		    EmscriptenFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
		        try {
		            this._FS.rename(oldPath, newPath);
		        }
		        catch (e) {
		            if (e.errno === ErrorCode.ENOENT) {
		                throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
		            }
		            else {
		                throw convertError(e);
		            }
		        }
		    };
		    EmscriptenFileSystem.prototype.statSync = function statSync (p, isLstat) {
		        try {
		            var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
		            var itemType = this.modeToFileType(stats.mode);
		            return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.openSync = function openSync (p, flag, mode) {
		        try {
		            var stream = this._FS.open(p, flag.getFlagString(), mode);
		            if (this._FS.isDir(stream.node.mode)) {
		                this._FS.close(stream);
		                throw ApiError.EISDIR(p);
		            }
		            return new EmscriptenFile(this, this._FS, p, stream);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.unlinkSync = function unlinkSync (p) {
		        try {
		            this._FS.unlink(p);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.rmdirSync = function rmdirSync (p) {
		        try {
		            this._FS.rmdir(p);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
		        try {
		            this._FS.mkdir(p, mode);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.readdirSync = function readdirSync (p) {
		        try {
		            // Emscripten returns items for '.' and '..'. Node does not.
		            return this._FS.readdir(p).filter(function (p) { return p !== '.' && p !== '..'; });
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.truncateSync = function truncateSync (p, len) {
		        try {
		            this._FS.truncate(p, len);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.readFileSync = function readFileSync (p, encoding, flag) {
		        try {
		            var data = this._FS.readFile(p, { flags: flag.getFlagString() });
		            var buff = uint8Array2Buffer(data);
		            if (encoding) {
		                return buff.toString(encoding);
		            }
		            else {
		                return buff;
		            }
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.writeFileSync = function writeFileSync (p, data, encoding, flag, mode) {
		        try {
		            if (encoding) {
		                data = Buffer.from(data, encoding);
		            }
		            var u8 = buffer2Uint8array(data);
		            this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: 'binary' });
		            this._FS.chmod(p, mode);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
		        try {
		            isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
		        try {
		            isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
		        try {
		            this._FS.symlink(srcpath, dstpath);
		        }
		        catch (e) {
		            throw convertError(e);
		        }
		    };
		    EmscriptenFileSystem.prototype.readlinkSync = function readlinkSync (p) {
		        try {
		            return this._FS.readlink(p);
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.utimesSync = function utimesSync (p, atime, mtime) {
		        try {
		            this._FS.utime(p, atime.getTime(), mtime.getTime());
		        }
		        catch (e) {
		            throw convertError(e, p);
		        }
		    };
		    EmscriptenFileSystem.prototype.modeToFileType = function modeToFileType (mode) {
		        if (this._FS.isDir(mode)) {
		            return FileType.DIRECTORY;
		        }
		        else if (this._FS.isFile(mode)) {
		            return FileType.FILE;
		        }
		        else if (this._FS.isLink(mode)) {
		            return FileType.SYMLINK;
		        }
		        else {
		            throw ApiError.EPERM(("Invalid mode: " + mode));
		        }
		    };
		
		    return EmscriptenFileSystem;
		}(SynchronousFileSystem));
		
		EmscriptenFileSystem.Name = "EmscriptenFileSystem";
		EmscriptenFileSystem.Options = {
		    FS: {
		        type: "object",
		        description: "The Emscripten file system to use (the `FS` variable)"
		    }
		};
		
		/**
		 * The FolderAdapter file system wraps a file system, and scopes all interactions to a subfolder of that file system.
		 *
		 * Example: Given a file system `foo` with folder `bar` and file `bar/baz`...
		 *
		 * ```javascript
		 * BrowserFS.configure({
		 *   fs: "FolderAdapter",
		 *   options: {
		 *     folder: "bar",
		 *     wrapped: foo
		 *   }
		 * }, function(e) {
		 *   var fs = BrowserFS.BFSRequire('fs');
		 *   fs.readdirSync('/'); // ['baz']
		 * });
		 * ```
		 */
		var FolderAdapter = (function (BaseFileSystem$$1) {
		    function FolderAdapter(folder, wrapped) {
		        BaseFileSystem$$1.call(this);
		        this._folder = folder;
		        this._wrapped = wrapped;
		    }
		
		    if ( BaseFileSystem$$1 ) FolderAdapter.__proto__ = BaseFileSystem$$1;
		    FolderAdapter.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    FolderAdapter.prototype.constructor = FolderAdapter;
		    /**
		     * Creates a FolderAdapter instance with the given options.
		     */
		    FolderAdapter.Create = function Create (opts, cb) {
		        cb(null, new FolderAdapter(opts.folder, opts.wrapped));
		    };
		    FolderAdapter.isAvailable = function isAvailable () {
		        return true;
		    };
		    /**
		     * Initialize the file system. Ensures that the wrapped file system
		     * has the given folder.
		     */
		    FolderAdapter.prototype.initialize = function initialize (cb) {
		        var this$1$1 = this;
		
		        this._wrapped.exists(this._folder, function (exists) {
		            if (exists) {
		                cb();
		            }
		            else if (this$1$1._wrapped.isReadOnly()) {
		                cb(ApiError.ENOENT(this$1$1._folder));
		            }
		            else {
		                this$1$1._wrapped.mkdir(this$1$1._folder, 0x1ff, cb);
		            }
		        });
		    };
		    FolderAdapter.prototype.getName = function getName () { return this._wrapped.getName(); };
		    FolderAdapter.prototype.isReadOnly = function isReadOnly () { return this._wrapped.isReadOnly(); };
		    FolderAdapter.prototype.supportsProps = function supportsProps () { return this._wrapped.supportsProps(); };
		    FolderAdapter.prototype.supportsSynch = function supportsSynch () { return this._wrapped.supportsSynch(); };
		    FolderAdapter.prototype.supportsLinks = function supportsLinks () { return false; };
		
		    return FolderAdapter;
		}(BaseFileSystem));
		
		FolderAdapter.Name = "FolderAdapter";
		FolderAdapter.Options = {
		    folder: {
		        type: "string",
		        description: "The folder to use as the root directory"
		    },
		    wrapped: {
		        type: "object",
		        description: "The file system to wrap"
		    }
		};
		/**
		 * @hidden
		 */
		function translateError(folder, e) {
		    if (e !== null && typeof e === 'object') {
		        var err = e;
		        var p = err.path;
		        if (p) {
		            p = '/' + path.relative(folder, p);
		            err.message = err.message.replace(err.path, p);
		            err.path = p;
		        }
		    }
		    return e;
		}
		/**
		 * @hidden
		 */
		function wrapCallback(folder, cb) {
		    if (typeof cb === 'function') {
		        return function (err) {
		            if (arguments.length > 0) {
		                arguments[0] = translateError(folder, err);
		            }
		            cb.apply(null, arguments);
		        };
		    }
		    else {
		        return cb;
		    }
		}
		/**
		 * @hidden
		 */
		function wrapFunction(name, wrapFirst, wrapSecond) {
		    if (name.slice(name.length - 4) !== 'Sync') {
		        // Async function. Translate error in callback.
		        return function () {
		            if (arguments.length > 0) {
		                if (wrapFirst) {
		                    arguments[0] = path.join(this._folder, arguments[0]);
		                }
		                if (wrapSecond) {
		                    arguments[1] = path.join(this._folder, arguments[1]);
		                }
		                arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
		            }
		            return this._wrapped[name].apply(this._wrapped, arguments);
		        };
		    }
		    else {
		        // Sync function. Translate error in catch.
		        return function () {
		            try {
		                if (wrapFirst) {
		                    arguments[0] = path.join(this._folder, arguments[0]);
		                }
		                if (wrapSecond) {
		                    arguments[1] = path.join(this._folder, arguments[1]);
		                }
		                return this._wrapped[name].apply(this._wrapped, arguments);
		            }
		            catch (e) {
		                throw translateError(this._folder, e);
		            }
		        };
		    }
		}
		// First argument is a path.
		['diskSpace', 'stat', 'statSync', 'open', 'openSync', 'unlink', 'unlinkSync',
		    'rmdir', 'rmdirSync', 'mkdir', 'mkdirSync', 'readdir', 'readdirSync', 'exists',
		    'existsSync', 'realpath', 'realpathSync', 'truncate', 'truncateSync', 'readFile',
		    'readFileSync', 'writeFile', 'writeFileSync', 'appendFile', 'appendFileSync',
		    'chmod', 'chmodSync', 'chown', 'chownSync', 'utimes', 'utimesSync', 'readlink',
		    'readlinkSync'].forEach(function (name) {
		    FolderAdapter.prototype[name] = wrapFunction(name, true, false);
		});
		// First and second arguments are paths.
		['rename', 'renameSync', 'link', 'linkSync', 'symlink', 'symlinkSync'].forEach(function (name) {
		    FolderAdapter.prototype[name] = wrapFunction(name, true, true);
		});
		
		/**
		 * @hidden
		 */
		var toExport;
		if (typeof (window) !== 'undefined') {
		    toExport = window;
		}
		else if (typeof (self) !== 'undefined') {
		    toExport = self;
		}
		else {
		    toExport = global;
		}
		var global$1 = toExport;
		
		/**
		 * @hidden
		 */
		function isDirectoryEntry(entry) {
		    return entry.isDirectory;
		}
		/**
		 * @hidden
		 */
		var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
		/**
		 * @hidden
		 */
		function _requestQuota(type, size, success, errorCallback) {
		    // We cast navigator and window to '<any>' because everything here is
		    // nonstandard functionality, despite the fact that Chrome has the only
		    // implementation of the HTML5FS and is likely driving the standardization
		    // process. Thus, these objects defined off of navigator and window are not
		    // present in the DefinitelyTyped TypeScript typings for FileSystem.
		    if (typeof navigator['webkitPersistentStorage'] !== 'undefined') {
		        switch (type) {
		            case global$1.PERSISTENT:
		                navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
		                break;
		            case global$1.TEMPORARY:
		                navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
		                break;
		            default:
		                errorCallback(new TypeError(("Invalid storage type: " + type)));
		                break;
		        }
		    }
		    else {
		        global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
		    }
		}
		/**
		 * @hidden
		 */
		function _toArray(list) {
		    return Array.prototype.slice.call(list || [], 0);
		}
		/**
		 * Converts the given DOMError into an appropriate ApiError.
		 * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError
		 * @hidden
		 */
		function convertError$1(err, p, expectedDir) {
		    switch (err.name) {
		        /* The user agent failed to create a file or directory due to the existence of a file or
		            directory with the same path.  */
		        case "PathExistsError":
		            return ApiError.EEXIST(p);
		        /* The operation failed because it would cause the application to exceed its storage quota.  */
		        case 'QuotaExceededError':
		            return ApiError.FileError(ErrorCode.ENOSPC, p);
		        /*  A required file or directory could not be found at the time an operation was processed.   */
		        case 'NotFoundError':
		            return ApiError.ENOENT(p);
		        /* This is a security error code to be used in situations not covered by any other error codes.
		            - A required file was unsafe for access within a Web application
		            - Too many calls are being made on filesystem resources */
		        case 'SecurityError':
		            return ApiError.FileError(ErrorCode.EACCES, p);
		        /* The modification requested was illegal. Examples of invalid modifications include moving a
		            directory into its own child, moving a file into its parent directory without changing its name,
		            or copying a directory to a path occupied by a file.  */
		        case 'InvalidModificationError':
		            return ApiError.FileError(ErrorCode.EPERM, p);
		        /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type
		            [e.g. is a DirectoryEntry when the user requested a FileEntry].  */
		        case 'TypeMismatchError':
		            return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);
		        /* A path or URL supplied to the API was malformed.  */
		        case "EncodingError":
		        /* An operation depended on state cached in an interface object, but that state that has changed
		            since it was read from disk.  */
		        case "InvalidStateError":
		        /* The user attempted to write to a file or directory which could not be modified due to the state
		            of the underlying filesystem.  */
		        case "NoModificationAllowedError":
		        default:
		            return ApiError.FileError(ErrorCode.EINVAL, p);
		    }
		}
		// A note about getFile and getDirectory options:
		// These methods are called at numerous places in this file, and are passed
		// some combination of these two options:
		//   - create: If true, the entry will be created if it doesn't exist.
		//             If false, an error will be thrown if it doesn't exist.
		//   - exclusive: If true, only create the entry if it doesn't already exist,
		//                and throw an error if it does.
		var HTML5FSFile = (function (PreloadFile$$1) {
		    function HTML5FSFile(fs, entry, path$$1, flag, stat, contents) {
		        PreloadFile$$1.call(this, fs, path$$1, flag, stat, contents);
		        this._entry = entry;
		    }
		
		    if ( PreloadFile$$1 ) HTML5FSFile.__proto__ = PreloadFile$$1;
		    HTML5FSFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    HTML5FSFile.prototype.constructor = HTML5FSFile;
		    HTML5FSFile.prototype.sync = function sync (cb) {
		        var this$1$1 = this;
		
		        if (!this.isDirty()) {
		            return cb();
		        }
		        this._entry.createWriter(function (writer) {
		            var buffer$$1 = this$1$1.getBuffer();
		            var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
		            var length = blob.size;
		            writer.onwriteend = function (err) {
		                writer.onwriteend = null;
		                writer.onerror = null;
		                writer.truncate(length);
		                this$1$1.resetDirty();
		                cb();
		            };
		            writer.onerror = function (err) {
		                cb(convertError$1(err, this$1$1.getPath(), false));
		            };
		            writer.write(blob);
		        });
		    };
		    HTML5FSFile.prototype.close = function close (cb) {
		        this.sync(cb);
		    };
		
		    return HTML5FSFile;
		}(PreloadFile));
		/**
		 * A read-write filesystem backed by the HTML5 FileSystem API.
		 *
		 * As the HTML5 FileSystem is only implemented in Blink, this interface is
		 * only available in Chrome.
		 */
		var HTML5FS = (function (BaseFileSystem$$1) {
		    function HTML5FS(size, type, deprecateMsg) {
		        if ( size === void 0 ) size = 5;
		        if ( type === void 0 ) type = global$1.PERSISTENT;
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        BaseFileSystem$$1.call(this);
		        // Convert MB to bytes.
		        this.size = 1024 * 1024 * size;
		        this.type = type;
		        deprecationMessage(deprecateMsg, HTML5FS.Name, { size: size, type: type });
		    }
		
		    if ( BaseFileSystem$$1 ) HTML5FS.__proto__ = BaseFileSystem$$1;
		    HTML5FS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    HTML5FS.prototype.constructor = HTML5FS;
		    /**
		     * Creates an HTML5FS instance with the given options.
		     */
		    HTML5FS.Create = function Create (opts, cb) {
		        var fs = new HTML5FS(opts.size, opts.type, false);
		        fs.allocate(function (e) { return e ? cb(e) : cb(null, fs); }, false);
		    };
		    HTML5FS.isAvailable = function isAvailable () {
		        return !!_getFS;
		    };
		    HTML5FS.prototype.getName = function getName () {
		        return HTML5FS.Name;
		    };
		    HTML5FS.prototype.isReadOnly = function isReadOnly () {
		        return false;
		    };
		    HTML5FS.prototype.supportsSymlinks = function supportsSymlinks () {
		        return false;
		    };
		    HTML5FS.prototype.supportsProps = function supportsProps () {
		        return false;
		    };
		    HTML5FS.prototype.supportsSynch = function supportsSynch () {
		        return false;
		    };
		    /**
		     * **Deprecated. Please use Create() method instead to create and allocate an HTML5FS.**
		     *
		     * Requests a storage quota from the browser to back this FS.
		     * Must be called before file system can be used!
		     */
		    HTML5FS.prototype.allocate = function allocate (cb, deprecateMsg) {
		        var this$1$1 = this;
		        if ( cb === void 0 ) cb = function () { };
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        if (deprecateMsg) {
		            console.warn(("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + (this.type) + ", size: " + (this.size) + "}, cb)' to create and allocate HTML5FS instances."));
		        }
		        var success = function (fs) {
		            this$1$1.fs = fs;
		            cb();
		        };
		        var error = function (err) {
		            cb(convertError$1(err, "/", true));
		        };
		        if (this.type === global$1.PERSISTENT) {
		            _requestQuota(this.type, this.size, function (granted) {
		                _getFS(this$1$1.type, granted, success, error);
		            }, error);
		        }
		        else {
		            _getFS(this.type, this.size, success, error);
		        }
		    };
		    /**
		     * Deletes everything in the FS. Used for testing.
		     * Karma clears the storage after you quit it but not between runs of the test
		     * suite, and the tests expect an empty FS every time.
		     */
		    HTML5FS.prototype.empty = function empty (mainCb) {
		        // Get a list of all entries in the root directory to delete them
		        this._readdir('/', function (err, entries) {
		            if (err) {
		                console.error('Failed to empty FS');
		                mainCb(err);
		            }
		            else {
		                // Called when every entry has been operated on
		                var finished = function (er) {
		                    if (err) {
		                        console.error("Failed to empty FS");
		                        mainCb(err);
		                    }
		                    else {
		                        mainCb();
		                    }
		                };
		                // Removes files and recursively removes directories
		                var deleteEntry = function (entry, cb) {
		                    var succ = function () {
		                        cb();
		                    };
		                    var error = function (err) {
		                        cb(convertError$1(err, entry.fullPath, !entry.isDirectory));
		                    };
		                    if (isDirectoryEntry(entry)) {
		                        entry.removeRecursively(succ, error);
		                    }
		                    else {
		                        entry.remove(succ, error);
		                    }
		                };
		                // Loop through the entries and remove them, then call the callback
		                // when they're all finished.
		                eachLimit(entries, deleteEntry, finished);
		            }
		        });
		    };
		    HTML5FS.prototype.rename = function rename (oldPath, newPath, cb) {
		        var this$1$1 = this;
		
		        var semaphore = 2;
		        var successCount = 0;
		        var root = this.fs.root;
		        var currentPath = oldPath;
		        var error = function (err) {
		            if (--semaphore <= 0) {
		                cb(convertError$1(err, currentPath, false));
		            }
		        };
		        var success = function (file) {
		            if (++successCount === 2) {
		                return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
		            }
		            // SPECIAL CASE: If newPath === oldPath, and the path exists, then
		            // this operation trivially succeeds.
		            if (oldPath === newPath) {
		                return cb();
		            }
		            // Get the new parent directory.
		            currentPath = path.dirname(newPath);
		            root.getDirectory(currentPath, {}, function (parentDir) {
		                currentPath = path.basename(newPath);
		                file.moveTo(parentDir, currentPath, function (entry) { cb(); }, function (err) {
		                    // SPECIAL CASE: If oldPath is a directory, and newPath is a
		                    // file, rename should delete the file and perform the move.
		                    if (file.isDirectory) {
		                        currentPath = newPath;
		                        // Unlink only works on files. Try to delete newPath.
		                        this$1$1.unlink(newPath, function (e) {
		                            if (e) {
		                                // newPath is probably a directory.
		                                error(err);
		                            }
		                            else {
		                                // Recur, now that newPath doesn't exist.
		                                this$1$1.rename(oldPath, newPath, cb);
		                            }
		                        });
		                    }
		                    else {
		                        error(err);
		                    }
		                });
		            }, error);
		        };
		        // We don't know if oldPath is a *file* or a *directory*, and there's no
		        // way to stat items. So launch both requests, see which one succeeds.
		        root.getFile(oldPath, {}, success, error);
		        root.getDirectory(oldPath, {}, success, error);
		    };
		    HTML5FS.prototype.stat = function stat (path$$1, isLstat, cb) {
		        var this$1$1 = this;
		
		        // Throw an error if the entry doesn't exist, because then there's nothing
		        // to stat.
		        var opts = {
		            create: false
		        };
		        // Called when the path has been successfully loaded as a file.
		        var loadAsFile = function (entry) {
		            var fileFromEntry = function (file) {
		                var stat = new Stats(FileType.FILE, file.size);
		                cb(null, stat);
		            };
		            entry.file(fileFromEntry, failedToLoad);
		        };
		        // Called when the path has been successfully loaded as a directory.
		        var loadAsDir = function (dir$$1) {
		            // Directory entry size can't be determined from the HTML5 FS API, and is
		            // implementation-dependant anyway, so a dummy value is used.
		            var size = 4096;
		            var stat = new Stats(FileType.DIRECTORY, size);
		            cb(null, stat);
		        };
		        // Called when the path couldn't be opened as a directory or a file.
		        var failedToLoad = function (err) {
		            cb(convertError$1(err, path$$1, false /* Unknown / irrelevant */));
		        };
		        // Called when the path couldn't be opened as a file, but might still be a
		        // directory.
		        var failedToLoadAsFile = function () {
		            this$1$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
		        };
		        // No method currently exists to determine whether a path refers to a
		        // directory or a file, so this implementation tries both and uses the first
		        // one that succeeds.
		        this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
		    };
		    HTML5FS.prototype.open = function open (p, flags, mode, cb) {
		        var this$1$1 = this;
		
		        // XXX: err is a DOMError
		        var error = function (err) {
		            if (err.name === 'InvalidModificationError' && flags.isExclusive()) {
		                cb(ApiError.EEXIST(p));
		            }
		            else {
		                cb(convertError$1(err, p, false));
		            }
		        };
		        this.fs.root.getFile(p, {
		            create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
		            exclusive: flags.isExclusive()
		        }, function (entry) {
		            // Try to fetch corresponding file.
		            entry.file(function (file) {
		                var reader = new FileReader();
		                reader.onloadend = function (event) {
		                    var bfsFile = this$1$1._makeFile(p, entry, flags, file, reader.result);
		                    cb(null, bfsFile);
		                };
		                reader.onerror = function (ev) {
		                    error(reader.error);
		                };
		                reader.readAsArrayBuffer(file);
		            }, error);
		        }, error);
		    };
		    HTML5FS.prototype.unlink = function unlink (path$$1, cb) {
		        this._remove(path$$1, cb, true);
		    };
		    HTML5FS.prototype.rmdir = function rmdir (path$$1, cb) {
		        var this$1$1 = this;
		
		        // Check if directory is non-empty, first.
		        this.readdir(path$$1, function (e, files) {
		            if (e) {
		                cb(e);
		            }
		            else if (files.length > 0) {
		                cb(ApiError.ENOTEMPTY(path$$1));
		            }
		            else {
		                this$1$1._remove(path$$1, cb, false);
		            }
		        });
		    };
		    HTML5FS.prototype.mkdir = function mkdir (path$$1, mode, cb) {
		        // Create the directory, but throw an error if it already exists, as per
		        // mkdir(1)
		        var opts = {
		            create: true,
		            exclusive: true
		        };
		        var success = function (dir$$1) {
		            cb();
		        };
		        var error = function (err) {
		            cb(convertError$1(err, path$$1, true));
		        };
		        this.fs.root.getDirectory(path$$1, opts, success, error);
		    };
		    /**
		     * Map _readdir's list of `FileEntry`s to their names and return that.
		     */
		    HTML5FS.prototype.readdir = function readdir (path$$1, cb) {
		        this._readdir(path$$1, function (e, entries) {
		            if (entries) {
		                var rv = [];
		                for (var i = 0, list = entries; i < list.length; i += 1) {
		                    var entry = list[i];
		
		                    rv.push(entry.name);
		                }
		                cb(null, rv);
		            }
		            else {
		                return cb(e);
		            }
		        });
		    };
		    /**
		     * Returns a BrowserFS object representing a File.
		     */
		    HTML5FS.prototype._makeFile = function _makeFile (path$$1, entry, flag, stat, data) {
		        if ( data === void 0 ) data = new ArrayBuffer(0);
		
		        var stats = new Stats(FileType.FILE, stat.size);
		        var buffer$$1 = arrayBuffer2Buffer(data);
		        return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
		    };
		    /**
		     * Returns an array of `FileEntry`s. Used internally by empty and readdir.
		     */
		    HTML5FS.prototype._readdir = function _readdir (path$$1, cb) {
		        var error = function (err) {
		            cb(convertError$1(err, path$$1, true));
		        };
		        // Grab the requested directory.
		        this.fs.root.getDirectory(path$$1, { create: false }, function (dirEntry) {
		            var reader = dirEntry.createReader();
		            var entries = [];
		            // Call the reader.readEntries() until no more results are returned.
		            var readEntries = function () {
		                reader.readEntries((function (results) {
		                    if (results.length) {
		                        entries = entries.concat(_toArray(results));
		                        readEntries();
		                    }
		                    else {
		                        cb(null, entries);
		                    }
		                }), error);
		            };
		            readEntries();
		        }, error);
		    };
		    /**
		     * Delete a file or directory from the file system
		     * isFile should reflect which call was made to remove the it (`unlink` or
		     * `rmdir`). If this doesn't match what's actually at `path`, an error will be
		     * returned
		     */
		    HTML5FS.prototype._remove = function _remove (path$$1, cb, isFile) {
		        var success = function (entry) {
		            var succ = function () {
		                cb();
		            };
		            var err = function (err) {
		                cb(convertError$1(err, path$$1, !isFile));
		            };
		            entry.remove(succ, err);
		        };
		        var error = function (err) {
		            cb(convertError$1(err, path$$1, !isFile));
		        };
		        // Deleting the entry, so don't create it
		        var opts = {
		            create: false
		        };
		        if (isFile) {
		            this.fs.root.getFile(path$$1, opts, success, error);
		        }
		        else {
		            this.fs.root.getDirectory(path$$1, opts, success, error);
		        }
		    };
		
		    return HTML5FS;
		}(BaseFileSystem));
		
		HTML5FS.Name = "HTML5FS";
		HTML5FS.Options = {
		    size: {
		        type: "number",
		        optional: true,
		        description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
		    },
		    type: {
		        type: "number",
		        optional: true,
		        description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
		    }
		};
		
		/**
		 * Generic inode definition that can easily be serialized.
		 */
		var Inode = function Inode(id, size, mode, atime, mtime, ctime) {
		    this.id = id;
		    this.size = size;
		    this.mode = mode;
		    this.atime = atime;
		    this.mtime = mtime;
		    this.ctime = ctime;
		};
		/**
		 * Converts the buffer into an Inode.
		 */
		Inode.fromBuffer = function fromBuffer (buffer$$1) {
		    if (buffer$$1 === undefined) {
		        throw new Error("NO");
		    }
		    return new Inode(buffer$$1.toString('ascii', 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
		};
		/**
		 * Handy function that converts the Inode to a Node Stats object.
		 */
		Inode.prototype.toStats = function toStats () {
		    return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
		};
		/**
		 * Get the size of this Inode, in bytes.
		 */
		Inode.prototype.getSize = function getSize () {
		    // ASSUMPTION: ID is ASCII (1 byte per char).
		    return 30 + this.id.length;
		};
		/**
		 * Writes the inode into the start of the buffer.
		 */
		Inode.prototype.toBuffer = function toBuffer (buff) {
		        if ( buff === void 0 ) buff = Buffer.alloc(this.getSize());
		
		    buff.writeUInt32LE(this.size, 0);
		    buff.writeUInt16LE(this.mode, 4);
		    buff.writeDoubleLE(this.atime, 6);
		    buff.writeDoubleLE(this.mtime, 14);
		    buff.writeDoubleLE(this.ctime, 22);
		    buff.write(this.id, 30, this.id.length, 'ascii');
		    return buff;
		};
		/**
		 * Updates the Inode using information from the stats object. Used by file
		 * systems at sync time, e.g.:
		 * - Program opens file and gets a File object.
		 * - Program mutates file. File object is responsible for maintaining
		 *   metadata changes locally -- typically in a Stats object.
		 * - Program closes file. File object's metadata changes are synced with the
		 *   file system.
		 * @return True if any changes have occurred.
		 */
		Inode.prototype.update = function update (stats) {
		    var hasChanged = false;
		    if (this.size !== stats.size) {
		        this.size = stats.size;
		        hasChanged = true;
		    }
		    if (this.mode !== stats.mode) {
		        this.mode = stats.mode;
		        hasChanged = true;
		    }
		    var atimeMs = stats.atime.getTime();
		    if (this.atime !== atimeMs) {
		        this.atime = atimeMs;
		        hasChanged = true;
		    }
		    var mtimeMs = stats.mtime.getTime();
		    if (this.mtime !== mtimeMs) {
		        this.mtime = mtimeMs;
		        hasChanged = true;
		    }
		    var ctimeMs = stats.ctime.getTime();
		    if (this.ctime !== ctimeMs) {
		        this.ctime = ctimeMs;
		        hasChanged = true;
		    }
		    return hasChanged;
		};
		// XXX: Copied from Stats. Should reconcile these two into something more
		//  compact.
		/**
		 * @return [Boolean] True if this item is a file.
		 */
		Inode.prototype.isFile = function isFile () {
		    return (this.mode & 0xF000) === FileType.FILE;
		};
		/**
		 * @return [Boolean] True if this item is a directory.
		 */
		Inode.prototype.isDirectory = function isDirectory () {
		    return (this.mode & 0xF000) === FileType.DIRECTORY;
		};
		
		/**
		 * @hidden
		 */
		var ROOT_NODE_ID = "/";
		/**
		 * @hidden
		 */
		var emptyDirNode = null;
		/**
		 * Returns an empty directory node.
		 * @hidden
		 */
		function getEmptyDirNode() {
		    if (emptyDirNode) {
		        return emptyDirNode;
		    }
		    return emptyDirNode = Buffer.from("{}");
		}
		/**
		 * Generates a random ID.
		 * @hidden
		 */
		function GenerateRandomID() {
		    // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
		    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
		        var r = Math.random() * 16 | 0;
		        var v = c === 'x' ? r : (r & 0x3 | 0x8);
		        return v.toString(16);
		    });
		}
		/**
		 * Helper function. Checks if 'e' is defined. If so, it triggers the callback
		 * with 'e' and returns false. Otherwise, returns true.
		 * @hidden
		 */
		function noError(e, cb) {
		    if (e) {
		        cb(e);
		        return false;
		    }
		    return true;
		}
		/**
		 * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,
		 * triggers the callback with 'e', and returns false. Otherwise, returns true.
		 * @hidden
		 */
		function noErrorTx(e, tx, cb) {
		    if (e) {
		        tx.abort(function () {
		            cb(e);
		        });
		        return false;
		    }
		    return true;
		}
		/**
		 * A simple RW transaction for simple synchronous key-value stores.
		 */
		var SimpleSyncRWTransaction = function SimpleSyncRWTransaction(store) {
		    this.store = store;
		    /**
		     * Stores data in the keys we modify prior to modifying them.
		     * Allows us to roll back commits.
		     */
		    this.originalData = {};
		    /**
		     * List of keys modified in this transaction, if any.
		     */
		    this.modifiedKeys = [];
		};
		SimpleSyncRWTransaction.prototype.get = function get (key) {
		    var val = this.store.get(key);
		    this.stashOldValue(key, val);
		    return val;
		};
		SimpleSyncRWTransaction.prototype.put = function put (key, data, overwrite) {
		    this.markModified(key);
		    return this.store.put(key, data, overwrite);
		};
		SimpleSyncRWTransaction.prototype.del = function del (key) {
		    this.markModified(key);
		    this.store.del(key);
		};
		SimpleSyncRWTransaction.prototype.commit = function commit () { };
		SimpleSyncRWTransaction.prototype.abort = function abort () {
		        var this$1$1 = this;
		
		    // Rollback old values.
		    for (var i = 0, list = this$1$1.modifiedKeys; i < list.length; i += 1) {
		        var key = list[i];
		
		            var value = this$1$1.originalData[key];
		        if (!value) {
		            // Key didn't exist.
		            this$1$1.store.del(key);
		        }
		        else {
		            // Key existed. Store old value.
		            this$1$1.store.put(key, value, true);
		        }
		    }
		};
		/**
		 * Stashes given key value pair into `originalData` if it doesn't already
		 * exist. Allows us to stash values the program is requesting anyway to
		 * prevent needless `get` requests if the program modifies the data later
		 * on during the transaction.
		 */
		SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue (key, value) {
		    // Keep only the earliest value in the transaction.
		    if (!this.originalData.hasOwnProperty(key)) {
		        this.originalData[key] = value;
		    }
		};
		/**
		 * Marks the given key as modified, and stashes its value if it has not been
		 * stashed already.
		 */
		SimpleSyncRWTransaction.prototype.markModified = function markModified (key) {
		    if (this.modifiedKeys.indexOf(key) === -1) {
		        this.modifiedKeys.push(key);
		        if (!this.originalData.hasOwnProperty(key)) {
		            this.originalData[key] = this.store.get(key);
		        }
		    }
		};
		var SyncKeyValueFile = (function (PreloadFile$$1) {
		    function SyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
		        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
		    }
		
		    if ( PreloadFile$$1 ) SyncKeyValueFile.__proto__ = PreloadFile$$1;
		    SyncKeyValueFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    SyncKeyValueFile.prototype.constructor = SyncKeyValueFile;
		    SyncKeyValueFile.prototype.syncSync = function syncSync () {
		        if (this.isDirty()) {
		            this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());
		            this.resetDirty();
		        }
		    };
		    SyncKeyValueFile.prototype.closeSync = function closeSync () {
		        this.syncSync();
		    };
		
		    return SyncKeyValueFile;
		}(PreloadFile));
		/**
		 * A "Synchronous key-value file system". Stores data to/retrieves data from an
		 * underlying key-value store.
		 *
		 * We use a unique ID for each node in the file system. The root node has a
		 * fixed ID.
		 * @todo Introduce Node ID caching.
		 * @todo Check modes.
		 */
		var SyncKeyValueFileSystem = (function (SynchronousFileSystem$$1) {
		    function SyncKeyValueFileSystem(options) {
		        SynchronousFileSystem$$1.call(this);
		        this.store = options.store;
		        // INVARIANT: Ensure that the root exists.
		        this.makeRootDirectory();
		    }
		
		    if ( SynchronousFileSystem$$1 ) SyncKeyValueFileSystem.__proto__ = SynchronousFileSystem$$1;
		    SyncKeyValueFileSystem.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
		    SyncKeyValueFileSystem.prototype.constructor = SyncKeyValueFileSystem;
		    SyncKeyValueFileSystem.isAvailable = function isAvailable () { return true; };
		
		    SyncKeyValueFileSystem.prototype.getName = function getName () { return this.store.name(); };
		    SyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
		    SyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks () { return false; };
		    SyncKeyValueFileSystem.prototype.supportsProps = function supportsProps () { return false; };
		    SyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch () { return true; };
		    /**
		     * Delete all contents stored in the file system.
		     */
		    SyncKeyValueFileSystem.prototype.empty = function empty () {
		        this.store.clear();
		        // INVARIANT: Root always exists.
		        this.makeRootDirectory();
		    };
		    SyncKeyValueFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
		        var tx = this.store.beginTransaction('readwrite'), oldParent = path.dirname(oldPath), oldName = path.basename(oldPath), newParent = path.dirname(newPath), newName = path.basename(newPath), 
		        // Remove oldPath from parent's directory listing.
		        oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);
		        if (!oldDirList[oldName]) {
		            throw ApiError.ENOENT(oldPath);
		        }
		        var nodeId = oldDirList[oldName];
		        delete oldDirList[oldName];
		        // Invariant: Can't move a folder inside itself.
		        // This funny little hack ensures that the check passes only if oldPath
		        // is a subpath of newParent. We append '/' to avoid matching folders that
		        // are a substring of the bottom-most folder in the path.
		        if ((newParent + '/').indexOf(oldPath + '/') === 0) {
		            throw new ApiError(ErrorCode.EBUSY, oldParent);
		        }
		        // Add newPath to parent's directory listing.
		        var newDirNode, newDirList;
		        if (newParent === oldParent) {
		            // Prevent us from re-grabbing the same directory listing, which still
		            // contains oldName.
		            newDirNode = oldDirNode;
		            newDirList = oldDirList;
		        }
		        else {
		            newDirNode = this.findINode(tx, newParent);
		            newDirList = this.getDirListing(tx, newParent, newDirNode);
		        }
		        if (newDirList[newName]) {
		            // If it's a file, delete it.
		            var newNameNode = this.getINode(tx, newPath, newDirList[newName]);
		            if (newNameNode.isFile()) {
		                try {
		                    tx.del(newNameNode.id);
		                    tx.del(newDirList[newName]);
		                }
		                catch (e) {
		                    tx.abort();
		                    throw e;
		                }
		            }
		            else {
		                // If it's a directory, throw a permissions error.
		                throw ApiError.EPERM(newPath);
		            }
		        }
		        newDirList[newName] = nodeId;
		        // Commit the two changed directory listings.
		        try {
		            tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);
		            tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);
		        }
		        catch (e) {
		            tx.abort();
		            throw e;
		        }
		        tx.commit();
		    };
		    SyncKeyValueFileSystem.prototype.statSync = function statSync (p, isLstat) {
		        // Get the inode to the item, convert it into a Stats object.
		        return this.findINode(this.store.beginTransaction('readonly'), p).toStats();
		    };
		    SyncKeyValueFileSystem.prototype.createFileSync = function createFileSync (p, flag, mode) {
		        var tx = this.store.beginTransaction('readwrite'), data = emptyBuffer(), newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);
		        // Open the file.
		        return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
		    };
		    SyncKeyValueFileSystem.prototype.openFileSync = function openFileSync (p, flag) {
		        var tx = this.store.beginTransaction('readonly'), node = this.findINode(tx, p), data = tx.get(node.id);
		        if (data === undefined) {
		            throw ApiError.ENOENT(p);
		        }
		        return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
		    };
		    SyncKeyValueFileSystem.prototype.unlinkSync = function unlinkSync (p) {
		        this.removeEntry(p, false);
		    };
		    SyncKeyValueFileSystem.prototype.rmdirSync = function rmdirSync (p) {
		        // Check first if directory is empty.
		        if (this.readdirSync(p).length > 0) {
		            throw ApiError.ENOTEMPTY(p);
		        }
		        else {
		            this.removeEntry(p, true);
		        }
		    };
		    SyncKeyValueFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
		        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');
		        this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
		    };
		    SyncKeyValueFileSystem.prototype.readdirSync = function readdirSync (p) {
		        var tx = this.store.beginTransaction('readonly');
		        return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
		    };
		    SyncKeyValueFileSystem.prototype._syncSync = function _syncSync (p, data, stats) {
		        // @todo Ensure mtime updates properly, and use that to determine if a data
		        //       update is required.
		        var tx = this.store.beginTransaction('readwrite'), 
		        // We use the _findInode helper because we actually need the INode id.
		        fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);
		        try {
		            // Sync data.
		            tx.put(fileInode.id, data, true);
		            // Sync metadata.
		            if (inodeChanged) {
		                tx.put(fileInodeId, fileInode.toBuffer(), true);
		            }
		        }
		        catch (e) {
		            tx.abort();
		            throw e;
		        }
		        tx.commit();
		    };
		    /**
		     * Checks if the root directory exists. Creates it if it doesn't.
		     */
		    SyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory () {
		        var tx = this.store.beginTransaction('readwrite');
		        if (tx.get(ROOT_NODE_ID) === undefined) {
		            // Create new inode.
		            var currTime = (new Date()).getTime(), 
		            // Mode 0666
		            dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
		            // If the root doesn't exist, the first random ID shouldn't exist,
		            // either.
		            tx.put(dirInode.id, getEmptyDirNode(), false);
		            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
		            tx.commit();
		        }
		    };
		    /**
		     * Helper function for findINode.
		     * @param parent The parent directory of the file we are attempting to find.
		     * @param filename The filename of the inode we are attempting to find, minus
		     *   the parent.
		     * @return string The ID of the file's inode in the file system.
		     */
		    SyncKeyValueFileSystem.prototype._findINode = function _findINode (tx, parent, filename) {
		        var this$1$1 = this;
		
		        var readDirectory = function (inode) {
		            // Get the root's directory listing.
		            var dirList = this$1$1.getDirListing(tx, parent, inode);
		            // Get the file's ID.
		            if (dirList[filename]) {
		                return dirList[filename];
		            }
		            else {
		                throw ApiError.ENOENT(path.resolve(parent, filename));
		            }
		        };
		        if (parent === '/') {
		            if (filename === '') {
		                // BASE CASE #1: Return the root's ID.
		                return ROOT_NODE_ID;
		            }
		            else {
		                // BASE CASE #2: Find the item in the root ndoe.
		                return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
		            }
		        }
		        else {
		            return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));
		        }
		    };
		    /**
		     * Finds the Inode of the given path.
		     * @param p The path to look up.
		     * @return The Inode of the path p.
		     * @todo memoize/cache
		     */
		    SyncKeyValueFileSystem.prototype.findINode = function findINode (tx, p) {
		        return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));
		    };
		    /**
		     * Given the ID of a node, retrieves the corresponding Inode.
		     * @param tx The transaction to use.
		     * @param p The corresponding path to the file (used for error messages).
		     * @param id The ID to look up.
		     */
		    SyncKeyValueFileSystem.prototype.getINode = function getINode (tx, p, id) {
		        var inode = tx.get(id);
		        if (inode === undefined) {
		            throw ApiError.ENOENT(p);
		        }
		        return Inode.fromBuffer(inode);
		    };
		    /**
		     * Given the Inode of a directory, retrieves the corresponding directory
		     * listing.
		     */
		    SyncKeyValueFileSystem.prototype.getDirListing = function getDirListing (tx, p, inode) {
		        if (!inode.isDirectory()) {
		            throw ApiError.ENOTDIR(p);
		        }
		        var data = tx.get(inode.id);
		        if (data === undefined) {
		            throw ApiError.ENOENT(p);
		        }
		        return JSON.parse(data.toString());
		    };
		    /**
		     * Creates a new node under a random ID. Retries 5 times before giving up in
		     * the exceedingly unlikely chance that we try to reuse a random GUID.
		     * @return The GUID that the data was stored under.
		     */
		    SyncKeyValueFileSystem.prototype.addNewNode = function addNewNode (tx, data) {
		        var retries = 0;
		        var currId;
		        while (retries < 5) {
		            try {
		                currId = GenerateRandomID();
		                tx.put(currId, data, false);
		                return currId;
		            }
		            catch (e) {
		                // Ignore and reroll.
		            }
		        }
		        throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');
		    };
		    /**
		     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
		     * the given mode.
		     * Note: This will commit the transaction.
		     * @param p The path to the new file.
		     * @param type The type of the new file.
		     * @param mode The mode to create the new file with.
		     * @param data The data to store at the file's data node.
		     * @return The Inode for the new file.
		     */
		    SyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile (tx, p, type, mode, data) {
		        var parentDir = path.dirname(p), fname = path.basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = (new Date()).getTime();
		        // Invariant: The root always exists.
		        // If we don't check this prior to taking steps below, we will create a
		        // file with name '' in root should p == '/'.
		        if (p === '/') {
		            throw ApiError.EEXIST(p);
		        }
		        // Check if file already exists.
		        if (dirListing[fname]) {
		            throw ApiError.EEXIST(p);
		        }
		        var fileNode;
		        try {
		            // Commit data.
		            var dataId = this.addNewNode(tx, data);
		            fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
		            // Commit file node.
		            var fileNodeId = this.addNewNode(tx, fileNode.toBuffer());
		            // Update and commit parent directory listing.
		            dirListing[fname] = fileNodeId;
		            tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);
		        }
		        catch (e) {
		            tx.abort();
		            throw e;
		        }
		        tx.commit();
		        return fileNode;
		    };
		    /**
		     * Remove all traces of the given path from the file system.
		     * @param p The path to remove from the file system.
		     * @param isDir Does the path belong to a directory, or a file?
		     * @todo Update mtime.
		     */
		    SyncKeyValueFileSystem.prototype.removeEntry = function removeEntry (p, isDir) {
		        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = path.basename(p);
		        if (!parentListing[fileName]) {
		            throw ApiError.ENOENT(p);
		        }
		        // Remove from directory listing of parent.
		        var fileNodeId = parentListing[fileName];
		        delete parentListing[fileName];
		        // Get file inode.
		        var fileNode = this.getINode(tx, p, fileNodeId);
		        if (!isDir && fileNode.isDirectory()) {
		            throw ApiError.EISDIR(p);
		        }
		        else if (isDir && !fileNode.isDirectory()) {
		            throw ApiError.ENOTDIR(p);
		        }
		        try {
		            // Delete data.
		            tx.del(fileNode.id);
		            // Delete node.
		            tx.del(fileNodeId);
		            // Update directory listing.
		            tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);
		        }
		        catch (e) {
		            tx.abort();
		            throw e;
		        }
		        // Success.
		        tx.commit();
		    };
		
		    return SyncKeyValueFileSystem;
		}(SynchronousFileSystem));
		var AsyncKeyValueFile = (function (PreloadFile$$1) {
		    function AsyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
		        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
		    }
		
		    if ( PreloadFile$$1 ) AsyncKeyValueFile.__proto__ = PreloadFile$$1;
		    AsyncKeyValueFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    AsyncKeyValueFile.prototype.constructor = AsyncKeyValueFile;
		    AsyncKeyValueFile.prototype.sync = function sync (cb) {
		        var this$1$1 = this;
		
		        if (this.isDirty()) {
		            this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function (e) {
		                if (!e) {
		                    this$1$1.resetDirty();
		                }
		                cb(e);
		            });
		        }
		        else {
		            cb();
		        }
		    };
		    AsyncKeyValueFile.prototype.close = function close (cb) {
		        this.sync(cb);
		    };
		
		    return AsyncKeyValueFile;
		}(PreloadFile));
		/**
		 * An "Asynchronous key-value file system". Stores data to/retrieves data from
		 * an underlying asynchronous key-value store.
		 */
		var AsyncKeyValueFileSystem = (function (BaseFileSystem$$1) {
		    function AsyncKeyValueFileSystem () {
		        BaseFileSystem$$1.apply(this, arguments);
		    }
		
		    if ( BaseFileSystem$$1 ) AsyncKeyValueFileSystem.__proto__ = BaseFileSystem$$1;
		    AsyncKeyValueFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    AsyncKeyValueFileSystem.prototype.constructor = AsyncKeyValueFileSystem;
		
		    AsyncKeyValueFileSystem.isAvailable = function isAvailable () { return true; };
		    /**
		     * Initializes the file system. Typically called by subclasses' async
		     * constructors.
		     */
		    AsyncKeyValueFileSystem.prototype.init = function init (store, cb) {
		        this.store = store;
		        // INVARIANT: Ensure that the root exists.
		        this.makeRootDirectory(cb);
		    };
		    AsyncKeyValueFileSystem.prototype.getName = function getName () { return this.store.name(); };
		    AsyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
		    AsyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks () { return false; };
		    AsyncKeyValueFileSystem.prototype.supportsProps = function supportsProps () { return false; };
		    AsyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch () { return false; };
		    /**
		     * Delete all contents stored in the file system.
		     */
		    AsyncKeyValueFileSystem.prototype.empty = function empty (cb) {
		        var this$1$1 = this;
		
		        this.store.clear(function (e) {
		            if (noError(e, cb)) {
		                // INVARIANT: Root always exists.
		                this$1$1.makeRootDirectory(cb);
		            }
		        });
		    };
		    AsyncKeyValueFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
		        var this$1$1 = this;
		
		        var tx = this.store.beginTransaction('readwrite');
		        var oldParent = path.dirname(oldPath), oldName = path.basename(oldPath);
		        var newParent = path.dirname(newPath), newName = path.basename(newPath);
		        var inodes = {};
		        var lists = {};
		        var errorOccurred = false;
		        // Invariant: Can't move a folder inside itself.
		        // This funny little hack ensures that the check passes only if oldPath
		        // is a subpath of newParent. We append '/' to avoid matching folders that
		        // are a substring of the bottom-most folder in the path.
		        if ((newParent + '/').indexOf(oldPath + '/') === 0) {
		            return cb(new ApiError(ErrorCode.EBUSY, oldParent));
		        }
		        /**
		         * Responsible for Phase 2 of the rename operation: Modifying and
		         * committing the directory listings. Called once we have successfully
		         * retrieved both the old and new parent's inodes and listings.
		         */
		        var theOleSwitcharoo = function () {
		            // Sanity check: Ensure both paths are present, and no error has occurred.
		            if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
		                return;
		            }
		            var oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];
		            // Delete file from old parent.
		            if (!oldParentList[oldName]) {
		                cb(ApiError.ENOENT(oldPath));
		            }
		            else {
		                var fileId = oldParentList[oldName];
		                delete oldParentList[oldName];
		                // Finishes off the renaming process by adding the file to the new
		                // parent.
		                var completeRename = function () {
		                    newParentList[newName] = fileId;
		                    // Commit old parent's list.
		                    tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, function (e) {
		                        if (noErrorTx(e, tx, cb)) {
		                            if (oldParent === newParent) {
		                                // DONE!
		                                tx.commit(cb);
		                            }
		                            else {
		                                // Commit new parent's list.
		                                tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, function (e) {
		                                    if (noErrorTx(e, tx, cb)) {
		                                        tx.commit(cb);
		                                    }
		                                });
		                            }
		                        }
		                    });
		                };
		                if (newParentList[newName]) {
		                    // 'newPath' already exists. Check if it's a file or a directory, and
		                    // act accordingly.
		                    this$1$1.getINode(tx, newPath, newParentList[newName], function (e, inode) {
		                        if (noErrorTx(e, tx, cb)) {
		                            if (inode.isFile()) {
		                                // Delete the file and continue.
		                                tx.del(inode.id, function (e) {
		                                    if (noErrorTx(e, tx, cb)) {
		                                        tx.del(newParentList[newName], function (e) {
		                                            if (noErrorTx(e, tx, cb)) {
		                                                completeRename();
		                                            }
		                                        });
		                                    }
		                                });
		                            }
		                            else {
		                                // Can't overwrite a directory using rename.
		                                tx.abort(function (e) {
		                                    cb(ApiError.EPERM(newPath));
		                                });
		                            }
		                        }
		                    });
		                }
		                else {
		                    completeRename();
		                }
		            }
		        };
		        /**
		         * Grabs a path's inode and directory listing, and shoves it into the
		         * inodes and lists hashes.
		         */
		        var processInodeAndListings = function (p) {
		            this$1$1.findINodeAndDirListing(tx, p, function (e, node, dirList) {
		                if (e) {
		                    if (!errorOccurred) {
		                        errorOccurred = true;
		                        tx.abort(function () {
		                            cb(e);
		                        });
		                    }
		                    // If error has occurred already, just stop here.
		                }
		                else {
		                    inodes[p] = node;
		                    lists[p] = dirList;
		                    theOleSwitcharoo();
		                }
		            });
		        };
		        processInodeAndListings(oldParent);
		        if (oldParent !== newParent) {
		            processInodeAndListings(newParent);
		        }
		    };
		    AsyncKeyValueFileSystem.prototype.stat = function stat (p, isLstat, cb) {
		        var tx = this.store.beginTransaction('readonly');
		        this.findINode(tx, p, function (e, inode) {
		            if (noError(e, cb)) {
		                cb(null, inode.toStats());
		            }
		        });
		    };
		    AsyncKeyValueFileSystem.prototype.createFile = function createFile (p, flag, mode, cb) {
		        var this$1$1 = this;
		
		        var tx = this.store.beginTransaction('readwrite'), data = emptyBuffer();
		        this.commitNewFile(tx, p, FileType.FILE, mode, data, function (e, newFile) {
		            if (noError(e, cb)) {
		                cb(null, new AsyncKeyValueFile(this$1$1, p, flag, newFile.toStats(), data));
		            }
		        });
		    };
		    AsyncKeyValueFileSystem.prototype.openFile = function openFile (p, flag, cb) {
		        var this$1$1 = this;
		
		        var tx = this.store.beginTransaction('readonly');
		        // Step 1: Grab the file's inode.
		        this.findINode(tx, p, function (e, inode) {
		            if (noError(e, cb)) {
		                // Step 2: Grab the file's data.
		                tx.get(inode.id, function (e, data) {
		                    if (noError(e, cb)) {
		                        if (data === undefined) {
		                            cb(ApiError.ENOENT(p));
		                        }
		                        else {
		                            cb(null, new AsyncKeyValueFile(this$1$1, p, flag, inode.toStats(), data));
		                        }
		                    }
		                });
		            }
		        });
		    };
		    AsyncKeyValueFileSystem.prototype.unlink = function unlink (p, cb) {
		        this.removeEntry(p, false, cb);
		    };
		    AsyncKeyValueFileSystem.prototype.rmdir = function rmdir (p, cb) {
		        var this$1$1 = this;
		
		        // Check first if directory is empty.
		        this.readdir(p, function (err, files) {
		            if (err) {
		                cb(err);
		            }
		            else if (files.length > 0) {
		                cb(ApiError.ENOTEMPTY(p));
		            }
		            else {
		                this$1$1.removeEntry(p, true, cb);
		            }
		        });
		    };
		    AsyncKeyValueFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
		        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');
		        this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
		    };
		    AsyncKeyValueFileSystem.prototype.readdir = function readdir (p, cb) {
		        var this$1$1 = this;
		
		        var tx = this.store.beginTransaction('readonly');
		        this.findINode(tx, p, function (e, inode) {
		            if (noError(e, cb)) {
		                this$1$1.getDirListing(tx, p, inode, function (e, dirListing) {
		                    if (noError(e, cb)) {
		                        cb(null, Object.keys(dirListing));
		                    }
		                });
		            }
		        });
		    };
		    AsyncKeyValueFileSystem.prototype._sync = function _sync (p, data, stats, cb) {
		        var this$1$1 = this;
		
		        // @todo Ensure mtime updates properly, and use that to determine if a data
		        //       update is required.
		        var tx = this.store.beginTransaction('readwrite');
		        // Step 1: Get the file node's ID.
		        this._findINode(tx, path.dirname(p), path.basename(p), function (e, fileInodeId) {
		            if (noErrorTx(e, tx, cb)) {
		                // Step 2: Get the file inode.
		                this$1$1.getINode(tx, p, fileInodeId, function (e, fileInode) {
		                    if (noErrorTx(e, tx, cb)) {
		                        var inodeChanged = fileInode.update(stats);
		                        // Step 3: Sync the data.
		                        tx.put(fileInode.id, data, true, function (e) {
		                            if (noErrorTx(e, tx, cb)) {
		                                // Step 4: Sync the metadata (if it changed)!
		                                if (inodeChanged) {
		                                    tx.put(fileInodeId, fileInode.toBuffer(), true, function (e) {
		                                        if (noErrorTx(e, tx, cb)) {
		                                            tx.commit(cb);
		                                        }
		                                    });
		                                }
		                                else {
		                                    // No need to sync metadata; return.
		                                    tx.commit(cb);
		                                }
		                            }
		                        });
		                    }
		                });
		            }
		        });
		    };
		    /**
		     * Checks if the root directory exists. Creates it if it doesn't.
		     */
		    AsyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory (cb) {
		        var tx = this.store.beginTransaction('readwrite');
		        tx.get(ROOT_NODE_ID, function (e, data) {
		            if (e || data === undefined) {
		                // Create new inode.
		                var currTime = (new Date()).getTime(), 
		                // Mode 0666
		                dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
		                // If the root doesn't exist, the first random ID shouldn't exist,
		                // either.
		                tx.put(dirInode.id, getEmptyDirNode(), false, function (e) {
		                    if (noErrorTx(e, tx, cb)) {
		                        tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function (e) {
		                            if (e) {
		                                tx.abort(function () { cb(e); });
		                            }
		                            else {
		                                tx.commit(cb);
		                            }
		                        });
		                    }
		                });
		            }
		            else {
		                // We're good.
		                tx.commit(cb);
		            }
		        });
		    };
		    /**
		     * Helper function for findINode.
		     * @param parent The parent directory of the file we are attempting to find.
		     * @param filename The filename of the inode we are attempting to find, minus
		     *   the parent.
		     * @param cb Passed an error or the ID of the file's inode in the file system.
		     */
		    AsyncKeyValueFileSystem.prototype._findINode = function _findINode (tx, parent, filename, cb) {
		        var this$1$1 = this;
		
		        var handleDirectoryListings = function (e, inode, dirList) {
		            if (e) {
		                cb(e);
		            }
		            else if (dirList[filename]) {
		                cb(null, dirList[filename]);
		            }
		            else {
		                cb(ApiError.ENOENT(path.resolve(parent, filename)));
		            }
		        };
		        if (parent === '/') {
		            if (filename === '') {
		                // BASE CASE #1: Return the root's ID.
		                cb(null, ROOT_NODE_ID);
		            }
		            else {
		                // BASE CASE #2: Find the item in the root node.
		                this.getINode(tx, parent, ROOT_NODE_ID, function (e, inode) {
		                    if (noError(e, cb)) {
		                        this$1$1.getDirListing(tx, parent, inode, function (e, dirList) {
		                            // handle_directory_listings will handle e for us.
		                            handleDirectoryListings(e, inode, dirList);
		                        });
		                    }
		                });
		            }
		        }
		        else {
		            // Get the parent directory's INode, and find the file in its directory
		            // listing.
		            this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
		        }
		    };
		    /**
		     * Finds the Inode of the given path.
		     * @param p The path to look up.
		     * @param cb Passed an error or the Inode of the path p.
		     * @todo memoize/cache
		     */
		    AsyncKeyValueFileSystem.prototype.findINode = function findINode (tx, p, cb) {
		        var this$1$1 = this;
		
		        this._findINode(tx, path.dirname(p), path.basename(p), function (e, id) {
		            if (noError(e, cb)) {
		                this$1$1.getINode(tx, p, id, cb);
		            }
		        });
		    };
		    /**
		     * Given the ID of a node, retrieves the corresponding Inode.
		     * @param tx The transaction to use.
		     * @param p The corresponding path to the file (used for error messages).
		     * @param id The ID to look up.
		     * @param cb Passed an error or the inode under the given id.
		     */
		    AsyncKeyValueFileSystem.prototype.getINode = function getINode (tx, p, id, cb) {
		        tx.get(id, function (e, data) {
		            if (noError(e, cb)) {
		                if (data === undefined) {
		                    cb(ApiError.ENOENT(p));
		                }
		                else {
		                    cb(null, Inode.fromBuffer(data));
		                }
		            }
		        });
		    };
		    /**
		     * Given the Inode of a directory, retrieves the corresponding directory
		     * listing.
		     */
		    AsyncKeyValueFileSystem.prototype.getDirListing = function getDirListing (tx, p, inode, cb) {
		        if (!inode.isDirectory()) {
		            cb(ApiError.ENOTDIR(p));
		        }
		        else {
		            tx.get(inode.id, function (e, data) {
		                if (noError(e, cb)) {
		                    try {
		                        cb(null, JSON.parse(data.toString()));
		                    }
		                    catch (e) {
		                        // Occurs when data is undefined, or corresponds to something other
		                        // than a directory listing. The latter should never occur unless
		                        // the file system is corrupted.
		                        cb(ApiError.ENOENT(p));
		                    }
		                }
		            });
		        }
		    };
		    /**
		     * Given a path to a directory, retrieves the corresponding INode and
		     * directory listing.
		     */
		    AsyncKeyValueFileSystem.prototype.findINodeAndDirListing = function findINodeAndDirListing (tx, p, cb) {
		        var this$1$1 = this;
		
		        this.findINode(tx, p, function (e, inode) {
		            if (noError(e, cb)) {
		                this$1$1.getDirListing(tx, p, inode, function (e, listing) {
		                    if (noError(e, cb)) {
		                        cb(null, inode, listing);
		                    }
		                });
		            }
		        });
		    };
		    /**
		     * Adds a new node under a random ID. Retries 5 times before giving up in
		     * the exceedingly unlikely chance that we try to reuse a random GUID.
		     * @param cb Passed an error or the GUID that the data was stored under.
		     */
		    AsyncKeyValueFileSystem.prototype.addNewNode = function addNewNode (tx, data, cb) {
		        var retries = 0, currId;
		        var reroll = function () {
		            if (++retries === 5) {
		                // Max retries hit. Return with an error.
		                cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));
		            }
		            else {
		                // Try again.
		                currId = GenerateRandomID();
		                tx.put(currId, data, false, function (e, committed) {
		                    if (e || !committed) {
		                        reroll();
		                    }
		                    else {
		                        // Successfully stored under 'currId'.
		                        cb(null, currId);
		                    }
		                });
		            }
		        };
		        reroll();
		    };
		    /**
		     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
		     * the given mode.
		     * Note: This will commit the transaction.
		     * @param p The path to the new file.
		     * @param type The type of the new file.
		     * @param mode The mode to create the new file with.
		     * @param data The data to store at the file's data node.
		     * @param cb Passed an error or the Inode for the new file.
		     */
		    AsyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile (tx, p, type, mode, data, cb) {
		        var this$1$1 = this;
		
		        var parentDir = path.dirname(p), fname = path.basename(p), currTime = (new Date()).getTime();
		        // Invariant: The root always exists.
		        // If we don't check this prior to taking steps below, we will create a
		        // file with name '' in root should p == '/'.
		        if (p === '/') {
		            return cb(ApiError.EEXIST(p));
		        }
		        // Let's build a pyramid of code!
		        // Step 1: Get the parent directory's inode and directory listing
		        this.findINodeAndDirListing(tx, parentDir, function (e, parentNode, dirListing) {
		            if (noErrorTx(e, tx, cb)) {
		                if (dirListing[fname]) {
		                    // File already exists.
		                    tx.abort(function () {
		                        cb(ApiError.EEXIST(p));
		                    });
		                }
		                else {
		                    // Step 2: Commit data to store.
		                    this$1$1.addNewNode(tx, data, function (e, dataId) {
		                        if (noErrorTx(e, tx, cb)) {
		                            // Step 3: Commit the file's inode to the store.
		                            var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
		                            this$1$1.addNewNode(tx, fileInode.toBuffer(), function (e, fileInodeId) {
		                                if (noErrorTx(e, tx, cb)) {
		                                    // Step 4: Update parent directory's listing.
		                                    dirListing[fname] = fileInodeId;
		                                    tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, function (e) {
		                                        if (noErrorTx(e, tx, cb)) {
		                                            // Step 5: Commit and return the new inode.
		                                            tx.commit(function (e) {
		                                                if (noErrorTx(e, tx, cb)) {
		                                                    cb(null, fileInode);
		                                                }
		                                            });
		                                        }
		                                    });
		                                }
		                            });
		                        }
		                    });
		                }
		            }
		        });
		    };
		    /**
		     * Remove all traces of the given path from the file system.
		     * @param p The path to remove from the file system.
		     * @param isDir Does the path belong to a directory, or a file?
		     * @todo Update mtime.
		     */
		    AsyncKeyValueFileSystem.prototype.removeEntry = function removeEntry (p, isDir, cb) {
		        var this$1$1 = this;
		
		        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), fileName = path.basename(p);
		        // Step 1: Get parent directory's node and directory listing.
		        this.findINodeAndDirListing(tx, parent, function (e, parentNode, parentListing) {
		            if (noErrorTx(e, tx, cb)) {
		                if (!parentListing[fileName]) {
		                    tx.abort(function () {
		                        cb(ApiError.ENOENT(p));
		                    });
		                }
		                else {
		                    // Remove from directory listing of parent.
		                    var fileNodeId = parentListing[fileName];
		                    delete parentListing[fileName];
		                    // Step 2: Get file inode.
		                    this$1$1.getINode(tx, p, fileNodeId, function (e, fileNode) {
		                        if (noErrorTx(e, tx, cb)) {
		                            if (!isDir && fileNode.isDirectory()) {
		                                tx.abort(function () {
		                                    cb(ApiError.EISDIR(p));
		                                });
		                            }
		                            else if (isDir && !fileNode.isDirectory()) {
		                                tx.abort(function () {
		                                    cb(ApiError.ENOTDIR(p));
		                                });
		                            }
		                            else {
		                                // Step 3: Delete data.
		                                tx.del(fileNode.id, function (e) {
		                                    if (noErrorTx(e, tx, cb)) {
		                                        // Step 4: Delete node.
		                                        tx.del(fileNodeId, function (e) {
		                                            if (noErrorTx(e, tx, cb)) {
		                                                // Step 5: Update directory listing.
		                                                tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, function (e) {
		                                                    if (noErrorTx(e, tx, cb)) {
		                                                        tx.commit(cb);
		                                                    }
		                                                });
		                                            }
		                                        });
		                                    }
		                                });
		                            }
		                        }
		                    });
		                }
		            }
		        });
		    };
		
		    return AsyncKeyValueFileSystem;
		}(BaseFileSystem));
		
		/**
		 * A simple in-memory key-value store backed by a JavaScript object.
		 */
		var InMemoryStore = function InMemoryStore() {
		    this.store = {};
		};
		InMemoryStore.prototype.name = function name () { return InMemoryFileSystem.Name; };
		InMemoryStore.prototype.clear = function clear () { this.store = {}; };
		InMemoryStore.prototype.beginTransaction = function beginTransaction (type) {
		    return new SimpleSyncRWTransaction(this);
		};
		InMemoryStore.prototype.get = function get (key) {
		    return this.store[key];
		};
		InMemoryStore.prototype.put = function put (key, data, overwrite) {
		    if (!overwrite && this.store.hasOwnProperty(key)) {
		        return false;
		    }
		    this.store[key] = data;
		    return true;
		};
		InMemoryStore.prototype.del = function del (key) {
		    delete this.store[key];
		};
		/**
		 * A simple in-memory file system backed by an InMemoryStore.
		 * Files are not persisted across page loads.
		 */
		var InMemoryFileSystem = (function (SyncKeyValueFileSystem$$1) {
		    function InMemoryFileSystem() {
		        SyncKeyValueFileSystem$$1.call(this, { store: new InMemoryStore() });
		    }
		
		    if ( SyncKeyValueFileSystem$$1 ) InMemoryFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
		    InMemoryFileSystem.prototype = Object.create( SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype );
		    InMemoryFileSystem.prototype.constructor = InMemoryFileSystem;
		    /**
		     * Creates an InMemoryFileSystem instance.
		     */
		    InMemoryFileSystem.Create = function Create (options, cb) {
		        cb(null, new InMemoryFileSystem());
		    };
		
		    return InMemoryFileSystem;
		}(SyncKeyValueFileSystem));
		
		InMemoryFileSystem.Name = "InMemory";
		InMemoryFileSystem.Options = {};
		
		/**
		 * Get the indexedDB constructor for the current browser.
		 * @hidden
		 */
		var indexedDB = global$1.indexedDB ||
		    global$1.mozIndexedDB ||
		    global$1.webkitIndexedDB ||
		    global$1.msIndexedDB;
		/**
		 * Converts a DOMException or a DOMError from an IndexedDB event into a
		 * standardized BrowserFS API error.
		 * @hidden
		 */
		function convertError$2(e, message) {
		    if ( message === void 0 ) message = e.toString();
		
		    switch (e.name) {
		        case "NotFoundError":
		            return new ApiError(ErrorCode.ENOENT, message);
		        case "QuotaExceededError":
		            return new ApiError(ErrorCode.ENOSPC, message);
		        default:
		            // The rest do not seem to map cleanly to standard error codes.
		            return new ApiError(ErrorCode.EIO, message);
		    }
		}
		/**
		 * Produces a new onerror handler for IDB. Our errors are always fatal, so we
		 * handle them generically: Call the user-supplied callback with a translated
		 * version of the error, and let the error bubble up.
		 * @hidden
		 */
		function onErrorHandler(cb, code, message) {
		    if ( code === void 0 ) code = ErrorCode.EIO;
		    if ( message === void 0 ) message = null;
		
		    return function (e) {
		        // Prevent the error from canceling the transaction.
		        e.preventDefault();
		        cb(new ApiError(code, message !== null ? message : undefined));
		    };
		}
		/**
		 * @hidden
		 */
		var IndexedDBROTransaction = function IndexedDBROTransaction(tx, store) {
		    this.tx = tx;
		    this.store = store;
		};
		IndexedDBROTransaction.prototype.get = function get (key, cb) {
		    try {
		        var r = this.store.get(key);
		        r.onerror = onErrorHandler(cb);
		        r.onsuccess = function (event) {
		            // IDB returns the value 'undefined' when you try to get keys that
		            // don't exist. The caller expects this behavior.
		            var result = event.target.result;
		            if (result === undefined) {
		                cb(null, result);
		            }
		            else {
		                // IDB data is stored as an ArrayBuffer
		                cb(null, arrayBuffer2Buffer(result));
		            }
		        };
		    }
		    catch (e) {
		        cb(convertError$2(e));
		    }
		};
		/**
		 * @hidden
		 */
		var IndexedDBRWTransaction = (function (IndexedDBROTransaction) {
		    function IndexedDBRWTransaction(tx, store) {
		        IndexedDBROTransaction.call(this, tx, store);
		    }
		
		    if ( IndexedDBROTransaction ) IndexedDBRWTransaction.__proto__ = IndexedDBROTransaction;
		    IndexedDBRWTransaction.prototype = Object.create( IndexedDBROTransaction && IndexedDBROTransaction.prototype );
		    IndexedDBRWTransaction.prototype.constructor = IndexedDBRWTransaction;
		    IndexedDBRWTransaction.prototype.put = function put (key, data, overwrite, cb) {
		        try {
		            var arraybuffer = buffer2ArrayBuffer(data);
		            var r;
		            if (overwrite) {
		                r = this.store.put(arraybuffer, key);
		            }
		            else {
		                // 'add' will never overwrite an existing key.
		                r = this.store.add(arraybuffer, key);
		            }
		            // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.
		            r.onerror = onErrorHandler(cb);
		            r.onsuccess = function (event) {
		                cb(null, true);
		            };
		        }
		        catch (e) {
		            cb(convertError$2(e));
		        }
		    };
		    IndexedDBRWTransaction.prototype.del = function del (key, cb) {
		        try {
		            // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string
		            // like this.
		            // http://stackoverflow.com/a/26479152
		            var r = this.store['delete'](key);
		            r.onerror = onErrorHandler(cb);
		            r.onsuccess = function (event) {
		                cb();
		            };
		        }
		        catch (e) {
		            cb(convertError$2(e));
		        }
		    };
		    IndexedDBRWTransaction.prototype.commit = function commit (cb) {
		        // Return to the event loop to commit the transaction.
		        setTimeout(cb, 0);
		    };
		    IndexedDBRWTransaction.prototype.abort = function abort (cb) {
		        var _e = null;
		        try {
		            this.tx.abort();
		        }
		        catch (e) {
		            _e = convertError$2(e);
		        }
		        finally {
		            cb(_e);
		        }
		    };
		
		    return IndexedDBRWTransaction;
		}(IndexedDBROTransaction));
		var IndexedDBStore = function IndexedDBStore(cb, storeName) {
		    var this$1$1 = this;
		    if ( storeName === void 0 ) storeName = 'browserfs';
		
		    this.storeName = storeName;
		    var openReq = indexedDB.open(this.storeName, 1);
		    openReq.onupgradeneeded = function (event) {
		        var db = event.target.result;
		        // Huh. This should never happen; we're at version 1. Why does another
		        // database exist?
		        if (db.objectStoreNames.contains(this$1$1.storeName)) {
		            db.deleteObjectStore(this$1$1.storeName);
		        }
		        db.createObjectStore(this$1$1.storeName);
		    };
		    openReq.onsuccess = function (event) {
		        this$1$1.db = event.target.result;
		        cb(null, this$1$1);
		    };
		    openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
		};
		IndexedDBStore.prototype.name = function name () {
		    return IndexedDBFileSystem.Name + " - " + this.storeName;
		};
		IndexedDBStore.prototype.clear = function clear (cb) {
		    try {
		        var tx = this.db.transaction(this.storeName, 'readwrite'), objectStore = tx.objectStore(this.storeName), r = objectStore.clear();
		        r.onsuccess = function (event) {
		            // Use setTimeout to commit transaction.
		            setTimeout(cb, 0);
		        };
		        r.onerror = onErrorHandler(cb);
		    }
		    catch (e) {
		        cb(convertError$2(e));
		    }
		};
		IndexedDBStore.prototype.beginTransaction = function beginTransaction (type) {
		        if ( type === void 0 ) type = 'readonly';
		
		    var tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);
		    if (type === 'readwrite') {
		        return new IndexedDBRWTransaction(tx, objectStore);
		    }
		    else if (type === 'readonly') {
		        return new IndexedDBROTransaction(tx, objectStore);
		    }
		    else {
		        throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');
		    }
		};
		/**
		 * A file system that uses the IndexedDB key value file system.
		 */
		var IndexedDBFileSystem = (function (AsyncKeyValueFileSystem$$1) {
		    function IndexedDBFileSystem(cb, storeName, deprecateMsg) {
		        var this$1$1 = this;
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        AsyncKeyValueFileSystem$$1.call(this);
		        this.store = new IndexedDBStore(function (e) {
		            if (e) {
		                cb(e);
		            }
		            else {
		                this$1$1.init(this$1$1.store, function (e) {
		                    cb(e, this$1$1);
		                });
		            }
		        }, storeName);
		        deprecationMessage(deprecateMsg, IndexedDBFileSystem.Name, { storeName: storeName });
		    }
		
		    if ( AsyncKeyValueFileSystem$$1 ) IndexedDBFileSystem.__proto__ = AsyncKeyValueFileSystem$$1;
		    IndexedDBFileSystem.prototype = Object.create( AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype );
		    IndexedDBFileSystem.prototype.constructor = IndexedDBFileSystem;
		    /**
		     * Constructs an IndexedDB file system with the given options.
		     */
		    IndexedDBFileSystem.Create = function Create (opts, cb) {
		        // tslint:disable-next-line:no-unused-new
		        new IndexedDBFileSystem(cb, opts.storeName, false);
		        // tslint:enable-next-line:no-unused-new
		    };
		    IndexedDBFileSystem.isAvailable = function isAvailable () {
		        // In Safari's private browsing mode, indexedDB.open returns NULL.
		        // In Firefox, it throws an exception.
		        // In Chrome, it "just works", and clears the database when you leave the page.
		        // Untested: Opera, IE.
		        try {
		            return typeof indexedDB !== 'undefined' && null !== indexedDB.open("__browserfs_test__");
		        }
		        catch (e) {
		            return false;
		        }
		    };
		
		    return IndexedDBFileSystem;
		}(AsyncKeyValueFileSystem));
		
		IndexedDBFileSystem.Name = "IndexedDB";
		IndexedDBFileSystem.Options = {
		    storeName: {
		        type: "string",
		        optional: true,
		        description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
		    }
		};
		
		/**
		 * Some versions of FF and all versions of IE do not support the full range of
		 * 16-bit numbers encoded as characters, as they enforce UTF-16 restrictions.
		 * @url http://stackoverflow.com/questions/11170716/are-there-any-characters-that-are-not-allowed-in-localstorage/11173673#11173673
		 * @hidden
		 */
		var supportsBinaryString = false;
		var binaryEncoding;
		try {
		    global$1.localStorage.setItem("__test__", String.fromCharCode(0xD800));
		    supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
		}
		catch (e) {
		    // IE throws an exception.
		    supportsBinaryString = false;
		}
		binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';
		if (!Buffer.isEncoding(binaryEncoding)) {
		    // Fallback for non BrowserFS implementations of buffer that lack a
		    // binary_string format.
		    binaryEncoding = "base64";
		}
		/**
		 * A synchronous key-value store backed by localStorage.
		 */
		var LocalStorageStore = function LocalStorageStore () {};
		
		LocalStorageStore.prototype.name = function name () {
		    return LocalStorageFileSystem.Name;
		};
		LocalStorageStore.prototype.clear = function clear () {
		    global$1.localStorage.clear();
		};
		LocalStorageStore.prototype.beginTransaction = function beginTransaction (type) {
		    // No need to differentiate.
		    return new SimpleSyncRWTransaction(this);
		};
		LocalStorageStore.prototype.get = function get (key) {
		    try {
		        var data = global$1.localStorage.getItem(key);
		        if (data !== null) {
		            return Buffer.from(data, binaryEncoding);
		        }
		    }
		    catch (e) {
		        // Do nothing.
		    }
		    // Key doesn't exist, or a failure occurred.
		    return undefined;
		};
		LocalStorageStore.prototype.put = function put (key, data, overwrite) {
		    try {
		        if (!overwrite && global$1.localStorage.getItem(key) !== null) {
		            // Don't want to overwrite the key!
		            return false;
		        }
		        global$1.localStorage.setItem(key, data.toString(binaryEncoding));
		        return true;
		    }
		    catch (e) {
		        throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
		    }
		};
		LocalStorageStore.prototype.del = function del (key) {
		    try {
		        global$1.localStorage.removeItem(key);
		    }
		    catch (e) {
		        throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
		    }
		};
		/**
		 * A synchronous file system backed by localStorage. Connects our
		 * LocalStorageStore to our SyncKeyValueFileSystem.
		 */
		var LocalStorageFileSystem = (function (SyncKeyValueFileSystem$$1) {
		    function LocalStorageFileSystem() { SyncKeyValueFileSystem$$1.call(this, { store: new LocalStorageStore() }); }
		
		    if ( SyncKeyValueFileSystem$$1 ) LocalStorageFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
		    LocalStorageFileSystem.prototype = Object.create( SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype );
		    LocalStorageFileSystem.prototype.constructor = LocalStorageFileSystem;
		    /**
		     * Creates a LocalStorageFileSystem instance.
		     */
		    LocalStorageFileSystem.Create = function Create (options, cb) {
		        cb(null, new LocalStorageFileSystem());
		    };
		    LocalStorageFileSystem.isAvailable = function isAvailable () {
		        return typeof global$1.localStorage !== 'undefined';
		    };
		
		    return LocalStorageFileSystem;
		}(SyncKeyValueFileSystem));
		
		LocalStorageFileSystem.Name = "LocalStorage";
		LocalStorageFileSystem.Options = {};
		
		/**
		 * The MountableFileSystem allows you to mount multiple backend types or
		 * multiple instantiations of the same backend into a single file system tree.
		 * The file systems do not need to know about each other; all interactions are
		 * automatically facilitated through this interface.
		 *
		 * For example, if a file system is mounted at /mnt/blah, and a request came in
		 * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.
		 *
		 * You can mount file systems when you configure the file system:
		 * ```javascript
		 * BrowserFS.configure({
		 *   fs: "MountableFileSystem",
		 *   options: {
		 *     '/data': { fs: 'XmlHttpRequest', options: { index: "http://mysite.com/files/index.json" } },
		 *     '/home': { fs: 'LocalStorage' }
		 *   }
		 * }, function(e) {
		 *
		 * });
		 * ```
		 *
		 * For advanced users, you can also mount file systems *after* MFS is constructed:
		 * ```javascript
		 * BrowserFS.FileSystem.XmlHttpRequest.Create({
		 *   index: "http://mysite.com/files/index.json"
		 * }, function(e, xhrfs) {
		 *   BrowserFS.FileSystem.MountableFileSystem.Create({
		 *     '/data': xhrfs
		 *   }, function(e, mfs) {
		 *     BrowserFS.initialize(mfs);
		 *
		 *     // Added after-the-fact...
		 *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {
		 *       mfs.mount('/home', lsfs);
		 *     });
		 *   });
		 * });
		 * ```
		 *
		 * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.
		 *
		 * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.
		 */
		var MountableFileSystem = (function (BaseFileSystem$$1) {
		    function MountableFileSystem() {
		        BaseFileSystem$$1.call(this);
		        // Contains the list of mount points in mntMap, sorted by string length in decreasing order.
		        // Ensures that we scan the most specific mount points for a match first, which lets us
		        // nest mount points.
		        this.mountList = [];
		        this.mntMap = {};
		        // The InMemory file system serves purely to provide directory listings for
		        // mounted file systems.
		        this.rootFs = new InMemoryFileSystem();
		    }
		
		    if ( BaseFileSystem$$1 ) MountableFileSystem.__proto__ = BaseFileSystem$$1;
		    MountableFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    MountableFileSystem.prototype.constructor = MountableFileSystem;
		    /**
		     * Creates a MountableFileSystem instance with the given options.
		     */
		    MountableFileSystem.Create = function Create (opts, cb) {
		        var fs = new MountableFileSystem();
		        Object.keys(opts).forEach(function (mountPoint) {
		            fs.mount(mountPoint, opts[mountPoint]);
		        });
		        cb(null, fs);
		    };
		    MountableFileSystem.isAvailable = function isAvailable () {
		        return true;
		    };
		    /**
		     * Mounts the file system at the given mount point.
		     */
		    MountableFileSystem.prototype.mount = function mount (mountPoint, fs) {
		        if (mountPoint[0] !== '/') {
		            mountPoint = "/" + mountPoint;
		        }
		        mountPoint = path.resolve(mountPoint);
		        if (this.mntMap[mountPoint]) {
		            throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
		        }
		        mkdirpSync(mountPoint, 0x1ff, this.rootFs);
		        this.mntMap[mountPoint] = fs;
		        this.mountList.push(mountPoint);
		        this.mountList = this.mountList.sort(function (a, b) { return b.length - a.length; });
		    };
		    MountableFileSystem.prototype.umount = function umount (mountPoint) {
		        var this$1$1 = this;
		
		        if (mountPoint[0] !== '/') {
		            mountPoint = "/" + mountPoint;
		        }
		        mountPoint = path.resolve(mountPoint);
		        if (!this.mntMap[mountPoint]) {
		            throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
		        }
		        delete this.mntMap[mountPoint];
		        this.mountList.splice(this.mountList.indexOf(mountPoint), 1);
		        while (mountPoint !== '/') {
		            if (this$1$1.rootFs.readdirSync(mountPoint).length === 0) {
		                this$1$1.rootFs.rmdirSync(mountPoint);
		                mountPoint = path.dirname(mountPoint);
		            }
		            else {
		                break;
		            }
		        }
		    };
		    /**
		     * Returns the file system that the path points to.
		     */
		    MountableFileSystem.prototype._getFs = function _getFs (path$$1) {
		        var this$1$1 = this;
		
		        var mountList = this.mountList, len = mountList.length;
		        for (var i = 0; i < len; i++) {
		            var mountPoint = mountList[i];
		            // We know path is normalized, so it is a substring of the mount point.
		            if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
		                path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);
		                if (path$$1 === '') {
		                    path$$1 = '/';
		                }
		                return { fs: this$1$1.mntMap[mountPoint], path: path$$1 };
		            }
		        }
		        // Query our root file system.
		        return { fs: this.rootFs, path: path$$1 };
		    };
		    // Global information methods
		    MountableFileSystem.prototype.getName = function getName () {
		        return MountableFileSystem.Name;
		    };
		    MountableFileSystem.prototype.diskSpace = function diskSpace (path$$1, cb) {
		        cb(0, 0);
		    };
		    MountableFileSystem.prototype.isReadOnly = function isReadOnly () {
		        return false;
		    };
		    MountableFileSystem.prototype.supportsLinks = function supportsLinks () {
		        // I'm not ready for cross-FS links yet.
		        return false;
		    };
		    MountableFileSystem.prototype.supportsProps = function supportsProps () {
		        return false;
		    };
		    MountableFileSystem.prototype.supportsSynch = function supportsSynch () {
		        return true;
		    };
		    /**
		     * Fixes up error messages so they mention the mounted file location relative
		     * to the MFS root, not to the particular FS's root.
		     * Mutates the input error, and returns it.
		     */
		    MountableFileSystem.prototype.standardizeError = function standardizeError (err, path$$1, realPath) {
		        var index = err.message.indexOf(path$$1);
		        if (index !== -1) {
		            err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path$$1.length);
		            err.path = realPath;
		        }
		        return err;
		    };
		    // The following methods involve multiple file systems, and thus have custom
		    // logic.
		    // Note that we go through the Node API to use its robust default argument
		    // processing.
		    MountableFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
		        var this$1$1 = this;
		
		        // Scenario 1: old and new are on same FS.
		        var fs1rv = this._getFs(oldPath);
		        var fs2rv = this._getFs(newPath);
		        if (fs1rv.fs === fs2rv.fs) {
		            return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function (e) {
		                if (e) {
		                    this$1$1.standardizeError(this$1$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
		                }
		                cb(e);
		            });
		        }
		        // Scenario 2: Different file systems.
		        // Read old file, write new file, delete old file.
		        return _fsMock.readFile(oldPath, function (err, data) {
		            if (err) {
		                return cb(err);
		            }
		            _fsMock.writeFile(newPath, data, function (err) {
		                if (err) {
		                    return cb(err);
		                }
		                _fsMock.unlink(oldPath, cb);
		            });
		        });
		    };
		    MountableFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
		        // Scenario 1: old and new are on same FS.
		        var fs1rv = this._getFs(oldPath);
		        var fs2rv = this._getFs(newPath);
		        if (fs1rv.fs === fs2rv.fs) {
		            try {
		                return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
		            }
		            catch (e) {
		                this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
		                throw e;
		            }
		        }
		        // Scenario 2: Different file systems.
		        var data = _fsMock.readFileSync(oldPath);
		        _fsMock.writeFileSync(newPath, data);
		        return _fsMock.unlinkSync(oldPath);
		    };
		    MountableFileSystem.prototype.readdirSync = function readdirSync (p) {
		        var fsInfo = this._getFs(p);
		        // If null, rootfs did not have the directory
		        // (or the target FS is the root fs).
		        var rv = null;
		        // Mount points are all defined in the root FS.
		        // Ensure that we list those, too.
		        if (fsInfo.fs !== this.rootFs) {
		            try {
		                rv = this.rootFs.readdirSync(p);
		            }
		            catch (e) {
		                // Ignore.
		            }
		        }
		        try {
		            var rv2 = fsInfo.fs.readdirSync(fsInfo.path);
		            if (rv === null) {
		                return rv2;
		            }
		            else {
		                // Filter out duplicates.
		                return rv2.concat(rv.filter(function (val) { return rv2.indexOf(val) === -1; }));
		            }
		        }
		        catch (e) {
		            if (rv === null) {
		                throw this.standardizeError(e, fsInfo.path, p);
		            }
		            else {
		                // The root FS had something.
		                return rv;
		            }
		        }
		    };
		    MountableFileSystem.prototype.readdir = function readdir (p, cb) {
		        var this$1$1 = this;
		
		        var fsInfo = this._getFs(p);
		        fsInfo.fs.readdir(fsInfo.path, function (err, files) {
		            if (fsInfo.fs !== this$1$1.rootFs) {
		                try {
		                    var rv = this$1$1.rootFs.readdirSync(p);
		                    if (files) {
		                        // Filter out duplicates.
		                        files = files.concat(rv.filter(function (val) { return files.indexOf(val) === -1; }));
		                    }
		                    else {
		                        files = rv;
		                    }
		                }
		                catch (e) {
		                    // Root FS and target FS did not have directory.
		                    if (err) {
		                        return cb(this$1$1.standardizeError(err, fsInfo.path, p));
		                    }
		                }
		            }
		            else if (err) {
		                // Root FS and target FS are the same, and did not have directory.
		                return cb(this$1$1.standardizeError(err, fsInfo.path, p));
		            }
		            cb(null, files);
		        });
		    };
		    MountableFileSystem.prototype.rmdirSync = function rmdirSync (p) {
		        var fsInfo = this._getFs(p);
		        if (this._containsMountPt(p)) {
		            throw ApiError.ENOTEMPTY(p);
		        }
		        else {
		            try {
		                fsInfo.fs.rmdirSync(fsInfo.path);
		            }
		            catch (e) {
		                throw this.standardizeError(e, fsInfo.path, p);
		            }
		        }
		    };
		    MountableFileSystem.prototype.rmdir = function rmdir (p, cb) {
		        var this$1$1 = this;
		
		        var fsInfo = this._getFs(p);
		        if (this._containsMountPt(p)) {
		            cb(ApiError.ENOTEMPTY(p));
		        }
		        else {
		            fsInfo.fs.rmdir(fsInfo.path, function (err) {
		                cb(err ? this$1$1.standardizeError(err, fsInfo.path, p) : null);
		            });
		        }
		    };
		    /**
		     * Returns true if the given path contains a mount point.
		     */
		    MountableFileSystem.prototype._containsMountPt = function _containsMountPt (p) {
		        var mountPoints = this.mountList, len = mountPoints.length;
		        for (var i = 0; i < len; i++) {
		            var pt = mountPoints[i];
		            if (pt.length >= p.length && pt.slice(0, p.length) === p) {
		                return true;
		            }
		        }
		        return false;
		    };
		
		    return MountableFileSystem;
		}(BaseFileSystem));
		
		MountableFileSystem.Name = "MountableFileSystem";
		MountableFileSystem.Options = {};
		/**
		 * Tricky: Define all of the functions that merely forward arguments to the
		 * relevant file system, or return/throw an error.
		 * Take advantage of the fact that the *first* argument is always the path, and
		 * the *last* is the callback function (if async).
		 * @todo Can use numArgs to make proxying more efficient.
		 * @hidden
		 */
		function defineFcn(name, isSync, numArgs) {
		    if (isSync) {
		        return function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];
		
		            var path$$1 = args[0];
		            var rv = this._getFs(path$$1);
		            args[0] = rv.path;
		            try {
		                return rv.fs[name].apply(rv.fs, args);
		            }
		            catch (e) {
		                this.standardizeError(e, rv.path, path$$1);
		                throw e;
		            }
		        };
		    }
		    else {
		        return function () {
		            var this$1$1 = this;
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];
		
		            var path$$1 = args[0];
		            var rv = this._getFs(path$$1);
		            args[0] = rv.path;
		            if (typeof args[args.length - 1] === 'function') {
		                var cb = args[args.length - 1];
		                args[args.length - 1] = function () {
		                    var args = [], len = arguments.length;
		                    while ( len-- ) args[ len ] = arguments[ len ];
		
		                    if (args.length > 0 && args[0] instanceof ApiError) {
		                        this$1$1.standardizeError(args[0], rv.path, path$$1);
		                    }
		                    cb.apply(null, args);
		                };
		            }
		            return rv.fs[name].apply(rv.fs, args);
		        };
		    }
		}
		/**
		 * @hidden
		 */
		var fsCmdMap = [
		    // 1 arg functions
		    ['exists', 'unlink', 'readlink'],
		    // 2 arg functions
		    ['stat', 'mkdir', 'realpath', 'truncate'],
		    // 3 arg functions
		    ['open', 'readFile', 'chmod', 'utimes'],
		    // 4 arg functions
		    ['chown'],
		    // 5 arg functions
		    ['writeFile', 'appendFile']
		];
		for (var i = 0; i < fsCmdMap.length; i++) {
		    var cmds = fsCmdMap[i];
		    for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
		        var fnName = list[i$1];
		
		        MountableFileSystem.prototype[fnName] = defineFcn(fnName, false);
		        MountableFileSystem.prototype[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true);
		    }
		}
		
		/**
		 * @hidden
		 */
		var bfsSetImmediate;
		if (typeof (setImmediate) !== "undefined") {
		    bfsSetImmediate = setImmediate;
		}
		else {
		    var gScope = global$1;
		    var timeouts = [];
		    var messageName = "zero-timeout-message";
		    var canUsePostMessage = function () {
		        if (typeof gScope.importScripts !== 'undefined' || !gScope.postMessage) {
		            return false;
		        }
		        var postMessageIsAsync = true;
		        var oldOnMessage = gScope.onmessage;
		        gScope.onmessage = function () {
		            postMessageIsAsync = false;
		        };
		        gScope.postMessage('', '*');
		        gScope.onmessage = oldOnMessage;
		        return postMessageIsAsync;
		    };
		    if (canUsePostMessage()) {
		        bfsSetImmediate = function (fn) {
		            timeouts.push(fn);
		            gScope.postMessage(messageName, "*");
		        };
		        var handleMessage = function (event) {
		            if (event.source === self && event.data === messageName) {
		                if (event.stopPropagation) {
		                    event.stopPropagation();
		                }
		                else {
		                    event.cancelBubble = true;
		                }
		                if (timeouts.length > 0) {
		                    var fn = timeouts.shift();
		                    return fn();
		                }
		            }
		        };
		        if (gScope.addEventListener) {
		            gScope.addEventListener('message', handleMessage, true);
		        }
		        else {
		            gScope.attachEvent('onmessage', handleMessage);
		        }
		    }
		    else if (gScope.MessageChannel) {
		        // WebWorker MessageChannel
		        var channel = new gScope.MessageChannel();
		        channel.port1.onmessage = function (event) {
		            if (timeouts.length > 0) {
		                return timeouts.shift()();
		            }
		        };
		        bfsSetImmediate = function (fn) {
		            timeouts.push(fn);
		            channel.port2.postMessage('');
		        };
		    }
		    else {
		        bfsSetImmediate = function (fn) {
		            return setTimeout(fn, 0);
		        };
		    }
		}
		var setImmediate$3 = bfsSetImmediate;
		
		/**
		 * Non-recursive mutex
		 * @hidden
		 */
		var Mutex = function Mutex() {
		    this._locked = false;
		    this._waiters = [];
		};
		Mutex.prototype.lock = function lock (cb) {
		    if (this._locked) {
		        this._waiters.push(cb);
		        return;
		    }
		    this._locked = true;
		    cb();
		};
		Mutex.prototype.unlock = function unlock () {
		    if (!this._locked) {
		        throw new Error('unlock of a non-locked mutex');
		    }
		    var next = this._waiters.shift();
		    // don't unlock - we want to queue up next for the
		    // _end_ of the current task execution, but we don't
		    // want it to be called inline with whatever the
		    // current stack is.  This way we still get the nice
		    // behavior that an unlock immediately followed by a
		    // lock won't cause starvation.
		    if (next) {
		        setImmediate$3(next);
		        return;
		    }
		    this._locked = false;
		};
		Mutex.prototype.tryLock = function tryLock () {
		    if (this._locked) {
		        return false;
		    }
		    this._locked = true;
		    return true;
		};
		Mutex.prototype.isLocked = function isLocked () {
		    return this._locked;
		};
		
		/**
		 * This class serializes access to an underlying async filesystem.
		 * For example, on an OverlayFS instance with an async lower
		 * directory operations like rename and rmdir may involve multiple
		 * requests involving both the upper and lower filesystems -- they
		 * are not executed in a single atomic step.  OverlayFS uses this
		 * LockedFS to avoid having to reason about the correctness of
		 * multiple requests interleaving.
		 */
		var LockedFS = function LockedFS(fs) {
		    this._fs = fs;
		    this._mu = new Mutex();
		};
		LockedFS.prototype.getName = function getName () {
		    return 'LockedFS<' + this._fs.getName() + '>';
		};
		LockedFS.prototype.getFSUnlocked = function getFSUnlocked () {
		    return this._fs;
		};
		LockedFS.prototype.initialize = function initialize (cb) {
		    // FIXME: check to see if FS supports initialization
		    this._fs.initialize(cb);
		};
		LockedFS.prototype.diskSpace = function diskSpace (p, cb) {
		    // FIXME: should this lock?
		    this._fs.diskSpace(p, cb);
		};
		LockedFS.prototype.isReadOnly = function isReadOnly () {
		    return this._fs.isReadOnly();
		};
		LockedFS.prototype.supportsLinks = function supportsLinks () {
		    return this._fs.supportsLinks();
		};
		LockedFS.prototype.supportsProps = function supportsProps () {
		    return this._fs.supportsProps();
		};
		LockedFS.prototype.supportsSynch = function supportsSynch () {
		    return this._fs.supportsSynch();
		};
		LockedFS.prototype.rename = function rename (oldPath, newPath, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.rename(oldPath, newPath, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.renameSync = function renameSync (oldPath, newPath) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.renameSync(oldPath, newPath);
		};
		LockedFS.prototype.stat = function stat (p, isLstat, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.stat(p, isLstat, function (err, stat) {
		            this$1$1._mu.unlock();
		            cb(err, stat);
		        });
		    });
		};
		LockedFS.prototype.statSync = function statSync (p, isLstat) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.statSync(p, isLstat);
		};
		LockedFS.prototype.open = function open (p, flag, mode, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.open(p, flag, mode, function (err, fd) {
		            this$1$1._mu.unlock();
		            cb(err, fd);
		        });
		    });
		};
		LockedFS.prototype.openSync = function openSync (p, flag, mode) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.openSync(p, flag, mode);
		};
		LockedFS.prototype.unlink = function unlink (p, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.unlink(p, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.unlinkSync = function unlinkSync (p) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.unlinkSync(p);
		};
		LockedFS.prototype.rmdir = function rmdir (p, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.rmdir(p, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.rmdirSync = function rmdirSync (p) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.rmdirSync(p);
		};
		LockedFS.prototype.mkdir = function mkdir (p, mode, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.mkdir(p, mode, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.mkdirSync = function mkdirSync (p, mode) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.mkdirSync(p, mode);
		};
		LockedFS.prototype.readdir = function readdir (p, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.readdir(p, function (err, files) {
		            this$1$1._mu.unlock();
		            cb(err, files);
		        });
		    });
		};
		LockedFS.prototype.readdirSync = function readdirSync (p) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.readdirSync(p);
		};
		LockedFS.prototype.exists = function exists (p, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.exists(p, function (exists) {
		            this$1$1._mu.unlock();
		            cb(exists);
		        });
		    });
		};
		LockedFS.prototype.existsSync = function existsSync (p) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.existsSync(p);
		};
		LockedFS.prototype.realpath = function realpath (p, cache, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.realpath(p, cache, function (err, resolvedPath) {
		            this$1$1._mu.unlock();
		            cb(err, resolvedPath);
		        });
		    });
		};
		LockedFS.prototype.realpathSync = function realpathSync (p, cache) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.realpathSync(p, cache);
		};
		LockedFS.prototype.truncate = function truncate (p, len, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.truncate(p, len, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.truncateSync = function truncateSync (p, len) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.truncateSync(p, len);
		};
		LockedFS.prototype.readFile = function readFile (fname, encoding, flag, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.readFile(fname, encoding, flag, function (err, data) {
		            this$1$1._mu.unlock();
		            cb(err, data);
		        });
		    });
		};
		LockedFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.readFileSync(fname, encoding, flag);
		};
		LockedFS.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.writeFile(fname, data, encoding, flag, mode, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.writeFileSync = function writeFileSync (fname, data, encoding, flag, mode) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.writeFileSync(fname, data, encoding, flag, mode);
		};
		LockedFS.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.appendFile(fname, data, encoding, flag, mode, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.appendFileSync = function appendFileSync (fname, data, encoding, flag, mode) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.appendFileSync(fname, data, encoding, flag, mode);
		};
		LockedFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.chmod(p, isLchmod, mode, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.chmodSync(p, isLchmod, mode);
		};
		LockedFS.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.chown(p, isLchown, uid, gid, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.chownSync(p, isLchown, uid, gid);
		};
		LockedFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.utimes(p, atime, mtime, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.utimesSync = function utimesSync (p, atime, mtime) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.utimesSync(p, atime, mtime);
		};
		LockedFS.prototype.link = function link (srcpath, dstpath, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.link(srcpath, dstpath, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.linkSync = function linkSync (srcpath, dstpath) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.linkSync(srcpath, dstpath);
		};
		LockedFS.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.symlink(srcpath, dstpath, type, function (err) {
		            this$1$1._mu.unlock();
		            cb(err);
		        });
		    });
		};
		LockedFS.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.symlinkSync(srcpath, dstpath, type);
		};
		LockedFS.prototype.readlink = function readlink (p, cb) {
		        var this$1$1 = this;
		
		    this._mu.lock(function () {
		        this$1$1._fs.readlink(p, function (err, linkString) {
		            this$1$1._mu.unlock();
		            cb(err, linkString);
		        });
		    });
		};
		LockedFS.prototype.readlinkSync = function readlinkSync (p) {
		    if (this._mu.isLocked()) {
		        throw new Error('invalid sync call');
		    }
		    return this._fs.readlinkSync(p);
		};
		
		/**
		 * @hidden
		 */
		var deletionLogPath = '/.deletedFiles.log';
		/**
		 * Given a read-only mode, makes it writable.
		 * @hidden
		 */
		function makeModeWritable(mode) {
		    return 146 | mode;
		}
		/**
		 * @hidden
		 */
		function getFlag(f) {
		    return FileFlag.getFileFlag(f);
		}
		/**
		 * Overlays a RO file to make it writable.
		 */
		var OverlayFile = (function (PreloadFile$$1) {
		    function OverlayFile(fs, path$$1, flag, stats, data) {
		        PreloadFile$$1.call(this, fs, path$$1, flag, stats, data);
		    }
		
		    if ( PreloadFile$$1 ) OverlayFile.__proto__ = PreloadFile$$1;
		    OverlayFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    OverlayFile.prototype.constructor = OverlayFile;
		    OverlayFile.prototype.sync = function sync (cb) {
		        var this$1$1 = this;
		
		        if (!this.isDirty()) {
		            cb(null);
		            return;
		        }
		        this._fs._syncAsync(this, function (err) {
		            this$1$1.resetDirty();
		            cb(err);
		        });
		    };
		    OverlayFile.prototype.syncSync = function syncSync () {
		        if (this.isDirty()) {
		            this._fs._syncSync(this);
		            this.resetDirty();
		        }
		    };
		    OverlayFile.prototype.close = function close (cb) {
		        this.sync(cb);
		    };
		    OverlayFile.prototype.closeSync = function closeSync () {
		        this.syncSync();
		    };
		
		    return OverlayFile;
		}(PreloadFile));
		/**
		 * *INTERNAL, DO NOT USE DIRECTLY!*
		 *
		 * Core OverlayFS class that contains no locking whatsoever. We wrap these objects
		 * in a LockedFS to prevent races.
		 */
		var UnlockedOverlayFS = (function (BaseFileSystem$$1) {
		    function UnlockedOverlayFS(writable, readable) {
		        BaseFileSystem$$1.call(this);
		        this._isInitialized = false;
		        this._initializeCallbacks = [];
		        this._deletedFiles = {};
		        this._deleteLog = '';
		        // If 'true', we have scheduled a delete log update.
		        this._deleteLogUpdatePending = false;
		        // If 'true', a delete log update is needed after the scheduled delete log
		        // update finishes.
		        this._deleteLogUpdateNeeded = false;
		        // If there was an error updating the delete log...
		        this._deleteLogError = null;
		        this._writable = writable;
		        this._readable = readable;
		        if (this._writable.isReadOnly()) {
		            throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
		        }
		    }
		
		    if ( BaseFileSystem$$1 ) UnlockedOverlayFS.__proto__ = BaseFileSystem$$1;
		    UnlockedOverlayFS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    UnlockedOverlayFS.prototype.constructor = UnlockedOverlayFS;
		    UnlockedOverlayFS.isAvailable = function isAvailable () {
		        return true;
		    };
		    UnlockedOverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems () {
		        return {
		            readable: this._readable,
		            writable: this._writable
		        };
		    };
		    UnlockedOverlayFS.prototype._syncAsync = function _syncAsync (file, cb) {
		        var this$1$1 = this;
		
		        this.createParentDirectoriesAsync(file.getPath(), function (err) {
		            if (err) {
		                return cb(err);
		            }
		            this$1$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode, cb);
		        });
		    };
		    UnlockedOverlayFS.prototype._syncSync = function _syncSync (file) {
		        this.createParentDirectories(file.getPath());
		        this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode);
		    };
		    UnlockedOverlayFS.prototype.getName = function getName () {
		        return OverlayFS.Name;
		    };
		    /**
		     * Called once to load up metadata stored on the writable file system.
		     */
		    UnlockedOverlayFS.prototype.initialize = function initialize (cb) {
		        var this$1$1 = this;
		
		        var callbackArray = this._initializeCallbacks;
		        var end = function (e) {
		            this$1$1._isInitialized = !e;
		            this$1$1._initializeCallbacks = [];
		            callbackArray.forEach((function (cb) { return cb(e); }));
		        };
		        // if we're already initialized, immediately invoke the callback
		        if (this._isInitialized) {
		            return cb();
		        }
		        callbackArray.push(cb);
		        // The first call to initialize initializes, the rest wait for it to complete.
		        if (callbackArray.length !== 1) {
		            return;
		        }
		        // Read deletion log, process into metadata.
		        this._writable.readFile(deletionLogPath, 'utf8', getFlag('r'), function (err, data) {
		            if (err) {
		                // ENOENT === Newly-instantiated file system, and thus empty log.
		                if (err.errno !== ErrorCode.ENOENT) {
		                    return end(err);
		                }
		            }
		            else {
		                this$1$1._deleteLog = data;
		            }
		            this$1$1._reparseDeletionLog();
		            end();
		        });
		    };
		    UnlockedOverlayFS.prototype.isReadOnly = function isReadOnly () { return false; };
		    UnlockedOverlayFS.prototype.supportsSynch = function supportsSynch () { return this._readable.supportsSynch() && this._writable.supportsSynch(); };
		    UnlockedOverlayFS.prototype.supportsLinks = function supportsLinks () { return false; };
		    UnlockedOverlayFS.prototype.supportsProps = function supportsProps () { return this._readable.supportsProps() && this._writable.supportsProps(); };
		    UnlockedOverlayFS.prototype.getDeletionLog = function getDeletionLog () {
		        return this._deleteLog;
		    };
		    UnlockedOverlayFS.prototype.restoreDeletionLog = function restoreDeletionLog (log) {
		        this._deleteLog = log;
		        this._reparseDeletionLog();
		        this.updateLog('');
		    };
		    UnlockedOverlayFS.prototype.rename = function rename (oldPath, newPath, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
		            return;
		        }
		        if (oldPath === deletionLogPath || newPath === deletionLogPath) {
		            return cb(ApiError.EPERM('Cannot rename deletion log.'));
		        }
		        // nothing to do if paths match
		        if (oldPath === newPath) {
		            return cb();
		        }
		        this.stat(oldPath, false, function (oldErr, oldStats) {
		            if (oldErr) {
		                return cb(oldErr);
		            }
		            return this$1$1.stat(newPath, false, function (newErr, newStats) {
		                var self = this$1$1;
		                // precondition: both oldPath and newPath exist and are dirs.
		                // decreases: |files|
		                // Need to move *every file/folder* currently stored on
		                // readable to its new location on writable.
		                function copyDirContents(files) {
		                    var file = files.shift();
		                    if (!file) {
		                        return cb();
		                    }
		                    var oldFile = path.resolve(oldPath, file);
		                    var newFile = path.resolve(newPath, file);
		                    // Recursion! Should work for any nested files / folders.
		                    self.rename(oldFile, newFile, function (err) {
		                        if (err) {
		                            return cb(err);
		                        }
		                        copyDirContents(files);
		                    });
		                }
		                var mode = 511;
		                // from linux's rename(2) manpage: oldpath can specify a
		                // directory.  In this case, newpath must either not exist, or
		                // it must specify an empty directory.
		                if (oldStats.isDirectory()) {
		                    if (newErr) {
		                        if (newErr.errno !== ErrorCode.ENOENT) {
		                            return cb(newErr);
		                        }
		                        return this$1$1._writable.exists(oldPath, function (exists) {
		                            // simple case - both old and new are on the writable layer
		                            if (exists) {
		                                return this$1$1._writable.rename(oldPath, newPath, cb);
		                            }
		                            this$1$1._writable.mkdir(newPath, mode, function (mkdirErr) {
		                                if (mkdirErr) {
		                                    return cb(mkdirErr);
		                                }
		                                this$1$1._readable.readdir(oldPath, function (err, files) {
		                                    if (err) {
		                                        return cb();
		                                    }
		                                    copyDirContents(files);
		                                });
		                            });
		                        });
		                    }
		                    mode = newStats.mode;
		                    if (!newStats.isDirectory()) {
		                        return cb(ApiError.ENOTDIR(newPath));
		                    }
		                    this$1$1.readdir(newPath, function (readdirErr, files) {
		                        if (files && files.length) {
		                            return cb(ApiError.ENOTEMPTY(newPath));
		                        }
		                        this$1$1._readable.readdir(oldPath, function (err, files) {
		                            if (err) {
		                                return cb();
		                            }
		                            copyDirContents(files);
		                        });
		                    });
		                }
		                if (newStats && newStats.isDirectory()) {
		                    return cb(ApiError.EISDIR(newPath));
		                }
		                this$1$1.readFile(oldPath, null, getFlag('r'), function (err, data) {
		                    if (err) {
		                        return cb(err);
		                    }
		                    return this$1$1.writeFile(newPath, data, null, getFlag('w'), oldStats.mode, function (err) {
		                        if (err) {
		                            return cb(err);
		                        }
		                        return this$1$1.unlink(oldPath, cb);
		                    });
		                });
		            });
		        });
		    };
		    UnlockedOverlayFS.prototype.renameSync = function renameSync (oldPath, newPath) {
		        var this$1$1 = this;
		
		        this.checkInitialized();
		        this.checkPath(oldPath);
		        this.checkPath(newPath);
		        if (oldPath === deletionLogPath || newPath === deletionLogPath) {
		            throw ApiError.EPERM('Cannot rename deletion log.');
		        }
		        // Write newPath using oldPath's contents, delete oldPath.
		        var oldStats = this.statSync(oldPath, false);
		        if (oldStats.isDirectory()) {
		            // Optimization: Don't bother moving if old === new.
		            if (oldPath === newPath) {
		                return;
		            }
		            var mode = 511;
		            if (this.existsSync(newPath)) {
		                var stats = this.statSync(newPath, false);
		                mode = stats.mode;
		                if (stats.isDirectory()) {
		                    if (this.readdirSync(newPath).length > 0) {
		                        throw ApiError.ENOTEMPTY(newPath);
		                    }
		                }
		                else {
		                    throw ApiError.ENOTDIR(newPath);
		                }
		            }
		            // Take care of writable first. Move any files there, or create an empty directory
		            // if it doesn't exist.
		            if (this._writable.existsSync(oldPath)) {
		                this._writable.renameSync(oldPath, newPath);
		            }
		            else if (!this._writable.existsSync(newPath)) {
		                this._writable.mkdirSync(newPath, mode);
		            }
		            // Need to move *every file/folder* currently stored on readable to its new location
		            // on writable.
		            if (this._readable.existsSync(oldPath)) {
		                this._readable.readdirSync(oldPath).forEach(function (name) {
		                    // Recursion! Should work for any nested files / folders.
		                    this$1$1.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name));
		                });
		            }
		        }
		        else {
		            if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
		                throw ApiError.EISDIR(newPath);
		            }
		            this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag('r')), null, getFlag('w'), oldStats.mode);
		        }
		        if (oldPath !== newPath && this.existsSync(oldPath)) {
		            this.unlinkSync(oldPath);
		        }
		    };
		    UnlockedOverlayFS.prototype.stat = function stat (p, isLstat, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        this._writable.stat(p, isLstat, function (err, stat) {
		            if (err && err.errno === ErrorCode.ENOENT) {
		                if (this$1$1._deletedFiles[p]) {
		                    cb(ApiError.ENOENT(p));
		                }
		                this$1$1._readable.stat(p, isLstat, function (err, stat) {
		                    if (stat) {
		                        // Make the oldStat's mode writable. Preserve the topmost
		                        // part of the mode, which specifies if it is a file or a
		                        // directory.
		                        stat = stat.clone();
		                        stat.mode = makeModeWritable(stat.mode);
		                    }
		                    cb(err, stat);
		                });
		            }
		            else {
		                cb(err, stat);
		            }
		        });
		    };
		    UnlockedOverlayFS.prototype.statSync = function statSync (p, isLstat) {
		        this.checkInitialized();
		        try {
		            return this._writable.statSync(p, isLstat);
		        }
		        catch (e) {
		            if (this._deletedFiles[p]) {
		                throw ApiError.ENOENT(p);
		            }
		            var oldStat = this._readable.statSync(p, isLstat).clone();
		            // Make the oldStat's mode writable. Preserve the topmost part of the
		            // mode, which specifies if it is a file or a directory.
		            oldStat.mode = makeModeWritable(oldStat.mode);
		            return oldStat;
		        }
		    };
		    UnlockedOverlayFS.prototype.open = function open (p, flag, mode, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
		            return;
		        }
		        this.stat(p, false, function (err, stats) {
		            if (stats) {
		                switch (flag.pathExistsAction()) {
		                    case ActionType.TRUNCATE_FILE:
		                        return this$1$1.createParentDirectoriesAsync(p, function (err) {
		                            if (err) {
		                                return cb(err);
		                            }
		                            this$1$1._writable.open(p, flag, mode, cb);
		                        });
		                    case ActionType.NOP:
		                        return this$1$1._writable.exists(p, function (exists) {
		                            if (exists) {
		                                this$1$1._writable.open(p, flag, mode, cb);
		                            }
		                            else {
		                                // at this point we know the stats object we got is from
		                                // the readable FS.
		                                stats = stats.clone();
		                                stats.mode = mode;
		                                this$1$1._readable.readFile(p, null, getFlag('r'), function (readFileErr, data) {
		                                    if (readFileErr) {
		                                        return cb(readFileErr);
		                                    }
		                                    if (stats.size === -1) {
		                                        stats.size = data.length;
		                                    }
		                                    var f = new OverlayFile(this$1$1, p, flag, stats, data);
		                                    cb(null, f);
		                                });
		                            }
		                        });
		                    default:
		                        return cb(ApiError.EEXIST(p));
		                }
		            }
		            else {
		                switch (flag.pathNotExistsAction()) {
		                    case ActionType.CREATE_FILE:
		                        return this$1$1.createParentDirectoriesAsync(p, function (err) {
		                            if (err) {
		                                return cb(err);
		                            }
		                            return this$1$1._writable.open(p, flag, mode, cb);
		                        });
		                    default:
		                        return cb(ApiError.ENOENT(p));
		                }
		            }
		        });
		    };
		    UnlockedOverlayFS.prototype.openSync = function openSync (p, flag, mode) {
		        this.checkInitialized();
		        this.checkPath(p);
		        if (p === deletionLogPath) {
		            throw ApiError.EPERM('Cannot open deletion log.');
		        }
		        if (this.existsSync(p)) {
		            switch (flag.pathExistsAction()) {
		                case ActionType.TRUNCATE_FILE:
		                    this.createParentDirectories(p);
		                    return this._writable.openSync(p, flag, mode);
		                case ActionType.NOP:
		                    if (this._writable.existsSync(p)) {
		                        return this._writable.openSync(p, flag, mode);
		                    }
		                    else {
		                        // Create an OverlayFile.
		                        var buf = this._readable.readFileSync(p, null, getFlag('r'));
		                        var stats = this._readable.statSync(p, false).clone();
		                        stats.mode = mode;
		                        return new OverlayFile(this, p, flag, stats, buf);
		                    }
		                default:
		                    throw ApiError.EEXIST(p);
		            }
		        }
		        else {
		            switch (flag.pathNotExistsAction()) {
		                case ActionType.CREATE_FILE:
		                    this.createParentDirectories(p);
		                    return this._writable.openSync(p, flag, mode);
		                default:
		                    throw ApiError.ENOENT(p);
		            }
		        }
		    };
		    UnlockedOverlayFS.prototype.unlink = function unlink (p, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
		            return;
		        }
		        this.exists(p, function (exists) {
		            if (!exists) {
		                return cb(ApiError.ENOENT(p));
		            }
		            this$1$1._writable.exists(p, function (writableExists) {
		                if (writableExists) {
		                    return this$1$1._writable.unlink(p, function (err) {
		                        if (err) {
		                            return cb(err);
		                        }
		                        this$1$1.exists(p, function (readableExists) {
		                            if (readableExists) {
		                                this$1$1.deletePath(p);
		                            }
		                            cb(null);
		                        });
		                    });
		                }
		                else {
		                    // if this only exists on the readable FS, add it to the
		                    // delete map.
		                    this$1$1.deletePath(p);
		                    cb(null);
		                }
		            });
		        });
		    };
		    UnlockedOverlayFS.prototype.unlinkSync = function unlinkSync (p) {
		        this.checkInitialized();
		        this.checkPath(p);
		        if (this.existsSync(p)) {
		            if (this._writable.existsSync(p)) {
		                this._writable.unlinkSync(p);
		            }
		            // if it still exists add to the delete log
		            if (this.existsSync(p)) {
		                this.deletePath(p);
		            }
		        }
		        else {
		            throw ApiError.ENOENT(p);
		        }
		    };
		    UnlockedOverlayFS.prototype.rmdir = function rmdir (p, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        var rmdirLower = function () {
		            this$1$1.readdir(p, function (err, files) {
		                if (err) {
		                    return cb(err);
		                }
		                if (files.length) {
		                    return cb(ApiError.ENOTEMPTY(p));
		                }
		                this$1$1.deletePath(p);
		                cb(null);
		            });
		        };
		        this.exists(p, function (exists) {
		            if (!exists) {
		                return cb(ApiError.ENOENT(p));
		            }
		            this$1$1._writable.exists(p, function (writableExists) {
		                if (writableExists) {
		                    this$1$1._writable.rmdir(p, function (err) {
		                        if (err) {
		                            return cb(err);
		                        }
		                        this$1$1._readable.exists(p, function (readableExists) {
		                            if (readableExists) {
		                                rmdirLower();
		                            }
		                            else {
		                                cb();
		                            }
		                        });
		                    });
		                }
		                else {
		                    rmdirLower();
		                }
		            });
		        });
		    };
		    UnlockedOverlayFS.prototype.rmdirSync = function rmdirSync (p) {
		        this.checkInitialized();
		        if (this.existsSync(p)) {
		            if (this._writable.existsSync(p)) {
		                this._writable.rmdirSync(p);
		            }
		            if (this.existsSync(p)) {
		                // Check if directory is empty.
		                if (this.readdirSync(p).length > 0) {
		                    throw ApiError.ENOTEMPTY(p);
		                }
		                else {
		                    this.deletePath(p);
		                }
		            }
		        }
		        else {
		            throw ApiError.ENOENT(p);
		        }
		    };
		    UnlockedOverlayFS.prototype.mkdir = function mkdir (p, mode, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        this.exists(p, function (exists) {
		            if (exists) {
		                return cb(ApiError.EEXIST(p));
		            }
		            // The below will throw should any of the parent directories
		            // fail to exist on _writable.
		            this$1$1.createParentDirectoriesAsync(p, function (err) {
		                if (err) {
		                    return cb(err);
		                }
		                this$1$1._writable.mkdir(p, mode, cb);
		            });
		        });
		    };
		    UnlockedOverlayFS.prototype.mkdirSync = function mkdirSync (p, mode) {
		        this.checkInitialized();
		        if (this.existsSync(p)) {
		            throw ApiError.EEXIST(p);
		        }
		        else {
		            // The below will throw should any of the parent directories fail to exist
		            // on _writable.
		            this.createParentDirectories(p);
		            this._writable.mkdirSync(p, mode);
		        }
		    };
		    UnlockedOverlayFS.prototype.readdir = function readdir (p, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        this.stat(p, false, function (err, dirStats) {
		            if (err) {
		                return cb(err);
		            }
		            if (!dirStats.isDirectory()) {
		                return cb(ApiError.ENOTDIR(p));
		            }
		            this$1$1._writable.readdir(p, function (err, wFiles) {
		                if (err && err.code !== 'ENOENT') {
		                    return cb(err);
		                }
		                else if (err || !wFiles) {
		                    wFiles = [];
		                }
		                this$1$1._readable.readdir(p, function (err, rFiles) {
		                    // if the directory doesn't exist on the lower FS set rFiles
		                    // here to simplify the following code.
		                    if (err || !rFiles) {
		                        rFiles = [];
		                    }
		                    // Readdir in both, check delete log on read-only file system's files, merge, return.
		                    var seenMap = {};
		                    var filtered = wFiles.concat(rFiles.filter(function (fPath) { return !this$1$1._deletedFiles[(p + "/" + fPath)]; })).filter(function (fPath) {
		                        // Remove duplicates.
		                        var result = !seenMap[fPath];
		                        seenMap[fPath] = true;
		                        return result;
		                    });
		                    cb(null, filtered);
		                });
		            });
		        });
		    };
		    UnlockedOverlayFS.prototype.readdirSync = function readdirSync (p) {
		        var this$1$1 = this;
		
		        this.checkInitialized();
		        var dirStats = this.statSync(p, false);
		        if (!dirStats.isDirectory()) {
		            throw ApiError.ENOTDIR(p);
		        }
		        // Readdir in both, check delete log on RO file system's listing, merge, return.
		        var contents = [];
		        try {
		            contents = contents.concat(this._writable.readdirSync(p));
		        }
		        catch (e) {
		            // NOP.
		        }
		        try {
		            contents = contents.concat(this._readable.readdirSync(p).filter(function (fPath) { return !this$1$1._deletedFiles[(p + "/" + fPath)]; }));
		        }
		        catch (e) {
		            // NOP.
		        }
		        var seenMap = {};
		        return contents.filter(function (fileP) {
		            var result = !seenMap[fileP];
		            seenMap[fileP] = true;
		            return result;
		        });
		    };
		    UnlockedOverlayFS.prototype.exists = function exists (p, cb) {
		        var this$1$1 = this;
		
		        // Cannot pass an error back to callback, so throw an exception instead
		        // if not initialized.
		        this.checkInitialized();
		        this._writable.exists(p, function (existsWritable) {
		            if (existsWritable) {
		                return cb(true);
		            }
		            this$1$1._readable.exists(p, function (existsReadable) {
		                cb(existsReadable && this$1$1._deletedFiles[p] !== true);
		            });
		        });
		    };
		    UnlockedOverlayFS.prototype.existsSync = function existsSync (p) {
		        this.checkInitialized();
		        return this._writable.existsSync(p) || (this._readable.existsSync(p) && this._deletedFiles[p] !== true);
		    };
		    UnlockedOverlayFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        this.operateOnWritableAsync(p, function (err) {
		            if (err) {
		                return cb(err);
		            }
		            else {
		                this$1$1._writable.chmod(p, isLchmod, mode, cb);
		            }
		        });
		    };
		    UnlockedOverlayFS.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
		        var this$1$1 = this;
		
		        this.checkInitialized();
		        this.operateOnWritable(p, function () {
		            this$1$1._writable.chmodSync(p, isLchmod, mode);
		        });
		    };
		    UnlockedOverlayFS.prototype.chown = function chown (p, isLchmod, uid, gid, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        this.operateOnWritableAsync(p, function (err) {
		            if (err) {
		                return cb(err);
		            }
		            else {
		                this$1$1._writable.chown(p, isLchmod, uid, gid, cb);
		            }
		        });
		    };
		    UnlockedOverlayFS.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
		        var this$1$1 = this;
		
		        this.checkInitialized();
		        this.operateOnWritable(p, function () {
		            this$1$1._writable.chownSync(p, isLchown, uid, gid);
		        });
		    };
		    UnlockedOverlayFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
		        var this$1$1 = this;
		
		        if (!this.checkInitAsync(cb)) {
		            return;
		        }
		        this.operateOnWritableAsync(p, function (err) {
		            if (err) {
		                return cb(err);
		            }
		            else {
		                this$1$1._writable.utimes(p, atime, mtime, cb);
		            }
		        });
		    };
		    UnlockedOverlayFS.prototype.utimesSync = function utimesSync (p, atime, mtime) {
		        var this$1$1 = this;
		
		        this.checkInitialized();
		        this.operateOnWritable(p, function () {
		            this$1$1._writable.utimesSync(p, atime, mtime);
		        });
		    };
		    UnlockedOverlayFS.prototype.deletePath = function deletePath (p) {
		        this._deletedFiles[p] = true;
		        this.updateLog(("d" + p + "\n"));
		    };
		    UnlockedOverlayFS.prototype.updateLog = function updateLog (addition) {
		        var this$1$1 = this;
		
		        this._deleteLog += addition;
		        if (this._deleteLogUpdatePending) {
		            this._deleteLogUpdateNeeded = true;
		        }
		        else {
		            this._deleteLogUpdatePending = true;
		            this._writable.writeFile(deletionLogPath, this._deleteLog, 'utf8', FileFlag.getFileFlag('w'), 420, function (e) {
		                this$1$1._deleteLogUpdatePending = false;
		                if (e) {
		                    this$1$1._deleteLogError = e;
		                }
		                else if (this$1$1._deleteLogUpdateNeeded) {
		                    this$1$1._deleteLogUpdateNeeded = false;
		                    this$1$1.updateLog('');
		                }
		            });
		        }
		    };
		    UnlockedOverlayFS.prototype._reparseDeletionLog = function _reparseDeletionLog () {
		        var this$1$1 = this;
		
		        this._deletedFiles = {};
		        this._deleteLog.split('\n').forEach(function (path$$1) {
		            // If the log entry begins w/ 'd', it's a deletion.
		            this$1$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === 'd';
		        });
		    };
		    UnlockedOverlayFS.prototype.checkInitialized = function checkInitialized () {
		        if (!this._isInitialized) {
		            throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
		        }
		        else if (this._deleteLogError !== null) {
		            var e = this._deleteLogError;
		            this._deleteLogError = null;
		            throw e;
		        }
		    };
		    UnlockedOverlayFS.prototype.checkInitAsync = function checkInitAsync (cb) {
		        if (!this._isInitialized) {
		            cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
		            return false;
		        }
		        else if (this._deleteLogError !== null) {
		            var e = this._deleteLogError;
		            this._deleteLogError = null;
		            cb(e);
		            return false;
		        }
		        return true;
		    };
		    UnlockedOverlayFS.prototype.checkPath = function checkPath (p) {
		        if (p === deletionLogPath) {
		            throw ApiError.EPERM(p);
		        }
		    };
		    UnlockedOverlayFS.prototype.checkPathAsync = function checkPathAsync (p, cb) {
		        if (p === deletionLogPath) {
		            cb(ApiError.EPERM(p));
		            return true;
		        }
		        return false;
		    };
		    UnlockedOverlayFS.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync (p, cb) {
		        var parent = path.dirname(p);
		        var toCreate = [];
		        var self = this;
		        this._writable.stat(parent, false, statDone);
		        function statDone(err, stat) {
		            if (err) {
		                toCreate.push(parent);
		                parent = path.dirname(parent);
		                self._writable.stat(parent, false, statDone);
		            }
		            else {
		                createParents();
		            }
		        }
		        function createParents() {
		            if (!toCreate.length) {
		                return cb();
		            }
		            var dir = toCreate.pop();
		            self._readable.stat(dir, false, function (err, stats) {
		                // stop if we couldn't read the dir
		                if (!stats) {
		                    return cb();
		                }
		                self._writable.mkdir(dir, stats.mode, function (err) {
		                    if (err) {
		                        return cb(err);
		                    }
		                    createParents();
		                });
		            });
		        }
		    };
		    /**
		     * With the given path, create the needed parent directories on the writable storage
		     * should they not exist. Use modes from the read-only storage.
		     */
		    UnlockedOverlayFS.prototype.createParentDirectories = function createParentDirectories (p) {
		        var this$1$1 = this;
		
		        var parent = path.dirname(p), toCreate = [];
		        while (!this._writable.existsSync(parent)) {
		            toCreate.push(parent);
		            parent = path.dirname(parent);
		        }
		        toCreate = toCreate.reverse();
		        toCreate.forEach(function (p) {
		            this$1$1._writable.mkdirSync(p, this$1$1.statSync(p, false).mode);
		        });
		    };
		    /**
		     * Helper function:
		     * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.
		     * - Calls f to perform operation on writable.
		     */
		    UnlockedOverlayFS.prototype.operateOnWritable = function operateOnWritable (p, f) {
		        if (this.existsSync(p)) {
		            if (!this._writable.existsSync(p)) {
		                // File is on readable storage. Copy to writable storage before
		                // changing its mode.
		                this.copyToWritable(p);
		            }
		            f();
		        }
		        else {
		            throw ApiError.ENOENT(p);
		        }
		    };
		    UnlockedOverlayFS.prototype.operateOnWritableAsync = function operateOnWritableAsync (p, cb) {
		        var this$1$1 = this;
		
		        this.exists(p, function (exists) {
		            if (!exists) {
		                return cb(ApiError.ENOENT(p));
		            }
		            this$1$1._writable.exists(p, function (existsWritable) {
		                if (existsWritable) {
		                    cb();
		                }
		                else {
		                    return this$1$1.copyToWritableAsync(p, cb);
		                }
		            });
		        });
		    };
		    /**
		     * Copy from readable to writable storage.
		     * PRECONDITION: File does not exist on writable storage.
		     */
		    UnlockedOverlayFS.prototype.copyToWritable = function copyToWritable (p) {
		        var pStats = this.statSync(p, false);
		        if (pStats.isDirectory()) {
		            this._writable.mkdirSync(p, pStats.mode);
		        }
		        else {
		            this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag('r')), null, getFlag('w'), this.statSync(p, false).mode);
		        }
		    };
		    UnlockedOverlayFS.prototype.copyToWritableAsync = function copyToWritableAsync (p, cb) {
		        var this$1$1 = this;
		
		        this.stat(p, false, function (err, pStats) {
		            if (err) {
		                return cb(err);
		            }
		            if (pStats.isDirectory()) {
		                return this$1$1._writable.mkdir(p, pStats.mode, cb);
		            }
		            // need to copy file.
		            this$1$1._readable.readFile(p, null, getFlag('r'), function (err, data) {
		                if (err) {
		                    return cb(err);
		                }
		                this$1$1.writeFile(p, data, null, getFlag('w'), pStats.mode, cb);
		            });
		        });
		    };
		
		    return UnlockedOverlayFS;
		}(BaseFileSystem));
		/**
		 * OverlayFS makes a read-only filesystem writable by storing writes on a second,
		 * writable file system. Deletes are persisted via metadata stored on the writable
		 * file system.
		 */
		var OverlayFS = (function (LockedFS$$1) {
		    function OverlayFS(writable, readable, deprecateMsg) {
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
		        deprecationMessage(deprecateMsg, OverlayFS.Name, { readable: "readable file system", writable: "writable file system" });
		    }
		
		    if ( LockedFS$$1 ) OverlayFS.__proto__ = LockedFS$$1;
		    OverlayFS.prototype = Object.create( LockedFS$$1 && LockedFS$$1.prototype );
		    OverlayFS.prototype.constructor = OverlayFS;
		    /**
		     * Constructs and initializes an OverlayFS instance with the given options.
		     */
		    OverlayFS.Create = function Create (opts, cb) {
		        try {
		            var fs = new OverlayFS(opts.writable, opts.readable, false);
		            fs.initialize(function (e) {
		                cb(e, fs);
		            }, false);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    OverlayFS.isAvailable = function isAvailable () {
		        return UnlockedOverlayFS.isAvailable();
		    };
		    /**
		     * **Deprecated. Please use OverlayFS.Create() to construct and initialize OverlayFS instances.**
		     */
		    OverlayFS.prototype.initialize = function initialize (cb, deprecateMsg) {
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        if (deprecateMsg) {
		            console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
		        }
		        LockedFS$$1.prototype.initialize.call(this, cb);
		    };
		    OverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems () {
		        return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
		    };
		    OverlayFS.prototype.unwrap = function unwrap () {
		        return LockedFS$$1.prototype.getFSUnlocked.call(this);
		    };
		
		    return OverlayFS;
		}(LockedFS));
		
		OverlayFS.Name = "OverlayFS";
		OverlayFS.Options = {
		    writable: {
		        type: "object",
		        description: "The file system to write modified files to."
		    },
		    readable: {
		        type: "object",
		        description: "The file system that initially populates this file system."
		    }
		};
		
		/**
		 * @hidden
		 */
		var SpecialArgType;
		(function (SpecialArgType) {
		    // Callback
		    SpecialArgType[SpecialArgType["CB"] = 0] = "CB";
		    // File descriptor
		    SpecialArgType[SpecialArgType["FD"] = 1] = "FD";
		    // API error
		    SpecialArgType[SpecialArgType["API_ERROR"] = 2] = "API_ERROR";
		    // Stats object
		    SpecialArgType[SpecialArgType["STATS"] = 3] = "STATS";
		    // Initial probe for file system information.
		    SpecialArgType[SpecialArgType["PROBE"] = 4] = "PROBE";
		    // FileFlag object.
		    SpecialArgType[SpecialArgType["FILEFLAG"] = 5] = "FILEFLAG";
		    // Buffer object.
		    SpecialArgType[SpecialArgType["BUFFER"] = 6] = "BUFFER";
		    // Generic Error object.
		    SpecialArgType[SpecialArgType["ERROR"] = 7] = "ERROR";
		})(SpecialArgType || (SpecialArgType = {}));
		/**
		 * Converts callback arguments into ICallbackArgument objects, and back
		 * again.
		 * @hidden
		 */
		var CallbackArgumentConverter = function CallbackArgumentConverter() {
		    this._callbacks = {};
		    this._nextId = 0;
		};
		CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg (cb) {
		    var id = this._nextId++;
		    this._callbacks[id] = cb;
		    return {
		        type: SpecialArgType.CB,
		        id: id
		    };
		};
		CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg (id) {
		    var cb = this._callbacks[id];
		    delete this._callbacks[id];
		    return cb;
		};
		/**
		 * @hidden
		 */
		var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter() {
		    this._fileDescriptors = {};
		    this._nextId = 0;
		};
		FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg (fd, p, flag, cb) {
		    var id = this._nextId++;
		    var data;
		    var stat;
		    this._fileDescriptors[id] = fd;
		    // Extract needed information asynchronously.
		    fd.stat(function (err, stats) {
		        if (err) {
		            cb(err);
		        }
		        else {
		            stat = bufferToTransferrableObject(stats.toBuffer());
		            // If it's a readable flag, we need to grab contents.
		            if (flag.isReadable()) {
		                fd.read(Buffer.alloc(stats.size), 0, stats.size, 0, function (err, bytesRead, buff) {
		                    if (err) {
		                        cb(err);
		                    }
		                    else {
		                        data = bufferToTransferrableObject(buff);
		                        cb(null, {
		                            type: SpecialArgType.FD,
		                            id: id,
		                            data: data,
		                            stat: stat,
		                            path: p,
		                            flag: flag.getFlagString()
		                        });
		                    }
		                });
		            }
		            else {
		                // File is not readable, which means writing to it will append or
		                // truncate/replace existing contents. Return an empty arraybuffer.
		                cb(null, {
		                    type: SpecialArgType.FD,
		                    id: id,
		                    data: new ArrayBuffer(0),
		                    stat: stat,
		                    path: p,
		                    flag: flag.getFlagString()
		                });
		            }
		        }
		    });
		};
		FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest (request, cb) {
		        var this$1$1 = this;
		
		    var fdArg = request.args[0];
		    this._applyFdChanges(fdArg, function (err, fd) {
		        if (err) {
		            cb(err);
		        }
		        else {
		            // Apply method on now-changed file descriptor.
		            fd[request.method](function (e) {
		                if (request.method === 'close') {
		                    delete this$1$1._fileDescriptors[fdArg.id];
		                }
		                cb(e);
		            });
		        }
		    });
		};
		FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges (remoteFd, cb) {
		    var fd = this._fileDescriptors[remoteFd.id], data = transferrableObjectToBuffer(remoteFd.data), remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));
		    // Write data if the file is writable.
		    var flag = FileFlag.getFileFlag(remoteFd.flag);
		    if (flag.isWriteable()) {
		        // Appendable: Write to end of file.
		        // Writeable: Replace entire contents of file.
		        fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function (e) {
		            function applyStatChanges() {
		                // Check if mode changed.
		                fd.stat(function (e, stats) {
		                    if (e) {
		                        cb(e);
		                    }
		                    else {
		                        if (stats.mode !== remoteStats.mode) {
		                            fd.chmod(remoteStats.mode, function (e) {
		                                cb(e, fd);
		                            });
		                        }
		                        else {
		                            cb(e, fd);
		                        }
		                    }
		                });
		            }
		            if (e) {
		                cb(e);
		            }
		            else {
		                // If writeable & not appendable, we need to ensure file contents are
		                // identical to those from the remote FD. Thus, we truncate to the
		                // length of the remote file.
		                if (!flag.isAppendable()) {
		                    fd.truncate(data.length, function () {
		                        applyStatChanges();
		                    });
		                }
		                else {
		                    applyStatChanges();
		                }
		            }
		        });
		    }
		    else {
		        cb(null, fd);
		    }
		};
		/**
		 * @hidden
		 */
		function apiErrorLocal2Remote(e) {
		    return {
		        type: SpecialArgType.API_ERROR,
		        errorData: bufferToTransferrableObject(e.writeToBuffer())
		    };
		}
		/**
		 * @hidden
		 */
		function apiErrorRemote2Local(e) {
		    return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
		}
		/**
		 * @hidden
		 */
		function errorLocal2Remote(e) {
		    return {
		        type: SpecialArgType.ERROR,
		        name: e.name,
		        message: e.message,
		        stack: e.stack
		    };
		}
		/**
		 * @hidden
		 */
		function errorRemote2Local(e) {
		    var cnstr = global$1[e.name];
		    if (typeof (cnstr) !== 'function') {
		        cnstr = Error;
		    }
		    var err = new cnstr(e.message);
		    err.stack = e.stack;
		    return err;
		}
		/**
		 * @hidden
		 */
		function statsLocal2Remote(stats) {
		    return {
		        type: SpecialArgType.STATS,
		        statsData: bufferToTransferrableObject(stats.toBuffer())
		    };
		}
		/**
		 * @hidden
		 */
		function statsRemote2Local(stats) {
		    return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
		}
		/**
		 * @hidden
		 */
		function fileFlagLocal2Remote(flag) {
		    return {
		        type: SpecialArgType.FILEFLAG,
		        flagStr: flag.getFlagString()
		    };
		}
		/**
		 * @hidden
		 */
		function fileFlagRemote2Local(remoteFlag) {
		    return FileFlag.getFileFlag(remoteFlag.flagStr);
		}
		/**
		 * @hidden
		 */
		function bufferToTransferrableObject(buff) {
		    return buffer2ArrayBuffer(buff);
		}
		/**
		 * @hidden
		 */
		function transferrableObjectToBuffer(buff) {
		    return arrayBuffer2Buffer(buff);
		}
		/**
		 * @hidden
		 */
		function bufferLocal2Remote(buff) {
		    return {
		        type: SpecialArgType.BUFFER,
		        data: bufferToTransferrableObject(buff)
		    };
		}
		/**
		 * @hidden
		 */
		function bufferRemote2Local(buffArg) {
		    return transferrableObjectToBuffer(buffArg.data);
		}
		/**
		 * @hidden
		 */
		function isAPIRequest(data) {
		    return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
		}
		/**
		 * @hidden
		 */
		function isAPIResponse(data) {
		    return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
		}
		/**
		 * Represents a remote file in a different worker/thread.
		 */
		var WorkerFile = (function (PreloadFile$$1) {
		    function WorkerFile(_fs, _path, _flag, _stat, remoteFdId, contents) {
		        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
		        this._remoteFdId = remoteFdId;
		    }
		
		    if ( PreloadFile$$1 ) WorkerFile.__proto__ = PreloadFile$$1;
		    WorkerFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
		    WorkerFile.prototype.constructor = WorkerFile;
		    WorkerFile.prototype.getRemoteFdId = function getRemoteFdId () {
		        return this._remoteFdId;
		    };
		    /**
		     * @hidden
		     */
		    WorkerFile.prototype.toRemoteArg = function toRemoteArg () {
		        return {
		            type: SpecialArgType.FD,
		            id: this._remoteFdId,
		            data: bufferToTransferrableObject(this.getBuffer()),
		            stat: bufferToTransferrableObject(this.getStats().toBuffer()),
		            path: this.getPath(),
		            flag: this.getFlag().getFlagString()
		        };
		    };
		    WorkerFile.prototype.sync = function sync (cb) {
		        this._syncClose('sync', cb);
		    };
		    WorkerFile.prototype.close = function close (cb) {
		        this._syncClose('close', cb);
		    };
		    WorkerFile.prototype._syncClose = function _syncClose (type, cb) {
		        var this$1$1 = this;
		
		        if (this.isDirty()) {
		            this._fs.syncClose(type, this, function (e) {
		                if (!e) {
		                    this$1$1.resetDirty();
		                }
		                cb(e);
		            });
		        }
		        else {
		            cb();
		        }
		    };
		
		    return WorkerFile;
		}(PreloadFile));
		/**
		 * WorkerFS lets you access a BrowserFS instance that is running in a different
		 * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or
		 * access BrowserFS running on the main page from a WebWorker).
		 *
		 * For example, to have a WebWorker access files in the main browser thread,
		 * do the following:
		 *
		 * MAIN BROWSER THREAD:
		 *
		 * ```javascript
		 *   // Listen for remote file system requests.
		 *   BrowserFS.FileSystem.WorkerFS.attachRemoteListener(webWorkerObject);
		 * ```
		 *
		 * WEBWORKER THREAD:
		 *
		 * ```javascript
		 *   // Set the remote file system as the root file system.
		 *   BrowserFS.configure({ fs: "WorkerFS", options: { worker: self }}, function(e) {
		 *     // Ready!
		 *   });
		 * ```
		 *
		 * Note that synchronous operations are not permitted on the WorkerFS, regardless
		 * of the configuration option of the remote FS.
		 */
		var WorkerFS = (function (BaseFileSystem$$1) {
		    function WorkerFS(worker, deprecateMsg) {
		        var this$1$1 = this;
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        BaseFileSystem$$1.call(this);
		        this._callbackConverter = new CallbackArgumentConverter();
		        this._isInitialized = false;
		        this._isReadOnly = false;
		        this._supportLinks = false;
		        this._supportProps = false;
		        this._worker = worker;
		        deprecationMessage(deprecateMsg, WorkerFS.Name, { worker: "Web Worker instance" });
		        this._worker.addEventListener('message', function (e) {
		            var resp = e.data;
		            if (isAPIResponse(resp)) {
		                var i;
		                var args = resp.args;
		                var fixedArgs = new Array(args.length);
		                // Dispatch event to correct id.
		                for (i = 0; i < fixedArgs.length; i++) {
		                    fixedArgs[i] = this$1$1._argRemote2Local(args[i]);
		                }
		                this$1$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
		            }
		        });
		    }
		
		    if ( BaseFileSystem$$1 ) WorkerFS.__proto__ = BaseFileSystem$$1;
		    WorkerFS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    WorkerFS.prototype.constructor = WorkerFS;
		    WorkerFS.Create = function Create (opts, cb) {
		        var fs = new WorkerFS(opts.worker, false);
		        fs.initialize(function () {
		            cb(null, fs);
		        });
		    };
		    WorkerFS.isAvailable = function isAvailable () {
		        return typeof (importScripts) !== 'undefined' || typeof (Worker) !== 'undefined';
		    };
		    /**
		     * Attaches a listener to the remote worker for file system requests.
		     */
		    WorkerFS.attachRemoteListener = function attachRemoteListener (worker) {
		        var fdConverter = new FileDescriptorArgumentConverter();
		        function argLocal2Remote(arg, requestArgs, cb) {
		            switch (typeof arg) {
		                case 'object':
		                    if (arg instanceof Stats) {
		                        cb(null, statsLocal2Remote(arg));
		                    }
		                    else if (arg instanceof ApiError) {
		                        cb(null, apiErrorLocal2Remote(arg));
		                    }
		                    else if (arg instanceof BaseFile) {
		                        // Pass in p and flags from original request.
		                        cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
		                    }
		                    else if (arg instanceof FileFlag) {
		                        cb(null, fileFlagLocal2Remote(arg));
		                    }
		                    else if (arg instanceof Buffer) {
		                        cb(null, bufferLocal2Remote(arg));
		                    }
		                    else if (arg instanceof Error) {
		                        cb(null, errorLocal2Remote(arg));
		                    }
		                    else {
		                        cb(null, arg);
		                    }
		                    break;
		                default:
		                    cb(null, arg);
		                    break;
		            }
		        }
		        function argRemote2Local(arg, fixedRequestArgs) {
		            if (!arg) {
		                return arg;
		            }
		            switch (typeof arg) {
		                case 'object':
		                    if (typeof arg['type'] === 'number') {
		                        var specialArg = arg;
		                        switch (specialArg.type) {
		                            case SpecialArgType.CB:
		                                var cbId = arg.id;
		                                return function () {
		                                    var arguments$1 = arguments;
		
		                                    var i;
		                                    var fixedArgs = new Array(arguments.length);
		                                    var message, countdown = arguments.length;
		                                    function abortAndSendError(err) {
		                                        if (countdown > 0) {
		                                            countdown = -1;
		                                            message = {
		                                                browserfsMessage: true,
		                                                cbId: cbId,
		                                                args: [apiErrorLocal2Remote(err)]
		                                            };
		                                            worker.postMessage(message);
		                                        }
		                                    }
		                                    for (i = 0; i < arguments.length; i++) {
		                                        // Capture i and argument.
		                                        (function (i, arg) {
		                                            argLocal2Remote(arg, fixedRequestArgs, function (err, fixedArg) {
		                                                fixedArgs[i] = fixedArg;
		                                                if (err) {
		                                                    abortAndSendError(err);
		                                                }
		                                                else if (--countdown === 0) {
		                                                    message = {
		                                                        browserfsMessage: true,
		                                                        cbId: cbId,
		                                                        args: fixedArgs
		                                                    };
		                                                    worker.postMessage(message);
		                                                }
		                                            });
		                                        })(i, arguments$1[i]);
		                                    }
		                                    if (arguments.length === 0) {
		                                        message = {
		                                            browserfsMessage: true,
		                                            cbId: cbId,
		                                            args: fixedArgs
		                                        };
		                                        worker.postMessage(message);
		                                    }
		                                };
		                            case SpecialArgType.API_ERROR:
		                                return apiErrorRemote2Local(specialArg);
		                            case SpecialArgType.STATS:
		                                return statsRemote2Local(specialArg);
		                            case SpecialArgType.FILEFLAG:
		                                return fileFlagRemote2Local(specialArg);
		                            case SpecialArgType.BUFFER:
		                                return bufferRemote2Local(specialArg);
		                            case SpecialArgType.ERROR:
		                                return errorRemote2Local(specialArg);
		                            default:
		                                // No idea what this is.
		                                return arg;
		                        }
		                    }
		                    else {
		                        return arg;
		                    }
		                default:
		                    return arg;
		            }
		        }
		        worker.addEventListener('message', function (e) {
		            var request = e.data;
		            if (isAPIRequest(request)) {
		                var args = request.args, fixedArgs = new Array(args.length);
		                switch (request.method) {
		                    case 'close':
		                    case 'sync':
		                        (function () {
		                            // File descriptor-relative methods.
		                            var remoteCb = args[1];
		                            fdConverter.applyFdAPIRequest(request, function (err) {
		                                // Send response.
		                                var response = {
		                                    browserfsMessage: true,
		                                    cbId: remoteCb.id,
		                                    args: err ? [apiErrorLocal2Remote(err)] : []
		                                };
		                                worker.postMessage(response);
		                            });
		                        })();
		                        break;
		                    case 'probe':
		                        (function () {
		                            var rootFs = _fsMock.getRootFS(), remoteCb = args[1], probeResponse = {
		                                type: SpecialArgType.PROBE,
		                                isReadOnly: rootFs.isReadOnly(),
		                                supportsLinks: rootFs.supportsLinks(),
		                                supportsProps: rootFs.supportsProps()
		                            }, response = {
		                                browserfsMessage: true,
		                                cbId: remoteCb.id,
		                                args: [probeResponse]
		                            };
		                            worker.postMessage(response);
		                        })();
		                        break;
		                    default:
		                        // File system methods.
		                        for (var i = 0; i < args.length; i++) {
		                            fixedArgs[i] = argRemote2Local(args[i], fixedArgs);
		                        }
		                        var rootFS = _fsMock.getRootFS();
		                        rootFS[request.method].apply(rootFS, fixedArgs);
		                        break;
		                }
		            }
		        });
		    };
		    WorkerFS.prototype.getName = function getName () {
		        return WorkerFS.Name;
		    };
		    /**
		     * **Deprecated. Please use WorkerFS.Create() method to construct and initialize WorkerFS instances.**
		     *
		     * Called once both local and remote sides are set up.
		     */
		    WorkerFS.prototype.initialize = function initialize (cb) {
		        var this$1$1 = this;
		
		        if (!this._isInitialized) {
		            var message = {
		                browserfsMessage: true,
		                method: 'probe',
		                args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function (probeResponse) {
		                        this$1$1._isInitialized = true;
		                        this$1$1._isReadOnly = probeResponse.isReadOnly;
		                        this$1$1._supportLinks = probeResponse.supportsLinks;
		                        this$1$1._supportProps = probeResponse.supportsProps;
		                        cb();
		                    })]
		            };
		            this._worker.postMessage(message);
		        }
		        else {
		            cb();
		        }
		    };
		    WorkerFS.prototype.isReadOnly = function isReadOnly () { return this._isReadOnly; };
		    WorkerFS.prototype.supportsSynch = function supportsSynch () { return false; };
		    WorkerFS.prototype.supportsLinks = function supportsLinks () { return this._supportLinks; };
		    WorkerFS.prototype.supportsProps = function supportsProps () { return this._supportProps; };
		    WorkerFS.prototype.rename = function rename (oldPath, newPath, cb) {
		        this._rpc('rename', arguments);
		    };
		    WorkerFS.prototype.stat = function stat (p, isLstat, cb) {
		        this._rpc('stat', arguments);
		    };
		    WorkerFS.prototype.open = function open (p, flag, mode, cb) {
		        this._rpc('open', arguments);
		    };
		    WorkerFS.prototype.unlink = function unlink (p, cb) {
		        this._rpc('unlink', arguments);
		    };
		    WorkerFS.prototype.rmdir = function rmdir (p, cb) {
		        this._rpc('rmdir', arguments);
		    };
		    WorkerFS.prototype.mkdir = function mkdir (p, mode, cb) {
		        this._rpc('mkdir', arguments);
		    };
		    WorkerFS.prototype.readdir = function readdir (p, cb) {
		        this._rpc('readdir', arguments);
		    };
		    WorkerFS.prototype.exists = function exists (p, cb) {
		        this._rpc('exists', arguments);
		    };
		    WorkerFS.prototype.realpath = function realpath (p, cache, cb) {
		        this._rpc('realpath', arguments);
		    };
		    WorkerFS.prototype.truncate = function truncate (p, len, cb) {
		        this._rpc('truncate', arguments);
		    };
		    WorkerFS.prototype.readFile = function readFile (fname, encoding, flag, cb) {
		        this._rpc('readFile', arguments);
		    };
		    WorkerFS.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
		        this._rpc('writeFile', arguments);
		    };
		    WorkerFS.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
		        this._rpc('appendFile', arguments);
		    };
		    WorkerFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
		        this._rpc('chmod', arguments);
		    };
		    WorkerFS.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
		        this._rpc('chown', arguments);
		    };
		    WorkerFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
		        this._rpc('utimes', arguments);
		    };
		    WorkerFS.prototype.link = function link (srcpath, dstpath, cb) {
		        this._rpc('link', arguments);
		    };
		    WorkerFS.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
		        this._rpc('symlink', arguments);
		    };
		    WorkerFS.prototype.readlink = function readlink (p, cb) {
		        this._rpc('readlink', arguments);
		    };
		    WorkerFS.prototype.syncClose = function syncClose (method, fd, cb) {
		        this._worker.postMessage({
		            browserfsMessage: true,
		            method: method,
		            args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
		        });
		    };
		    WorkerFS.prototype._argRemote2Local = function _argRemote2Local (arg) {
		        if (!arg) {
		            return arg;
		        }
		        switch (typeof arg) {
		            case 'object':
		                if (typeof arg['type'] === 'number') {
		                    var specialArg = arg;
		                    switch (specialArg.type) {
		                        case SpecialArgType.API_ERROR:
		                            return apiErrorRemote2Local(specialArg);
		                        case SpecialArgType.FD:
		                            var fdArg = specialArg;
		                            return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));
		                        case SpecialArgType.STATS:
		                            return statsRemote2Local(specialArg);
		                        case SpecialArgType.FILEFLAG:
		                            return fileFlagRemote2Local(specialArg);
		                        case SpecialArgType.BUFFER:
		                            return bufferRemote2Local(specialArg);
		                        case SpecialArgType.ERROR:
		                            return errorRemote2Local(specialArg);
		                        default:
		                            return arg;
		                    }
		                }
		                else {
		                    return arg;
		                }
		            default:
		                return arg;
		        }
		    };
		    WorkerFS.prototype._rpc = function _rpc (methodName, args) {
		        var this$1$1 = this;
		
		        var fixedArgs = new Array(args.length);
		        for (var i = 0; i < args.length; i++) {
		            fixedArgs[i] = this$1$1._argLocal2Remote(args[i]);
		        }
		        var message = {
		            browserfsMessage: true,
		            method: methodName,
		            args: fixedArgs
		        };
		        this._worker.postMessage(message);
		    };
		    /**
		     * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.
		     */
		    WorkerFS.prototype._argLocal2Remote = function _argLocal2Remote (arg) {
		        if (!arg) {
		            return arg;
		        }
		        switch (typeof arg) {
		            case "object":
		                if (arg instanceof Stats) {
		                    return statsLocal2Remote(arg);
		                }
		                else if (arg instanceof ApiError) {
		                    return apiErrorLocal2Remote(arg);
		                }
		                else if (arg instanceof WorkerFile) {
		                    return arg.toRemoteArg();
		                }
		                else if (arg instanceof FileFlag) {
		                    return fileFlagLocal2Remote(arg);
		                }
		                else if (arg instanceof Buffer) {
		                    return bufferLocal2Remote(arg);
		                }
		                else if (arg instanceof Error) {
		                    return errorLocal2Remote(arg);
		                }
		                else {
		                    return "Unknown argument";
		                }
		            case "function":
		                return this._callbackConverter.toRemoteArg(arg);
		            default:
		                return arg;
		        }
		    };
		
		    return WorkerFS;
		}(BaseFileSystem));
		
		WorkerFS.Name = "WorkerFS";
		WorkerFS.Options = {
		    worker: {
		        type: "object",
		        description: "The target worker that you want to connect to, or the current worker if in a worker context.",
		        validator: function (v, cb) {
		            // Check for a `postMessage` function.
		            if (v['postMessage']) {
		                cb();
		            }
		            else {
		                cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
		            }
		        }
		    }
		};
		
		/**
		 * Contains utility methods for performing a variety of tasks with
		 * XmlHttpRequest across browsers.
		 */
		function asyncDownloadFileModern(p, type, cb) {
		    var req = new XMLHttpRequest();
		    req.open('GET', p, true);
		    var jsonSupported = true;
		    switch (type) {
		        case 'buffer':
		            req.responseType = 'arraybuffer';
		            break;
		        case 'json':
		            // Some browsers don't support the JSON response type.
		            // They either reset responseType, or throw an exception.
		            // @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js
		            try {
		                req.responseType = 'json';
		                jsonSupported = req.responseType === 'json';
		            }
		            catch (e) {
		                jsonSupported = false;
		            }
		            break;
		        default:
		            return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
		    }
		    req.onreadystatechange = function (e) {
		        if (req.readyState === 4) {
		            if (req.status === 200) {
		                switch (type) {
		                    case 'buffer':
		                        // XXX: WebKit-based browsers return *null* when XHRing an empty file.
		                        return cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());
		                    case 'json':
		                        if (jsonSupported) {
		                            return cb(null, req.response);
		                        }
		                        else {
		                            return cb(null, JSON.parse(req.responseText));
		                        }
		                }
		            }
		            else {
		                return cb(new ApiError(req.status, "XHR error."));
		            }
		        }
		    };
		    req.send();
		}
		function syncDownloadFileModern(p, type) {
		    var req = new XMLHttpRequest();
		    req.open('GET', p, false);
		    // On most platforms, we cannot set the responseType of synchronous downloads.
		    // @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.
		    var data = null;
		    var err = null;
		    // Classic hack to download binary data as a string.
		    req.overrideMimeType('text/plain; charset=x-user-defined');
		    req.onreadystatechange = function (e) {
		        if (req.readyState === 4) {
		            if (req.status === 200) {
		                switch (type) {
		                    case 'buffer':
		                        // Convert the text into a buffer.
		                        var text = req.responseText;
		                        data = Buffer.alloc(text.length);
		                        // Throw away the upper bits of each character.
		                        for (var i = 0; i < text.length; i++) {
		                            // This will automatically throw away the upper bit of each
		                            // character for us.
		                            data[i] = text.charCodeAt(i);
		                        }
		                        return;
		                    case 'json':
		                        data = JSON.parse(req.responseText);
		                        return;
		                }
		            }
		            else {
		                err = new ApiError(req.status, "XHR error.");
		                return;
		            }
		        }
		    };
		    req.send();
		    if (err) {
		        throw err;
		    }
		    return data;
		}
		function syncDownloadFileIE10(p, type) {
		    var req = new XMLHttpRequest();
		    req.open('GET', p, false);
		    switch (type) {
		        case 'buffer':
		            req.responseType = 'arraybuffer';
		            break;
		        case 'json':
		            // IE10 does not support the JSON type.
		            break;
		        default:
		            throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
		    }
		    var data;
		    var err;
		    req.onreadystatechange = function (e) {
		        if (req.readyState === 4) {
		            if (req.status === 200) {
		                switch (type) {
		                    case 'buffer':
		                        data = Buffer.from(req.response);
		                        break;
		                    case 'json':
		                        data = JSON.parse(req.response);
		                        break;
		                }
		            }
		            else {
		                err = new ApiError(req.status, "XHR error.");
		            }
		        }
		    };
		    req.send();
		    if (err) {
		        throw err;
		    }
		    return data;
		}
		/**
		 * @hidden
		 */
		function getFileSize(async, p, cb) {
		    var req = new XMLHttpRequest();
		    req.open('HEAD', p, async);
		    req.onreadystatechange = function (e) {
		        if (req.readyState === 4) {
		            if (req.status === 200) {
		                try {
		                    return cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));
		                }
		                catch (e) {
		                    // In the event that the header isn't present or there is an error...
		                    return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
		                }
		            }
		            else {
		                return cb(new ApiError(req.status, "XHR HEAD error."));
		            }
		        }
		    };
		    req.send();
		}
		/**
		 * Asynchronously download a file as a buffer or a JSON object.
		 * Note that the third function signature with a non-specialized type is
		 * invalid, but TypeScript requires it when you specialize string arguments to
		 * constants.
		 * @hidden
		 */
		var asyncDownloadFile = asyncDownloadFileModern;
		/**
		 * Synchronously download a file as a buffer or a JSON object.
		 * Note that the third function signature with a non-specialized type is
		 * invalid, but TypeScript requires it when you specialize string arguments to
		 * constants.
		 * @hidden
		 */
		var syncDownloadFile = (isIE && typeof Blob !== 'undefined') ? syncDownloadFileIE10 : syncDownloadFileModern;
		/**
		 * Synchronously retrieves the size of the given file in bytes.
		 * @hidden
		 */
		function getFileSizeSync(p) {
		    var rv = -1;
		    getFileSize(false, p, function (err, size) {
		        if (err) {
		            throw err;
		        }
		        rv = size;
		    });
		    return rv;
		}
		/**
		 * Asynchronously retrieves the size of the given file in bytes.
		 * @hidden
		 */
		function getFileSizeAsync(p, cb) {
		    getFileSize(true, p, cb);
		}
		
		/**
		 * A simple class for storing a filesystem index. Assumes that all paths passed
		 * to it are *absolute* paths.
		 *
		 * Can be used as a partial or a full index, although care must be taken if used
		 * for the former purpose, especially when directories are concerned.
		 */
		var FileIndex = function FileIndex() {
		    // _index is a single-level key,value store that maps *directory* paths to
		    // DirInodes. File information is only contained in DirInodes themselves.
		    this._index = {};
		    // Create the root directory.
		    this.addPath('/', new DirInode());
		};
		/**
		 * Static method for constructing indices from a JSON listing.
		 * @param listing Directory listing generated by tools/XHRIndexer.coffee
		 * @return A new FileIndex object.
		 */
		FileIndex.fromListing = function fromListing (listing) {
		    var idx = new FileIndex();
		    // Add a root DirNode.
		    var rootInode = new DirInode();
		    idx._index['/'] = rootInode;
		    var queue = [['', listing, rootInode]];
		    while (queue.length > 0) {
		        var inode = (void 0);
		        var next = queue.pop();
		        var pwd = next[0];
		        var tree = next[1];
		        var parent = next[2];
		        for (var node in tree) {
		            if (tree.hasOwnProperty(node)) {
		                var children = tree[node];
		                var name = pwd + "/" + node;
		                if (children) {
		                    idx._index[name] = inode = new DirInode();
		                    queue.push([name, children, inode]);
		                }
		                else {
		                    // This inode doesn't have correct size information, noted with -1.
		                    inode = new FileInode(new Stats(FileType.FILE, -1, 0x16D));
		                }
		                if (parent) {
		                    parent._ls[node] = inode;
		                }
		            }
		        }
		    }
		    return idx;
		};
		/**
		 * Runs the given function over all files in the index.
		 */
		FileIndex.prototype.fileIterator = function fileIterator (cb) {
		        var this$1$1 = this;
		
		    for (var path$$1 in this$1$1._index) {
		        if (this$1$1._index.hasOwnProperty(path$$1)) {
		            var dir = this$1$1._index[path$$1];
		            var files = dir.getListing();
		            for (var i = 0, list = files; i < list.length; i += 1) {
		                var file = list[i];
		
		                    var item = dir.getItem(file);
		                if (isFileInode(item)) {
		                    cb(item.getData());
		                }
		            }
		        }
		    }
		};
		/**
		 * Adds the given absolute path to the index if it is not already in the index.
		 * Creates any needed parent directories.
		 * @param path The path to add to the index.
		 * @param inode The inode for the
		 *   path to add.
		 * @return 'True' if it was added or already exists, 'false' if there
		 *   was an issue adding it (e.g. item in path is a file, item exists but is
		 *   different).
		 * @todo If adding fails and implicitly creates directories, we do not clean up
		 *   the new empty directories.
		 */
		FileIndex.prototype.addPath = function addPath (path$$1, inode) {
		    if (!inode) {
		        throw new Error('Inode must be specified');
		    }
		    if (path$$1[0] !== '/') {
		        throw new Error('Path must be absolute, got: ' + path$$1);
		    }
		    // Check if it already exists.
		    if (this._index.hasOwnProperty(path$$1)) {
		        return this._index[path$$1] === inode;
		    }
		    var splitPath = this._split_path(path$$1);
		    var dirpath = splitPath[0];
		    var itemname = splitPath[1];
		    // Try to add to its parent directory first.
		    var parent = this._index[dirpath];
		    if (parent === undefined && path$$1 !== '/') {
		        // Create parent.
		        parent = new DirInode();
		        if (!this.addPath(dirpath, parent)) {
		            return false;
		        }
		    }
		    // Add myself to my parent.
		    if (path$$1 !== '/') {
		        if (!parent.addItem(itemname, inode)) {
		            return false;
		        }
		    }
		    // If I'm a directory, add myself to the index.
		    if (isDirInode(inode)) {
		        this._index[path$$1] = inode;
		    }
		    return true;
		};
		/**
		 * Adds the given absolute path to the index if it is not already in the index.
		 * The path is added without special treatment (no joining of adjacent separators, etc).
		 * Creates any needed parent directories.
		 * @param path The path to add to the index.
		 * @param inode The inode for the
		 *   path to add.
		 * @return 'True' if it was added or already exists, 'false' if there
		 *   was an issue adding it (e.g. item in path is a file, item exists but is
		 *   different).
		 * @todo If adding fails and implicitly creates directories, we do not clean up
		 *   the new empty directories.
		 */
		FileIndex.prototype.addPathFast = function addPathFast (path$$1, inode) {
		    var itemNameMark = path$$1.lastIndexOf('/');
		    var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
		    var itemName = path$$1.substring(itemNameMark + 1);
		    // Try to add to its parent directory first.
		    var parent = this._index[parentPath];
		    if (parent === undefined) {
		        // Create parent.
		        parent = new DirInode();
		        this.addPathFast(parentPath, parent);
		    }
		    if (!parent.addItem(itemName, inode)) {
		        return false;
		    }
		    // If adding a directory, add to the index as well.
		    if (inode.isDir()) {
		        this._index[path$$1] = inode;
		    }
		    return true;
		};
		/**
		 * Removes the given path. Can be a file or a directory.
		 * @return The removed item,
		 *   or null if it did not exist.
		 */
		FileIndex.prototype.removePath = function removePath (path$$1) {
		        var this$1$1 = this;
		
		    var splitPath = this._split_path(path$$1);
		    var dirpath = splitPath[0];
		    var itemname = splitPath[1];
		    // Try to remove it from its parent directory first.
		    var parent = this._index[dirpath];
		    if (parent === undefined) {
		        return null;
		    }
		    // Remove myself from my parent.
		    var inode = parent.remItem(itemname);
		    if (inode === null) {
		        return null;
		    }
		    // If I'm a directory, remove myself from the index, and remove my children.
		    if (isDirInode(inode)) {
		        var children = inode.getListing();
		        for (var i = 0, list = children; i < list.length; i += 1) {
		            var child = list[i];
		
		                this$1$1.removePath(path$$1 + '/' + child);
		        }
		        // Remove the directory from the index, unless it's the root.
		        if (path$$1 !== '/') {
		            delete this._index[path$$1];
		        }
		    }
		    return inode;
		};
		/**
		 * Retrieves the directory listing of the given path.
		 * @return An array of files in the given path, or 'null' if it does not exist.
		 */
		FileIndex.prototype.ls = function ls (path$$1) {
		    var item = this._index[path$$1];
		    if (item === undefined) {
		        return null;
		    }
		    return item.getListing();
		};
		/**
		 * Returns the inode of the given item.
		 * @return Returns null if the item does not exist.
		 */
		FileIndex.prototype.getInode = function getInode (path$$1) {
		    var splitPath = this._split_path(path$$1);
		    var dirpath = splitPath[0];
		    var itemname = splitPath[1];
		    // Retrieve from its parent directory.
		    var parent = this._index[dirpath];
		    if (parent === undefined) {
		        return null;
		    }
		    // Root case
		    if (dirpath === path$$1) {
		        return parent;
		    }
		    return parent.getItem(itemname);
		};
		/**
		 * Split into a (directory path, item name) pair
		 */
		FileIndex.prototype._split_path = function _split_path (p) {
		    var dirpath = path.dirname(p);
		    var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
		    return [dirpath, itemname];
		};
		/**
		 * Inode for a file. Stores an arbitrary (filesystem-specific) data payload.
		 */
		var FileInode = function FileInode(data) {
		    this.data = data;
		};
		FileInode.prototype.isFile = function isFile () { return true; };
		FileInode.prototype.isDir = function isDir () { return false; };
		FileInode.prototype.getData = function getData () { return this.data; };
		FileInode.prototype.setData = function setData (data) { this.data = data; };
		/**
		 * Inode for a directory. Currently only contains the directory listing.
		 */
		var DirInode = function DirInode(data) {
		    if ( data === void 0 ) data = null;
		
		    this.data = data;
		    this._ls = {};
		};
		DirInode.prototype.isFile = function isFile () {
		    return false;
		};
		DirInode.prototype.isDir = function isDir () {
		    return true;
		};
		DirInode.prototype.getData = function getData () { return this.data; };
		/**
		 * Return a Stats object for this inode.
		 * @todo Should probably remove this at some point. This isn't the
		 *   responsibility of the FileIndex.
		 */
		DirInode.prototype.getStats = function getStats () {
		    return new Stats(FileType.DIRECTORY, 4096, 0x16D);
		};
		/**
		 * Returns the directory listing for this directory. Paths in the directory are
		 * relative to the directory's path.
		 * @return The directory listing for this directory.
		 */
		DirInode.prototype.getListing = function getListing () {
		    return Object.keys(this._ls);
		};
		/**
		 * Returns the inode for the indicated item, or null if it does not exist.
		 * @param p Name of item in this directory.
		 */
		DirInode.prototype.getItem = function getItem (p) {
		    var item = this._ls[p];
		    return item ? item : null;
		};
		/**
		 * Add the given item to the directory listing. Note that the given inode is
		 * not copied, and will be mutated by the DirInode if it is a DirInode.
		 * @param p Item name to add to the directory listing.
		 * @param inode The inode for the
		 *   item to add to the directory inode.
		 * @return True if it was added, false if it already existed.
		 */
		DirInode.prototype.addItem = function addItem (p, inode) {
		    if (p in this._ls) {
		        return false;
		    }
		    this._ls[p] = inode;
		    return true;
		};
		/**
		 * Removes the given item from the directory listing.
		 * @param p Name of item to remove from the directory listing.
		 * @return Returns the item
		 *   removed, or null if the item did not exist.
		 */
		DirInode.prototype.remItem = function remItem (p) {
		    var item = this._ls[p];
		    if (item === undefined) {
		        return null;
		    }
		    delete this._ls[p];
		    return item;
		};
		/**
		 * @hidden
		 */
		function isFileInode(inode) {
		    return !!inode && inode.isFile();
		}
		/**
		 * @hidden
		 */
		function isDirInode(inode) {
		    return !!inode && inode.isDir();
		}
		
		/**
		 * Try to convert the given buffer into a string, and pass it to the callback.
		 * Optimization that removes the needed try/catch into a helper function, as
		 * this is an uncommon case.
		 * @hidden
		 */
		function tryToString(buff, encoding, cb) {
		    try {
		        cb(null, buff.toString(encoding));
		    }
		    catch (e) {
		        cb(e);
		    }
		}
		/**
		 * A simple filesystem backed by XMLHttpRequests. You must create a directory listing using the
		 * `make_xhrfs_index` tool provided by BrowserFS.
		 *
		 * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by
		 * running `make_xhrfs_index` in your terminal in the directory you would like to index:
		 *
		 * ```
		 * make_xhrfs_index > index.json
		 * ```
		 *
		 * Listings objects look like the following:
		 *
		 * ```json
		 * {
		 *   "home": {
		 *     "jvilk": {
		 *       "someFile.txt": null,
		 *       "someDir": {
		 *         // Empty directory
		 *       }
		 *     }
		 *   }
		 * }
		 * ```
		 *
		 * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*
		 */
		var XmlHttpRequest = (function (BaseFileSystem$$1) {
		    function XmlHttpRequest(listingUrlOrObj, prefixUrl, deprecateMsg) {
		        if ( prefixUrl === void 0 ) prefixUrl = '';
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        BaseFileSystem$$1.call(this);
		        if (!listingUrlOrObj) {
		            listingUrlOrObj = 'index.json';
		        }
		        // prefix_url must end in a directory separator.
		        if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {
		            prefixUrl = prefixUrl + '/';
		        }
		        this.prefixUrl = prefixUrl;
		        var listing = null;
		        if (typeof (listingUrlOrObj) === "string") {
		            listing = this._requestFileSync(listingUrlOrObj, 'json');
		            if (!listing) {
		                throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
		            }
		        }
		        else {
		            listing = listingUrlOrObj;
		        }
		        deprecationMessage(deprecateMsg, XmlHttpRequest.Name, { index: typeof (listingUrlOrObj) === "string" ? listingUrlOrObj : "file index as an object", baseUrl: prefixUrl });
		        this._index = FileIndex.fromListing(listing);
		    }
		
		    if ( BaseFileSystem$$1 ) XmlHttpRequest.__proto__ = BaseFileSystem$$1;
		    XmlHttpRequest.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
		    XmlHttpRequest.prototype.constructor = XmlHttpRequest;
		    /**
		     * Construct an XmlHttpRequest file system backend with the given options.
		     */
		    XmlHttpRequest.Create = function Create (opts, cb) {
		        if (opts.index === undefined) {
		            opts.index = "index.json";
		        }
		        if (typeof (opts.index) === "string") {
		            XmlHttpRequest.FromURL(opts.index, cb, opts.baseUrl, false);
		        }
		        else {
		            cb(null, new XmlHttpRequest(opts.index, opts.baseUrl, false));
		        }
		    };
		    XmlHttpRequest.isAvailable = function isAvailable () {
		        return typeof (XMLHttpRequest) !== "undefined" && XMLHttpRequest !== null;
		    };
		    /**
		     * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
		     *
		     * Constructs an XmlHttpRequest object using the directory listing at the given URL.
		     * Uses the base URL as the URL prefix for fetched files.
		     * @param cb Called when the file system has been instantiated, or if an error occurs.
		     */
		    XmlHttpRequest.FromURL = function FromURL (url, cb, baseUrl, deprecateMsg) {
		        if ( baseUrl === void 0 ) baseUrl = url.slice(0, url.lastIndexOf('/') + 1);
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        if (deprecateMsg) {
		            console.warn(("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \"" + url + "\", baseUrl: \"" + baseUrl + "\" }, cb)' instead."));
		        }
		        asyncDownloadFile(url, "json", function (e, data) {
		            if (e) {
		                cb(e);
		            }
		            else {
		                cb(null, new XmlHttpRequest(data, baseUrl, false));
		            }
		        });
		    };
		    XmlHttpRequest.prototype.empty = function empty () {
		        this._index.fileIterator(function (file) {
		            file.fileData = null;
		        });
		    };
		    XmlHttpRequest.prototype.getName = function getName () {
		        return XmlHttpRequest.Name;
		    };
		    XmlHttpRequest.prototype.diskSpace = function diskSpace (path$$1, cb) {
		        // Read-only file system. We could calculate the total space, but that's not
		        // important right now.
		        cb(0, 0);
		    };
		    XmlHttpRequest.prototype.isReadOnly = function isReadOnly () {
		        return true;
		    };
		    XmlHttpRequest.prototype.supportsLinks = function supportsLinks () {
		        return false;
		    };
		    XmlHttpRequest.prototype.supportsProps = function supportsProps () {
		        return false;
		    };
		    XmlHttpRequest.prototype.supportsSynch = function supportsSynch () {
		        return true;
		    };
		    /**
		     * Special XHR function: Preload the given file into the index.
		     * @param [String] path
		     * @param [BrowserFS.Buffer] buffer
		     */
		    XmlHttpRequest.prototype.preloadFile = function preloadFile (path$$1, buffer$$1) {
		        var inode = this._index.getInode(path$$1);
		        if (isFileInode(inode)) {
		            if (inode === null) {
		                throw ApiError.ENOENT(path$$1);
		            }
		            var stats = inode.getData();
		            stats.size = buffer$$1.length;
		            stats.fileData = buffer$$1;
		        }
		        else {
		            throw ApiError.EISDIR(path$$1);
		        }
		    };
		    XmlHttpRequest.prototype.stat = function stat (path$$1, isLstat, cb) {
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            return cb(ApiError.ENOENT(path$$1));
		        }
		        var stats;
		        if (isFileInode(inode)) {
		            stats = inode.getData();
		            // At this point, a non-opened file will still have default stats from the listing.
		            if (stats.size < 0) {
		                this._requestFileSizeAsync(path$$1, function (e, size) {
		                    if (e) {
		                        return cb(e);
		                    }
		                    stats.size = size;
		                    cb(null, stats.clone());
		                });
		            }
		            else {
		                cb(null, stats.clone());
		            }
		        }
		        else if (isDirInode(inode)) {
		            stats = inode.getStats();
		            cb(null, stats);
		        }
		        else {
		            cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
		        }
		    };
		    XmlHttpRequest.prototype.statSync = function statSync (path$$1, isLstat) {
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        var stats;
		        if (isFileInode(inode)) {
		            stats = inode.getData();
		            // At this point, a non-opened file will still have default stats from the listing.
		            if (stats.size < 0) {
		                stats.size = this._requestFileSizeSync(path$$1);
		            }
		        }
		        else if (isDirInode(inode)) {
		            stats = inode.getStats();
		        }
		        else {
		            throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
		        }
		        return stats;
		    };
		    XmlHttpRequest.prototype.open = function open (path$$1, flags, mode, cb) {
		        // INVARIANT: You can't write to files on this file system.
		        if (flags.isWriteable()) {
		            return cb(new ApiError(ErrorCode.EPERM, path$$1));
		        }
		        var self = this;
		        // Check if the path exists, and is a file.
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            return cb(ApiError.ENOENT(path$$1));
		        }
		        if (isFileInode(inode)) {
		            var stats = inode.getData();
		            switch (flags.pathExistsAction()) {
		                case ActionType.THROW_EXCEPTION:
		                case ActionType.TRUNCATE_FILE:
		                    return cb(ApiError.EEXIST(path$$1));
		                case ActionType.NOP:
		                    // Use existing file contents.
		                    // XXX: Uh, this maintains the previously-used flag.
		                    if (stats.fileData) {
		                        return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), stats.fileData));
		                    }
		                    // @todo be lazier about actually requesting the file
		                    this._requestFileAsync(path$$1, 'buffer', function (err, buffer$$1) {
		                        if (err) {
		                            return cb(err);
		                        }
		                        // we don't initially have file sizes
		                        stats.size = buffer$$1.length;
		                        stats.fileData = buffer$$1;
		                        return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), buffer$$1));
		                    });
		                    break;
		                default:
		                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));
		            }
		        }
		        else {
		            return cb(ApiError.EISDIR(path$$1));
		        }
		    };
		    XmlHttpRequest.prototype.openSync = function openSync (path$$1, flags, mode) {
		        // INVARIANT: You can't write to files on this file system.
		        if (flags.isWriteable()) {
		            throw new ApiError(ErrorCode.EPERM, path$$1);
		        }
		        // Check if the path exists, and is a file.
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        if (isFileInode(inode)) {
		            var stats = inode.getData();
		            switch (flags.pathExistsAction()) {
		                case ActionType.THROW_EXCEPTION:
		                case ActionType.TRUNCATE_FILE:
		                    throw ApiError.EEXIST(path$$1);
		                case ActionType.NOP:
		                    // Use existing file contents.
		                    // XXX: Uh, this maintains the previously-used flag.
		                    if (stats.fileData) {
		                        return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
		                    }
		                    // @todo be lazier about actually requesting the file
		                    var buffer$$1 = this._requestFileSync(path$$1, 'buffer');
		                    // we don't initially have file sizes
		                    stats.size = buffer$$1.length;
		                    stats.fileData = buffer$$1;
		                    return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);
		                default:
		                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
		            }
		        }
		        else {
		            throw ApiError.EISDIR(path$$1);
		        }
		    };
		    XmlHttpRequest.prototype.readdir = function readdir (path$$1, cb) {
		        try {
		            cb(null, this.readdirSync(path$$1));
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    XmlHttpRequest.prototype.readdirSync = function readdirSync (path$$1) {
		        // Check if it exists.
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        else if (isDirInode(inode)) {
		            return inode.getListing();
		        }
		        else {
		            throw ApiError.ENOTDIR(path$$1);
		        }
		    };
		    /**
		     * We have the entire file as a buffer; optimize readFile.
		     */
		    XmlHttpRequest.prototype.readFile = function readFile (fname, encoding, flag, cb) {
		        // Wrap cb in file closing code.
		        var oldCb = cb;
		        // Get file.
		        this.open(fname, flag, 0x1a4, function (err, fd) {
		            if (err) {
		                return cb(err);
		            }
		            cb = function (err, arg) {
		                fd.close(function (err2) {
		                    if (!err) {
		                        err = err2;
		                    }
		                    return oldCb(err, arg);
		                });
		            };
		            var fdCast = fd;
		            var fdBuff = fdCast.getBuffer();
		            if (encoding === null) {
		                cb(err, copyingSlice(fdBuff));
		            }
		            else {
		                tryToString(fdBuff, encoding, cb);
		            }
		        });
		    };
		    /**
		     * Specially-optimized readfile.
		     */
		    XmlHttpRequest.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
		        // Get file.
		        var fd = this.openSync(fname, flag, 0x1a4);
		        try {
		            var fdCast = fd;
		            var fdBuff = fdCast.getBuffer();
		            if (encoding === null) {
		                return copyingSlice(fdBuff);
		            }
		            return fdBuff.toString(encoding);
		        }
		        finally {
		            fd.closeSync();
		        }
		    };
		    XmlHttpRequest.prototype.getXhrPath = function getXhrPath (filePath) {
		        if (filePath.charAt(0) === '/') {
		            filePath = filePath.slice(1);
		        }
		        return this.prefixUrl + filePath;
		    };
		    XmlHttpRequest.prototype._requestFileAsync = function _requestFileAsync (p, type, cb) {
		        asyncDownloadFile(this.getXhrPath(p), type, cb);
		    };
		    XmlHttpRequest.prototype._requestFileSync = function _requestFileSync (p, type) {
		        return syncDownloadFile(this.getXhrPath(p), type);
		    };
		    /**
		     * Only requests the HEAD content, for the file size.
		     */
		    XmlHttpRequest.prototype._requestFileSizeAsync = function _requestFileSizeAsync (path$$1, cb) {
		        getFileSizeAsync(this.getXhrPath(path$$1), cb);
		    };
		    XmlHttpRequest.prototype._requestFileSizeSync = function _requestFileSizeSync (path$$1) {
		        return getFileSizeSync(this.getXhrPath(path$$1));
		    };
		
		    return XmlHttpRequest;
		}(BaseFileSystem));
		
		XmlHttpRequest.Name = "XmlHttpRequest";
		XmlHttpRequest.Options = {
		    index: {
		        type: ["string", "object"],
		        optional: true,
		        description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
		    },
		    baseUrl: {
		        type: "string",
		        optional: true,
		        description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
		    }
		};
		
		/**
		 * (Nonstandard) String utility function for 8-bit ASCII with the extended
		 * character set. Unlike the ASCII above, we do not mask the high bits.
		 *
		 * Placed into a separate file so it can be used with other Buffer implementations.
		 * @see http://en.wikipedia.org/wiki/Extended_ASCII
		 */
		/**
		 * (Nonstandard) String utility function for 8-bit ASCII with the extended
		 * character set. Unlike the ASCII above, we do not mask the high bits.
		 *
		 * Placed into a separate file so it can be used with other Buffer implementations.
		 * @see http://en.wikipedia.org/wiki/Extended_ASCII
		 */ var ExtendedASCII = function ExtendedASCII () {};
		
		 ExtendedASCII.str2byte = function str2byte (str, buf) {
		    var length = str.length > buf.length ? buf.length : str.length;
		    for (var i = 0; i < length; i++) {
		        var charCode = str.charCodeAt(i);
		        if (charCode > 0x7F) {
		            // Check if extended ASCII.
		            var charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i));
		            if (charIdx > -1) {
		                charCode = charIdx + 0x80;
		            }
		            // Otherwise, keep it as-is.
		        }
		        buf[charCode] = i;
		    }
		    return length;
		};
		ExtendedASCII.byte2str = function byte2str (buff) {
		    var chars = new Array(buff.length);
		    for (var i = 0; i < buff.length; i++) {
		        var charCode = buff[i];
		        if (charCode > 0x7F) {
		            chars[i] = ExtendedASCII.extendedChars[charCode - 128];
		        }
		        else {
		            chars[i] = String.fromCharCode(charCode);
		        }
		    }
		    return chars.join('');
		};
		ExtendedASCII.byteLength = function byteLength (str) { return str.length; };
		
		 ExtendedASCII.extendedChars = ['\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4',
		    '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB', '\u00E8', '\u00EF',
		    '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6',
		    '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9', '\u00FF', '\u00D6',
		    '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1',
		    '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1', '\u00AA', '\u00BA',
		    '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB',
		    '\u00BB', '_', '_', '_', '\u00A6', '\u00A6', '\u00C1', '\u00C2', '\u00C0',
		    '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-',
		    '-', '+', '-', '+', '\u00E3', '\u00C3', '+', '+', '-', '-', '\u00A6', '-',
		    '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i',
		    '\u00CD', '\u00CE', '\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_',
		    '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5',
		    '\u00FE', '\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD',
		    '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7',
		    '\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3',
		    '\u00B2', '_', ' '];
		
		/**
		 * @hidden
		 */
		var inflateRaw = __webpack_require__(31).inflateRaw;
		/**
		 * Maps CompressionMethod => function that decompresses.
		 * @hidden
		 */
		var decompressionMethods = {};
		/**
		 * 4.4.2.2: Indicates the compatibiltiy of a file's external attributes.
		 */
		var ExternalFileAttributeType;
		(function (ExternalFileAttributeType) {
		    ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
		    ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
		    ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
		    ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
		    ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
		    ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
		    ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
		    ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
		    ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
		    ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
		    ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
		    ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
		    ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
		    ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
		    ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
		    ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
		    ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
		    ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
		    ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
		    ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
		})(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
		/**
		 * 4.4.5
		 */
		var CompressionMethod;
		(function (CompressionMethod) {
		    CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
		    CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
		    CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
		    CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
		    CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
		    CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
		    CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
		    CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
		    CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
		    CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
		    CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
		    CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
		    CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
		    CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
		    CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
		    CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD"; // PPMd version I, Rev 1
		})(CompressionMethod || (CompressionMethod = {}));
		/**
		 * Converts the input time and date in MS-DOS format into a JavaScript Date
		 * object.
		 * @hidden
		 */
		function msdos2date(time, date) {
		    // MS-DOS Date
		    // |0 0 0 0  0|0 0 0  0|0 0 0  0 0 0 0
		    //   D (1-31)  M (1-23)  Y (from 1980)
		    var day = date & 0x1F;
		    // JS date is 0-indexed, DOS is 1-indexed.
		    var month = ((date >> 5) & 0xF) - 1;
		    var year = (date >> 9) + 1980;
		    // MS DOS Time
		    // |0 0 0 0  0|0 0 0  0 0 0|0  0 0 0 0
		    //    Second      Minute       Hour
		    var second = time & 0x1F;
		    var minute = (time >> 5) & 0x3F;
		    var hour = time >> 11;
		    return new Date(year, month, day, hour, minute, second);
		}
		/**
		 * Safely returns the string from the buffer, even if it is 0 bytes long.
		 * (Normally, calling toString() on a buffer with start === end causes an
		 * exception).
		 * @hidden
		 */
		function safeToString(buff, useUTF8, start, length) {
		    if (length === 0) {
		        return "";
		    }
		    else if (useUTF8) {
		        return buff.toString('utf8', start, start + length);
		    }
		    else {
		        return ExtendedASCII.byte2str(buff.slice(start, start + length));
		    }
		}
		/*
		   4.3.6 Overall .ZIP file format:
		
		      [local file header 1]
		      [encryption header 1]
		      [file data 1]
		      [data descriptor 1]
		      .
		      .
		      .
		      [local file header n]
		      [encryption header n]
		      [file data n]
		      [data descriptor n]
		      [archive decryption header]
		      [archive extra data record]
		      [central directory header 1]
		      .
		      .
		      .
		      [central directory header n]
		      [zip64 end of central directory record]
		      [zip64 end of central directory locator]
		      [end of central directory record]
		*/
		/**
		 * 4.3.7  Local file header:
		 *
		 *     local file header signature     4 bytes  (0x04034b50)
		 *     version needed to extract       2 bytes
		 *     general purpose bit flag        2 bytes
		 *     compression method              2 bytes
		 *    last mod file time              2 bytes
		 *    last mod file date              2 bytes
		 *    crc-32                          4 bytes
		 *    compressed size                 4 bytes
		 *    uncompressed size               4 bytes
		 *    file name length                2 bytes
		 *    extra field length              2 bytes
		 *
		 *    file name (variable size)
		 *    extra field (variable size)
		 */
		var FileHeader = function FileHeader(data) {
		     this.data = data;
		     if (data.readUInt32LE(0) !== 0x04034b50) {
		         throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
		     }
		 };
		 FileHeader.prototype.versionNeeded = function versionNeeded () { return this.data.readUInt16LE(4); };
		 FileHeader.prototype.flags = function flags () { return this.data.readUInt16LE(6); };
		 FileHeader.prototype.compressionMethod = function compressionMethod () { return this.data.readUInt16LE(8); };
		 FileHeader.prototype.lastModFileTime = function lastModFileTime () {
		     // Time and date is in MS-DOS format.
		     return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
		 };
		 FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime () {
		     return this.data.readUInt32LE(10);
		 };
		 FileHeader.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(14); };
		 /**
		  * These two values are COMPLETELY USELESS.
		  *
		  * Section 4.4.9:
		  *If bit 3 of the general purpose bit flag is set,
		  *these fields are set to zero in the local header and the
		  *correct values are put in the data descriptor and
		  *in the central directory.
		  *
		  * So we'll just use the central directory's values.
		  */
		 // public compressedSize(): number { return this.data.readUInt32LE(18); }
		 // public uncompressedSize(): number { return this.data.readUInt32LE(22); }
		 FileHeader.prototype.fileNameLength = function fileNameLength () { return this.data.readUInt16LE(26); };
		 FileHeader.prototype.extraFieldLength = function extraFieldLength () { return this.data.readUInt16LE(28); };
		 FileHeader.prototype.fileName = function fileName () {
		     return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
		 };
		 FileHeader.prototype.extraField = function extraField () {
		     var start = 30 + this.fileNameLength();
		     return this.data.slice(start, start + this.extraFieldLength());
		 };
		 FileHeader.prototype.totalSize = function totalSize () { return 30 + this.fileNameLength() + this.extraFieldLength(); };
		 FileHeader.prototype.useUTF8 = function useUTF8 () { return (this.flags() & 0x800) === 0x800; };
		/**
		 * 4.3.8  File data
		 *
		 *   Immediately following the local header for a file
		 *   SHOULD be placed the compressed or stored data for the file.
		 *   If the file is encrypted, the encryption header for the file
		 *   SHOULD be placed after the local header and before the file
		 *   data. The series of [local file header][encryption header]
		 *   [file data][data descriptor] repeats for each file in the
		 *   .ZIP archive.
		 *
		 *   Zero-byte files, directories, and other file types that
		 *   contain no content MUST not include file data.
		 */
		var FileData = function FileData(header, record, data) {
		     this.header = header;
		     this.record = record;
		     this.data = data;
		 };
		 FileData.prototype.decompress = function decompress () {
		     // Check the compression
		     var compressionMethod = this.header.compressionMethod();
		     var fcn = decompressionMethods[compressionMethod];
		     if (fcn) {
		         return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
		     }
		     else {
		         var name = CompressionMethod[compressionMethod];
		         if (!name) {
		             name = "Unknown: " + compressionMethod;
		         }
		         throw new ApiError(ErrorCode.EINVAL, ("Invalid compression method on file '" + (this.header.fileName()) + "': " + name));
		     }
		 };
		 FileData.prototype.getHeader = function getHeader () {
		     return this.header;
		 };
		 FileData.prototype.getRecord = function getRecord () {
		     return this.record;
		 };
		 FileData.prototype.getRawData = function getRawData () {
		     return this.data;
		 };
		/**
		 * 4.3.12  Central directory structure:
		 *
		 *  central file header signature   4 bytes  (0x02014b50)
		 *  version made by                 2 bytes
		 *  version needed to extract       2 bytes
		 *  general purpose bit flag        2 bytes
		 *  compression method              2 bytes
		 *  last mod file time              2 bytes
		 *  last mod file date              2 bytes
		 *  crc-32                          4 bytes
		 *  compressed size                 4 bytes
		 *  uncompressed size               4 bytes
		 *  file name length                2 bytes
		 *  extra field length              2 bytes
		 *  file comment length             2 bytes
		 *  disk number start               2 bytes
		 *  internal file attributes        2 bytes
		 *  external file attributes        4 bytes
		 *  relative offset of local header 4 bytes
		 *
		 *  file name (variable size)
		 *  extra field (variable size)
		 *  file comment (variable size)
		 */
		var CentralDirectory = function CentralDirectory(zipData, data) {
		     this.zipData = zipData;
		     this.data = data;
		     // Sanity check.
		     if (this.data.readUInt32LE(0) !== 0x02014b50) {
		         throw new ApiError(ErrorCode.EINVAL, ("Invalid Zip file: Central directory record has invalid signature: " + (this.data.readUInt32LE(0))));
		     }
		     this._filename = this.produceFilename();
		 };
		 CentralDirectory.prototype.versionMadeBy = function versionMadeBy () { return this.data.readUInt16LE(4); };
		 CentralDirectory.prototype.versionNeeded = function versionNeeded () { return this.data.readUInt16LE(6); };
		 CentralDirectory.prototype.flag = function flag () { return this.data.readUInt16LE(8); };
		 CentralDirectory.prototype.compressionMethod = function compressionMethod () { return this.data.readUInt16LE(10); };
		 CentralDirectory.prototype.lastModFileTime = function lastModFileTime () {
		     // Time and date is in MS-DOS format.
		     return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
		 };
		 CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime () {
		     return this.data.readUInt32LE(12);
		 };
		 CentralDirectory.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(16); };
		 CentralDirectory.prototype.compressedSize = function compressedSize () { return this.data.readUInt32LE(20); };
		 CentralDirectory.prototype.uncompressedSize = function uncompressedSize () { return this.data.readUInt32LE(24); };
		 CentralDirectory.prototype.fileNameLength = function fileNameLength () { return this.data.readUInt16LE(28); };
		 CentralDirectory.prototype.extraFieldLength = function extraFieldLength () { return this.data.readUInt16LE(30); };
		 CentralDirectory.prototype.fileCommentLength = function fileCommentLength () { return this.data.readUInt16LE(32); };
		 CentralDirectory.prototype.diskNumberStart = function diskNumberStart () { return this.data.readUInt16LE(34); };
		 CentralDirectory.prototype.internalAttributes = function internalAttributes () { return this.data.readUInt16LE(36); };
		 CentralDirectory.prototype.externalAttributes = function externalAttributes () { return this.data.readUInt32LE(38); };
		 CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset () { return this.data.readUInt32LE(42); };
		 CentralDirectory.prototype.produceFilename = function produceFilename () {
		     /*
		       4.4.17.1 claims:
		       * All slashes are forward ('/') slashes.
		       * Filename doesn't begin with a slash.
		       * No drive letters or any nonsense like that.
		       * If filename is missing, the input came from standard input.
		    
		       Unfortunately, this isn't true in practice. Some Windows zip utilities use
		       a backslash here, but the correct Unix-style path in file headers.
		    
		       To avoid seeking all over the file to recover the known-good filenames
		       from file headers, we simply convert '/' to '\' here.
		     */
		     var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
		     return fileName.replace(/\\/g, "/");
		 };
		 CentralDirectory.prototype.fileName = function fileName () {
		     return this._filename;
		 };
		 CentralDirectory.prototype.rawFileName = function rawFileName () {
		     return this.data.slice(46, 46 + this.fileNameLength());
		 };
		 CentralDirectory.prototype.extraField = function extraField () {
		     var start = 44 + this.fileNameLength();
		     return this.data.slice(start, start + this.extraFieldLength());
		 };
		 CentralDirectory.prototype.fileComment = function fileComment () {
		     var start = 46 + this.fileNameLength() + this.extraFieldLength();
		     return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
		 };
		 CentralDirectory.prototype.rawFileComment = function rawFileComment () {
		     var start = 46 + this.fileNameLength() + this.extraFieldLength();
		     return this.data.slice(start, start + this.fileCommentLength());
		 };
		 CentralDirectory.prototype.totalSize = function totalSize () {
		     return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
		 };
		 CentralDirectory.prototype.isDirectory = function isDirectory () {
		     // NOTE: This assumes that the zip file implementation uses the lower byte
		     //    of external attributes for DOS attributes for
		     //    backwards-compatibility. This is not mandated, but appears to be
		     //    commonplace.
		     //    According to the spec, the layout of external attributes is
		     //    platform-dependent.
		     //    If that fails, we also check if the name of the file ends in '/',
		     //    which is what Java's ZipFile implementation does.
		     var fileName = this.fileName();
		     return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');
		 };
		 CentralDirectory.prototype.isFile = function isFile () { return !this.isDirectory(); };
		 CentralDirectory.prototype.useUTF8 = function useUTF8 () { return (this.flag() & 0x800) === 0x800; };
		 CentralDirectory.prototype.isEncrypted = function isEncrypted () { return (this.flag() & 0x1) === 0x1; };
		 CentralDirectory.prototype.getFileData = function getFileData () {
		     // Need to grab the header before we can figure out where the actual
		     // compressed data starts.
		     var start = this.headerRelativeOffset();
		     var header = new FileHeader(this.zipData.slice(start));
		     return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
		 };
		 CentralDirectory.prototype.getData = function getData () {
		     return this.getFileData().decompress();
		 };
		 CentralDirectory.prototype.getRawData = function getRawData () {
		     return this.getFileData().getRawData();
		 };
		 CentralDirectory.prototype.getStats = function getStats () {
		     return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
		 };
		/**
		 * 4.3.16: end of central directory record
		 *  end of central dir signature    4 bytes  (0x06054b50)
		 *  number of this disk             2 bytes
		 *  number of the disk with the
		 *  start of the central directory  2 bytes
		 *  total number of entries in the
		 *  central directory on this disk  2 bytes
		 *  total number of entries in
		 *  the central directory           2 bytes
		 *  size of the central directory   4 bytes
		 *  offset of start of central
		 *  directory with respect to
		 *  the starting disk number        4 bytes
		 *  .ZIP file comment length        2 bytes
		 *  .ZIP file comment       (variable size)
		 */
		var EndOfCentralDirectory = function EndOfCentralDirectory(data) {
		     this.data = data;
		     if (this.data.readUInt32LE(0) !== 0x06054b50) {
		         throw new ApiError(ErrorCode.EINVAL, ("Invalid Zip file: End of central directory record has invalid signature: " + (this.data.readUInt32LE(0))));
		     }
		 };
		 EndOfCentralDirectory.prototype.diskNumber = function diskNumber () { return this.data.readUInt16LE(4); };
		 EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber () { return this.data.readUInt16LE(6); };
		 EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount () { return this.data.readUInt16LE(8); };
		 EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount () { return this.data.readUInt16LE(10); };
		 EndOfCentralDirectory.prototype.cdSize = function cdSize () { return this.data.readUInt32LE(12); };
		 EndOfCentralDirectory.prototype.cdOffset = function cdOffset () { return this.data.readUInt32LE(16); };
		 EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength () { return this.data.readUInt16LE(20); };
		 EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment () {
		     // Assuming UTF-8. The specification doesn't specify.
		     return safeToString(this.data, true, 22, this.cdZipCommentLength());
		 };
		 EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment () {
		     return this.data.slice(22, 22 + this.cdZipCommentLength());
		 };
		/**
		 * Contains the table of contents of a Zip file.
		 */
		var ZipTOC = function ZipTOC(index, directoryEntries, eocd, data) {
		     this.index = index;
		     this.directoryEntries = directoryEntries;
		     this.eocd = eocd;
		     this.data = data;
		 };
		/**
		 * Zip file-backed filesystem
		 * Implemented according to the standard:
		 * http://www.pkware.com/documents/casestudies/APPNOTE.TXT
		 *
		 * While there are a few zip libraries for JavaScript (e.g. JSZip and zip.js),
		 * they are not a good match for BrowserFS. In particular, these libraries
		 * perform a lot of unneeded data copying, and eagerly decompress every file
		 * in the zip file upon loading to check the CRC32. They also eagerly decode
		 * strings. Furthermore, these libraries duplicate functionality already present
		 * in BrowserFS (e.g. UTF-8 decoding and binary data manipulation).
		 *
		 * This filesystem takes advantage of BrowserFS's Buffer implementation, which
		 * efficiently represents the zip file in memory (in both ArrayBuffer-enabled
		 * browsers *and* non-ArrayBuffer browsers), and which can neatly be 'sliced'
		 * without copying data. Each struct defined in the standard is represented with
		 * a buffer slice pointing to an offset in the zip file, and has getters for
		 * each field. As we anticipate that this data will not be read often, we choose
		 * not to store each struct field in the JavaScript object; instead, to reduce
		 * memory consumption, we retrieve it directly from the binary data each time it
		 * is requested.
		 *
		 * When the filesystem is instantiated, we determine the directory structure
		 * of the zip file as quickly as possible. We lazily decompress and check the
		 * CRC32 of files. We do not cache decompressed files; if this is a desired
		 * feature, it is best implemented as a generic file system wrapper that can
		 * cache data from arbitrary file systems.
		 *
		 * For inflation, we use `pako`'s implementation:
		 * https://github.com/nodeca/pako
		 *
		 * Current limitations:
		 * * No encryption.
		 * * No ZIP64 support.
		 * * Read-only.
		 *   Write support would require that we:
		 *   - Keep track of changed/new files.
		 *   - Compress changed files, and generate appropriate metadata for each.
		 *   - Update file offsets for other files in the zip file.
		 *   - Stream it out to a location.
		 *   This isn't that bad, so we might do this at a later date.
		 */
		var ZipFS = (function (SynchronousFileSystem$$1) {
		   function ZipFS(input, name, deprecateMsg) {
		        if ( name === void 0 ) name = '';
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        SynchronousFileSystem$$1.call(this);
		        this.name = name;
		        this._index = new FileIndex();
		        this._directoryEntries = [];
		        this._eocd = null;
		        deprecationMessage(deprecateMsg, ZipFS.Name, { zipData: "zip data as a Buffer", name: name });
		        if (input instanceof ZipTOC) {
		            this._index = input.index;
		            this._directoryEntries = input.directoryEntries;
		            this._eocd = input.eocd;
		            this.data = input.data;
		        }
		        else {
		            this.data = input;
		            this.populateIndex();
		        }
		    }
		
		   if ( SynchronousFileSystem$$1 ) ZipFS.__proto__ = SynchronousFileSystem$$1;
		   ZipFS.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
		   ZipFS.prototype.constructor = ZipFS;
		    /**
		     * Constructs a ZipFS instance with the given options.
		     */
		    ZipFS.Create = function Create (opts, cb) {
		        try {
		            ZipFS.computeIndex(opts.zipData, function (zipTOC) {
		                var fs = new ZipFS(zipTOC, opts.name, false);
		                cb(null, fs);
		            }, false);
		        }
		        catch (e) {
		            cb(e);
		        }
		    };
		    ZipFS.isAvailable = function isAvailable () { return true; };
		    ZipFS.RegisterDecompressionMethod = function RegisterDecompressionMethod (m, fcn) {
		        decompressionMethods[m] = fcn;
		    };
		    /**
		     * **Deprecated. Please use ZipFS.Create() method instead.**
		     */
		    ZipFS.computeIndex = function computeIndex (data, cb, deprecateMsg) {
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        // TODO: Refactor to plumb errors through. Right now, they throw.
		        if (deprecateMsg) {
		            console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
		        }
		        var index = new FileIndex();
		        var eocd = ZipFS.getEOCD(data);
		        if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
		            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
		        }
		        var cdPtr = eocd.cdOffset();
		        if (cdPtr === 0xFFFFFFFF) {
		            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
		        }
		        var cdEnd = cdPtr + eocd.cdSize();
		        ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
		    };
		    /**
		     * Locates the end of central directory record at the end of the file.
		     * Throws an exception if it cannot be found.
		     */
		    ZipFS.getEOCD = function getEOCD (data) {
		        // Unfortunately, the comment is variable size and up to 64K in size.
		        // We assume that the magic signature does not appear in the comment, and
		        // in the bytes between the comment and the signature. Other ZIP
		        // implementations make this same assumption, since the alternative is to
		        // read thread every entry in the file to get to it. :(
		        // These are *negative* offsets from the end of the file.
		        var startOffset = 22;
		        var endOffset = Math.min(startOffset + 0xFFFF, data.length - 1);
		        // There's not even a byte alignment guarantee on the comment so we need to
		        // search byte by byte. *grumble grumble*
		        for (var i = startOffset; i < endOffset; i++) {
		            // Magic number: EOCD Signature
		            if (data.readUInt32LE(data.length - i) === 0x06054b50) {
		                return new EndOfCentralDirectory(data.slice(data.length - i));
		            }
		        }
		        throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
		    };
		    ZipFS.addToIndex = function addToIndex (cd, index) {
		        // Paths must be absolute, yet zip file paths are always relative to the
		        // zip root. So we append '/' and call it a day.
		        var filename = cd.fileName();
		        if (filename.charAt(0) === '/') {
		            throw new Error("WHY IS THIS ABSOLUTE");
		        }
		        // XXX: For the file index, strip the trailing '/'.
		        if (filename.charAt(filename.length - 1) === '/') {
		            filename = filename.substr(0, filename.length - 1);
		        }
		        if (cd.isDirectory()) {
		            index.addPathFast('/' + filename, new DirInode(cd));
		        }
		        else {
		            index.addPathFast('/' + filename, new FileInode(cd));
		        }
		    };
		    ZipFS.computeIndexResponsive = function computeIndexResponsive (data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
		        if (cdPtr < cdEnd) {
		            var count = 0;
		            while (count++ < 200 && cdPtr < cdEnd) {
		                var cd = new CentralDirectory(data, data.slice(cdPtr));
		                ZipFS.addToIndex(cd, index);
		                cdPtr += cd.totalSize();
		                cdEntries.push(cd);
		            }
		            setImmediate$3(function () {
		                ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
		            });
		        }
		        else {
		            cb(new ZipTOC(index, cdEntries, eocd, data));
		        }
		    };
		    ZipFS.prototype.getName = function getName () {
		        return ZipFS.Name + (this.name !== '' ? (" " + (this.name)) : '');
		    };
		    /**
		     * Get the CentralDirectory object for the given path.
		     */
		    ZipFS.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry (path$$1) {
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        if (isFileInode(inode)) {
		            return inode.getData();
		        }
		        else if (isDirInode(inode)) {
		            return inode.getData();
		        }
		        else {
		            // Should never occur.
		            throw ApiError.EPERM(("Invalid inode: " + inode));
		        }
		    };
		    ZipFS.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt (index) {
		        var dirEntry = this._directoryEntries[index];
		        if (!dirEntry) {
		            throw new RangeError(("Invalid directory index: " + index + "."));
		        }
		        return dirEntry;
		    };
		    ZipFS.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries () {
		        return this._directoryEntries.length;
		    };
		    ZipFS.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory () {
		        return this._eocd;
		    };
		    ZipFS.prototype.diskSpace = function diskSpace (path$$1, cb) {
		        // Read-only file system.
		        cb(this.data.length, 0);
		    };
		    ZipFS.prototype.isReadOnly = function isReadOnly () {
		        return true;
		    };
		    ZipFS.prototype.supportsLinks = function supportsLinks () {
		        return false;
		    };
		    ZipFS.prototype.supportsProps = function supportsProps () {
		        return false;
		    };
		    ZipFS.prototype.supportsSynch = function supportsSynch () {
		        return true;
		    };
		    ZipFS.prototype.statSync = function statSync (path$$1, isLstat) {
		        var inode = this._index.getInode(path$$1);
		        if (inode === null) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        var stats;
		        if (isFileInode(inode)) {
		            stats = inode.getData().getStats();
		        }
		        else if (isDirInode(inode)) {
		            stats = inode.getStats();
		        }
		        else {
		            throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
		        }
		        return stats;
		    };
		    ZipFS.prototype.openSync = function openSync (path$$1, flags, mode) {
		        // INVARIANT: Cannot write to RO file systems.
		        if (flags.isWriteable()) {
		            throw new ApiError(ErrorCode.EPERM, path$$1);
		        }
		        // Check if the path exists, and is a file.
		        var inode = this._index.getInode(path$$1);
		        if (!inode) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        else if (isFileInode(inode)) {
		            var cdRecord = inode.getData();
		            var stats = cdRecord.getStats();
		            switch (flags.pathExistsAction()) {
		                case ActionType.THROW_EXCEPTION:
		                case ActionType.TRUNCATE_FILE:
		                    throw ApiError.EEXIST(path$$1);
		                case ActionType.NOP:
		                    return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());
		                default:
		                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
		            }
		        }
		        else {
		            throw ApiError.EISDIR(path$$1);
		        }
		    };
		    ZipFS.prototype.readdirSync = function readdirSync (path$$1) {
		        // Check if it exists.
		        var inode = this._index.getInode(path$$1);
		        if (!inode) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        else if (isDirInode(inode)) {
		            return inode.getListing();
		        }
		        else {
		            throw ApiError.ENOTDIR(path$$1);
		        }
		    };
		    /**
		     * Specially-optimized readfile.
		     */
		    ZipFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
		        // Get file.
		        var fd = this.openSync(fname, flag, 0x1a4);
		        try {
		            var fdCast = fd;
		            var fdBuff = fdCast.getBuffer();
		            if (encoding === null) {
		                return copyingSlice(fdBuff);
		            }
		            return fdBuff.toString(encoding);
		        }
		        finally {
		            fd.closeSync();
		        }
		    };
		    ZipFS.prototype.populateIndex = function populateIndex () {
		        var this$1$1 = this;
		
		        var eocd = this._eocd = ZipFS.getEOCD(this.data);
		        if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
		            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
		        }
		        var cdPtr = eocd.cdOffset();
		        if (cdPtr === 0xFFFFFFFF) {
		            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
		        }
		        var cdEnd = cdPtr + eocd.cdSize();
		        while (cdPtr < cdEnd) {
		            var cd = new CentralDirectory(this$1$1.data, this$1$1.data.slice(cdPtr));
		            cdPtr += cd.totalSize();
		            ZipFS.addToIndex(cd, this$1$1._index);
		            this$1$1._directoryEntries.push(cd);
		        }
		    };
		
		   return ZipFS;
		}(SynchronousFileSystem));
		
		ZipFS.Name = "ZipFS";
		ZipFS.Options = {
		    zipData: {
		        type: "object",
		        description: "The zip file as a Buffer object.",
		        validator: bufferValidator
		    },
		    name: {
		        type: "string",
		        optional: true,
		        description: "The name of the zip file (optional)."
		    }
		};
		ZipFS.CompressionMethod = CompressionMethod;
		ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function (data, compressedSize, uncompressedSize) {
		    return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), { chunkSize: uncompressedSize }));
		});
		ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function (data, compressedSize, uncompressedSize) {
		    return copyingSlice(data, 0, uncompressedSize);
		});
		
		/**
		 * @hidden
		 */
		var rockRidgeIdentifier = "IEEE_P1282";
		/**
		 * @hidden
		 */
		function getASCIIString(data, startIndex, length) {
		    return data.toString('ascii', startIndex, startIndex + length).trim();
		}
		/**
		 * @hidden
		 */
		function getJolietString(data, startIndex, length) {
		    if (length === 1) {
		        // Special: Root, parent, current directory are still a single byte.
		        return String.fromCharCode(data[startIndex]);
		    }
		    // UTF16-BE, which isn't natively supported by NodeJS Buffers.
		    // Length should be even, but pessimistically floor just in case.
		    var pairs = Math.floor(length / 2);
		    var chars = new Array(pairs);
		    for (var i = 0; i < pairs; i++) {
		        var pos = startIndex + (i << 1);
		        chars[i] = String.fromCharCode(data[pos + 1] | (data[pos] << 8));
		    }
		    return chars.join('');
		}
		/**
		 * @hidden
		 */
		function getDate(data, startIndex) {
		    var year = parseInt(getASCIIString(data, startIndex, 4), 10);
		    var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
		    var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
		    var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
		    var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
		    var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
		    var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);
		    // Last is a time-zone offset, but JavaScript dates don't support time zones well.
		    return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
		}
		/**
		 * @hidden
		 */
		function getShortFormDate(data, startIndex) {
		    var yearsSince1900 = data[startIndex];
		    var month = data[startIndex + 1];
		    var day = data[startIndex + 2];
		    var hour = data[startIndex + 3];
		    var minute = data[startIndex + 4];
		    var second = data[startIndex + 5];
		    // JavaScript's Date support isn't so great; ignore timezone.
		    // const offsetFromGMT = this._data[24];
		    return new Date(yearsSince1900, month - 1, day, hour, minute, second);
		}
		/**
		 * @hidden
		 */
		function constructSystemUseEntry(bigData, i) {
		    var data = bigData.slice(i);
		    var sue = new SystemUseEntry(data);
		    switch (sue.signatureWord()) {
		        case 17221 /* CE */:
		            return new CEEntry(data);
		        case 20548 /* PD */:
		            return new PDEntry(data);
		        case 21328 /* SP */:
		            return new SPEntry(data);
		        case 21332 /* ST */:
		            return new STEntry(data);
		        case 17746 /* ER */:
		            return new EREntry(data);
		        case 17747 /* ES */:
		            return new ESEntry(data);
		        case 20568 /* PX */:
		            return new PXEntry(data);
		        case 20558 /* PN */:
		            return new PNEntry(data);
		        case 21324 /* SL */:
		            return new SLEntry(data);
		        case 20045 /* NM */:
		            return new NMEntry(data);
		        case 17228 /* CL */:
		            return new CLEntry(data);
		        case 20556 /* PL */:
		            return new PLEntry(data);
		        case 21061 /* RE */:
		            return new REEntry(data);
		        case 21574 /* TF */:
		            return new TFEntry(data);
		        case 21318 /* SF */:
		            return new SFEntry(data);
		        case 21074 /* RR */:
		            return new RREntry(data);
		        default:
		            return sue;
		    }
		}
		/**
		 * @hidden
		 */
		function constructSystemUseEntries(data, i, len, isoData) {
		    // If the remaining allocated space following the last recorded System Use Entry in a System
		    // Use field or Continuation Area is less than four bytes long, it cannot contain a System
		    // Use Entry and shall be ignored
		    len = len - 4;
		    var entries = new Array();
		    while (i < len) {
		        var entry = constructSystemUseEntry(data, i);
		        var length = entry.length();
		        if (length === 0) {
		            // Invalid SU section; prevent infinite loop.
		            return entries;
		        }
		        i += length;
		        if (entry instanceof STEntry) {
		            // ST indicates the end of entries.
		            break;
		        }
		        if (entry instanceof CEEntry) {
		            entries = entries.concat(entry.getEntries(isoData));
		        }
		        else {
		            entries.push(entry);
		        }
		    }
		    return entries;
		}
		/**
		 * @hidden
		 */
		var VolumeDescriptor = function VolumeDescriptor(data) {
		    this._data = data;
		};
		VolumeDescriptor.prototype.type = function type () {
		    return this._data[0];
		};
		VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier () {
		    return getASCIIString(this._data, 1, 5);
		};
		VolumeDescriptor.prototype.version = function version () {
		    return this._data[6];
		};
		VolumeDescriptor.prototype.data = function data () {
		    return this._data.slice(7, 2048);
		};
		/**
		 * @hidden
		 */
		var PrimaryOrSupplementaryVolumeDescriptor = (function (VolumeDescriptor) {
		    function PrimaryOrSupplementaryVolumeDescriptor(data) {
		        VolumeDescriptor.call(this, data);
		        this._root = null;
		    }
		
		    if ( VolumeDescriptor ) PrimaryOrSupplementaryVolumeDescriptor.__proto__ = VolumeDescriptor;
		    PrimaryOrSupplementaryVolumeDescriptor.prototype = Object.create( VolumeDescriptor && VolumeDescriptor.prototype );
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor;
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.systemIdentifier = function systemIdentifier () {
		        return this._getString32(8);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeIdentifier = function volumeIdentifier () {
		        return this._getString32(40);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSpaceSize = function volumeSpaceSize () {
		        return this._data.readUInt32LE(80);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetSize = function volumeSetSize () {
		        return this._data.readUInt16LE(120);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSequenceNumber = function volumeSequenceNumber () {
		        return this._data.readUInt16LE(124);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.logicalBlockSize = function logicalBlockSize () {
		        return this._data.readUInt16LE(128);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.pathTableSize = function pathTableSize () {
		        return this._data.readUInt32LE(132);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable () {
		        return this._data.readUInt32LE(140);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable () {
		        return this._data.readUInt32LE(144);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable () {
		        return this._data.readUInt32BE(148);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable () {
		        return this._data.readUInt32BE(152);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.rootDirectoryEntry = function rootDirectoryEntry (isoData) {
		        if (this._root === null) {
		            this._root = this._constructRootDirectoryRecord(this._data.slice(156));
		            this._root.rootCheckForRockRidge(isoData);
		        }
		        return this._root;
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetIdentifier = function volumeSetIdentifier () {
		        return this._getString(190, 128);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.publisherIdentifier = function publisherIdentifier () {
		        return this._getString(318, 128);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.dataPreparerIdentifier = function dataPreparerIdentifier () {
		        return this._getString(446, 128);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationIdentifier = function applicationIdentifier () {
		        return this._getString(574, 128);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.copyrightFileIdentifier = function copyrightFileIdentifier () {
		        return this._getString(702, 38);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.abstractFileIdentifier = function abstractFileIdentifier () {
		        return this._getString(740, 36);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier () {
		        return this._getString(776, 37);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeCreationDate = function volumeCreationDate () {
		        return getDate(this._data, 813);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeModificationDate = function volumeModificationDate () {
		        return getDate(this._data, 830);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeExpirationDate = function volumeExpirationDate () {
		        return getDate(this._data, 847);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeEffectiveDate = function volumeEffectiveDate () {
		        return getDate(this._data, 864);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.fileStructureVersion = function fileStructureVersion () {
		        return this._data[881];
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationUsed = function applicationUsed () {
		        return this._data.slice(883, 883 + 512);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype.reserved = function reserved () {
		        return this._data.slice(1395, 1395 + 653);
		    };
		    PrimaryOrSupplementaryVolumeDescriptor.prototype._getString32 = function _getString32 (idx) {
		        return this._getString(idx, 32);
		    };
		
		    return PrimaryOrSupplementaryVolumeDescriptor;
		}(VolumeDescriptor));
		/**
		 * @hidden
		 */
		var PrimaryVolumeDescriptor = (function (PrimaryOrSupplementaryVolumeDescriptor) {
		    function PrimaryVolumeDescriptor(data) {
		        PrimaryOrSupplementaryVolumeDescriptor.call(this, data);
		        if (this.type() !== 1 /* PrimaryVolumeDescriptor */) {
		            throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
		        }
		    }
		
		    if ( PrimaryOrSupplementaryVolumeDescriptor ) PrimaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
		    PrimaryVolumeDescriptor.prototype = Object.create( PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype );
		    PrimaryVolumeDescriptor.prototype.constructor = PrimaryVolumeDescriptor;
		    PrimaryVolumeDescriptor.prototype.name = function name () {
		        return "ISO9660";
		    };
		    PrimaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord (data) {
		        return new ISODirectoryRecord(data, -1);
		    };
		    PrimaryVolumeDescriptor.prototype._getString = function _getString (idx, len) {
		        return this._getString(idx, len);
		    };
		
		    return PrimaryVolumeDescriptor;
		}(PrimaryOrSupplementaryVolumeDescriptor));
		/**
		 * @hidden
		 */
		var SupplementaryVolumeDescriptor = (function (PrimaryOrSupplementaryVolumeDescriptor) {
		    function SupplementaryVolumeDescriptor(data) {
		        PrimaryOrSupplementaryVolumeDescriptor.call(this, data);
		        if (this.type() !== 2 /* SupplementaryVolumeDescriptor */) {
		            throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
		        }
		        var escapeSequence = this.escapeSequence();
		        var third = escapeSequence[2];
		        // Third character identifies what 'level' of the UCS specification to follow.
		        // We ignore it.
		        if (escapeSequence[0] !== 0x25 || escapeSequence[1] !== 0x2F ||
		            (third !== 0x40 && third !== 0x43 && third !== 0x45)) {
		            throw new ApiError(ErrorCode.EIO, ("Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + (escapeSequence.toString())));
		        }
		    }
		
		    if ( PrimaryOrSupplementaryVolumeDescriptor ) SupplementaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
		    SupplementaryVolumeDescriptor.prototype = Object.create( PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype );
		    SupplementaryVolumeDescriptor.prototype.constructor = SupplementaryVolumeDescriptor;
		    SupplementaryVolumeDescriptor.prototype.name = function name () {
		        return "Joliet";
		    };
		    SupplementaryVolumeDescriptor.prototype.escapeSequence = function escapeSequence () {
		        return this._data.slice(88, 120);
		    };
		    SupplementaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord (data) {
		        return new JolietDirectoryRecord(data, -1);
		    };
		    SupplementaryVolumeDescriptor.prototype._getString = function _getString (idx, len) {
		        return getJolietString(this._data, idx, len);
		    };
		
		    return SupplementaryVolumeDescriptor;
		}(PrimaryOrSupplementaryVolumeDescriptor));
		/**
		 * @hidden
		 */
		var DirectoryRecord = function DirectoryRecord(data, rockRidgeOffset) {
		    this._suEntries = null;
		    this._fileOrDir = null;
		    this._data = data;
		    this._rockRidgeOffset = rockRidgeOffset;
		};
		DirectoryRecord.prototype.hasRockRidge = function hasRockRidge () {
		    return this._rockRidgeOffset > -1;
		};
		DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset () {
		    return this._rockRidgeOffset;
		};
		/**
		 * !!ONLY VALID ON ROOT NODE!!
		 * Checks if Rock Ridge is enabled, and sets the offset.
		 */
		DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge (isoData) {
		    var dir = this.getDirectory(isoData);
		    this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);
		    if (this._rockRidgeOffset > -1) {
		        // Wipe out directory. Start over with RR knowledge.
		        this._fileOrDir = null;
		    }
		};
		DirectoryRecord.prototype.length = function length () {
		    return this._data[0];
		};
		DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength () {
		    return this._data[1];
		};
		DirectoryRecord.prototype.lba = function lba () {
		    return this._data.readUInt32LE(2) * 2048;
		};
		DirectoryRecord.prototype.dataLength = function dataLength () {
		    return this._data.readUInt32LE(10);
		};
		DirectoryRecord.prototype.recordingDate = function recordingDate () {
		    return getShortFormDate(this._data, 18);
		};
		DirectoryRecord.prototype.fileFlags = function fileFlags () {
		    return this._data[25];
		};
		DirectoryRecord.prototype.fileUnitSize = function fileUnitSize () {
		    return this._data[26];
		};
		DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize () {
		    return this._data[27];
		};
		DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber () {
		    return this._data.readUInt16LE(28);
		};
		DirectoryRecord.prototype.identifier = function identifier () {
		    return this._getString(33, this._data[32]);
		};
		DirectoryRecord.prototype.fileName = function fileName (isoData) {
		    if (this.hasRockRidge()) {
		        var fn = this._rockRidgeFilename(isoData);
		        if (fn !== null) {
		            return fn;
		        }
		    }
		    var ident = this.identifier();
		    if (this.isDirectory(isoData)) {
		        return ident;
		    }
		    // Files:
		    // - MUST have 0x2E (.) separating the name from the extension
		    // - MUST have 0x3B (;) separating the file name and extension from the version
		    // Gets expanded to two-byte char in Unicode directory records.
		    var versionSeparator = ident.indexOf(';');
		    if (versionSeparator === -1) {
		        // Some Joliet filenames lack the version separator, despite the standard
		        // specifying that it should be there.
		        return ident;
		    }
		    else if (ident[versionSeparator - 1] === '.') {
		        // Empty extension. Do not include '.' in the filename.
		        return ident.slice(0, versionSeparator - 1);
		    }
		    else {
		        // Include up to version separator.
		        return ident.slice(0, versionSeparator);
		    }
		};
		DirectoryRecord.prototype.isDirectory = function isDirectory (isoData) {
		    var rv = !!(this.fileFlags() & 2 /* Directory */);
		    // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory
		    // depth limit. Rock Ridge marks these as files and adds a special attribute.
		    if (!rv && this.hasRockRidge()) {
		        rv = this.getSUEntries(isoData).filter(function (e) { return e instanceof CLEntry; }).length > 0;
		    }
		    return rv;
		};
		DirectoryRecord.prototype.isSymlink = function isSymlink (isoData) {
		    return this.hasRockRidge() && this.getSUEntries(isoData).filter(function (e) { return e instanceof SLEntry; }).length > 0;
		};
		DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath (isoData) {
		    var p = "";
		    var entries = this.getSUEntries(isoData);
		    var getStr = this._getGetString();
		    for (var i = 0, list = entries; i < list.length; i += 1) {
		        var entry = list[i];
		
		            if (entry instanceof SLEntry) {
		            var components = entry.componentRecords();
		            for (var i$1 = 0, list$1 = components; i$1 < list$1.length; i$1 += 1) {
		                var component = list$1[i$1];
		
		                    var flags = component.flags();
		                if (flags & 2 /* CURRENT */) {
		                    p += "./";
		                }
		                else if (flags & 4 /* PARENT */) {
		                    p += "../";
		                }
		                else if (flags & 8 /* ROOT */) {
		                    p += "/";
		                }
		                else {
		                    p += component.content(getStr);
		                    if (!(flags & 1 /* CONTINUE */)) {
		                        p += '/';
		                    }
		                }
		            }
		            if (!entry.continueFlag()) {
		                // We are done with this link.
		                break;
		            }
		        }
		    }
		    if (p.length > 1 && p[p.length - 1] === '/') {
		        // Trim trailing '/'.
		        return p.slice(0, p.length - 1);
		    }
		    else {
		        return p;
		    }
		};
		DirectoryRecord.prototype.getFile = function getFile (isoData) {
		    if (this.isDirectory(isoData)) {
		        throw new Error("Tried to get a File from a directory.");
		    }
		    if (this._fileOrDir === null) {
		        this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
		    }
		    return this._fileOrDir;
		};
		DirectoryRecord.prototype.getDirectory = function getDirectory (isoData) {
		    if (!this.isDirectory(isoData)) {
		        throw new Error("Tried to get a Directory from a file.");
		    }
		    if (this._fileOrDir === null) {
		        this._fileOrDir = this._constructDirectory(isoData);
		    }
		    return this._fileOrDir;
		};
		DirectoryRecord.prototype.getSUEntries = function getSUEntries (isoData) {
		    if (!this._suEntries) {
		        this._constructSUEntries(isoData);
		    }
		    return this._suEntries;
		};
		DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename (isoData) {
		    var nmEntries = this.getSUEntries(isoData).filter(function (e) { return e instanceof NMEntry; });
		    if (nmEntries.length === 0 || nmEntries[0].flags() & (2 /* CURRENT */ | 4 /* PARENT */)) {
		        return null;
		    }
		    var str = '';
		    var getString = this._getGetString();
		    for (var i = 0, list = nmEntries; i < list.length; i += 1) {
		        var e = list[i];
		
		            str += e.name(getString);
		        if (!(e.flags() & 1 /* CONTINUE */)) {
		            break;
		        }
		    }
		    return str;
		};
		DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries (isoData) {
		    var i = 33 + this._data[32];
		    if (i % 2 === 1) {
		        // Skip padding field.
		        i++;
		    }
		    i += this._rockRidgeOffset;
		    this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);
		};
		/**
		 * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!
		 * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset
		 * at which system use fields begin.
		 */
		DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset (isoData) {
		    // In the worst case, we get some garbage SU entries.
		    // Fudge offset to 0 before proceeding.
		    this._rockRidgeOffset = 0;
		    var suEntries = this.getSUEntries(isoData);
		    if (suEntries.length > 0) {
		        var spEntry = suEntries[0];
		        if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
		            // SUSP is in use.
		            for (var i = 1; i < suEntries.length; i++) {
		                var entry = suEntries[i];
		                if (entry instanceof RREntry || (entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier)) {
		                    // Rock Ridge is in use!
		                    return spEntry.bytesSkipped();
		                }
		            }
		        }
		    }
		    // Failed.
		    this._rockRidgeOffset = -1;
		    return -1;
		};
		/**
		 * @hidden
		 */
		var ISODirectoryRecord = (function (DirectoryRecord) {
		    function ISODirectoryRecord(data, rockRidgeOffset) {
		        DirectoryRecord.call(this, data, rockRidgeOffset);
		    }
		
		    if ( DirectoryRecord ) ISODirectoryRecord.__proto__ = DirectoryRecord;
		    ISODirectoryRecord.prototype = Object.create( DirectoryRecord && DirectoryRecord.prototype );
		    ISODirectoryRecord.prototype.constructor = ISODirectoryRecord;
		    ISODirectoryRecord.prototype._getString = function _getString (i, len) {
		        return getASCIIString(this._data, i, len);
		    };
		    ISODirectoryRecord.prototype._constructDirectory = function _constructDirectory (isoData) {
		        return new ISODirectory(this, isoData);
		    };
		    ISODirectoryRecord.prototype._getGetString = function _getGetString () {
		        return getASCIIString;
		    };
		
		    return ISODirectoryRecord;
		}(DirectoryRecord));
		/**
		 * @hidden
		 */
		var JolietDirectoryRecord = (function (DirectoryRecord) {
		    function JolietDirectoryRecord(data, rockRidgeOffset) {
		        DirectoryRecord.call(this, data, rockRidgeOffset);
		    }
		
		    if ( DirectoryRecord ) JolietDirectoryRecord.__proto__ = DirectoryRecord;
		    JolietDirectoryRecord.prototype = Object.create( DirectoryRecord && DirectoryRecord.prototype );
		    JolietDirectoryRecord.prototype.constructor = JolietDirectoryRecord;
		    JolietDirectoryRecord.prototype._getString = function _getString (i, len) {
		        return getJolietString(this._data, i, len);
		    };
		    JolietDirectoryRecord.prototype._constructDirectory = function _constructDirectory (isoData) {
		        return new JolietDirectory(this, isoData);
		    };
		    JolietDirectoryRecord.prototype._getGetString = function _getGetString () {
		        return getJolietString;
		    };
		
		    return JolietDirectoryRecord;
		}(DirectoryRecord));
		/**
		 * @hidden
		 */
		var SystemUseEntry = function SystemUseEntry(data) {
		    this._data = data;
		};
		SystemUseEntry.prototype.signatureWord = function signatureWord () {
		    return this._data.readUInt16BE(0);
		};
		SystemUseEntry.prototype.signatureWordString = function signatureWordString () {
		    return getASCIIString(this._data, 0, 2);
		};
		SystemUseEntry.prototype.length = function length () {
		    return this._data[2];
		};
		SystemUseEntry.prototype.suVersion = function suVersion () {
		    return this._data[3];
		};
		/**
		 * Continuation entry.
		 * @hidden
		 */
		var CEEntry = (function (SystemUseEntry) {
		    function CEEntry(data) {
		        SystemUseEntry.call(this, data);
		        this._entries = null;
		    }
		
		    if ( SystemUseEntry ) CEEntry.__proto__ = SystemUseEntry;
		    CEEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    CEEntry.prototype.constructor = CEEntry;
		    /**
		     * Logical block address of the continuation area.
		     */
		    CEEntry.prototype.continuationLba = function continuationLba () {
		        return this._data.readUInt32LE(4);
		    };
		    /**
		     * Offset into the logical block.
		     */
		    CEEntry.prototype.continuationLbaOffset = function continuationLbaOffset () {
		        return this._data.readUInt32LE(12);
		    };
		    /**
		     * Length of the continuation area.
		     */
		    CEEntry.prototype.continuationLength = function continuationLength () {
		        return this._data.readUInt32LE(20);
		    };
		    CEEntry.prototype.getEntries = function getEntries (isoData) {
		        if (!this._entries) {
		            var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
		            this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
		        }
		        return this._entries;
		    };
		
		    return CEEntry;
		}(SystemUseEntry));
		/**
		 * Padding entry.
		 * @hidden
		 */
		var PDEntry = (function (SystemUseEntry) {
		    function PDEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) PDEntry.__proto__ = SystemUseEntry;
		    PDEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    PDEntry.prototype.constructor = PDEntry;
		
		    return PDEntry;
		}(SystemUseEntry));
		/**
		 * Identifies that SUSP is in-use.
		 * @hidden
		 */
		var SPEntry = (function (SystemUseEntry) {
		    function SPEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) SPEntry.__proto__ = SystemUseEntry;
		    SPEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    SPEntry.prototype.constructor = SPEntry;
		    SPEntry.prototype.checkBytesPass = function checkBytesPass () {
		        return this._data[4] === 0xBE && this._data[5] === 0xEF;
		    };
		    SPEntry.prototype.bytesSkipped = function bytesSkipped () {
		        return this._data[6];
		    };
		
		    return SPEntry;
		}(SystemUseEntry));
		/**
		 * Identifies the end of the SUSP entries.
		 * @hidden
		 */
		var STEntry = (function (SystemUseEntry) {
		    function STEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) STEntry.__proto__ = SystemUseEntry;
		    STEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    STEntry.prototype.constructor = STEntry;
		
		    return STEntry;
		}(SystemUseEntry));
		/**
		 * Specifies system-specific extensions to SUSP.
		 * @hidden
		 */
		var EREntry = (function (SystemUseEntry) {
		    function EREntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) EREntry.__proto__ = SystemUseEntry;
		    EREntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    EREntry.prototype.constructor = EREntry;
		    EREntry.prototype.identifierLength = function identifierLength () {
		        return this._data[4];
		    };
		    EREntry.prototype.descriptorLength = function descriptorLength () {
		        return this._data[5];
		    };
		    EREntry.prototype.sourceLength = function sourceLength () {
		        return this._data[6];
		    };
		    EREntry.prototype.extensionVersion = function extensionVersion () {
		        return this._data[7];
		    };
		    EREntry.prototype.extensionIdentifier = function extensionIdentifier () {
		        return getASCIIString(this._data, 8, this.identifierLength());
		    };
		    EREntry.prototype.extensionDescriptor = function extensionDescriptor () {
		        return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
		    };
		    EREntry.prototype.extensionSource = function extensionSource () {
		        return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
		    };
		
		    return EREntry;
		}(SystemUseEntry));
		/**
		 * @hidden
		 */
		var ESEntry = (function (SystemUseEntry) {
		    function ESEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) ESEntry.__proto__ = SystemUseEntry;
		    ESEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    ESEntry.prototype.constructor = ESEntry;
		    ESEntry.prototype.extensionSequence = function extensionSequence () {
		        return this._data[4];
		    };
		
		    return ESEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Marks that RockRidge is in use [deprecated]
		 * @hidden
		 */
		var RREntry = (function (SystemUseEntry) {
		    function RREntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) RREntry.__proto__ = SystemUseEntry;
		    RREntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    RREntry.prototype.constructor = RREntry;
		
		    return RREntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records POSIX file attributes.
		 * @hidden
		 */
		var PXEntry = (function (SystemUseEntry) {
		    function PXEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) PXEntry.__proto__ = SystemUseEntry;
		    PXEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    PXEntry.prototype.constructor = PXEntry;
		    PXEntry.prototype.mode = function mode () {
		        return this._data.readUInt32LE(4);
		    };
		    PXEntry.prototype.fileLinks = function fileLinks () {
		        return this._data.readUInt32LE(12);
		    };
		    PXEntry.prototype.uid = function uid () {
		        return this._data.readUInt32LE(20);
		    };
		    PXEntry.prototype.gid = function gid () {
		        return this._data.readUInt32LE(28);
		    };
		    PXEntry.prototype.inode = function inode () {
		        return this._data.readUInt32LE(36);
		    };
		
		    return PXEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records POSIX device number.
		 * @hidden
		 */
		var PNEntry = (function (SystemUseEntry) {
		    function PNEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) PNEntry.__proto__ = SystemUseEntry;
		    PNEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    PNEntry.prototype.constructor = PNEntry;
		    PNEntry.prototype.devTHigh = function devTHigh () {
		        return this._data.readUInt32LE(4);
		    };
		    PNEntry.prototype.devTLow = function devTLow () {
		        return this._data.readUInt32LE(12);
		    };
		
		    return PNEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records symbolic link
		 * @hidden
		 */
		var SLEntry = (function (SystemUseEntry) {
		    function SLEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) SLEntry.__proto__ = SystemUseEntry;
		    SLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    SLEntry.prototype.constructor = SLEntry;
		    SLEntry.prototype.flags = function flags () {
		        return this._data[4];
		    };
		    SLEntry.prototype.continueFlag = function continueFlag () {
		        return this.flags() & 0x1;
		    };
		    SLEntry.prototype.componentRecords = function componentRecords () {
		        var this$1$1 = this;
		
		        var records = new Array();
		        var i = 5;
		        while (i < this.length()) {
		            var record = new SLComponentRecord(this$1$1._data.slice(i));
		            records.push(record);
		            i += record.length();
		        }
		        return records;
		    };
		
		    return SLEntry;
		}(SystemUseEntry));
		/**
		 * @hidden
		 */
		var SLComponentRecord = function SLComponentRecord(data) {
		    this._data = data;
		};
		SLComponentRecord.prototype.flags = function flags () {
		    return this._data[0];
		};
		SLComponentRecord.prototype.length = function length () {
		    return 2 + this.componentLength();
		};
		SLComponentRecord.prototype.componentLength = function componentLength () {
		    return this._data[1];
		};
		SLComponentRecord.prototype.content = function content (getString) {
		    return getString(this._data, 2, this.componentLength());
		};
		/**
		 * RockRidge: Records alternate file name
		 * @hidden
		 */
		var NMEntry = (function (SystemUseEntry) {
		    function NMEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) NMEntry.__proto__ = SystemUseEntry;
		    NMEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    NMEntry.prototype.constructor = NMEntry;
		    NMEntry.prototype.flags = function flags () {
		        return this._data[4];
		    };
		    NMEntry.prototype.name = function name (getString) {
		        return getString(this._data, 5, this.length() - 5);
		    };
		
		    return NMEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records child link
		 * @hidden
		 */
		var CLEntry = (function (SystemUseEntry) {
		    function CLEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) CLEntry.__proto__ = SystemUseEntry;
		    CLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    CLEntry.prototype.constructor = CLEntry;
		    CLEntry.prototype.childDirectoryLba = function childDirectoryLba () {
		        return this._data.readUInt32LE(4);
		    };
		
		    return CLEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records parent link.
		 * @hidden
		 */
		var PLEntry = (function (SystemUseEntry) {
		    function PLEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) PLEntry.__proto__ = SystemUseEntry;
		    PLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    PLEntry.prototype.constructor = PLEntry;
		    PLEntry.prototype.parentDirectoryLba = function parentDirectoryLba () {
		        return this._data.readUInt32LE(4);
		    };
		
		    return PLEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records relocated directory.
		 * @hidden
		 */
		var REEntry = (function (SystemUseEntry) {
		    function REEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) REEntry.__proto__ = SystemUseEntry;
		    REEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    REEntry.prototype.constructor = REEntry;
		
		    return REEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: Records file timestamps
		 * @hidden
		 */
		var TFEntry = (function (SystemUseEntry) {
		    function TFEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) TFEntry.__proto__ = SystemUseEntry;
		    TFEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    TFEntry.prototype.constructor = TFEntry;
		    TFEntry.prototype.flags = function flags () {
		        return this._data[4];
		    };
		    TFEntry.prototype.creation = function creation () {
		        if (this.flags() & 1 /* CREATION */) {
		            if (this._longFormDates()) {
		                return getDate(this._data, 5);
		            }
		            else {
		                return getShortFormDate(this._data, 5);
		            }
		        }
		        else {
		            return null;
		        }
		    };
		    TFEntry.prototype.modify = function modify () {
		        if (this.flags() & 2 /* MODIFY */) {
		            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
		            if (this._longFormDates) {
		                return getDate(this._data, 5 + (previousDates * 17));
		            }
		            else {
		                return getShortFormDate(this._data, 5 + (previousDates * 7));
		            }
		        }
		        else {
		            return null;
		        }
		    };
		    TFEntry.prototype.access = function access () {
		        if (this.flags() & 4 /* ACCESS */) {
		            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
		            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
		            if (this._longFormDates) {
		                return getDate(this._data, 5 + (previousDates * 17));
		            }
		            else {
		                return getShortFormDate(this._data, 5 + (previousDates * 7));
		            }
		        }
		        else {
		            return null;
		        }
		    };
		    TFEntry.prototype.backup = function backup () {
		        if (this.flags() & 16 /* BACKUP */) {
		            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
		            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
		            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
		            if (this._longFormDates) {
		                return getDate(this._data, 5 + (previousDates * 17));
		            }
		            else {
		                return getShortFormDate(this._data, 5 + (previousDates * 7));
		            }
		        }
		        else {
		            return null;
		        }
		    };
		    TFEntry.prototype.expiration = function expiration () {
		        if (this.flags() & 32 /* EXPIRATION */) {
		            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
		            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
		            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
		            previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;
		            if (this._longFormDates) {
		                return getDate(this._data, 5 + (previousDates * 17));
		            }
		            else {
		                return getShortFormDate(this._data, 5 + (previousDates * 7));
		            }
		        }
		        else {
		            return null;
		        }
		    };
		    TFEntry.prototype.effective = function effective () {
		        if (this.flags() & 64 /* EFFECTIVE */) {
		            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
		            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
		            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
		            previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;
		            previousDates += (this.flags() & 32 /* EXPIRATION */) ? 1 : 0;
		            if (this._longFormDates) {
		                return getDate(this._data, 5 + (previousDates * 17));
		            }
		            else {
		                return getShortFormDate(this._data, 5 + (previousDates * 7));
		            }
		        }
		        else {
		            return null;
		        }
		    };
		    TFEntry.prototype._longFormDates = function _longFormDates () {
		        return !!(this.flags() && 128 /* LONG_FORM */);
		    };
		
		    return TFEntry;
		}(SystemUseEntry));
		/**
		 * RockRidge: File data in sparse format.
		 * @hidden
		 */
		var SFEntry = (function (SystemUseEntry) {
		    function SFEntry(data) {
		        SystemUseEntry.call(this, data);
		    }
		
		    if ( SystemUseEntry ) SFEntry.__proto__ = SystemUseEntry;
		    SFEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
		    SFEntry.prototype.constructor = SFEntry;
		    SFEntry.prototype.virtualSizeHigh = function virtualSizeHigh () {
		        return this._data.readUInt32LE(4);
		    };
		    SFEntry.prototype.virtualSizeLow = function virtualSizeLow () {
		        return this._data.readUInt32LE(12);
		    };
		    SFEntry.prototype.tableDepth = function tableDepth () {
		        return this._data[20];
		    };
		
		    return SFEntry;
		}(SystemUseEntry));
		/**
		 * @hidden
		 */
		var Directory = function Directory(record, isoData) {
		    var this$1$1 = this;
		
		    this._fileList = [];
		    this._fileMap = {};
		    this._record = record;
		    var i = record.lba();
		    var iLimit = i + record.dataLength();
		    if (!(record.fileFlags() & 2 /* Directory */)) {
		        // Must have a CL entry.
		        var cl = record.getSUEntries(isoData).filter(function (e) { return e instanceof CLEntry; })[0];
		        i = cl.childDirectoryLba() * 2048;
		        iLimit = Infinity;
		    }
		    while (i < iLimit) {
		        var len = isoData[i];
		        // Zero-padding between sectors.
		        // TODO: Could optimize this to seek to nearest-sector upon
		        // seeing a 0.
		        if (len === 0) {
		            i++;
		            continue;
		        }
		        var r = this$1$1._constructDirectoryRecord(isoData.slice(i));
		        var fname = r.fileName(isoData);
		        // Skip '.' and '..' entries.
		        if (fname !== '\u0000' && fname !== '\u0001') {
		            // Skip relocated entries.
		            if (!r.hasRockRidge() || r.getSUEntries(isoData).filter(function (e) { return e instanceof REEntry; }).length === 0) {
		                this$1$1._fileMap[fname] = r;
		                this$1$1._fileList.push(fname);
		            }
		        }
		        else if (iLimit === Infinity) {
		            // First entry contains needed data.
		            iLimit = i + r.dataLength();
		        }
		        i += r.length();
		    }
		};
		/**
		 * Get the record with the given name.
		 * Returns undefined if not present.
		 */
		Directory.prototype.getRecord = function getRecord (name) {
		    return this._fileMap[name];
		};
		Directory.prototype.getFileList = function getFileList () {
		    return this._fileList;
		};
		Directory.prototype.getDotEntry = function getDotEntry (isoData) {
		    return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
		};
		/**
		 * @hidden
		 */
		var ISODirectory = (function (Directory) {
		    function ISODirectory(record, isoData) {
		        Directory.call(this, record, isoData);
		    }
		
		    if ( Directory ) ISODirectory.__proto__ = Directory;
		    ISODirectory.prototype = Object.create( Directory && Directory.prototype );
		    ISODirectory.prototype.constructor = ISODirectory;
		    ISODirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord (data) {
		        return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
		    };
		
		    return ISODirectory;
		}(Directory));
		/**
		 * @hidden
		 */
		var JolietDirectory = (function (Directory) {
		    function JolietDirectory(record, isoData) {
		        Directory.call(this, record, isoData);
		    }
		
		    if ( Directory ) JolietDirectory.__proto__ = Directory;
		    JolietDirectory.prototype = Object.create( Directory && Directory.prototype );
		    JolietDirectory.prototype.constructor = JolietDirectory;
		    JolietDirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord (data) {
		        return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
		    };
		
		    return JolietDirectory;
		}(Directory));
		/**
		 * Mounts an ISO file as a read-only file system.
		 *
		 * Supports:
		 * * Vanilla ISO9660 ISOs
		 * * Microsoft Joliet and Rock Ridge extensions to the ISO9660 standard
		 */
		var IsoFS = (function (SynchronousFileSystem$$1) {
		    function IsoFS(data, name, deprecateMsg) {
		        var this$1$1 = this;
		        if ( name === void 0 ) name = "";
		        if ( deprecateMsg === void 0 ) deprecateMsg = true;
		
		        SynchronousFileSystem$$1.call(this);
		        this._data = data;
		        deprecationMessage(deprecateMsg, IsoFS.Name, { data: "ISO data as a Buffer", name: name });
		        // Skip first 16 sectors.
		        var vdTerminatorFound = false;
		        var i = 16 * 2048;
		        var candidateVDs = new Array();
		        while (!vdTerminatorFound) {
		            var slice = data.slice(i);
		            var vd = new VolumeDescriptor(slice);
		            switch (vd.type()) {
		                case 1 /* PrimaryVolumeDescriptor */:
		                    candidateVDs.push(new PrimaryVolumeDescriptor(slice));
		                    break;
		                case 2 /* SupplementaryVolumeDescriptor */:
		                    candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
		                    break;
		                case 255 /* VolumeDescriptorSetTerminator */:
		                    vdTerminatorFound = true;
		                    break;
		            }
		            i += 2048;
		        }
		        if (candidateVDs.length === 0) {
		            throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
		        }
		        candidateVDs.forEach(function (v) {
		            // Take an SVD over a PVD.
		            if (!this$1$1._pvd || this$1$1._pvd.type() !== 2 /* SupplementaryVolumeDescriptor */) {
		                this$1$1._pvd = v;
		            }
		        });
		        this._root = this._pvd.rootDirectoryEntry(data);
		        this._name = name;
		    }
		
		    if ( SynchronousFileSystem$$1 ) IsoFS.__proto__ = SynchronousFileSystem$$1;
		    IsoFS.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
		    IsoFS.prototype.constructor = IsoFS;
		    /**
		     * Creates an IsoFS instance with the given options.
		     */
		    IsoFS.Create = function Create (opts, cb) {
		        var fs;
		        var e;
		        try {
		            fs = new IsoFS(opts.data, opts.name, false);
		        }
		        catch (e) {
		            e = e;
		        }
		        finally {
		            cb(e, fs);
		        }
		    };
		    IsoFS.isAvailable = function isAvailable () {
		        return true;
		    };
		    IsoFS.prototype.getName = function getName () {
		        var name = "IsoFS" + (this._name) + (this._pvd ? ("-" + (this._pvd.name())) : '');
		        if (this._root && this._root.hasRockRidge()) {
		            name += "-RockRidge";
		        }
		        return name;
		    };
		    IsoFS.prototype.diskSpace = function diskSpace (path$$1, cb) {
		        // Read-only file system.
		        cb(this._data.length, 0);
		    };
		    IsoFS.prototype.isReadOnly = function isReadOnly () {
		        return true;
		    };
		    IsoFS.prototype.supportsLinks = function supportsLinks () {
		        return false;
		    };
		    IsoFS.prototype.supportsProps = function supportsProps () {
		        return false;
		    };
		    IsoFS.prototype.supportsSynch = function supportsSynch () {
		        return true;
		    };
		    IsoFS.prototype.statSync = function statSync (p, isLstat) {
		        var record = this._getDirectoryRecord(p);
		        if (record === null) {
		            throw ApiError.ENOENT(p);
		        }
		        return this._getStats(p, record);
		    };
		    IsoFS.prototype.openSync = function openSync (p, flags, mode) {
		        // INVARIANT: Cannot write to RO file systems.
		        if (flags.isWriteable()) {
		            throw new ApiError(ErrorCode.EPERM, p);
		        }
		        // Check if the path exists, and is a file.
		        var record = this._getDirectoryRecord(p);
		        if (!record) {
		            throw ApiError.ENOENT(p);
		        }
		        else if (record.isSymlink(this._data)) {
		            return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
		        }
		        else if (!record.isDirectory(this._data)) {
		            var data = record.getFile(this._data);
		            var stats = this._getStats(p, record);
		            switch (flags.pathExistsAction()) {
		                case ActionType.THROW_EXCEPTION:
		                case ActionType.TRUNCATE_FILE:
		                    throw ApiError.EEXIST(p);
		                case ActionType.NOP:
		                    return new NoSyncFile(this, p, flags, stats, data);
		                default:
		                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
		            }
		        }
		        else {
		            throw ApiError.EISDIR(p);
		        }
		    };
		    IsoFS.prototype.readdirSync = function readdirSync (path$$1) {
		        // Check if it exists.
		        var record = this._getDirectoryRecord(path$$1);
		        if (!record) {
		            throw ApiError.ENOENT(path$$1);
		        }
		        else if (record.isDirectory(this._data)) {
		            return record.getDirectory(this._data).getFileList().slice(0);
		        }
		        else {
		            throw ApiError.ENOTDIR(path$$1);
		        }
		    };
		    /**
		     * Specially-optimized readfile.
		     */
		    IsoFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
		        // Get file.
		        var fd = this.openSync(fname, flag, 0x1a4);
		        try {
		            var fdCast = fd;
		            var fdBuff = fdCast.getBuffer();
		            if (encoding === null) {
		                return copyingSlice(fdBuff);
		            }
		            return fdBuff.toString(encoding);
		        }
		        finally {
		            fd.closeSync();
		        }
		    };
		    IsoFS.prototype._getDirectoryRecord = function _getDirectoryRecord (path$$1) {
		        var this$1$1 = this;
		
		        // Special case.
		        if (path$$1 === '/') {
		            return this._root;
		        }
		        var components = path$$1.split('/').slice(1);
		        var dir = this._root;
		        for (var i = 0, list = components; i < list.length; i += 1) {
		            var component = list[i];
		
		            if (dir.isDirectory(this$1$1._data)) {
		                dir = dir.getDirectory(this$1$1._data).getRecord(component);
		                if (!dir) {
		                    return null;
		                }
		            }
		            else {
		                return null;
		            }
		        }
		        return dir;
		    };
		    IsoFS.prototype._getStats = function _getStats (p, record) {
		        if (record.isSymlink(this._data)) {
		            var newP = path.resolve(p, record.getSymlinkPath(this._data));
		            var dirRec = this._getDirectoryRecord(newP);
		            if (!dirRec) {
		                return null;
		            }
		            return this._getStats(newP, dirRec);
		        }
		        else {
		            var len = record.dataLength();
		            var mode = 0x16D;
		            var date = record.recordingDate();
		            var atime = date;
		            var mtime = date;
		            var ctime = date;
		            if (record.hasRockRidge()) {
		                var entries = record.getSUEntries(this._data);
		                for (var i = 0, list = entries; i < list.length; i += 1) {
		                    var entry = list[i];
		
		                    if (entry instanceof PXEntry) {
		                        mode = entry.mode();
		                    }
		                    else if (entry instanceof TFEntry) {
		                        var flags = entry.flags();
		                        if (flags & 4 /* ACCESS */) {
		                            atime = entry.access();
		                        }
		                        if (flags & 2 /* MODIFY */) {
		                            mtime = entry.modify();
		                        }
		                        if (flags & 1 /* CREATION */) {
		                            ctime = entry.creation();
		                        }
		                    }
		                }
		            }
		            // Mask out writeable flags. This is a RO file system.
		            mode = mode & 0x16D;
		            return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
		        }
		    };
		
		    return IsoFS;
		}(SynchronousFileSystem));
		
		IsoFS.Name = "IsoFS";
		IsoFS.Options = {
		    data: {
		        type: "object",
		        description: "The ISO file in a buffer",
		        validator: bufferValidator
		    }
		};
		
		// Monkey-patch `Create` functions to check options before file system initialization.
		[AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function (fsType) {
		    var create = fsType.Create;
		    fsType.Create = function (opts, cb) {
		        var oneArg = typeof (opts) === "function";
		        var normalizedCb = oneArg ? opts : cb;
		        var normalizedOpts = oneArg ? {} : opts;
		        function wrappedCb(e) {
		            if (e) {
		                normalizedCb(e);
		            }
		            else {
		                create.call(fsType, normalizedOpts, normalizedCb);
		            }
		        }
		        checkOptions(fsType, normalizedOpts, wrappedCb);
		    };
		});
		/**
		 * @hidden
		 */
		var Backends = { AsyncMirror: AsyncMirror, Dropbox: DropboxFileSystem, Emscripten: EmscriptenFileSystem, FolderAdapter: FolderAdapter, HTML5FS: HTML5FS, InMemory: InMemoryFileSystem, IndexedDB: IndexedDBFileSystem, IsoFS: IsoFS, LocalStorage: LocalStorageFileSystem, MountableFileSystem: MountableFileSystem, OverlayFS: OverlayFS, WorkerFS: WorkerFS, XmlHttpRequest: XmlHttpRequest, ZipFS: ZipFS };
		
		/**
		 * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
		 * Due to limitations in typedoc, we document these functions in ./typedoc.ts.
		 */
		if (process['initializeTTYs']) {
		    process['initializeTTYs']();
		}
		/**
		 * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,
		 * and a Node process polyfill as the global `process` variable.
		 */
		function install(obj) {
		    obj.Buffer = Buffer;
		    obj.process = process;
		    var oldRequire = obj.require ? obj.require : null;
		    // Monkey-patch require for Node-style code.
		    obj.require = function (arg) {
		        var rv = BFSRequire(arg);
		        if (!rv) {
		            return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
		        }
		        else {
		            return rv;
		        }
		    };
		}
		/**
		 * @hidden
		 */
		function registerFileSystem(name, fs) {
		    Backends[name] = fs;
		}
		function BFSRequire(module) {
		    switch (module) {
		        case 'fs':
		            return _fsMock;
		        case 'path':
		            return path;
		        case 'buffer':
		            // The 'buffer' module has 'Buffer' as a property.
		            return buffer;
		        case 'process':
		            return process;
		        case 'bfs_utils':
		            return BFSUtils;
		        default:
		            return Backends[module];
		    }
		}
		/**
		 * Initializes BrowserFS with the given root file system.
		 */
		function initialize(rootfs) {
		    return _fsMock.initialize(rootfs);
		}
		/**
		 * Creates a file system with the given configuration, and initializes BrowserFS with it.
		 * See the FileSystemConfiguration type for more info on the configuration object.
		 */
		function configure(config, cb) {
		    getFileSystem(config, function (e, fs) {
		        if (fs) {
		            initialize(fs);
		            cb();
		        }
		        else {
		            cb(e);
		        }
		    });
		}
		/**
		 * Retrieve a file system with the given configuration.
		 * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.
		 * @param cb Called when the file system is constructed, or when an error occurs.
		 */
		function getFileSystem(config, cb) {
		    var fsName = config['fs'];
		    if (!fsName) {
		        return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
		    }
		    var options = config['options'];
		    var waitCount = 0;
		    var called = false;
		    function finish() {
		        if (!called) {
		            called = true;
		            var fsc = Backends[fsName];
		            if (!fsc) {
		                cb(new ApiError(ErrorCode.EPERM, ("File system " + fsName + " is not available in BrowserFS.")));
		            }
		            else {
		                fsc.Create(options, cb);
		            }
		        }
		    }
		    if (options !== null && typeof (options) === "object") {
		        var finishedIterating = false;
		        var props = Object.keys(options).filter(function (k) { return k !== 'fs'; });
		        // Check recursively if other fields have 'fs' properties.
		        props.forEach(function (p) {
		            var d = options[p];
		            if (d !== null && typeof (d) === "object" && d['fs']) {
		                waitCount++;
		                getFileSystem(d, function (e, fs) {
		                    waitCount--;
		                    if (e) {
		                        if (called) {
		                            return;
		                        }
		                        called = true;
		                        cb(e);
		                    }
		                    else {
		                        options[p] = fs;
		                        if (waitCount === 0 && finishedIterating) {
		                            finish();
		                        }
		                    }
		                });
		            }
		        });
		        finishedIterating = true;
		    }
		    if (waitCount === 0) {
		        finish();
		    }
		}
		
		/**
		 * BrowserFS's main entry point.
		 * It installs all of the needed polyfills, and requires() the main module.
		 */
		// IE substr does not support negative indices
		if ('ab'.substr(-1) !== 'b') {
		    String.prototype.substr = function (substr) {
		        return function (start, length) {
		            // did we get a negative start, calculate how much it is from the
		            // beginning of the string
		            if (start < 0) {
		                start = this.length + start;
		            }
		            // call the original function
		            return substr.call(this, start, length);
		        };
		    }(String.prototype.substr);
		}
		// Polyfill for Uint8Array.prototype.slice.
		// Safari and some other browsers do not define it.
		if (typeof (ArrayBuffer) !== 'undefined' && typeof (Uint8Array) !== 'undefined') {
		    if (!Uint8Array.prototype['slice']) {
		        Uint8Array.prototype.slice = function (start, end) {
		            if ( start === void 0 ) start = 0;
		            if ( end === void 0 ) end = this.length;
		
		            var self = this;
		            if (start < 0) {
		                start = this.length + start;
		                if (start < 0) {
		                    start = 0;
		                }
		            }
		            if (end < 0) {
		                end = this.length + end;
		                if (end < 0) {
		                    end = 0;
		                }
		            }
		            if (end < start) {
		                end = start;
		            }
		            return new Uint8Array(self.buffer, self.byteOffset + start, end - start);
		        };
		    }
		}
		
		exports.install = install;
		exports.registerFileSystem = registerFileSystem;
		exports.BFSRequire = BFSRequire;
		exports.initialize = initialize;
		exports.configure = configure;
		exports.getFileSystem = getFileSystem;
		exports.EmscriptenFS = BFSEmscriptenFS;
		exports.FileSystem = Backends;
		exports.Errors = api_error;
		exports.setImmediate = setImmediate$3;
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }()), __webpack_require__(5)(module), __webpack_require__(6)));

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(2).Buffer;


	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
		 * The buffer module from node.js, for the browser.
		 *
		 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
		 * @license  MIT
		 */
		
		var base64 = __webpack_require__(3);
		var ieee754 = __webpack_require__(4);
		
		exports.Buffer = Buffer;
		exports.SlowBuffer = SlowBuffer;
		exports.INSPECT_MAX_BYTES = 50;
		
		var K_MAX_LENGTH = 0x7fffffff;
		exports.kMaxLength = K_MAX_LENGTH;
		
		/**
		 * If `Buffer.TYPED_ARRAY_SUPPORT`:
		 *   === true    Use Uint8Array implementation (fastest)
		 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
		 *               implementation (most compatible, even IE6)
		 *
		 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		 * Opera 11.6+, iOS 4.2+.
		 *
		 * We report that the browser does not support typed arrays if the are not subclassable
		 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
		 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
		 * for __proto__ and has a buggy typed array implementation.
		 */
		Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
		
		if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
		    typeof console.error === 'function') {
		  console.error(
		    'This browser lacks typed array (Uint8Array) support which is required by ' +
		    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
		  );
		}
		
		function typedArraySupport () {
		  // Can typed array instances can be augmented?
		  try {
		    var arr = new Uint8Array(1);
		    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
		    return arr.foo() === 42
		  } catch (e) {
		    return false
		  }
		}
		
		function createBuffer (length) {
		  if (length > K_MAX_LENGTH) {
		    throw new RangeError('Invalid typed array length')
		  }
		  // Return an augmented `Uint8Array` instance
		  var buf = new Uint8Array(length);
		  buf.__proto__ = Buffer.prototype;
		  return buf
		}
		
		/**
		 * The Buffer constructor returns instances of `Uint8Array` that have their
		 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		 * returns a single octet.
		 *
		 * The `Uint8Array` prototype remains unmodified.
		 */
		
		function Buffer (arg, encodingOrOffset, length) {
		  // Common case.
		  if (typeof arg === 'number') {
		    if (typeof encodingOrOffset === 'string') {
		      throw new Error(
		        'If encoding is specified then the first argument must be a string'
		      )
		    }
		    return allocUnsafe(arg)
		  }
		  return from(arg, encodingOrOffset, length)
		}
		
		// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
		if (typeof Symbol !== 'undefined' && Symbol.species &&
		    Buffer[Symbol.species] === Buffer) {
		  Object.defineProperty(Buffer, Symbol.species, {
		    value: null,
		    configurable: true,
		    enumerable: false,
		    writable: false
		  });
		}
		
		Buffer.poolSize = 8192; // not used by this implementation
		
		function from (value, encodingOrOffset, length) {
		  if (typeof value === 'number') {
		    throw new TypeError('"value" argument must not be a number')
		  }
		
		  if (isArrayBuffer(value)) {
		    return fromArrayBuffer(value, encodingOrOffset, length)
		  }
		
		  if (typeof value === 'string') {
		    return fromString(value, encodingOrOffset)
		  }
		
		  return fromObject(value)
		}
		
		/**
		 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		 * if value is a number.
		 * Buffer.from(str[, encoding])
		 * Buffer.from(array)
		 * Buffer.from(buffer)
		 * Buffer.from(arrayBuffer[, byteOffset[, length]])
		 **/
		Buffer.from = function (value, encodingOrOffset, length) {
		  return from(value, encodingOrOffset, length)
		};
		
		// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
		// https://github.com/feross/buffer/pull/148
		Buffer.prototype.__proto__ = Uint8Array.prototype;
		Buffer.__proto__ = Uint8Array;
		
		function assertSize (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('"size" argument must be a number')
		  } else if (size < 0) {
		    throw new RangeError('"size" argument must not be negative')
		  }
		}
		
		function alloc (size, fill, encoding) {
		  assertSize(size);
		  if (size <= 0) {
		    return createBuffer(size)
		  }
		  if (fill !== undefined) {
		    // Only pay attention to encoding if it's a string. This
		    // prevents accidentally sending in a number that would
		    // be interpretted as a start offset.
		    return typeof encoding === 'string'
		      ? createBuffer(size).fill(fill, encoding)
		      : createBuffer(size).fill(fill)
		  }
		  return createBuffer(size)
		}
		
		/**
		 * Creates a new filled Buffer instance.
		 * alloc(size[, fill[, encoding]])
		 **/
		Buffer.alloc = function (size, fill, encoding) {
		  return alloc(size, fill, encoding)
		};
		
		function allocUnsafe (size) {
		  assertSize(size);
		  return createBuffer(size < 0 ? 0 : checked(size) | 0)
		}
		
		/**
		 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		 * */
		Buffer.allocUnsafe = function (size) {
		  return allocUnsafe(size)
		};
		/**
		 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		 */
		Buffer.allocUnsafeSlow = function (size) {
		  return allocUnsafe(size)
		};
		
		function fromString (string, encoding) {
		  if (typeof encoding !== 'string' || encoding === '') {
		    encoding = 'utf8';
		  }
		
		  if (!Buffer.isEncoding(encoding)) {
		    throw new TypeError('"encoding" must be a valid string encoding')
		  }
		
		  var length = byteLength(string, encoding) | 0;
		  var buf = createBuffer(length);
		
		  var actual = buf.write(string, encoding);
		
		  if (actual !== length) {
		    // Writing a hex string, for example, that contains invalid characters will
		    // cause everything after the first invalid character to be ignored. (e.g.
		    // 'abxxcd' will be treated as 'ab')
		    buf = buf.slice(0, actual);
		  }
		
		  return buf
		}
		
		function fromArrayLike (array) {
		  var length = array.length < 0 ? 0 : checked(array.length) | 0;
		  var buf = createBuffer(length);
		  for (var i = 0; i < length; i += 1) {
		    buf[i] = array[i] & 255;
		  }
		  return buf
		}
		
		function fromArrayBuffer (array, byteOffset, length) {
		  if (byteOffset < 0 || array.byteLength < byteOffset) {
		    throw new RangeError('\'offset\' is out of bounds')
		  }
		
		  if (array.byteLength < byteOffset + (length || 0)) {
		    throw new RangeError('\'length\' is out of bounds')
		  }
		
		  var buf;
		  if (byteOffset === undefined && length === undefined) {
		    buf = new Uint8Array(array);
		  } else if (length === undefined) {
		    buf = new Uint8Array(array, byteOffset);
		  } else {
		    buf = new Uint8Array(array, byteOffset, length);
		  }
		
		  // Return an augmented `Uint8Array` instance
		  buf.__proto__ = Buffer.prototype;
		  return buf
		}
		
		function fromObject (obj) {
		  if (Buffer.isBuffer(obj)) {
		    var len = checked(obj.length) | 0;
		    var buf = createBuffer(len);
		
		    if (buf.length === 0) {
		      return buf
		    }
		
		    obj.copy(buf, 0, 0, len);
		    return buf
		  }
		
		  if (obj) {
		    if (isArrayBufferView(obj) || 'length' in obj) {
		      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
		        return createBuffer(0)
		      }
		      return fromArrayLike(obj)
		    }
		
		    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
		      return fromArrayLike(obj.data)
		    }
		  }
		
		  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		}
		
		function checked (length) {
		  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
		  // length is NaN (which is otherwise coerced to zero.)
		  if (length >= K_MAX_LENGTH) {
		    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
		  }
		  return length | 0
		}
		
		function SlowBuffer (length) {
		  if (+length != length) { // eslint-disable-line eqeqeq
		    length = 0;
		  }
		  return Buffer.alloc(+length)
		}
		
		Buffer.isBuffer = function isBuffer (b) {
		  return b != null && b._isBuffer === true
		};
		
		Buffer.compare = function compare (a, b) {
		  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
		    throw new TypeError('Arguments must be Buffers')
		  }
		
		  if (a === b) return 0
		
		  var x = a.length;
		  var y = b.length;
		
		  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		    if (a[i] !== b[i]) {
		      x = a[i];
		      y = b[i];
		      break
		    }
		  }
		
		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		};
		
		Buffer.isEncoding = function isEncoding (encoding) {
		  switch (String(encoding).toLowerCase()) {
		    case 'hex':
		    case 'utf8':
		    case 'utf-8':
		    case 'ascii':
		    case 'latin1':
		    case 'binary':
		    case 'base64':
		    case 'ucs2':
		    case 'ucs-2':
		    case 'utf16le':
		    case 'utf-16le':
		      return true
		    default:
		      return false
		  }
		};
		
		Buffer.concat = function concat (list, length) {
		  if (!Array.isArray(list)) {
		    throw new TypeError('"list" argument must be an Array of Buffers')
		  }
		
		  if (list.length === 0) {
		    return Buffer.alloc(0)
		  }
		
		  var i;
		  if (length === undefined) {
		    length = 0;
		    for (i = 0; i < list.length; ++i) {
		      length += list[i].length;
		    }
		  }
		
		  var buffer = Buffer.allocUnsafe(length);
		  var pos = 0;
		  for (i = 0; i < list.length; ++i) {
		    var buf = list[i];
		    if (!Buffer.isBuffer(buf)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }
		    buf.copy(buffer, pos);
		    pos += buf.length;
		  }
		  return buffer
		};
		
		function byteLength (string, encoding) {
		  if (Buffer.isBuffer(string)) {
		    return string.length
		  }
		  if (isArrayBufferView(string) || isArrayBuffer(string)) {
		    return string.byteLength
		  }
		  if (typeof string !== 'string') {
		    string = '' + string;
		  }
		
		  var len = string.length;
		  if (len === 0) return 0
		
		  // Use a for loop to avoid recursion
		  var loweredCase = false;
		  for (;;) {
		    switch (encoding) {
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		        return len
		      case 'utf8':
		      case 'utf-8':
		      case undefined:
		        return utf8ToBytes(string).length
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return len * 2
		      case 'hex':
		        return len >>> 1
		      case 'base64':
		        return base64ToBytes(string).length
		      default:
		        if (loweredCase) return utf8ToBytes(string).length // assume utf8
		        encoding = ('' + encoding).toLowerCase();
		        loweredCase = true;
		    }
		  }
		}
		Buffer.byteLength = byteLength;
		
		function slowToString (encoding, start, end) {
		  var loweredCase = false;
		
		  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		  // property of a typed array.
		
		  // This behaves neither like String nor Uint8Array in that we set start/end
		  // to their upper/lower bounds if the value passed is out of range.
		  // undefined is handled specially as per ECMA-262 6th Edition,
		  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		  if (start === undefined || start < 0) {
		    start = 0;
		  }
		  // Return early if start > this.length. Done here to prevent potential uint32
		  // coercion fail below.
		  if (start > this.length) {
		    return ''
		  }
		
		  if (end === undefined || end > this.length) {
		    end = this.length;
		  }
		
		  if (end <= 0) {
		    return ''
		  }
		
		  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		  end >>>= 0;
		  start >>>= 0;
		
		  if (end <= start) {
		    return ''
		  }
		
		  if (!encoding) encoding = 'utf8';
		
		  while (true) {
		    switch (encoding) {
		      case 'hex':
		        return hexSlice(this, start, end)
		
		      case 'utf8':
		      case 'utf-8':
		        return utf8Slice(this, start, end)
		
		      case 'ascii':
		        return asciiSlice(this, start, end)
		
		      case 'latin1':
		      case 'binary':
		        return latin1Slice(this, start, end)
		
		      case 'base64':
		        return base64Slice(this, start, end)
		
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return utf16leSlice(this, start, end)
		
		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = (encoding + '').toLowerCase();
		        loweredCase = true;
		    }
		  }
		}
		
		// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
		// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
		// reliably in a browserify context because there could be multiple different
		// copies of the 'buffer' package in use. This method works even for Buffer
		// instances that were created from another copy of the `buffer` package.
		// See: https://github.com/feross/buffer/issues/154
		Buffer.prototype._isBuffer = true;
		
		function swap (b, n, m) {
		  var i = b[n];
		  b[n] = b[m];
		  b[m] = i;
		}
		
		Buffer.prototype.swap16 = function swap16 () {
		  var len = this.length;
		  if (len % 2 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 16-bits')
		  }
		  for (var i = 0; i < len; i += 2) {
		    swap(this, i, i + 1);
		  }
		  return this
		};
		
		Buffer.prototype.swap32 = function swap32 () {
		  var len = this.length;
		  if (len % 4 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 32-bits')
		  }
		  for (var i = 0; i < len; i += 4) {
		    swap(this, i, i + 3);
		    swap(this, i + 1, i + 2);
		  }
		  return this
		};
		
		Buffer.prototype.swap64 = function swap64 () {
		  var len = this.length;
		  if (len % 8 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 64-bits')
		  }
		  for (var i = 0; i < len; i += 8) {
		    swap(this, i, i + 7);
		    swap(this, i + 1, i + 6);
		    swap(this, i + 2, i + 5);
		    swap(this, i + 3, i + 4);
		  }
		  return this
		};
		
		Buffer.prototype.toString = function toString () {
		  var length = this.length;
		  if (length === 0) return ''
		  if (arguments.length === 0) return utf8Slice(this, 0, length)
		  return slowToString.apply(this, arguments)
		};
		
		Buffer.prototype.equals = function equals (b) {
		  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
		  if (this === b) return true
		  return Buffer.compare(this, b) === 0
		};
		
		Buffer.prototype.inspect = function inspect () {
		  var str = '';
		  var max = exports.INSPECT_MAX_BYTES;
		  if (this.length > 0) {
		    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
		    if (this.length > max) str += ' ... ';
		  }
		  return '<Buffer ' + str + '>'
		};
		
		Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		  if (!Buffer.isBuffer(target)) {
		    throw new TypeError('Argument must be a Buffer')
		  }
		
		  if (start === undefined) {
		    start = 0;
		  }
		  if (end === undefined) {
		    end = target ? target.length : 0;
		  }
		  if (thisStart === undefined) {
		    thisStart = 0;
		  }
		  if (thisEnd === undefined) {
		    thisEnd = this.length;
		  }
		
		  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		    throw new RangeError('out of range index')
		  }
		
		  if (thisStart >= thisEnd && start >= end) {
		    return 0
		  }
		  if (thisStart >= thisEnd) {
		    return -1
		  }
		  if (start >= end) {
		    return 1
		  }
		
		  start >>>= 0;
		  end >>>= 0;
		  thisStart >>>= 0;
		  thisEnd >>>= 0;
		
		  if (this === target) return 0
		
		  var x = thisEnd - thisStart;
		  var y = end - start;
		  var len = Math.min(x, y);
		
		  var thisCopy = this.slice(thisStart, thisEnd);
		  var targetCopy = target.slice(start, end);
		
		  for (var i = 0; i < len; ++i) {
		    if (thisCopy[i] !== targetCopy[i]) {
		      x = thisCopy[i];
		      y = targetCopy[i];
		      break
		    }
		  }
		
		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		};
		
		// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		//
		// Arguments:
		// - buffer - a Buffer to search
		// - val - a string, Buffer, or number
		// - byteOffset - an index into `buffer`; will be clamped to an int32
		// - encoding - an optional encoding, relevant is val is a string
		// - dir - true for indexOf, false for lastIndexOf
		function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		  // Empty buffer means no match
		  if (buffer.length === 0) return -1
		
		  // Normalize byteOffset
		  if (typeof byteOffset === 'string') {
		    encoding = byteOffset;
		    byteOffset = 0;
		  } else if (byteOffset > 0x7fffffff) {
		    byteOffset = 0x7fffffff;
		  } else if (byteOffset < -0x80000000) {
		    byteOffset = -0x80000000;
		  }
		  byteOffset = +byteOffset;  // Coerce to Number.
		  if (numberIsNaN(byteOffset)) {
		    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		    byteOffset = dir ? 0 : (buffer.length - 1);
		  }
		
		  // Normalize byteOffset: negative offsets start from the end of the buffer
		  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
		  if (byteOffset >= buffer.length) {
		    if (dir) return -1
		    else byteOffset = buffer.length - 1;
		  } else if (byteOffset < 0) {
		    if (dir) byteOffset = 0;
		    else return -1
		  }
		
		  // Normalize val
		  if (typeof val === 'string') {
		    val = Buffer.from(val, encoding);
		  }
		
		  // Finally, search either indexOf (if dir is true) or lastIndexOf
		  if (Buffer.isBuffer(val)) {
		    // Special case: looking for empty string/buffer always fails
		    if (val.length === 0) {
		      return -1
		    }
		    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
		  } else if (typeof val === 'number') {
		    val = val & 0xFF; // Search for a byte value [0-255]
		    if (typeof Uint8Array.prototype.indexOf === 'function') {
		      if (dir) {
		        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		      } else {
		        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		      }
		    }
		    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
		  }
		
		  throw new TypeError('val must be string, number or Buffer')
		}
		
		function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		  var indexSize = 1;
		  var arrLength = arr.length;
		  var valLength = val.length;
		
		  if (encoding !== undefined) {
		    encoding = String(encoding).toLowerCase();
		    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		        encoding === 'utf16le' || encoding === 'utf-16le') {
		      if (arr.length < 2 || val.length < 2) {
		        return -1
		      }
		      indexSize = 2;
		      arrLength /= 2;
		      valLength /= 2;
		      byteOffset /= 2;
		    }
		  }
		
		  function read (buf, i) {
		    if (indexSize === 1) {
		      return buf[i]
		    } else {
		      return buf.readUInt16BE(i * indexSize)
		    }
		  }
		
		  var i;
		  if (dir) {
		    var foundIndex = -1;
		    for (i = byteOffset; i < arrLength; i++) {
		      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		        if (foundIndex === -1) foundIndex = i;
		        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		      } else {
		        if (foundIndex !== -1) i -= i - foundIndex;
		        foundIndex = -1;
		      }
		    }
		  } else {
		    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
		    for (i = byteOffset; i >= 0; i--) {
		      var found = true;
		      for (var j = 0; j < valLength; j++) {
		        if (read(arr, i + j) !== read(val, j)) {
		          found = false;
		          break
		        }
		      }
		      if (found) return i
		    }
		  }
		
		  return -1
		}
		
		Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		  return this.indexOf(val, byteOffset, encoding) !== -1
		};
		
		Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
		};
		
		Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
		};
		
		function hexWrite (buf, string, offset, length) {
		  offset = Number(offset) || 0;
		  var remaining = buf.length - offset;
		  if (!length) {
		    length = remaining;
		  } else {
		    length = Number(length);
		    if (length > remaining) {
		      length = remaining;
		    }
		  }
		
		  // must be an even number of digits
		  var strLen = string.length;
		  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
		
		  if (length > strLen / 2) {
		    length = strLen / 2;
		  }
		  for (var i = 0; i < length; ++i) {
		    var parsed = parseInt(string.substr(i * 2, 2), 16);
		    if (numberIsNaN(parsed)) return i
		    buf[offset + i] = parsed;
		  }
		  return i
		}
		
		function utf8Write (buf, string, offset, length) {
		  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
		}
		
		function asciiWrite (buf, string, offset, length) {
		  return blitBuffer(asciiToBytes(string), buf, offset, length)
		}
		
		function latin1Write (buf, string, offset, length) {
		  return asciiWrite(buf, string, offset, length)
		}
		
		function base64Write (buf, string, offset, length) {
		  return blitBuffer(base64ToBytes(string), buf, offset, length)
		}
		
		function ucs2Write (buf, string, offset, length) {
		  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
		}
		
		Buffer.prototype.write = function write (string, offset, length, encoding) {
		  // Buffer#write(string)
		  if (offset === undefined) {
		    encoding = 'utf8';
		    length = this.length;
		    offset = 0;
		  // Buffer#write(string, encoding)
		  } else if (length === undefined && typeof offset === 'string') {
		    encoding = offset;
		    length = this.length;
		    offset = 0;
		  // Buffer#write(string, offset[, length][, encoding])
		  } else if (isFinite(offset)) {
		    offset = offset >>> 0;
		    if (isFinite(length)) {
		      length = length >>> 0;
		      if (encoding === undefined) encoding = 'utf8';
		    } else {
		      encoding = length;
		      length = undefined;
		    }
		  } else {
		    throw new Error(
		      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		    )
		  }
		
		  var remaining = this.length - offset;
		  if (length === undefined || length > remaining) length = remaining;
		
		  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		    throw new RangeError('Attempt to write outside buffer bounds')
		  }
		
		  if (!encoding) encoding = 'utf8';
		
		  var loweredCase = false;
		  for (;;) {
		    switch (encoding) {
		      case 'hex':
		        return hexWrite(this, string, offset, length)
		
		      case 'utf8':
		      case 'utf-8':
		        return utf8Write(this, string, offset, length)
		
		      case 'ascii':
		        return asciiWrite(this, string, offset, length)
		
		      case 'latin1':
		      case 'binary':
		        return latin1Write(this, string, offset, length)
		
		      case 'base64':
		        // Warning: maxLength not taken into account in base64Write
		        return base64Write(this, string, offset, length)
		
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return ucs2Write(this, string, offset, length)
		
		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = ('' + encoding).toLowerCase();
		        loweredCase = true;
		    }
		  }
		};
		
		Buffer.prototype.toJSON = function toJSON () {
		  return {
		    type: 'Buffer',
		    data: Array.prototype.slice.call(this._arr || this, 0)
		  }
		};
		
		function base64Slice (buf, start, end) {
		  if (start === 0 && end === buf.length) {
		    return base64.fromByteArray(buf)
		  } else {
		    return base64.fromByteArray(buf.slice(start, end))
		  }
		}
		
		function utf8Slice (buf, start, end) {
		  end = Math.min(buf.length, end);
		  var res = [];
		
		  var i = start;
		  while (i < end) {
		    var firstByte = buf[i];
		    var codePoint = null;
		    var bytesPerSequence = (firstByte > 0xEF) ? 4
		      : (firstByte > 0xDF) ? 3
		      : (firstByte > 0xBF) ? 2
		      : 1;
		
		    if (i + bytesPerSequence <= end) {
		      var secondByte, thirdByte, fourthByte, tempCodePoint;
		
		      switch (bytesPerSequence) {
		        case 1:
		          if (firstByte < 0x80) {
		            codePoint = firstByte;
		          }
		          break
		        case 2:
		          secondByte = buf[i + 1];
		          if ((secondByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
		            if (tempCodePoint > 0x7F) {
		              codePoint = tempCodePoint;
		            }
		          }
		          break
		        case 3:
		          secondByte = buf[i + 1];
		          thirdByte = buf[i + 2];
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
		            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		              codePoint = tempCodePoint;
		            }
		          }
		          break
		        case 4:
		          secondByte = buf[i + 1];
		          thirdByte = buf[i + 2];
		          fourthByte = buf[i + 3];
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
		            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		              codePoint = tempCodePoint;
		            }
		          }
		      }
		    }
		
		    if (codePoint === null) {
		      // we did not generate a valid codePoint so insert a
		      // replacement char (U+FFFD) and advance only 1 byte
		      codePoint = 0xFFFD;
		      bytesPerSequence = 1;
		    } else if (codePoint > 0xFFFF) {
		      // encode to utf16 (surrogate pair dance)
		      codePoint -= 0x10000;
		      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
		      codePoint = 0xDC00 | codePoint & 0x3FF;
		    }
		
		    res.push(codePoint);
		    i += bytesPerSequence;
		  }
		
		  return decodeCodePointsArray(res)
		}
		
		// Based on http://stackoverflow.com/a/22747272/680742, the browser with
		// the lowest limit is Chrome, with 0x10000 args.
		// We go 1 magnitude less, for safety
		var MAX_ARGUMENTS_LENGTH = 0x1000;
		
		function decodeCodePointsArray (codePoints) {
		  var len = codePoints.length;
		  if (len <= MAX_ARGUMENTS_LENGTH) {
		    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		  }
		
		  // Decode in chunks to avoid "call stack size exceeded".
		  var res = '';
		  var i = 0;
		  while (i < len) {
		    res += String.fromCharCode.apply(
		      String,
		      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		    );
		  }
		  return res
		}
		
		function asciiSlice (buf, start, end) {
		  var ret = '';
		  end = Math.min(buf.length, end);
		
		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i] & 0x7F);
		  }
		  return ret
		}
		
		function latin1Slice (buf, start, end) {
		  var ret = '';
		  end = Math.min(buf.length, end);
		
		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i]);
		  }
		  return ret
		}
		
		function hexSlice (buf, start, end) {
		  var len = buf.length;
		
		  if (!start || start < 0) start = 0;
		  if (!end || end < 0 || end > len) end = len;
		
		  var out = '';
		  for (var i = start; i < end; ++i) {
		    out += toHex(buf[i]);
		  }
		  return out
		}
		
		function utf16leSlice (buf, start, end) {
		  var bytes = buf.slice(start, end);
		  var res = '';
		  for (var i = 0; i < bytes.length; i += 2) {
		    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
		  }
		  return res
		}
		
		Buffer.prototype.slice = function slice (start, end) {
		  var len = this.length;
		  start = ~~start;
		  end = end === undefined ? len : ~~end;
		
		  if (start < 0) {
		    start += len;
		    if (start < 0) start = 0;
		  } else if (start > len) {
		    start = len;
		  }
		
		  if (end < 0) {
		    end += len;
		    if (end < 0) end = 0;
		  } else if (end > len) {
		    end = len;
		  }
		
		  if (end < start) end = start;
		
		  var newBuf = this.subarray(start, end);
		  // Return an augmented `Uint8Array` instance
		  newBuf.__proto__ = Buffer.prototype;
		  return newBuf
		};
		
		/*
		 * Need to make sure that buffer isn't trying to write out of bounds.
		 */
		function checkOffset (offset, ext, length) {
		  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		}
		
		Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		  offset = offset >>> 0;
		  byteLength = byteLength >>> 0;
		  if (!noAssert) checkOffset(offset, byteLength, this.length);
		
		  var val = this[offset];
		  var mul = 1;
		  var i = 0;
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul;
		  }
		
		  return val
		};
		
		Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		  offset = offset >>> 0;
		  byteLength = byteLength >>> 0;
		  if (!noAssert) {
		    checkOffset(offset, byteLength, this.length);
		  }
		
		  var val = this[offset + --byteLength];
		  var mul = 1;
		  while (byteLength > 0 && (mul *= 0x100)) {
		    val += this[offset + --byteLength] * mul;
		  }
		
		  return val
		};
		
		Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 1, this.length);
		  return this[offset]
		};
		
		Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 2, this.length);
		  return this[offset] | (this[offset + 1] << 8)
		};
		
		Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 2, this.length);
		  return (this[offset] << 8) | this[offset + 1]
		};
		
		Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 4, this.length);
		
		  return ((this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16)) +
		      (this[offset + 3] * 0x1000000)
		};
		
		Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 4, this.length);
		
		  return (this[offset] * 0x1000000) +
		    ((this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    this[offset + 3])
		};
		
		Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		  offset = offset >>> 0;
		  byteLength = byteLength >>> 0;
		  if (!noAssert) checkOffset(offset, byteLength, this.length);
		
		  var val = this[offset];
		  var mul = 1;
		  var i = 0;
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul;
		  }
		  mul *= 0x80;
		
		  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
		
		  return val
		};
		
		Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		  offset = offset >>> 0;
		  byteLength = byteLength >>> 0;
		  if (!noAssert) checkOffset(offset, byteLength, this.length);
		
		  var i = byteLength;
		  var mul = 1;
		  var val = this[offset + --i];
		  while (i > 0 && (mul *= 0x100)) {
		    val += this[offset + --i] * mul;
		  }
		  mul *= 0x80;
		
		  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
		
		  return val
		};
		
		Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 1, this.length);
		  if (!(this[offset] & 0x80)) return (this[offset])
		  return ((0xff - this[offset] + 1) * -1)
		};
		
		Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 2, this.length);
		  var val = this[offset] | (this[offset + 1] << 8);
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		};
		
		Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 2, this.length);
		  var val = this[offset + 1] | (this[offset] << 8);
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		};
		
		Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 4, this.length);
		
		  return (this[offset]) |
		    (this[offset + 1] << 8) |
		    (this[offset + 2] << 16) |
		    (this[offset + 3] << 24)
		};
		
		Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 4, this.length);
		
		  return (this[offset] << 24) |
		    (this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    (this[offset + 3])
		};
		
		Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 4, this.length);
		  return ieee754.read(this, offset, true, 23, 4)
		};
		
		Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 4, this.length);
		  return ieee754.read(this, offset, false, 23, 4)
		};
		
		Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 8, this.length);
		  return ieee754.read(this, offset, true, 52, 8)
		};
		
		Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		  offset = offset >>> 0;
		  if (!noAssert) checkOffset(offset, 8, this.length);
		  return ieee754.read(this, offset, false, 52, 8)
		};
		
		function checkInt (buf, value, offset, ext, max, min) {
		  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		}
		
		Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  byteLength = byteLength >>> 0;
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		    checkInt(this, value, offset, byteLength, maxBytes, 0);
		  }
		
		  var mul = 1;
		  var i = 0;
		  this[offset] = value & 0xFF;
		  while (++i < byteLength && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF;
		  }
		
		  return offset + byteLength
		};
		
		Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  byteLength = byteLength >>> 0;
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		    checkInt(this, value, offset, byteLength, maxBytes, 0);
		  }
		
		  var i = byteLength - 1;
		  var mul = 1;
		  this[offset + i] = value & 0xFF;
		  while (--i >= 0 && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF;
		  }
		
		  return offset + byteLength
		};
		
		Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
		  this[offset] = (value & 0xff);
		  return offset + 1
		};
		
		Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		  this[offset] = (value & 0xff);
		  this[offset + 1] = (value >>> 8);
		  return offset + 2
		};
		
		Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		  this[offset] = (value >>> 8);
		  this[offset + 1] = (value & 0xff);
		  return offset + 2
		};
		
		Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		  this[offset + 3] = (value >>> 24);
		  this[offset + 2] = (value >>> 16);
		  this[offset + 1] = (value >>> 8);
		  this[offset] = (value & 0xff);
		  return offset + 4
		};
		
		Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		  this[offset] = (value >>> 24);
		  this[offset + 1] = (value >>> 16);
		  this[offset + 2] = (value >>> 8);
		  this[offset + 3] = (value & 0xff);
		  return offset + 4
		};
		
		Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) {
		    var limit = Math.pow(2, (8 * byteLength) - 1);
		
		    checkInt(this, value, offset, byteLength, limit - 1, -limit);
		  }
		
		  var i = 0;
		  var mul = 1;
		  var sub = 0;
		  this[offset] = value & 0xFF;
		  while (++i < byteLength && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		      sub = 1;
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		  }
		
		  return offset + byteLength
		};
		
		Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) {
		    var limit = Math.pow(2, (8 * byteLength) - 1);
		
		    checkInt(this, value, offset, byteLength, limit - 1, -limit);
		  }
		
		  var i = byteLength - 1;
		  var mul = 1;
		  var sub = 0;
		  this[offset + i] = value & 0xFF;
		  while (--i >= 0 && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		      sub = 1;
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		  }
		
		  return offset + byteLength
		};
		
		Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
		  if (value < 0) value = 0xff + value + 1;
		  this[offset] = (value & 0xff);
		  return offset + 1
		};
		
		Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
		  this[offset] = (value & 0xff);
		  this[offset + 1] = (value >>> 8);
		  return offset + 2
		};
		
		Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
		  this[offset] = (value >>> 8);
		  this[offset + 1] = (value & 0xff);
		  return offset + 2
		};
		
		Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		  this[offset] = (value & 0xff);
		  this[offset + 1] = (value >>> 8);
		  this[offset + 2] = (value >>> 16);
		  this[offset + 3] = (value >>> 24);
		  return offset + 4
		};
		
		Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		  if (value < 0) value = 0xffffffff + value + 1;
		  this[offset] = (value >>> 24);
		  this[offset + 1] = (value >>> 16);
		  this[offset + 2] = (value >>> 8);
		  this[offset + 3] = (value & 0xff);
		  return offset + 4
		};
		
		function checkIEEE754 (buf, value, offset, ext, max, min) {
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  if (offset < 0) throw new RangeError('Index out of range')
		}
		
		function writeFloat (buf, value, offset, littleEndian, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 4);
		  }
		  ieee754.write(buf, value, offset, littleEndian, 23, 4);
		  return offset + 4
		}
		
		Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, true, noAssert)
		};
		
		Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, false, noAssert)
		};
		
		function writeDouble (buf, value, offset, littleEndian, noAssert) {
		  value = +value;
		  offset = offset >>> 0;
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 8);
		  }
		  ieee754.write(buf, value, offset, littleEndian, 52, 8);
		  return offset + 8
		}
		
		Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, true, noAssert)
		};
		
		Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, false, noAssert)
		};
		
		// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		  if (!start) start = 0;
		  if (!end && end !== 0) end = this.length;
		  if (targetStart >= target.length) targetStart = target.length;
		  if (!targetStart) targetStart = 0;
		  if (end > 0 && end < start) end = start;
		
		  // Copy 0 bytes; we're done
		  if (end === start) return 0
		  if (target.length === 0 || this.length === 0) return 0
		
		  // Fatal error conditions
		  if (targetStart < 0) {
		    throw new RangeError('targetStart out of bounds')
		  }
		  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		  if (end < 0) throw new RangeError('sourceEnd out of bounds')
		
		  // Are we oob?
		  if (end > this.length) end = this.length;
		  if (target.length - targetStart < end - start) {
		    end = target.length - targetStart + start;
		  }
		
		  var len = end - start;
		  var i;
		
		  if (this === target && start < targetStart && targetStart < end) {
		    // descending copy from end
		    for (i = len - 1; i >= 0; --i) {
		      target[i + targetStart] = this[i + start];
		    }
		  } else if (len < 1000) {
		    // ascending copy from start
		    for (i = 0; i < len; ++i) {
		      target[i + targetStart] = this[i + start];
		    }
		  } else {
		    Uint8Array.prototype.set.call(
		      target,
		      this.subarray(start, start + len),
		      targetStart
		    );
		  }
		
		  return len
		};
		
		// Usage:
		//    buffer.fill(number[, offset[, end]])
		//    buffer.fill(buffer[, offset[, end]])
		//    buffer.fill(string[, offset[, end]][, encoding])
		Buffer.prototype.fill = function fill (val, start, end, encoding) {
		  // Handle string cases:
		  if (typeof val === 'string') {
		    if (typeof start === 'string') {
		      encoding = start;
		      start = 0;
		      end = this.length;
		    } else if (typeof end === 'string') {
		      encoding = end;
		      end = this.length;
		    }
		    if (val.length === 1) {
		      var code = val.charCodeAt(0);
		      if (code < 256) {
		        val = code;
		      }
		    }
		    if (encoding !== undefined && typeof encoding !== 'string') {
		      throw new TypeError('encoding must be a string')
		    }
		    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		      throw new TypeError('Unknown encoding: ' + encoding)
		    }
		  } else if (typeof val === 'number') {
		    val = val & 255;
		  }
		
		  // Invalid ranges are not set to a default, so can range check early.
		  if (start < 0 || this.length < start || this.length < end) {
		    throw new RangeError('Out of range index')
		  }
		
		  if (end <= start) {
		    return this
		  }
		
		  start = start >>> 0;
		  end = end === undefined ? this.length : end >>> 0;
		
		  if (!val) val = 0;
		
		  var i;
		  if (typeof val === 'number') {
		    for (i = start; i < end; ++i) {
		      this[i] = val;
		    }
		  } else {
		    var bytes = Buffer.isBuffer(val)
		      ? val
		      : new Buffer(val, encoding);
		    var len = bytes.length;
		    for (i = 0; i < end - start; ++i) {
		      this[i + start] = bytes[i % len];
		    }
		  }
		
		  return this
		};
		
		// HELPER FUNCTIONS
		// ================
		
		var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
		
		function base64clean (str) {
		  // Node strips out invalid characters like \n and \t from the string, base64-js does not
		  str = str.trim().replace(INVALID_BASE64_RE, '');
		  // Node converts strings with length < 2 to ''
		  if (str.length < 2) return ''
		  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		  while (str.length % 4 !== 0) {
		    str = str + '=';
		  }
		  return str
		}
		
		function toHex (n) {
		  if (n < 16) return '0' + n.toString(16)
		  return n.toString(16)
		}
		
		function utf8ToBytes (string, units) {
		  units = units || Infinity;
		  var codePoint;
		  var length = string.length;
		  var leadSurrogate = null;
		  var bytes = [];
		
		  for (var i = 0; i < length; ++i) {
		    codePoint = string.charCodeAt(i);
		
		    // is surrogate component
		    if (codePoint > 0xD7FF && codePoint < 0xE000) {
		      // last char was a lead
		      if (!leadSurrogate) {
		        // no lead yet
		        if (codePoint > 0xDBFF) {
		          // unexpected trail
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		          continue
		        } else if (i + 1 === length) {
		          // unpaired lead
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		          continue
		        }
		
		        // valid lead
		        leadSurrogate = codePoint;
		
		        continue
		      }
		
		      // 2 leads in a row
		      if (codePoint < 0xDC00) {
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		        leadSurrogate = codePoint;
		        continue
		      }
		
		      // valid surrogate pair
		      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
		    } else if (leadSurrogate) {
		      // valid bmp char, but last char was a lead
		      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		    }
		
		    leadSurrogate = null;
		
		    // encode utf8
		    if (codePoint < 0x80) {
		      if ((units -= 1) < 0) break
		      bytes.push(codePoint);
		    } else if (codePoint < 0x800) {
		      if ((units -= 2) < 0) break
		      bytes.push(
		        codePoint >> 0x6 | 0xC0,
		        codePoint & 0x3F | 0x80
		      );
		    } else if (codePoint < 0x10000) {
		      if ((units -= 3) < 0) break
		      bytes.push(
		        codePoint >> 0xC | 0xE0,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      );
		    } else if (codePoint < 0x110000) {
		      if ((units -= 4) < 0) break
		      bytes.push(
		        codePoint >> 0x12 | 0xF0,
		        codePoint >> 0xC & 0x3F | 0x80,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      );
		    } else {
		      throw new Error('Invalid code point')
		    }
		  }
		
		  return bytes
		}
		
		function asciiToBytes (str) {
		  var byteArray = [];
		  for (var i = 0; i < str.length; ++i) {
		    // Node's code seems to be doing this and not & 0x7F..
		    byteArray.push(str.charCodeAt(i) & 0xFF);
		  }
		  return byteArray
		}
		
		function utf16leToBytes (str, units) {
		  var c, hi, lo;
		  var byteArray = [];
		  for (var i = 0; i < str.length; ++i) {
		    if ((units -= 2) < 0) break
		
		    c = str.charCodeAt(i);
		    hi = c >> 8;
		    lo = c % 256;
		    byteArray.push(lo);
		    byteArray.push(hi);
		  }
		
		  return byteArray
		}
		
		function base64ToBytes (str) {
		  return base64.toByteArray(base64clean(str))
		}
		
		function blitBuffer (src, dst, offset, length) {
		  for (var i = 0; i < length; ++i) {
		    if ((i + offset >= dst.length) || (i >= src.length)) break
		    dst[i + offset] = src[i];
		  }
		  return i
		}
		
		// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
		// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
		function isArrayBuffer (obj) {
		  return obj instanceof ArrayBuffer ||
		    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
		      typeof obj.byteLength === 'number')
		}
		
		// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
		function isArrayBufferView (obj) {
		  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
		}
		
		function numberIsNaN (obj) {
		  return obj !== obj // eslint-disable-line no-self-compare
		}
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

	/***/ },
	/* 3 */
	/***/ function(module, exports) {
		
		exports.byteLength = byteLength;
		exports.toByteArray = toByteArray;
		exports.fromByteArray = fromByteArray;
		
		var lookup = [];
		var revLookup = [];
		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
		
		var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		for (var i = 0, len = code.length; i < len; ++i) {
		  lookup[i] = code[i];
		  revLookup[code.charCodeAt(i)] = i;
		}
		
		revLookup['-'.charCodeAt(0)] = 62;
		revLookup['_'.charCodeAt(0)] = 63;
		
		function placeHoldersCount (b64) {
		  var len = b64.length;
		  if (len % 4 > 0) {
		    throw new Error('Invalid string. Length must be a multiple of 4')
		  }
		
		  // the number of equal signs (place holders)
		  // if there are two placeholders, than the two characters before it
		  // represent one byte
		  // if there is only one, then the three characters before it represent 2 bytes
		  // this is just a cheap hack to not do indexOf twice
		  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
		}
		
		function byteLength (b64) {
		  // base64 is 4/3 + up to two characters of the original data
		  return b64.length * 3 / 4 - placeHoldersCount(b64)
		}
		
		function toByteArray (b64) {
		  var i, j, l, tmp, placeHolders, arr;
		  var len = b64.length;
		  placeHolders = placeHoldersCount(b64);
		
		  arr = new Arr(len * 3 / 4 - placeHolders);
		
		  // if there are placeholders, only get up to the last complete 4 chars
		  l = placeHolders > 0 ? len - 4 : len;
		
		  var L = 0;
		
		  for (i = 0, j = 0; i < l; i += 4, j += 3) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
		    arr[L++] = (tmp >> 16) & 0xFF;
		    arr[L++] = (tmp >> 8) & 0xFF;
		    arr[L++] = tmp & 0xFF;
		  }
		
		  if (placeHolders === 2) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
		    arr[L++] = tmp & 0xFF;
		  } else if (placeHolders === 1) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
		    arr[L++] = (tmp >> 8) & 0xFF;
		    arr[L++] = tmp & 0xFF;
		  }
		
		  return arr
		}
		
		function tripletToBase64 (num) {
		  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
		}
		
		function encodeChunk (uint8, start, end) {
		  var tmp;
		  var output = [];
		  for (var i = start; i < end; i += 3) {
		    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
		    output.push(tripletToBase64(tmp));
		  }
		  return output.join('')
		}
		
		function fromByteArray (uint8) {
		  var tmp;
		  var len = uint8.length;
		  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
		  var output = '';
		  var parts = [];
		  var maxChunkLength = 16383; // must be multiple of 3
		
		  // go through the array every three bytes, we'll deal with trailing stuff later
		  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
		  }
		
		  // pad the end with zeros, but make sure to not forget the extra bytes
		  if (extraBytes === 1) {
		    tmp = uint8[len - 1];
		    output += lookup[tmp >> 2];
		    output += lookup[(tmp << 4) & 0x3F];
		    output += '==';
		  } else if (extraBytes === 2) {
		    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
		    output += lookup[tmp >> 10];
		    output += lookup[(tmp >> 4) & 0x3F];
		    output += lookup[(tmp << 2) & 0x3F];
		    output += '=';
		  }
		
		  parts.push(output);
		
		  return parts.join('')
		}


	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		exports.read = function (buffer, offset, isLE, mLen, nBytes) {
		  var e, m;
		  var eLen = nBytes * 8 - mLen - 1;
		  var eMax = (1 << eLen) - 1;
		  var eBias = eMax >> 1;
		  var nBits = -7;
		  var i = isLE ? (nBytes - 1) : 0;
		  var d = isLE ? -1 : 1;
		  var s = buffer[offset + i];
		
		  i += d;
		
		  e = s & ((1 << (-nBits)) - 1);
		  s >>= (-nBits);
		  nBits += eLen;
		  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
		
		  m = e & ((1 << (-nBits)) - 1);
		  e >>= (-nBits);
		  nBits += mLen;
		  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
		
		  if (e === 0) {
		    e = 1 - eBias;
		  } else if (e === eMax) {
		    return m ? NaN : ((s ? -1 : 1) * Infinity)
		  } else {
		    m = m + Math.pow(2, mLen);
		    e = e - eBias;
		  }
		  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		};
		
		exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
		  var e, m, c;
		  var eLen = nBytes * 8 - mLen - 1;
		  var eMax = (1 << eLen) - 1;
		  var eBias = eMax >> 1;
		  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
		  var i = isLE ? 0 : (nBytes - 1);
		  var d = isLE ? 1 : -1;
		  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
		
		  value = Math.abs(value);
		
		  if (isNaN(value) || value === Infinity) {
		    m = isNaN(value) ? 1 : 0;
		    e = eMax;
		  } else {
		    e = Math.floor(Math.log(value) / Math.LN2);
		    if (value * (c = Math.pow(2, -e)) < 1) {
		      e--;
		      c *= 2;
		    }
		    if (e + eBias >= 1) {
		      value += rt / c;
		    } else {
		      value += rt * Math.pow(2, 1 - eBias);
		    }
		    if (value * c >= 2) {
		      e++;
		      c /= 2;
		    }
		
		    if (e + eBias >= eMax) {
		      m = 0;
		      e = eMax;
		    } else if (e + eBias >= 1) {
		      m = (value * c - 1) * Math.pow(2, mLen);
		      e = e + eBias;
		    } else {
		      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
		      e = 0;
		    }
		  }
		
		  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
		
		  e = (e << mLen) | m;
		  eLen += mLen;
		  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
		
		  buffer[offset + i - d] |= s * 128;
		};


	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		module.exports = function(module) {
			if(!module.webpackPolyfill) {
				module.deprecate = function() {};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		};


	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
		var Process = __webpack_require__(7);
		var process = new Process(), processProxy = {};
		function defineKey(key) {
		    if (processProxy[key]) {
		        // Probably a builtin Object property we don't care about.
		        return;
		    }
		    if (typeof process[key] === 'function') {
		        processProxy[key] = function () {
		            return process[key].apply(process, arguments);
		        };
		    }
		    else {
		        processProxy[key] = process[key];
		    }
		}
		for (var key in process) {
		    // Don't check if process.hasOwnProperty; we want to also expose objects
		    // up the prototype hierarchy.
		    defineKey(key);
		}
		// Special key: Ensure we update public-facing values of stdin/stdout/stderr.
		processProxy.initializeTTYs = function () {
		    if (process.stdin === null) {
		        process.initializeTTYs();
		        processProxy.stdin = process.stdin;
		        processProxy.stdout = process.stdout;
		        processProxy.stderr = process.stderr;
		    }
		};
		process.nextTick(function () {
		    processProxy.initializeTTYs();
		});
		module.exports = processProxy;


	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(__dirname) {	var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var events = __webpack_require__(8);
		// Path depends on process. Avoid a circular reference by dynamically including path when we need it.
		var path = null;
		var Item = (function () {
		    function Item(fun, array) {
		        this.fun = fun;
		        this.array = array;
		    }
		    Item.prototype.run = function () {
		        this.fun.apply(null, this.array);
		    };
		    return Item;
		}());
		/**
		 * Contains a queue of Items for process.nextTick.
		 * Inspired by node-process: https://github.com/defunctzombie/node-process
		 */
		var NextTickQueue = (function () {
		    function NextTickQueue() {
		        this._queue = [];
		        this._draining = false;
		        // Used/assigned by the drainQueue function.
		        this._currentQueue = null;
		        this._queueIndex = -1;
		    }
		    NextTickQueue.prototype.push = function (item) {
		        var _this = this;
		        if (this._queue.push(item) === 1 && !this._draining) {
		            setTimeout(function () { return _this._drainQueue(); }, 0);
		        }
		    };
		    NextTickQueue.prototype._cleanUpNextTick = function () {
		        this._draining = false;
		        if (this._currentQueue && this._currentQueue.length) {
		            this._queue = this._currentQueue.concat(this._queue);
		        }
		        else {
		            this._queueIndex = -1;
		        }
		        if (this._queue.length) {
		            this._drainQueue();
		        }
		    };
		    NextTickQueue.prototype._drainQueue = function () {
		        var _this = this;
		        if (this._draining) {
		            return;
		        }
		        // If an Item throws an unhandled exception, this function will clean things up.
		        var timeout = setTimeout(function () { return _this._cleanUpNextTick(); });
		        this._draining = true;
		        var len = this._queue.length;
		        while (len) {
		            this._currentQueue = this._queue;
		            this._queue = [];
		            while (++this._queueIndex < len) {
		                if (this._currentQueue) {
		                    this._currentQueue[this._queueIndex].run();
		                }
		            }
		            this._queueIndex = -1;
		            len = this._queue.length;
		        }
		        this._currentQueue = null;
		        this._draining = false;
		        clearTimeout(timeout);
		    };
		    return NextTickQueue;
		}());
		/**
		 * Partial implementation of Node's `process` module.
		 * We implement the portions that are relevant for the filesystem.
		 * @see http://nodejs.org/api/process.html
		 * @class
		 */
		var Process = (function (_super) {
		    __extends(Process, _super);
		    function Process() {
		        _super.apply(this, arguments);
		        this.startTime = Date.now();
		        this._cwd = '/';
		        /**
		         * Returns what platform you are running on.
		         * @return [String]
		         */
		        this.platform = 'browser';
		        this.argv = [];
		        this.execArgv = [];
		        this.stdout = null;
		        this.stderr = null;
		        this.stdin = null;
		        this.domain = null;
		        this._queue = new NextTickQueue();
		        this.execPath = __dirname;
		        this.env = {};
		        this.exitCode = 0;
		        this._gid = 1;
		        this._uid = 1;
		        this.version = 'v5.0';
		        this.versions = {
		            http_parser: '0.0',
		            node: '5.0',
		            v8: '0.0',
		            uv: '0.0',
		            zlib: '0.0',
		            ares: '0.0',
		            icu: '0.0',
		            modules: '0',
		            openssl: '0.0'
		        };
		        this.config = {
		            target_defaults: { cflags: [],
		                default_configuration: 'Release',
		                defines: [],
		                include_dirs: [],
		                libraries: [] },
		            variables: { clang: 0,
		                host_arch: 'x32',
		                node_install_npm: false,
		                node_install_waf: false,
		                node_prefix: '',
		                node_shared_cares: false,
		                node_shared_http_parser: false,
		                node_shared_libuv: false,
		                node_shared_zlib: false,
		                node_shared_v8: false,
		                node_use_dtrace: false,
		                node_use_etw: false,
		                node_use_openssl: false,
		                node_shared_openssl: false,
		                strict_aliasing: false,
		                target_arch: 'x32',
		                v8_use_snapshot: false,
		                v8_no_strict_aliasing: 0,
		                visibility: '' } };
		        this.pid = (Math.random() * 1000) | 0;
		        this.title = 'node';
		        this.arch = 'x32';
		        this._mask = 18;
		        // Undefined in main thread. Worker-only.
		        this.connected = undefined;
		    }
		    /**
		     * Changes the current working directory.
		     *
		     * **Note**: BrowserFS does not validate that the directory actually exists.
		     *
		     * @example Usage example
		     *   console.log('Starting directory: ' + process.cwd());
		     *   process.chdir('/tmp');
		     *   console.log('New directory: ' + process.cwd());
		     * @param [String] dir The directory to change to.
		     */
		    Process.prototype.chdir = function (dir) {
		        // XXX: Circular dependency hack.
		        if (path === null) {
		            path = __webpack_require__(9);
		        }
		        this._cwd = path.resolve(dir);
		    };
		    /**
		     * Returns the current working directory.
		     * @example Usage example
		     *   console.log('Current directory: ' + process.cwd());
		     * @return [String] The current working directory.
		     */
		    Process.prototype.cwd = function () {
		        return this._cwd;
		    };
		    /**
		     * Number of seconds BrowserFS has been running.
		     * @return [Number]
		     */
		    Process.prototype.uptime = function () {
		        return ((Date.now() - this.startTime) / 1000) | 0;
		    };
		    Process.prototype.nextTick = function (fun) {
		        var args = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            args[_i - 1] = arguments[_i];
		        }
		        this._queue.push(new Item(fun, args));
		    };
		    Process.prototype.abort = function () {
		        this.emit('abort');
		    };
		    Process.prototype.exit = function (code) {
		        this.exitCode = code;
		        this.emit('exit', [code]);
		    };
		    Process.prototype.getgid = function () {
		        return this._gid;
		    };
		    Process.prototype.setgid = function (gid) {
		        if (typeof gid === 'number') {
		            this._gid = gid;
		        }
		        else {
		            this._gid = 1;
		        }
		    };
		    Process.prototype.getuid = function () {
		        return this._uid;
		    };
		    Process.prototype.setuid = function (uid) {
		        if (typeof uid === 'number') {
		            this._uid = uid;
		        }
		        else {
		            this._uid = 1;
		        }
		    };
		    Process.prototype.kill = function (pid, signal) {
		        this.emit('kill', [pid, signal]);
		    };
		    Process.prototype.memoryUsage = function () {
		        return { rss: 0, heapTotal: 0, heapUsed: 0 };
		    };
		    Process.prototype.umask = function (mask) {
		        if (mask === void 0) { mask = this._mask; }
		        var oldMask = this._mask;
		        this._mask = mask;
		        this.emit('umask', [mask]);
		        return oldMask;
		    };
		    Process.prototype.hrtime = function () {
		        var timeinfo;
		        if (typeof performance !== 'undefined') {
		            timeinfo = performance.now();
		        }
		        else if (Date['now']) {
		            timeinfo = Date.now();
		        }
		        else {
		            timeinfo = (new Date()).getTime();
		        }
		        var secs = (timeinfo / 1000) | 0;
		        timeinfo -= secs * 1000;
		        timeinfo = (timeinfo * 1000000) | 0;
		        return [secs, timeinfo];
		    };
		    /**
		     * [BFS only] Initialize the TTY devices.
		     */
		    Process.prototype.initializeTTYs = function () {
		        // Guard against multiple invocations.
		        if (this.stdout === null) {
		            var TTY = __webpack_require__(10);
		            this.stdout = new TTY();
		            this.stderr = new TTY();
		            this.stdin = new TTY();
		        }
		    };
		    /**
		     * Worker-only function; irrelevant here.
		     */
		    Process.prototype.disconnect = function () {
		    };
		    return Process;
		}(events.EventEmitter));
		module.exports = Process;
		
		/* WEBPACK VAR INJECTION */}.call(exports, "/"));

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		function EventEmitter() {
		  this._events = this._events || {};
		  this._maxListeners = this._maxListeners || undefined;
		}
		module.exports = EventEmitter;
		
		// Backwards-compat with node 0.10.x
		EventEmitter.EventEmitter = EventEmitter;
		
		EventEmitter.prototype._events = undefined;
		EventEmitter.prototype._maxListeners = undefined;
		
		// By default EventEmitters will print a warning if more than 10 listeners are
		// added to it. This is a useful default which helps finding memory leaks.
		EventEmitter.defaultMaxListeners = 10;
		
		// Obviously not all Emitters should be limited to 10. This function allows
		// that to be increased. Set to zero for unlimited.
		EventEmitter.prototype.setMaxListeners = function(n) {
		  if (!isNumber(n) || n < 0 || isNaN(n))
		    throw TypeError('n must be a positive number');
		  this._maxListeners = n;
		  return this;
		};
		
		EventEmitter.prototype.emit = function(type) {
		  var er, handler, len, args, i, listeners;
		
		  if (!this._events)
		    this._events = {};
		
		  // If there is no 'error' event listener then throw.
		  if (type === 'error') {
		    if (!this._events.error ||
		        (isObject(this._events.error) && !this._events.error.length)) {
		      er = arguments[1];
		      if (er instanceof Error) {
		        throw er; // Unhandled 'error' event
		      } else {
		        // At least give some kind of context to the user
		        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
		        err.context = er;
		        throw err;
		      }
		    }
		  }
		
		  handler = this._events[type];
		
		  if (isUndefined(handler))
		    return false;
		
		  if (isFunction(handler)) {
		    switch (arguments.length) {
		      // fast cases
		      case 1:
		        handler.call(this);
		        break;
		      case 2:
		        handler.call(this, arguments[1]);
		        break;
		      case 3:
		        handler.call(this, arguments[1], arguments[2]);
		        break;
		      // slower
		      default:
		        args = Array.prototype.slice.call(arguments, 1);
		        handler.apply(this, args);
		    }
		  } else if (isObject(handler)) {
		    args = Array.prototype.slice.call(arguments, 1);
		    listeners = handler.slice();
		    len = listeners.length;
		    for (i = 0; i < len; i++)
		      listeners[i].apply(this, args);
		  }
		
		  return true;
		};
		
		EventEmitter.prototype.addListener = function(type, listener) {
		  var m;
		
		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');
		
		  if (!this._events)
		    this._events = {};
		
		  // To avoid recursion in the case that type === "newListener"! Before
		  // adding it to the listeners, first emit "newListener".
		  if (this._events.newListener)
		    this.emit('newListener', type,
		              isFunction(listener.listener) ?
		              listener.listener : listener);
		
		  if (!this._events[type])
		    // Optimize the case of one listener. Don't need the extra array object.
		    this._events[type] = listener;
		  else if (isObject(this._events[type]))
		    // If we've already got an array, just append.
		    this._events[type].push(listener);
		  else
		    // Adding the second element, need to change to array.
		    this._events[type] = [this._events[type], listener];
		
		  // Check for listener leak
		  if (isObject(this._events[type]) && !this._events[type].warned) {
		    if (!isUndefined(this._maxListeners)) {
		      m = this._maxListeners;
		    } else {
		      m = EventEmitter.defaultMaxListeners;
		    }
		
		    if (m && m > 0 && this._events[type].length > m) {
		      this._events[type].warned = true;
		      console.error('(node) warning: possible EventEmitter memory ' +
		                    'leak detected. %d listeners added. ' +
		                    'Use emitter.setMaxListeners() to increase limit.',
		                    this._events[type].length);
		      if (typeof console.trace === 'function') {
		        // not supported in IE 10
		        console.trace();
		      }
		    }
		  }
		
		  return this;
		};
		
		EventEmitter.prototype.on = EventEmitter.prototype.addListener;
		
		EventEmitter.prototype.once = function(type, listener) {
		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');
		
		  var fired = false;
		
		  function g() {
		    this.removeListener(type, g);
		
		    if (!fired) {
		      fired = true;
		      listener.apply(this, arguments);
		    }
		  }
		
		  g.listener = listener;
		  this.on(type, g);
		
		  return this;
		};
		
		// emits a 'removeListener' event iff the listener was removed
		EventEmitter.prototype.removeListener = function(type, listener) {
		  var list, position, length, i;
		
		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');
		
		  if (!this._events || !this._events[type])
		    return this;
		
		  list = this._events[type];
		  length = list.length;
		  position = -1;
		
		  if (list === listener ||
		      (isFunction(list.listener) && list.listener === listener)) {
		    delete this._events[type];
		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);
		
		  } else if (isObject(list)) {
		    for (i = length; i-- > 0;) {
		      if (list[i] === listener ||
		          (list[i].listener && list[i].listener === listener)) {
		        position = i;
		        break;
		      }
		    }
		
		    if (position < 0)
		      return this;
		
		    if (list.length === 1) {
		      list.length = 0;
		      delete this._events[type];
		    } else {
		      list.splice(position, 1);
		    }
		
		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);
		  }
		
		  return this;
		};
		
		EventEmitter.prototype.removeAllListeners = function(type) {
		  var key, listeners;
		
		  if (!this._events)
		    return this;
		
		  // not listening for removeListener, no need to emit
		  if (!this._events.removeListener) {
		    if (arguments.length === 0)
		      this._events = {};
		    else if (this._events[type])
		      delete this._events[type];
		    return this;
		  }
		
		  // emit removeListener for all listeners on all events
		  if (arguments.length === 0) {
		    for (key in this._events) {
		      if (key === 'removeListener') continue;
		      this.removeAllListeners(key);
		    }
		    this.removeAllListeners('removeListener');
		    this._events = {};
		    return this;
		  }
		
		  listeners = this._events[type];
		
		  if (isFunction(listeners)) {
		    this.removeListener(type, listeners);
		  } else if (listeners) {
		    // LIFO order
		    while (listeners.length)
		      this.removeListener(type, listeners[listeners.length - 1]);
		  }
		  delete this._events[type];
		
		  return this;
		};
		
		EventEmitter.prototype.listeners = function(type) {
		  var ret;
		  if (!this._events || !this._events[type])
		    ret = [];
		  else if (isFunction(this._events[type]))
		    ret = [this._events[type]];
		  else
		    ret = this._events[type].slice();
		  return ret;
		};
		
		EventEmitter.prototype.listenerCount = function(type) {
		  if (this._events) {
		    var evlistener = this._events[type];
		
		    if (isFunction(evlistener))
		      return 1;
		    else if (evlistener)
		      return evlistener.length;
		  }
		  return 0;
		};
		
		EventEmitter.listenerCount = function(emitter, type) {
		  return emitter.listenerCount(type);
		};
		
		function isFunction(arg) {
		  return typeof arg === 'function';
		}
		
		function isNumber(arg) {
		  return typeof arg === 'number';
		}
		
		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		
		function isUndefined(arg) {
		  return arg === void 0;
		}


	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {	// Split a filename into [root, dir, basename, ext], unix version
		// 'root' is just a slash, or nothing.
		var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
		function posixSplitPath(filename) {
		    var out = splitPathRe.exec(filename);
		    out.shift();
		    return out;
		}
		/**
		 * Emulates Node's `path` module. This module contains utilities for handling and
		 * transforming file paths. **All** of these methods perform only string
		 * transformations. The file system is not consulted to check whether paths are
		 * valid.
		 * @see http://nodejs.org/api/path.html
		 * @class
		 */
		var path = (function () {
		    function path() {
		    }
		    /**
		     * Normalize a string path, taking care of '..' and '.' parts.
		     *
		     * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
		     * @example Usage example
		     *   path.normalize('/foo/bar//baz/asdf/quux/..')
		     *   // returns
		     *   '/foo/bar/baz/asdf'
		     * @param [String] p The path to normalize.
		     * @return [String]
		     */
		    path.normalize = function (p) {
		        // Special case: '' -> '.'
		        if (p === '') {
		            p = '.';
		        }
		        // It's very important to know if the path is relative or not, since it
		        // changes how we process .. and reconstruct the split string.
		        var absolute = p.charAt(0) === path.sep;
		        // Remove repeated //s
		        p = path._removeDuplicateSeps(p);
		        // Try to remove as many '../' as possible, and remove '.' completely.
		        var components = p.split(path.sep);
		        var goodComponents = [];
		        for (var idx = 0; idx < components.length; idx++) {
		            var c = components[idx];
		            if (c === '.') {
		                continue;
		            }
		            else if (c === '..' && (absolute || (!absolute && goodComponents.length > 0 && goodComponents[0] !== '..'))) {
		                // In the absolute case: Path is relative to root, so we may pop even if
		                // goodComponents is empty (e.g. /../ => /)
		                // In the relative case: We're getting rid of a directory that preceded
		                // it (e.g. /foo/../bar -> /bar)
		                goodComponents.pop();
		            }
		            else {
		                goodComponents.push(c);
		            }
		        }
		        // Add in '.' when it's a relative path with no other nonempty components.
		        // Possible results: '.' and './' (input: [''] or [])
		        // @todo Can probably simplify this logic.
		        if (!absolute && goodComponents.length < 2) {
		            switch (goodComponents.length) {
		                case 1:
		                    if (goodComponents[0] === '') {
		                        goodComponents.unshift('.');
		                    }
		                    break;
		                default:
		                    goodComponents.push('.');
		            }
		        }
		        p = goodComponents.join(path.sep);
		        if (absolute && p.charAt(0) !== path.sep) {
		            p = path.sep + p;
		        }
		        return p;
		    };
		    /**
		     * Join all arguments together and normalize the resulting path.
		     *
		     * Arguments must be strings.
		     * @example Usage
		     *   path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
		     *   // returns
		     *   '/foo/bar/baz/asdf'
		     *
		     *   path.join('foo', {}, 'bar')
		     *   // throws exception
		     *   TypeError: Arguments to path.join must be strings
		     * @param [String,...] paths Each component of the path
		     * @return [String]
		     */
		    path.join = function () {
		        var paths = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            paths[_i - 0] = arguments[_i];
		        }
		        // Required: Prune any non-strings from the path. I also prune empty segments
		        // so we can do a simple join of the array.
		        var processed = [];
		        for (var i = 0; i < paths.length; i++) {
		            var segment = paths[i];
		            if (typeof segment !== 'string') {
		                throw new TypeError("Invalid argument type to path.join: " + (typeof segment));
		            }
		            else if (segment !== '') {
		                processed.push(segment);
		            }
		        }
		        return path.normalize(processed.join(path.sep));
		    };
		    /**
		     * Resolves to to an absolute path.
		     *
		     * If to isn't already absolute from arguments are prepended in right to left
		     * order, until an absolute path is found. If after using all from paths still
		     * no absolute path is found, the current working directory is used as well.
		     * The resulting path is normalized, and trailing slashes are removed unless
		     * the path gets resolved to the root directory. Non-string arguments are
		     * ignored.
		     *
		     * Another way to think of it is as a sequence of cd commands in a shell.
		     *
		     *     path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')
		     *
		     * Is similar to:
		     *
		     *     cd foo/bar
		     *     cd /tmp/file/
		     *     cd ..
		     *     cd a/../subfile
		     *     pwd
		     *
		     * The difference is that the different paths don't need to exist and may also
		     * be files.
		     * @example Usage example
		     *   path.resolve('/foo/bar', './baz')
		     *   // returns
		     *   '/foo/bar/baz'
		     *
		     *   path.resolve('/foo/bar', '/tmp/file/')
		     *   // returns
		     *   '/tmp/file'
		     *
		     *   path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')
		     *   // if currently in /home/myself/node, it returns
		     *   '/home/myself/node/wwwroot/static_files/gif/image.gif'
		     * @param [String,...] paths
		     * @return [String]
		     */
		    path.resolve = function () {
		        var paths = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            paths[_i - 0] = arguments[_i];
		        }
		        // Monitor for invalid paths, throw out empty paths, and look for the *last*
		        // absolute path that we see.
		        var processed = [];
		        for (var i = 0; i < paths.length; i++) {
		            var p = paths[i];
		            if (typeof p !== 'string') {
		                throw new TypeError("Invalid argument type to path.join: " + (typeof p));
		            }
		            else if (p !== '') {
		                // Remove anything that has occurred before this absolute path, as it
		                // doesn't matter.
		                if (p.charAt(0) === path.sep) {
		                    processed = [];
		                }
		                processed.push(p);
		            }
		        }
		        // Special: Remove trailing slash unless it's the root
		        var resolved = path.normalize(processed.join(path.sep));
		        if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path.sep) {
		            return resolved.substr(0, resolved.length - 1);
		        }
		        // Special: If it doesn't start with '/', it's relative and we need to append
		        // the current directory.
		        if (resolved.charAt(0) !== path.sep) {
		            // Remove ./, since we're going to append the current directory.
		            if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === path.sep)) {
		                resolved = resolved.length === 1 ? '' : resolved.substr(2);
		            }
		            // Append the current directory, which *must* be an absolute path.
		            var cwd = process.cwd();
		            if (resolved !== '') {
		                // cwd will never end in a /... unless it's the root.
		                resolved = this.normalize(cwd + (cwd !== '/' ? path.sep : '') + resolved);
		            }
		            else {
		                resolved = cwd;
		            }
		        }
		        return resolved;
		    };
		    /**
		     * Solve the relative path from from to to.
		     *
		     * At times we have two absolute paths, and we need to derive the relative path
		     * from one to the other. This is actually the reverse transform of
		     * path.resolve, which means we see that:
		     *
		     *    path.resolve(from, path.relative(from, to)) == path.resolve(to)
		     *
		     * @example Usage example
		     *   path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb')
		     *   // returns
		     *   '..\\..\\impl\\bbb'
		     *
		     *   path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
		     *   // returns
		     *   '../../impl/bbb'
		     * @param [String] from
		     * @param [String] to
		     * @return [String]
		     */
		    path.relative = function (from, to) {
		        var i;
		        // Alright. Let's resolve these two to absolute paths and remove any
		        // weirdness.
		        from = path.resolve(from);
		        to = path.resolve(to);
		        var fromSegs = from.split(path.sep);
		        var toSegs = to.split(path.sep);
		        // Remove the first segment on both, as it's '' (both are absolute paths)
		        toSegs.shift();
		        fromSegs.shift();
		        // There are two segments to this path:
		        // * Going *up* the directory hierarchy with '..'
		        // * Going *down* the directory hierarchy with foo/baz/bat.
		        var upCount = 0;
		        var downSegs = [];
		        // Figure out how many things in 'from' are shared with 'to'.
		        for (i = 0; i < fromSegs.length; i++) {
		            var seg = fromSegs[i];
		            if (seg === toSegs[i]) {
		                continue;
		            }
		            // The rest of 'from', including the current element, indicates how many
		            // directories we need to go up.
		            upCount = fromSegs.length - i;
		            break;
		        }
		        // The rest of 'to' indicates where we need to change to. We place this
		        // outside of the loop, as toSegs.length may be greater than fromSegs.length.
		        downSegs = toSegs.slice(i);
		        // Special case: If 'from' is '/'
		        if (fromSegs.length === 1 && fromSegs[0] === '') {
		            upCount = 0;
		        }
		        // upCount can't be greater than the number of fromSegs
		        // (cd .. from / is still /)
		        if (upCount > fromSegs.length) {
		            upCount = fromSegs.length;
		        }
		        // Create the final string!
		        var rv = '';
		        for (i = 0; i < upCount; i++) {
		            rv += '../';
		        }
		        rv += downSegs.join(path.sep);
		        // Special case: Remove trailing '/'. Happens if it's all up and no down.
		        if (rv.length > 1 && rv.charAt(rv.length - 1) === path.sep) {
		            rv = rv.substr(0, rv.length - 1);
		        }
		        return rv;
		    };
		    /**
		     * Return the directory name of a path. Similar to the Unix `dirname` command.
		     *
		     * Note that BrowserFS does not validate if the path is actually a valid
		     * directory.
		     * @example Usage example
		     *   path.dirname('/foo/bar/baz/asdf/quux')
		     *   // returns
		     *   '/foo/bar/baz/asdf'
		     * @param [String] p The path to get the directory name of.
		     * @return [String]
		     */
		    path.dirname = function (p) {
		        // We get rid of //, but we don't modify anything else (e.g. any extraneous .
		        // and ../ are kept intact)
		        p = path._removeDuplicateSeps(p);
		        var absolute = p.charAt(0) === path.sep;
		        var sections = p.split(path.sep);
		        // Do 1 if it's /foo/bar, 2 if it's /foo/bar/
		        if (sections.pop() === '' && sections.length > 0) {
		            sections.pop();
		        }
		        // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.
		        // If not absolute, the first section is the first part of the path, and is OK
		        // to return.
		        if (sections.length > 1 || (sections.length === 1 && !absolute)) {
		            return sections.join(path.sep);
		        }
		        else if (absolute) {
		            return path.sep;
		        }
		        else {
		            return '.';
		        }
		    };
		    /**
		     * Return the last portion of a path. Similar to the Unix basename command.
		     * @example Usage example
		     *   path.basename('/foo/bar/baz/asdf/quux.html')
		     *   // returns
		     *   'quux.html'
		     *
		     *   path.basename('/foo/bar/baz/asdf/quux.html', '.html')
		     *   // returns
		     *   'quux'
		     * @param [String] p
		     * @param [String?] ext
		     * @return [String]
		     */
		    path.basename = function (p, ext) {
		        if (ext === void 0) { ext = ""; }
		        // Special case: Normalize will modify this to '.'
		        if (p === '') {
		            return p;
		        }
		        // Normalize the string first to remove any weirdness.
		        p = path.normalize(p);
		        // Get the last part of the string.
		        var sections = p.split(path.sep);
		        var lastPart = sections[sections.length - 1];
		        // Special case: If it's empty, then we have a string like so: foo/
		        // Meaning, 'foo' is guaranteed to be a directory.
		        if (lastPart === '' && sections.length > 1) {
		            return sections[sections.length - 2];
		        }
		        // Remove the extension, if need be.
		        if (ext.length > 0) {
		            var lastPartExt = lastPart.substr(lastPart.length - ext.length);
		            if (lastPartExt === ext) {
		                return lastPart.substr(0, lastPart.length - ext.length);
		            }
		        }
		        return lastPart;
		    };
		    /**
		     * Return the extension of the path, from the last '.' to end of string in the
		     * last portion of the path. If there is no '.' in the last portion of the path
		     * or the first character of it is '.', then it returns an empty string.
		     * @example Usage example
		     *   path.extname('index.html')
		     *   // returns
		     *   '.html'
		     *
		     *   path.extname('index.')
		     *   // returns
		     *   '.'
		     *
		     *   path.extname('index')
		     *   // returns
		     *   ''
		     * @param [String] p
		     * @return [String]
		     */
		    path.extname = function (p) {
		        p = path.normalize(p);
		        var sections = p.split(path.sep);
		        p = sections.pop();
		        // Special case: foo/file.ext/ should return '.ext'
		        if (p === '' && sections.length > 0) {
		            p = sections.pop();
		        }
		        if (p === '..') {
		            return '';
		        }
		        var i = p.lastIndexOf('.');
		        if (i === -1 || i === 0) {
		            return '';
		        }
		        return p.substr(i);
		    };
		    /**
		     * Checks if the given path is an absolute path.
		     *
		     * Despite not being documented, this is a tested part of Node's path API.
		     * @param [String] p
		     * @return [Boolean] True if the path appears to be an absolute path.
		     */
		    path.isAbsolute = function (p) {
		        return p.length > 0 && p.charAt(0) === path.sep;
		    };
		    /**
		     * Unknown. Undocumented.
		     */
		    path._makeLong = function (p) {
		        return p;
		    };
		    /**
		     * Returns an object from a path string.
		     */
		    path.parse = function (p) {
		        var allParts = posixSplitPath(p);
		        return {
		            root: allParts[0],
		            dir: allParts[0] + allParts[1].slice(0, -1),
		            base: allParts[2],
		            ext: allParts[3],
		            name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
		        };
		    };
		    path.format = function (pathObject) {
		        if (pathObject === null || typeof pathObject !== 'object') {
		            throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
		        }
		        var root = pathObject.root || '';
		        if (typeof root !== 'string') {
		            throw new TypeError("'pathObject.root' must be a string or undefined, not " +
		                typeof pathObject.root);
		        }
		        var dir = pathObject.dir ? pathObject.dir + path.sep : '';
		        var base = pathObject.base || '';
		        return dir + base;
		    };
		    path._removeDuplicateSeps = function (p) {
		        p = p.replace(this._replaceRegex, this.sep);
		        return p;
		    };
		    // The platform-specific file separator. BrowserFS uses `/`.
		    path.sep = '/';
		    path._replaceRegex = new RegExp("//+", 'g');
		    // The platform-specific path delimiter. BrowserFS uses `:`.
		    path.delimiter = ':';
		    path.posix = path;
		    // XXX: Typing hack. We don't actually support win32.
		    path.win32 = path;
		    return path;
		}());
		module.exports = path;
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)));

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {	var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var stream = __webpack_require__(11);
		var TTY = (function (_super) {
		    __extends(TTY, _super);
		    function TTY() {
		        _super.call(this);
		        this.isRaw = false;
		        this.columns = 80;
		        this.rows = 120;
		        this.isTTY = true;
		        this._bufferedWrites = [];
		        this._waitingForWrites = false;
		    }
		    /**
		     * Toggle raw mode.
		     */
		    TTY.prototype.setRawMode = function (mode) {
		        if (this.isRaw !== mode) {
		            this.isRaw = mode;
		            // [BFS] TTY implementations can use this to change their event emitting
		            //       patterns.
		            this.emit('modeChange');
		        }
		    };
		    /**
		     * [BFS] Update the number of columns available on the terminal.
		     */
		    TTY.prototype.changeColumns = function (columns) {
		        if (columns !== this.columns) {
		            this.columns = columns;
		            // Resize event.
		            this.emit('resize');
		        }
		    };
		    /**
		     * [BFS] Update the number of rows available on the terminal.
		     */
		    TTY.prototype.changeRows = function (rows) {
		        if (rows !== this.rows) {
		            this.rows = rows;
		            // Resize event.
		            this.emit('resize');
		        }
		    };
		    /**
		     * Returns 'true' if the given object is a TTY.
		     */
		    TTY.isatty = function (fd) {
		        return fd && fd instanceof TTY;
		    };
		    TTY.prototype._write = function (chunk, encoding, cb) {
		        var error;
		        try {
		            var data;
		            if (typeof (chunk) === 'string') {
		                data = new Buffer(chunk, encoding);
		            }
		            else {
		                data = chunk;
		            }
		            this._bufferedWrites.push(data);
		            if (this._waitingForWrites) {
		                this._read(1024);
		            }
		        }
		        catch (e) {
		            error = e;
		        }
		        finally {
		            cb(error);
		        }
		    };
		    TTY.prototype._read = function (size) {
		        // Size is advisory -- we can ignore it.
		        if (this._bufferedWrites.length === 0) {
		            this._waitingForWrites = true;
		        }
		        else {
		            while (this._bufferedWrites.length > 0) {
		                this._waitingForWrites = this.push(this._bufferedWrites.shift());
		                if (!this._waitingForWrites) {
		                    break;
		                }
		            }
		        }
		    };
		    return TTY;
		}(stream.Duplex));
		module.exports = TTY;
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		module.exports = Stream;
		
		var EE = __webpack_require__(8).EventEmitter;
		var inherits = __webpack_require__(12);
		
		inherits(Stream, EE);
		Stream.Readable = __webpack_require__(13);
		Stream.Writable = __webpack_require__(27);
		Stream.Duplex = __webpack_require__(28);
		Stream.Transform = __webpack_require__(29);
		Stream.PassThrough = __webpack_require__(30);
		
		// Backwards-compat with node 0.4.x
		Stream.Stream = Stream;
		
		
		
		// old-style streams.  Note that the pipe method (the only relevant
		// part of this class) is overridden in the Readable class.
		
		function Stream() {
		  EE.call(this);
		}
		
		Stream.prototype.pipe = function(dest, options) {
		  var source = this;
		
		  function ondata(chunk) {
		    if (dest.writable) {
		      if (false === dest.write(chunk) && source.pause) {
		        source.pause();
		      }
		    }
		  }
		
		  source.on('data', ondata);
		
		  function ondrain() {
		    if (source.readable && source.resume) {
		      source.resume();
		    }
		  }
		
		  dest.on('drain', ondrain);
		
		  // If the 'end' option is not supplied, dest.end() will be called when
		  // source gets the 'end' or 'close' events.  Only dest.end() once.
		  if (!dest._isStdio && (!options || options.end !== false)) {
		    source.on('end', onend);
		    source.on('close', onclose);
		  }
		
		  var didOnEnd = false;
		  function onend() {
		    if (didOnEnd) return;
		    didOnEnd = true;
		
		    dest.end();
		  }
		
		
		  function onclose() {
		    if (didOnEnd) return;
		    didOnEnd = true;
		
		    if (typeof dest.destroy === 'function') dest.destroy();
		  }
		
		  // don't leave dangling pipes when there are errors.
		  function onerror(er) {
		    cleanup();
		    if (EE.listenerCount(this, 'error') === 0) {
		      throw er; // Unhandled stream error in pipe.
		    }
		  }
		
		  source.on('error', onerror);
		  dest.on('error', onerror);
		
		  // remove all the event listeners that were added.
		  function cleanup() {
		    source.removeListener('data', ondata);
		    dest.removeListener('drain', ondrain);
		
		    source.removeListener('end', onend);
		    source.removeListener('close', onclose);
		
		    source.removeListener('error', onerror);
		    dest.removeListener('error', onerror);
		
		    source.removeListener('end', cleanup);
		    source.removeListener('close', cleanup);
		
		    dest.removeListener('close', cleanup);
		  }
		
		  source.on('end', cleanup);
		  source.on('close', cleanup);
		
		  dest.on('close', cleanup);
		
		  dest.emit('pipe', source);
		
		  // Allow for unix-like usage: A.pipe(B).pipe(C)
		  return dest;
		};


	/***/ },
	/* 12 */
	/***/ function(module, exports) {

		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor;
		    ctor.prototype = Object.create(superCtor.prototype, {
		      constructor: {
		        value: ctor,
		        enumerable: false,
		        writable: true,
		        configurable: true
		      }
		    });
		  };
		} else {
		  // old school shim for old browsers
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function () {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  };
		}


	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
		  try {
		    return __webpack_require__(11); // hack to fix a circular dependency issue when used with browserify
		  } catch(_){}
		}());
		exports = module.exports = __webpack_require__(14);
		exports.Stream = Stream || exports;
		exports.Readable = exports;
		exports.Writable = __webpack_require__(22);
		exports.Duplex = __webpack_require__(21);
		exports.Transform = __webpack_require__(25);
		exports.PassThrough = __webpack_require__(26);
		
		if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
		  module.exports = Stream;
		}
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)));

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {	
		module.exports = Readable;
		
		/*<replacement>*/
		var processNextTick = __webpack_require__(15);
		/*</replacement>*/
		
		/*<replacement>*/
		var isArray = __webpack_require__(16);
		/*</replacement>*/
		
		/*<replacement>*/
		var Duplex;
		/*</replacement>*/
		
		Readable.ReadableState = ReadableState;
		
		/*<replacement>*/
		__webpack_require__(8).EventEmitter;
		
		var EElistenerCount = function (emitter, type) {
		  return emitter.listeners(type).length;
		};
		/*</replacement>*/
		
		/*<replacement>*/
		var Stream;
		(function () {
		  try {
		    Stream = __webpack_require__(11);
		  } catch (_) {} finally {
		    if (!Stream) Stream = __webpack_require__(8).EventEmitter;
		  }
		})();
		/*</replacement>*/
		
		var Buffer = __webpack_require__(2).Buffer;
		/*<replacement>*/
		var bufferShim = __webpack_require__(17);
		/*</replacement>*/
		
		/*<replacement>*/
		var util = __webpack_require__(18);
		util.inherits = __webpack_require__(12);
		/*</replacement>*/
		
		/*<replacement>*/
		var debugUtil = __webpack_require__(19);
		var debug = void 0;
		if (debugUtil && debugUtil.debuglog) {
		  debug = debugUtil.debuglog('stream');
		} else {
		  debug = function () {};
		}
		/*</replacement>*/
		
		var BufferList = __webpack_require__(20);
		var StringDecoder;
		
		util.inherits(Readable, Stream);
		
		function prependListener(emitter, event, fn) {
		  // Sadly this is not cacheable as some libraries bundle their own
		  // event emitter implementation with them.
		  if (typeof emitter.prependListener === 'function') {
		    return emitter.prependListener(event, fn);
		  } else {
		    // This is a hack to make sure that our error handler is attached before any
		    // userland ones.  NEVER DO THIS. This is here only because this code needs
		    // to continue to work with older versions of Node.js that do not include
		    // the prependListener() method. The goal is to eventually remove this hack.
		    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
		  }
		}
		
		function ReadableState(options, stream) {
		  Duplex = Duplex || __webpack_require__(21);
		
		  options = options || {};
		
		  // object stream flag. Used to make read(n) ignore n and to
		  // make all the buffer merging and length checks go away
		  this.objectMode = !!options.objectMode;
		
		  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
		
		  // the point at which it stops calling _read() to fill the buffer
		  // Note: 0 is a valid value, means "don't call _read preemptively ever"
		  var hwm = options.highWaterMark;
		  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
		  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
		
		  // cast to ints.
		  this.highWaterMark = ~~this.highWaterMark;
		
		  // A linked list is used to store data chunks instead of an array because the
		  // linked list can remove elements from the beginning faster than
		  // array.shift()
		  this.buffer = new BufferList();
		  this.length = 0;
		  this.pipes = null;
		  this.pipesCount = 0;
		  this.flowing = null;
		  this.ended = false;
		  this.endEmitted = false;
		  this.reading = false;
		
		  // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.
		  this.sync = true;
		
		  // whenever we return null, then we set a flag to say
		  // that we're awaiting a 'readable' event emission.
		  this.needReadable = false;
		  this.emittedReadable = false;
		  this.readableListening = false;
		  this.resumeScheduled = false;
		
		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';
		
		  // when piping, we only care about 'readable' events that happen
		  // after read()ing all the bytes and not getting any pushback.
		  this.ranOut = false;
		
		  // the number of writers that are awaiting a drain event in .pipe()s
		  this.awaitDrain = 0;
		
		  // if true, a maybeReadMore has been scheduled
		  this.readingMore = false;
		
		  this.decoder = null;
		  this.encoding = null;
		  if (options.encoding) {
		    if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
		    this.decoder = new StringDecoder(options.encoding);
		    this.encoding = options.encoding;
		  }
		}
		
		function Readable(options) {
		  Duplex = Duplex || __webpack_require__(21);
		
		  if (!(this instanceof Readable)) return new Readable(options);
		
		  this._readableState = new ReadableState(options, this);
		
		  // legacy
		  this.readable = true;
		
		  if (options && typeof options.read === 'function') this._read = options.read;
		
		  Stream.call(this);
		}
		
		// Manually shove something into the read() buffer.
		// This returns true if the highWaterMark has not been hit yet,
		// similar to how Writable.write() returns true if you should
		// write() some more.
		Readable.prototype.push = function (chunk, encoding) {
		  var state = this._readableState;
		
		  if (!state.objectMode && typeof chunk === 'string') {
		    encoding = encoding || state.defaultEncoding;
		    if (encoding !== state.encoding) {
		      chunk = bufferShim.from(chunk, encoding);
		      encoding = '';
		    }
		  }
		
		  return readableAddChunk(this, state, chunk, encoding, false);
		};
		
		// Unshift should *always* be something directly out of read()
		Readable.prototype.unshift = function (chunk) {
		  var state = this._readableState;
		  return readableAddChunk(this, state, chunk, '', true);
		};
		
		Readable.prototype.isPaused = function () {
		  return this._readableState.flowing === false;
		};
		
		function readableAddChunk(stream, state, chunk, encoding, addToFront) {
		  var er = chunkInvalid(state, chunk);
		  if (er) {
		    stream.emit('error', er);
		  } else if (chunk === null) {
		    state.reading = false;
		    onEofChunk(stream, state);
		  } else if (state.objectMode || chunk && chunk.length > 0) {
		    if (state.ended && !addToFront) {
		      var e = new Error('stream.push() after EOF');
		      stream.emit('error', e);
		    } else if (state.endEmitted && addToFront) {
		      var _e = new Error('stream.unshift() after end event');
		      stream.emit('error', _e);
		    } else {
		      var skipAdd;
		      if (state.decoder && !addToFront && !encoding) {
		        chunk = state.decoder.write(chunk);
		        skipAdd = !state.objectMode && chunk.length === 0;
		      }
		
		      if (!addToFront) state.reading = false;
		
		      // Don't add to the buffer if we've decoded to an empty string chunk and
		      // we're not in object mode
		      if (!skipAdd) {
		        // if we want the data now, just emit it.
		        if (state.flowing && state.length === 0 && !state.sync) {
		          stream.emit('data', chunk);
		          stream.read(0);
		        } else {
		          // update the buffer info.
		          state.length += state.objectMode ? 1 : chunk.length;
		          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
		
		          if (state.needReadable) emitReadable(stream);
		        }
		      }
		
		      maybeReadMore(stream, state);
		    }
		  } else if (!addToFront) {
		    state.reading = false;
		  }
		
		  return needMoreData(state);
		}
		
		// if it's past the high water mark, we can push in some more.
		// Also, if we have no data yet, we can stand some
		// more bytes.  This is to work around cases where hwm=0,
		// such as the repl.  Also, if the push() triggered a
		// readable event, and the user called read(largeNumber) such that
		// needReadable was set, then we ought to push more, so that another
		// 'readable' event will be triggered.
		function needMoreData(state) {
		  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
		}
		
		// backwards compatibility.
		Readable.prototype.setEncoding = function (enc) {
		  if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
		  this._readableState.decoder = new StringDecoder(enc);
		  this._readableState.encoding = enc;
		  return this;
		};
		
		// Don't raise the hwm > 8MB
		var MAX_HWM = 0x800000;
		function computeNewHighWaterMark(n) {
		  if (n >= MAX_HWM) {
		    n = MAX_HWM;
		  } else {
		    // Get the next highest power of 2 to prevent increasing hwm excessively in
		    // tiny amounts
		    n--;
		    n |= n >>> 1;
		    n |= n >>> 2;
		    n |= n >>> 4;
		    n |= n >>> 8;
		    n |= n >>> 16;
		    n++;
		  }
		  return n;
		}
		
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function howMuchToRead(n, state) {
		  if (n <= 0 || state.length === 0 && state.ended) return 0;
		  if (state.objectMode) return 1;
		  if (n !== n) {
		    // Only flow one buffer at a time
		    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
		  }
		  // If we're asking for more than the current hwm, then raise the hwm.
		  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
		  if (n <= state.length) return n;
		  // Don't have enough
		  if (!state.ended) {
		    state.needReadable = true;
		    return 0;
		  }
		  return state.length;
		}
		
		// you can override either this method, or the async _read(n) below.
		Readable.prototype.read = function (n) {
		  debug('read', n);
		  n = parseInt(n, 10);
		  var state = this._readableState;
		  var nOrig = n;
		
		  if (n !== 0) state.emittedReadable = false;
		
		  // if we're doing read(0) to trigger a readable event, but we
		  // already have a bunch of data in the buffer, then just trigger
		  // the 'readable' event and move on.
		  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
		    debug('read: emitReadable', state.length, state.ended);
		    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
		    return null;
		  }
		
		  n = howMuchToRead(n, state);
		
		  // if we've ended, and we're now clear, then finish it up.
		  if (n === 0 && state.ended) {
		    if (state.length === 0) endReadable(this);
		    return null;
		  }
		
		  // All the actual chunk generation logic needs to be
		  // *below* the call to _read.  The reason is that in certain
		  // synthetic stream cases, such as passthrough streams, _read
		  // may be a completely synchronous operation which may change
		  // the state of the read buffer, providing enough data when
		  // before there was *not* enough.
		  //
		  // So, the steps are:
		  // 1. Figure out what the state of things will be after we do
		  // a read from the buffer.
		  //
		  // 2. If that resulting state will trigger a _read, then call _read.
		  // Note that this may be asynchronous, or synchronous.  Yes, it is
		  // deeply ugly to write APIs this way, but that still doesn't mean
		  // that the Readable class should behave improperly, as streams are
		  // designed to be sync/async agnostic.
		  // Take note if the _read call is sync or async (ie, if the read call
		  // has returned yet), so that we know whether or not it's safe to emit
		  // 'readable' etc.
		  //
		  // 3. Actually pull the requested chunks out of the buffer and return.
		
		  // if we need a readable event, then we need to do some reading.
		  var doRead = state.needReadable;
		  debug('need readable', doRead);
		
		  // if we currently have less than the highWaterMark, then also read some
		  if (state.length === 0 || state.length - n < state.highWaterMark) {
		    doRead = true;
		    debug('length less than watermark', doRead);
		  }
		
		  // however, if we've ended, then there's no point, and if we're already
		  // reading, then it's unnecessary.
		  if (state.ended || state.reading) {
		    doRead = false;
		    debug('reading or ended', doRead);
		  } else if (doRead) {
		    debug('do read');
		    state.reading = true;
		    state.sync = true;
		    // if the length is currently zero, then we *need* a readable event.
		    if (state.length === 0) state.needReadable = true;
		    // call internal read method
		    this._read(state.highWaterMark);
		    state.sync = false;
		    // If _read pushed data synchronously, then `reading` will be false,
		    // and we need to re-evaluate how much data we can return to the user.
		    if (!state.reading) n = howMuchToRead(nOrig, state);
		  }
		
		  var ret;
		  if (n > 0) ret = fromList(n, state);else ret = null;
		
		  if (ret === null) {
		    state.needReadable = true;
		    n = 0;
		  } else {
		    state.length -= n;
		  }
		
		  if (state.length === 0) {
		    // If we have nothing in the buffer, then we want to know
		    // as soon as we *do* get something into the buffer.
		    if (!state.ended) state.needReadable = true;
		
		    // If we tried to read() past the EOF, then emit end on the next tick.
		    if (nOrig !== n && state.ended) endReadable(this);
		  }
		
		  if (ret !== null) this.emit('data', ret);
		
		  return ret;
		};
		
		function chunkInvalid(state, chunk) {
		  var er = null;
		  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
		    er = new TypeError('Invalid non-string/buffer chunk');
		  }
		  return er;
		}
		
		function onEofChunk(stream, state) {
		  if (state.ended) return;
		  if (state.decoder) {
		    var chunk = state.decoder.end();
		    if (chunk && chunk.length) {
		      state.buffer.push(chunk);
		      state.length += state.objectMode ? 1 : chunk.length;
		    }
		  }
		  state.ended = true;
		
		  // emit 'readable' now to make sure it gets picked up.
		  emitReadable(stream);
		}
		
		// Don't emit readable right away in sync mode, because this can trigger
		// another read() call => stack overflow.  This way, it might trigger
		// a nextTick recursion warning, but that's not so bad.
		function emitReadable(stream) {
		  var state = stream._readableState;
		  state.needReadable = false;
		  if (!state.emittedReadable) {
		    debug('emitReadable', state.flowing);
		    state.emittedReadable = true;
		    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
		  }
		}
		
		function emitReadable_(stream) {
		  debug('emit readable');
		  stream.emit('readable');
		  flow(stream);
		}
		
		// at this point, the user has presumably seen the 'readable' event,
		// and called read() to consume some data.  that may have triggered
		// in turn another _read(n) call, in which case reading = true if
		// it's in progress.
		// However, if we're not ended, or reading, and the length < hwm,
		// then go ahead and try to read some more preemptively.
		function maybeReadMore(stream, state) {
		  if (!state.readingMore) {
		    state.readingMore = true;
		    processNextTick(maybeReadMore_, stream, state);
		  }
		}
		
		function maybeReadMore_(stream, state) {
		  var len = state.length;
		  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
		    debug('maybeReadMore read 0');
		    stream.read(0);
		    if (len === state.length)
		      // didn't get any data, stop spinning.
		      break;else len = state.length;
		  }
		  state.readingMore = false;
		}
		
		// abstract method.  to be overridden in specific implementation classes.
		// call cb(er, data) where data is <= n in length.
		// for virtual (non-string, non-buffer) streams, "length" is somewhat
		// arbitrary, and perhaps not very meaningful.
		Readable.prototype._read = function (n) {
		  this.emit('error', new Error('_read() is not implemented'));
		};
		
		Readable.prototype.pipe = function (dest, pipeOpts) {
		  var src = this;
		  var state = this._readableState;
		
		  switch (state.pipesCount) {
		    case 0:
		      state.pipes = dest;
		      break;
		    case 1:
		      state.pipes = [state.pipes, dest];
		      break;
		    default:
		      state.pipes.push(dest);
		      break;
		  }
		  state.pipesCount += 1;
		  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
		
		  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
		
		  var endFn = doEnd ? onend : cleanup;
		  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
		
		  dest.on('unpipe', onunpipe);
		  function onunpipe(readable) {
		    debug('onunpipe');
		    if (readable === src) {
		      cleanup();
		    }
		  }
		
		  function onend() {
		    debug('onend');
		    dest.end();
		  }
		
		  // when the dest drains, it reduces the awaitDrain counter
		  // on the source.  This would be more elegant with a .once()
		  // handler in flow(), but adding and removing repeatedly is
		  // too slow.
		  var ondrain = pipeOnDrain(src);
		  dest.on('drain', ondrain);
		
		  var cleanedUp = false;
		  function cleanup() {
		    debug('cleanup');
		    // cleanup event handlers once the pipe is broken
		    dest.removeListener('close', onclose);
		    dest.removeListener('finish', onfinish);
		    dest.removeListener('drain', ondrain);
		    dest.removeListener('error', onerror);
		    dest.removeListener('unpipe', onunpipe);
		    src.removeListener('end', onend);
		    src.removeListener('end', cleanup);
		    src.removeListener('data', ondata);
		
		    cleanedUp = true;
		
		    // if the reader is waiting for a drain event from this
		    // specific writer, then it would cause it to never start
		    // flowing again.
		    // So, if this is awaiting a drain, then we just call it now.
		    // If we don't know, then assume that we are waiting for one.
		    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		  }
		
		  // If the user pushes more data while we're writing to dest then we'll end up
		  // in ondata again. However, we only want to increase awaitDrain once because
		  // dest will only emit one 'drain' event for the multiple writes.
		  // => Introduce a guard on increasing awaitDrain.
		  var increasedAwaitDrain = false;
		  src.on('data', ondata);
		  function ondata(chunk) {
		    debug('ondata');
		    increasedAwaitDrain = false;
		    var ret = dest.write(chunk);
		    if (false === ret && !increasedAwaitDrain) {
		      // If the user unpiped during `dest.write()`, it is possible
		      // to get stuck in a permanently paused state if that write
		      // also returned false.
		      // => Check whether `dest` is still a piping destination.
		      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
		        debug('false write response, pause', src._readableState.awaitDrain);
		        src._readableState.awaitDrain++;
		        increasedAwaitDrain = true;
		      }
		      src.pause();
		    }
		  }
		
		  // if the dest has an error, then stop piping into it.
		  // however, don't suppress the throwing behavior for this.
		  function onerror(er) {
		    debug('onerror', er);
		    unpipe();
		    dest.removeListener('error', onerror);
		    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
		  }
		
		  // Make sure our error handler is attached before userland ones.
		  prependListener(dest, 'error', onerror);
		
		  // Both close and finish should trigger unpipe, but only once.
		  function onclose() {
		    dest.removeListener('finish', onfinish);
		    unpipe();
		  }
		  dest.once('close', onclose);
		  function onfinish() {
		    debug('onfinish');
		    dest.removeListener('close', onclose);
		    unpipe();
		  }
		  dest.once('finish', onfinish);
		
		  function unpipe() {
		    debug('unpipe');
		    src.unpipe(dest);
		  }
		
		  // tell the dest that it's being piped to
		  dest.emit('pipe', src);
		
		  // start the flow if it hasn't been started already.
		  if (!state.flowing) {
		    debug('pipe resume');
		    src.resume();
		  }
		
		  return dest;
		};
		
		function pipeOnDrain(src) {
		  return function () {
		    var state = src._readableState;
		    debug('pipeOnDrain', state.awaitDrain);
		    if (state.awaitDrain) state.awaitDrain--;
		    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
		      state.flowing = true;
		      flow(src);
		    }
		  };
		}
		
		Readable.prototype.unpipe = function (dest) {
		  var state = this._readableState;
		
		  // if we're not piping anywhere, then do nothing.
		  if (state.pipesCount === 0) return this;
		
		  // just one destination.  most common case.
		  if (state.pipesCount === 1) {
		    // passed in one, but it's not the right one.
		    if (dest && dest !== state.pipes) return this;
		
		    if (!dest) dest = state.pipes;
		
		    // got a match.
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		    if (dest) dest.emit('unpipe', this);
		    return this;
		  }
		
		  // slow case. multiple pipe destinations.
		
		  if (!dest) {
		    // remove all.
		    var dests = state.pipes;
		    var len = state.pipesCount;
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		
		    for (var i = 0; i < len; i++) {
		      dests[i].emit('unpipe', this);
		    }return this;
		  }
		
		  // try to find the right one.
		  var index = indexOf(state.pipes, dest);
		  if (index === -1) return this;
		
		  state.pipes.splice(index, 1);
		  state.pipesCount -= 1;
		  if (state.pipesCount === 1) state.pipes = state.pipes[0];
		
		  dest.emit('unpipe', this);
		
		  return this;
		};
		
		// set up data events if they are asked for
		// Ensure readable listeners eventually get something
		Readable.prototype.on = function (ev, fn) {
		  var res = Stream.prototype.on.call(this, ev, fn);
		
		  if (ev === 'data') {
		    // Start flowing on next tick if stream isn't explicitly paused
		    if (this._readableState.flowing !== false) this.resume();
		  } else if (ev === 'readable') {
		    var state = this._readableState;
		    if (!state.endEmitted && !state.readableListening) {
		      state.readableListening = state.needReadable = true;
		      state.emittedReadable = false;
		      if (!state.reading) {
		        processNextTick(nReadingNextTick, this);
		      } else if (state.length) {
		        emitReadable(this);
		      }
		    }
		  }
		
		  return res;
		};
		Readable.prototype.addListener = Readable.prototype.on;
		
		function nReadingNextTick(self) {
		  debug('readable nexttick read 0');
		  self.read(0);
		}
		
		// pause() and resume() are remnants of the legacy readable stream API
		// If the user uses them, then switch into old mode.
		Readable.prototype.resume = function () {
		  var state = this._readableState;
		  if (!state.flowing) {
		    debug('resume');
		    state.flowing = true;
		    resume(this, state);
		  }
		  return this;
		};
		
		function resume(stream, state) {
		  if (!state.resumeScheduled) {
		    state.resumeScheduled = true;
		    processNextTick(resume_, stream, state);
		  }
		}
		
		function resume_(stream, state) {
		  if (!state.reading) {
		    debug('resume read 0');
		    stream.read(0);
		  }
		
		  state.resumeScheduled = false;
		  state.awaitDrain = 0;
		  stream.emit('resume');
		  flow(stream);
		  if (state.flowing && !state.reading) stream.read(0);
		}
		
		Readable.prototype.pause = function () {
		  debug('call pause flowing=%j', this._readableState.flowing);
		  if (false !== this._readableState.flowing) {
		    debug('pause');
		    this._readableState.flowing = false;
		    this.emit('pause');
		  }
		  return this;
		};
		
		function flow(stream) {
		  var state = stream._readableState;
		  debug('flow', state.flowing);
		  while (state.flowing && stream.read() !== null) {}
		}
		
		// wrap an old-style stream as the async data source.
		// This is *not* part of the readable stream interface.
		// It is an ugly unfortunate mess of history.
		Readable.prototype.wrap = function (stream) {
		  var state = this._readableState;
		  var paused = false;
		
		  var self = this;
		  stream.on('end', function () {
		    debug('wrapped end');
		    if (state.decoder && !state.ended) {
		      var chunk = state.decoder.end();
		      if (chunk && chunk.length) self.push(chunk);
		    }
		
		    self.push(null);
		  });
		
		  stream.on('data', function (chunk) {
		    debug('wrapped data');
		    if (state.decoder) chunk = state.decoder.write(chunk);
		
		    // don't skip over falsy values in objectMode
		    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
		
		    var ret = self.push(chunk);
		    if (!ret) {
		      paused = true;
		      stream.pause();
		    }
		  });
		
		  // proxy all the other methods.
		  // important when wrapping filters and duplexes.
		  for (var i in stream) {
		    if (this[i] === undefined && typeof stream[i] === 'function') {
		      this[i] = function (method) {
		        return function () {
		          return stream[method].apply(stream, arguments);
		        };
		      }(i);
		    }
		  }
		
		  // proxy certain important events.
		  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
		  forEach(events, function (ev) {
		    stream.on(ev, self.emit.bind(self, ev));
		  });
		
		  // when we try to consume some more bytes, simply unpause the
		  // underlying stream.
		  self._read = function (n) {
		    debug('wrapped _read', n);
		    if (paused) {
		      paused = false;
		      stream.resume();
		    }
		  };
		
		  return self;
		};
		
		// exposed for testing purposes only.
		Readable._fromList = fromList;
		
		// Pluck off n bytes from an array of buffers.
		// Length is the combined lengths of all the buffers in the list.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function fromList(n, state) {
		  // nothing buffered
		  if (state.length === 0) return null;
		
		  var ret;
		  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
		    // read it all, truncate the list
		    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
		    state.buffer.clear();
		  } else {
		    // read part of list
		    ret = fromListPartial(n, state.buffer, state.decoder);
		  }
		
		  return ret;
		}
		
		// Extracts only enough buffered data to satisfy the amount requested.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function fromListPartial(n, list, hasStrings) {
		  var ret;
		  if (n < list.head.data.length) {
		    // slice is the same for buffers and strings
		    ret = list.head.data.slice(0, n);
		    list.head.data = list.head.data.slice(n);
		  } else if (n === list.head.data.length) {
		    // first chunk is a perfect match
		    ret = list.shift();
		  } else {
		    // result spans more than one buffer
		    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
		  }
		  return ret;
		}
		
		// Copies a specified amount of characters from the list of buffered data
		// chunks.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function copyFromBufferString(n, list) {
		  var p = list.head;
		  var c = 1;
		  var ret = p.data;
		  n -= ret.length;
		  while (p = p.next) {
		    var str = p.data;
		    var nb = n > str.length ? str.length : n;
		    if (nb === str.length) ret += str;else ret += str.slice(0, n);
		    n -= nb;
		    if (n === 0) {
		      if (nb === str.length) {
		        ++c;
		        if (p.next) list.head = p.next;else list.head = list.tail = null;
		      } else {
		        list.head = p;
		        p.data = str.slice(nb);
		      }
		      break;
		    }
		    ++c;
		  }
		  list.length -= c;
		  return ret;
		}
		
		// Copies a specified amount of bytes from the list of buffered data chunks.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function copyFromBuffer(n, list) {
		  var ret = bufferShim.allocUnsafe(n);
		  var p = list.head;
		  var c = 1;
		  p.data.copy(ret);
		  n -= p.data.length;
		  while (p = p.next) {
		    var buf = p.data;
		    var nb = n > buf.length ? buf.length : n;
		    buf.copy(ret, ret.length - n, 0, nb);
		    n -= nb;
		    if (n === 0) {
		      if (nb === buf.length) {
		        ++c;
		        if (p.next) list.head = p.next;else list.head = list.tail = null;
		      } else {
		        list.head = p;
		        p.data = buf.slice(nb);
		      }
		      break;
		    }
		    ++c;
		  }
		  list.length -= c;
		  return ret;
		}
		
		function endReadable(stream) {
		  var state = stream._readableState;
		
		  // If we get here before consuming all the bytes, then that is a
		  // bug in node.  Should never happen.
		  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
		
		  if (!state.endEmitted) {
		    state.ended = true;
		    processNextTick(endReadableNT, state, stream);
		  }
		}
		
		function endReadableNT(state, stream) {
		  // Check that we didn't get one last unshift.
		  if (!state.endEmitted && state.length === 0) {
		    state.endEmitted = true;
		    stream.readable = false;
		    stream.emit('end');
		  }
		}
		
		function forEach(xs, f) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    f(xs[i], i);
		  }
		}
		
		function indexOf(xs, x) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    if (xs[i] === x) return i;
		  }
		  return -1;
		}
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)));

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {	
		if (!process.version ||
		    process.version.indexOf('v0.') === 0 ||
		    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
		  module.exports = nextTick;
		} else {
		  module.exports = process.nextTick;
		}
		
		function nextTick(fn, arg1, arg2, arg3) {
		  if (typeof fn !== 'function') {
		    throw new TypeError('"callback" argument must be a function');
		  }
		  var len = arguments.length;
		  var args, i;
		  switch (len) {
		  case 0:
		  case 1:
		    return process.nextTick(fn);
		  case 2:
		    return process.nextTick(function afterTickOne() {
		      fn.call(null, arg1);
		    });
		  case 3:
		    return process.nextTick(function afterTickTwo() {
		      fn.call(null, arg1, arg2);
		    });
		  case 4:
		    return process.nextTick(function afterTickThree() {
		      fn.call(null, arg1, arg2, arg3);
		    });
		  default:
		    args = new Array(len - 1);
		    i = 0;
		    while (i < args.length) {
		      args[i++] = arguments[i];
		    }
		    return process.nextTick(function afterTick() {
		      fn.apply(null, args);
		    });
		  }
		}
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)));

	/***/ },
	/* 16 */
	/***/ function(module, exports) {

		var toString = {}.toString;
		
		module.exports = Array.isArray || function (arr) {
		  return toString.call(arr) == '[object Array]';
		};


	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {	
		var buffer = __webpack_require__(2);
		var Buffer = buffer.Buffer;
		var SlowBuffer = buffer.SlowBuffer;
		var MAX_LEN = buffer.kMaxLength || 2147483647;
		exports.alloc = function alloc(size, fill, encoding) {
		  if (typeof Buffer.alloc === 'function') {
		    return Buffer.alloc(size, fill, encoding);
		  }
		  if (typeof encoding === 'number') {
		    throw new TypeError('encoding must not be number');
		  }
		  if (typeof size !== 'number') {
		    throw new TypeError('size must be a number');
		  }
		  if (size > MAX_LEN) {
		    throw new RangeError('size is too large');
		  }
		  var enc = encoding;
		  var _fill = fill;
		  if (_fill === undefined) {
		    enc = undefined;
		    _fill = 0;
		  }
		  var buf = new Buffer(size);
		  if (typeof _fill === 'string') {
		    var fillBuf = new Buffer(_fill, enc);
		    var flen = fillBuf.length;
		    var i = -1;
		    while (++i < size) {
		      buf[i] = fillBuf[i % flen];
		    }
		  } else {
		    buf.fill(_fill);
		  }
		  return buf;
		};
		exports.allocUnsafe = function allocUnsafe(size) {
		  if (typeof Buffer.allocUnsafe === 'function') {
		    return Buffer.allocUnsafe(size);
		  }
		  if (typeof size !== 'number') {
		    throw new TypeError('size must be a number');
		  }
		  if (size > MAX_LEN) {
		    throw new RangeError('size is too large');
		  }
		  return new Buffer(size);
		};
		exports.from = function from(value, encodingOrOffset, length) {
		  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
		    return Buffer.from(value, encodingOrOffset, length);
		  }
		  if (typeof value === 'number') {
		    throw new TypeError('"value" argument must not be a number');
		  }
		  if (typeof value === 'string') {
		    return new Buffer(value, encodingOrOffset);
		  }
		  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		    var offset = encodingOrOffset;
		    if (arguments.length === 1) {
		      return new Buffer(value);
		    }
		    if (typeof offset === 'undefined') {
		      offset = 0;
		    }
		    var len = length;
		    if (typeof len === 'undefined') {
		      len = value.byteLength - offset;
		    }
		    if (offset >= value.byteLength) {
		      throw new RangeError('\'offset\' is out of bounds');
		    }
		    if (len > value.byteLength - offset) {
		      throw new RangeError('\'length\' is out of bounds');
		    }
		    return new Buffer(value.slice(offset, offset + len));
		  }
		  if (Buffer.isBuffer(value)) {
		    var out = new Buffer(value.length);
		    value.copy(out, 0, 0, value.length);
		    return out;
		  }
		  if (value) {
		    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
		      return new Buffer(value);
		    }
		    if (value.type === 'Buffer' && Array.isArray(value.data)) {
		      return new Buffer(value.data);
		    }
		  }
		
		  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
		};
		exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
		  if (typeof Buffer.allocUnsafeSlow === 'function') {
		    return Buffer.allocUnsafeSlow(size);
		  }
		  if (typeof size !== 'number') {
		    throw new TypeError('size must be a number');
		  }
		  if (size >= MAX_LEN) {
		    throw new RangeError('size is too large');
		  }
		  return new SlowBuffer(size);
		};
		
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())));

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		// NOTE: These type checking functions intentionally don't use `instanceof`
		// because it is fragile and can be easily faked with `Object.create()`.
		
		function isArray(arg) {
		  if (Array.isArray) {
		    return Array.isArray(arg);
		  }
		  return objectToString(arg) === '[object Array]';
		}
		exports.isArray = isArray;
		
		function isBoolean(arg) {
		  return typeof arg === 'boolean';
		}
		exports.isBoolean = isBoolean;
		
		function isNull(arg) {
		  return arg === null;
		}
		exports.isNull = isNull;
		
		function isNullOrUndefined(arg) {
		  return arg == null;
		}
		exports.isNullOrUndefined = isNullOrUndefined;
		
		function isNumber(arg) {
		  return typeof arg === 'number';
		}
		exports.isNumber = isNumber;
		
		function isString(arg) {
		  return typeof arg === 'string';
		}
		exports.isString = isString;
		
		function isSymbol(arg) {
		  return typeof arg === 'symbol';
		}
		exports.isSymbol = isSymbol;
		
		function isUndefined(arg) {
		  return arg === void 0;
		}
		exports.isUndefined = isUndefined;
		
		function isRegExp(re) {
		  return objectToString(re) === '[object RegExp]';
		}
		exports.isRegExp = isRegExp;
		
		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		exports.isObject = isObject;
		
		function isDate(d) {
		  return objectToString(d) === '[object Date]';
		}
		exports.isDate = isDate;
		
		function isError(e) {
		  return (objectToString(e) === '[object Error]' || e instanceof Error);
		}
		exports.isError = isError;
		
		function isFunction(arg) {
		  return typeof arg === 'function';
		}
		exports.isFunction = isFunction;
		
		function isPrimitive(arg) {
		  return arg === null ||
		         typeof arg === 'boolean' ||
		         typeof arg === 'number' ||
		         typeof arg === 'string' ||
		         typeof arg === 'symbol' ||  // ES6 symbol
		         typeof arg === 'undefined';
		}
		exports.isPrimitive = isPrimitive;
		
		exports.isBuffer = Buffer.isBuffer;
		
		function objectToString(o) {
		  return Object.prototype.toString.call(o);
		}
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

	/***/ },
	/* 19 */
	/***/ function(module, exports) {

		/* (ignored) */

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
		
		__webpack_require__(2).Buffer;
		/*<replacement>*/
		var bufferShim = __webpack_require__(17);
		/*</replacement>*/
		
		module.exports = BufferList;
		
		function BufferList() {
		  this.head = null;
		  this.tail = null;
		  this.length = 0;
		}
		
		BufferList.prototype.push = function (v) {
		  var entry = { data: v, next: null };
		  if (this.length > 0) this.tail.next = entry;else this.head = entry;
		  this.tail = entry;
		  ++this.length;
		};
		
		BufferList.prototype.unshift = function (v) {
		  var entry = { data: v, next: this.head };
		  if (this.length === 0) this.tail = entry;
		  this.head = entry;
		  ++this.length;
		};
		
		BufferList.prototype.shift = function () {
		  if (this.length === 0) return;
		  var ret = this.head.data;
		  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
		  --this.length;
		  return ret;
		};
		
		BufferList.prototype.clear = function () {
		  this.head = this.tail = null;
		  this.length = 0;
		};
		
		BufferList.prototype.join = function (s) {
		  if (this.length === 0) return '';
		  var p = this.head;
		  var ret = '' + p.data;
		  while (p = p.next) {
		    ret += s + p.data;
		  }return ret;
		};
		
		BufferList.prototype.concat = function (n) {
		  if (this.length === 0) return bufferShim.alloc(0);
		  if (this.length === 1) return this.head.data;
		  var ret = bufferShim.allocUnsafe(n >>> 0);
		  var p = this.head;
		  var i = 0;
		  while (p) {
		    p.data.copy(ret, i);
		    i += p.data.length;
		    p = p.next;
		  }
		  return ret;
		};

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {
		
		/*<replacement>*/
		
		var objectKeys = Object.keys || function (obj) {
		  var keys = [];
		  for (var key in obj) {
		    keys.push(key);
		  }return keys;
		};
		/*</replacement>*/
		
		module.exports = Duplex;
		
		/*<replacement>*/
		var processNextTick = __webpack_require__(15);
		/*</replacement>*/
		
		/*<replacement>*/
		var util = __webpack_require__(18);
		util.inherits = __webpack_require__(12);
		/*</replacement>*/
		
		var Readable = __webpack_require__(14);
		var Writable = __webpack_require__(22);
		
		util.inherits(Duplex, Readable);
		
		var keys = objectKeys(Writable.prototype);
		for (var v = 0; v < keys.length; v++) {
		  var method = keys[v];
		  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
		}
		
		function Duplex(options) {
		  if (!(this instanceof Duplex)) return new Duplex(options);
		
		  Readable.call(this, options);
		  Writable.call(this, options);
		
		  if (options && options.readable === false) this.readable = false;
		
		  if (options && options.writable === false) this.writable = false;
		
		  this.allowHalfOpen = true;
		  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
		
		  this.once('end', onend);
		}
		
		// the no-half-open enforcer
		function onend() {
		  // if we allow half-open state, or if the writable side ended,
		  // then we're ok.
		  if (this.allowHalfOpen || this._writableState.ended) return;
		
		  // no more data can be written.
		  // But allow more writes to happen in this tick.
		  processNextTick(onEndNT, this);
		}
		
		function onEndNT(self) {
		  self.end();
		}

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {// A bit simpler than readable streams.
		
		module.exports = Writable;
		
		/*<replacement>*/
		var processNextTick = __webpack_require__(15);
		/*</replacement>*/
		
		/*<replacement>*/
		var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
		/*</replacement>*/
		
		/*<replacement>*/
		var Duplex;
		/*</replacement>*/
		
		Writable.WritableState = WritableState;
		
		/*<replacement>*/
		var util = __webpack_require__(18);
		util.inherits = __webpack_require__(12);
		/*</replacement>*/
		
		/*<replacement>*/
		var internalUtil = {
		  deprecate: __webpack_require__(23)
		};
		/*</replacement>*/
		
		/*<replacement>*/
		var Stream;
		(function () {
		  try {
		    Stream = __webpack_require__(11);
		  } catch (_) {} finally {
		    if (!Stream) Stream = __webpack_require__(8).EventEmitter;
		  }
		})();
		/*</replacement>*/
		
		var Buffer = __webpack_require__(2).Buffer;
		/*<replacement>*/
		var bufferShim = __webpack_require__(17);
		/*</replacement>*/
		
		util.inherits(Writable, Stream);
		
		function nop() {}
		
		function WriteReq(chunk, encoding, cb) {
		  this.chunk = chunk;
		  this.encoding = encoding;
		  this.callback = cb;
		  this.next = null;
		}
		
		function WritableState(options, stream) {
		  Duplex = Duplex || __webpack_require__(21);
		
		  options = options || {};
		
		  // object stream flag to indicate whether or not this stream
		  // contains buffers or objects.
		  this.objectMode = !!options.objectMode;
		
		  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
		
		  // the point at which write() starts returning false
		  // Note: 0 is a valid value, means that we always return false if
		  // the entire buffer is not flushed immediately on write()
		  var hwm = options.highWaterMark;
		  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
		  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
		
		  // cast to ints.
		  this.highWaterMark = ~~this.highWaterMark;
		
		  // drain event flag.
		  this.needDrain = false;
		  // at the start of calling end()
		  this.ending = false;
		  // when end() has been called, and returned
		  this.ended = false;
		  // when 'finish' is emitted
		  this.finished = false;
		
		  // should we decode strings into buffers before passing to _write?
		  // this is here so that some node-core streams can optimize string
		  // handling at a lower level.
		  var noDecode = options.decodeStrings === false;
		  this.decodeStrings = !noDecode;
		
		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';
		
		  // not an actual buffer we keep track of, but a measurement
		  // of how much we're waiting to get pushed to some underlying
		  // socket or file.
		  this.length = 0;
		
		  // a flag to see when we're in the middle of a write.
		  this.writing = false;
		
		  // when true all writes will be buffered until .uncork() call
		  this.corked = 0;
		
		  // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.
		  this.sync = true;
		
		  // a flag to know if we're processing previously buffered items, which
		  // may call the _write() callback in the same tick, so that we don't
		  // end up in an overlapped onwrite situation.
		  this.bufferProcessing = false;
		
		  // the callback that's passed to _write(chunk,cb)
		  this.onwrite = function (er) {
		    onwrite(stream, er);
		  };
		
		  // the callback that the user supplies to write(chunk,encoding,cb)
		  this.writecb = null;
		
		  // the amount that is being written when _write is called.
		  this.writelen = 0;
		
		  this.bufferedRequest = null;
		  this.lastBufferedRequest = null;
		
		  // number of pending user-supplied write callbacks
		  // this must be 0 before 'finish' can be emitted
		  this.pendingcb = 0;
		
		  // emit prefinish if the only thing we're waiting for is _write cbs
		  // This is relevant for synchronous Transform streams
		  this.prefinished = false;
		
		  // True if the error was already emitted and should not be thrown again
		  this.errorEmitted = false;
		
		  // count buffered requests
		  this.bufferedRequestCount = 0;
		
		  // allocate the first CorkedRequest, there is always
		  // one allocated and free to use, and we maintain at most two
		  this.corkedRequestsFree = new CorkedRequest(this);
		}
		
		WritableState.prototype.getBuffer = function getBuffer() {
		  var current = this.bufferedRequest;
		  var out = [];
		  while (current) {
		    out.push(current);
		    current = current.next;
		  }
		  return out;
		};
		
		(function () {
		  try {
		    Object.defineProperty(WritableState.prototype, 'buffer', {
		      get: internalUtil.deprecate(function () {
		        return this.getBuffer();
		      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
		    });
		  } catch (_) {}
		})();
		
		// Test _writableState for inheritance to account for Duplex streams,
		// whose prototype chain only points to Readable.
		var realHasInstance;
		if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
		  realHasInstance = Function.prototype[Symbol.hasInstance];
		  Object.defineProperty(Writable, Symbol.hasInstance, {
		    value: function (object) {
		      if (realHasInstance.call(this, object)) return true;
		
		      return object && object._writableState instanceof WritableState;
		    }
		  });
		} else {
		  realHasInstance = function (object) {
		    return object instanceof this;
		  };
		}
		
		function Writable(options) {
		  Duplex = Duplex || __webpack_require__(21);
		
		  // Writable ctor is applied to Duplexes, too.
		  // `realHasInstance` is necessary because using plain `instanceof`
		  // would return false, as no `_writableState` property is attached.
		
		  // Trying to use the custom `instanceof` for Writable here will also break the
		  // Node.js LazyTransform implementation, which has a non-trivial getter for
		  // `_writableState` that would lead to infinite recursion.
		  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
		    return new Writable(options);
		  }
		
		  this._writableState = new WritableState(options, this);
		
		  // legacy.
		  this.writable = true;
		
		  if (options) {
		    if (typeof options.write === 'function') this._write = options.write;
		
		    if (typeof options.writev === 'function') this._writev = options.writev;
		  }
		
		  Stream.call(this);
		}
		
		// Otherwise people can pipe Writable streams, which is just wrong.
		Writable.prototype.pipe = function () {
		  this.emit('error', new Error('Cannot pipe, not readable'));
		};
		
		function writeAfterEnd(stream, cb) {
		  var er = new Error('write after end');
		  // TODO: defer error events consistently everywhere, not just the cb
		  stream.emit('error', er);
		  processNextTick(cb, er);
		}
		
		// Checks that a user-supplied chunk is valid, especially for the particular
		// mode the stream is in. Currently this means that `null` is never accepted
		// and undefined/non-string values are only allowed in object mode.
		function validChunk(stream, state, chunk, cb) {
		  var valid = true;
		  var er = false;
		
		  if (chunk === null) {
		    er = new TypeError('May not write null values to stream');
		  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		    er = new TypeError('Invalid non-string/buffer chunk');
		  }
		  if (er) {
		    stream.emit('error', er);
		    processNextTick(cb, er);
		    valid = false;
		  }
		  return valid;
		}
		
		Writable.prototype.write = function (chunk, encoding, cb) {
		  var state = this._writableState;
		  var ret = false;
		  var isBuf = Buffer.isBuffer(chunk);
		
		  if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }
		
		  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
		
		  if (typeof cb !== 'function') cb = nop;
		
		  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
		    state.pendingcb++;
		    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
		  }
		
		  return ret;
		};
		
		Writable.prototype.cork = function () {
		  var state = this._writableState;
		
		  state.corked++;
		};
		
		Writable.prototype.uncork = function () {
		  var state = this._writableState;
		
		  if (state.corked) {
		    state.corked--;
		
		    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
		  }
		};
		
		Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		  // node::ParseEncoding() requires lower case.
		  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
		  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
		  this._writableState.defaultEncoding = encoding;
		  return this;
		};
		
		function decodeChunk(state, chunk, encoding) {
		  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
		    chunk = bufferShim.from(chunk, encoding);
		  }
		  return chunk;
		}
		
		// if we're already writing something, then just put this
		// in the queue, and wait our turn.  Otherwise, call _write
		// If we return false, then we need a drain event, so set that flag.
		function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
		  if (!isBuf) {
		    chunk = decodeChunk(state, chunk, encoding);
		    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
		  }
		  var len = state.objectMode ? 1 : chunk.length;
		
		  state.length += len;
		
		  var ret = state.length < state.highWaterMark;
		  // we must ensure that previous needDrain will not be reset to false.
		  if (!ret) state.needDrain = true;
		
		  if (state.writing || state.corked) {
		    var last = state.lastBufferedRequest;
		    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
		    if (last) {
		      last.next = state.lastBufferedRequest;
		    } else {
		      state.bufferedRequest = state.lastBufferedRequest;
		    }
		    state.bufferedRequestCount += 1;
		  } else {
		    doWrite(stream, state, false, len, chunk, encoding, cb);
		  }
		
		  return ret;
		}
		
		function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		  state.writelen = len;
		  state.writecb = cb;
		  state.writing = true;
		  state.sync = true;
		  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
		  state.sync = false;
		}
		
		function onwriteError(stream, state, sync, er, cb) {
		  --state.pendingcb;
		  if (sync) processNextTick(cb, er);else cb(er);
		
		  stream._writableState.errorEmitted = true;
		  stream.emit('error', er);
		}
		
		function onwriteStateUpdate(state) {
		  state.writing = false;
		  state.writecb = null;
		  state.length -= state.writelen;
		  state.writelen = 0;
		}
		
		function onwrite(stream, er) {
		  var state = stream._writableState;
		  var sync = state.sync;
		  var cb = state.writecb;
		
		  onwriteStateUpdate(state);
		
		  if (er) onwriteError(stream, state, sync, er, cb);else {
		    // Check if we're actually ready to finish, but don't emit yet
		    var finished = needFinish(state);
		
		    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
		      clearBuffer(stream, state);
		    }
		
		    if (sync) {
		      /*<replacement>*/
		      asyncWrite(afterWrite, stream, state, finished, cb);
		      /*</replacement>*/
		    } else {
		      afterWrite(stream, state, finished, cb);
		    }
		  }
		}
		
		function afterWrite(stream, state, finished, cb) {
		  if (!finished) onwriteDrain(stream, state);
		  state.pendingcb--;
		  cb();
		  finishMaybe(stream, state);
		}
		
		// Must force callback to be called on nextTick, so that we don't
		// emit 'drain' before the write() consumer gets the 'false' return
		// value, and has a chance to attach a 'drain' listener.
		function onwriteDrain(stream, state) {
		  if (state.length === 0 && state.needDrain) {
		    state.needDrain = false;
		    stream.emit('drain');
		  }
		}
		
		// if there's something in the buffer waiting, then process it
		function clearBuffer(stream, state) {
		  state.bufferProcessing = true;
		  var entry = state.bufferedRequest;
		
		  if (stream._writev && entry && entry.next) {
		    // Fast case, write everything using _writev()
		    var l = state.bufferedRequestCount;
		    var buffer = new Array(l);
		    var holder = state.corkedRequestsFree;
		    holder.entry = entry;
		
		    var count = 0;
		    while (entry) {
		      buffer[count] = entry;
		      entry = entry.next;
		      count += 1;
		    }
		
		    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
		
		    // doWrite is almost always async, defer these to save a bit of time
		    // as the hot path ends with doWrite
		    state.pendingcb++;
		    state.lastBufferedRequest = null;
		    if (holder.next) {
		      state.corkedRequestsFree = holder.next;
		      holder.next = null;
		    } else {
		      state.corkedRequestsFree = new CorkedRequest(state);
		    }
		  } else {
		    // Slow case, write chunks one-by-one
		    while (entry) {
		      var chunk = entry.chunk;
		      var encoding = entry.encoding;
		      var cb = entry.callback;
		      var len = state.objectMode ? 1 : chunk.length;
		
		      doWrite(stream, state, false, len, chunk, encoding, cb);
		      entry = entry.next;
		      // if we didn't call the onwrite immediately, then
		      // it means that we need to wait until it does.
		      // also, that means that the chunk and cb are currently
		      // being processed, so move the buffer counter past them.
		      if (state.writing) {
		        break;
		      }
		    }
		
		    if (entry === null) state.lastBufferedRequest = null;
		  }
		
		  state.bufferedRequestCount = 0;
		  state.bufferedRequest = entry;
		  state.bufferProcessing = false;
		}
		
		Writable.prototype._write = function (chunk, encoding, cb) {
		  cb(new Error('_write() is not implemented'));
		};
		
		Writable.prototype._writev = null;
		
		Writable.prototype.end = function (chunk, encoding, cb) {
		  var state = this._writableState;
		
		  if (typeof chunk === 'function') {
		    cb = chunk;
		    chunk = null;
		    encoding = null;
		  } else if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }
		
		  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
		
		  // .end() fully uncorks
		  if (state.corked) {
		    state.corked = 1;
		    this.uncork();
		  }
		
		  // ignore unnecessary end() calls.
		  if (!state.ending && !state.finished) endWritable(this, state, cb);
		};
		
		function needFinish(state) {
		  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
		}
		
		function prefinish(stream, state) {
		  if (!state.prefinished) {
		    state.prefinished = true;
		    stream.emit('prefinish');
		  }
		}
		
		function finishMaybe(stream, state) {
		  var need = needFinish(state);
		  if (need) {
		    if (state.pendingcb === 0) {
		      prefinish(stream, state);
		      state.finished = true;
		      stream.emit('finish');
		    } else {
		      prefinish(stream, state);
		    }
		  }
		  return need;
		}
		
		function endWritable(stream, state, cb) {
		  state.ending = true;
		  finishMaybe(stream, state);
		  if (cb) {
		    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
		  }
		  state.ended = true;
		  stream.writable = false;
		}
		
		// It seems a linked list but it is not
		// there will be only 2 of these for each stream
		function CorkedRequest(state) {
		  var _this = this;
		
		  this.next = null;
		  this.entry = null;
		  this.finish = function (err) {
		    var entry = _this.entry;
		    _this.entry = null;
		    while (entry) {
		      var cb = entry.callback;
		      state.pendingcb--;
		      cb(err);
		      entry = entry.next;
		    }
		    if (state.corkedRequestsFree) {
		      state.corkedRequestsFree.next = _this;
		    } else {
		      state.corkedRequestsFree = _this;
		    }
		  };
		}
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)));

	/***/ },
	/* 23 */
	/***/ function(module, exports) {

		/* WEBPACK VAR INJECTION */(function(global) {
		/**
		 * Module exports.
		 */
		
		module.exports = deprecate;
		
		/**
		 * Mark that a method should not be used.
		 * Returns a modified function which warns once by default.
		 *
		 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
		 *
		 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
		 * will throw an Error when invoked.
		 *
		 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
		 * will invoke `console.trace()` instead of `console.error()`.
		 *
		 * @param {Function} fn - the function to deprecate
		 * @param {String} msg - the string to print to the console when `fn` is invoked
		 * @returns {Function} a new "deprecated" version of `fn`
		 * @api public
		 */
		
		function deprecate (fn, msg) {
		  if (config('noDeprecation')) {
		    return fn;
		  }
		
		  var warned = false;
		  function deprecated() {
		    if (!warned) {
		      if (config('throwDeprecation')) {
		        throw new Error(msg);
		      } else if (config('traceDeprecation')) {
		        console.trace(msg);
		      } else {
		        console.warn(msg);
		      }
		      warned = true;
		    }
		    return fn.apply(this, arguments);
		  }
		
		  return deprecated;
		}
		
		/**
		 * Checks `localStorage` for boolean values for the given `name`.
		 *
		 * @param {String} name
		 * @returns {Boolean}
		 * @api private
		 */
		
		function config (name) {
		  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
		  try {
		    if (!global.localStorage) return false;
		  } catch (_) {
		    return false;
		  }
		  var val = global.localStorage[name];
		  if (null == val) return false;
		  return String(val).toLowerCase() === 'true';
		}
		
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())));

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		var Buffer = __webpack_require__(2).Buffer;
		
		var isBufferEncoding = Buffer.isEncoding
		  || function(encoding) {
		       switch (encoding && encoding.toLowerCase()) {
		         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
		         default: return false;
		       }
		     };
		
		
		function assertEncoding(encoding) {
		  if (encoding && !isBufferEncoding(encoding)) {
		    throw new Error('Unknown encoding: ' + encoding);
		  }
		}
		
		// StringDecoder provides an interface for efficiently splitting a series of
		// buffers into a series of JS strings without breaking apart multi-byte
		// characters. CESU-8 is handled as part of the UTF-8 encoding.
		//
		// @TODO Handling all encodings inside a single object makes it very difficult
		// to reason about this code, so it should be split up in the future.
		// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
		// points as used by CESU-8.
		var StringDecoder = exports.StringDecoder = function(encoding) {
		  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
		  assertEncoding(encoding);
		  switch (this.encoding) {
		    case 'utf8':
		      // CESU-8 represents each of Surrogate Pair by 3-bytes
		      this.surrogateSize = 3;
		      break;
		    case 'ucs2':
		    case 'utf16le':
		      // UTF-16 represents each of Surrogate Pair by 2-bytes
		      this.surrogateSize = 2;
		      this.detectIncompleteChar = utf16DetectIncompleteChar;
		      break;
		    case 'base64':
		      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
		      this.surrogateSize = 3;
		      this.detectIncompleteChar = base64DetectIncompleteChar;
		      break;
		    default:
		      this.write = passThroughWrite;
		      return;
		  }
		
		  // Enough space to store all bytes of a single character. UTF-8 needs 4
		  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
		  this.charBuffer = new Buffer(6);
		  // Number of bytes received for the current incomplete multi-byte character.
		  this.charReceived = 0;
		  // Number of bytes expected for the current incomplete multi-byte character.
		  this.charLength = 0;
		};
		
		
		// write decodes the given buffer and returns it as JS string that is
		// guaranteed to not contain any partial multi-byte characters. Any partial
		// character found at the end of the buffer is buffered up, and will be
		// returned when calling write again with the remaining bytes.
		//
		// Note: Converting a Buffer containing an orphan surrogate to a String
		// currently works, but converting a String to a Buffer (via `new Buffer`, or
		// Buffer#write) will replace incomplete surrogates with the unicode
		// replacement character. See https://codereview.chromium.org/121173009/ .
		StringDecoder.prototype.write = function(buffer) {
		  var charStr = '';
		  // if our last write ended with an incomplete multibyte character
		  while (this.charLength) {
		    // determine how many remaining bytes this buffer has to offer for this char
		    var available = (buffer.length >= this.charLength - this.charReceived) ?
		        this.charLength - this.charReceived :
		        buffer.length;
		
		    // add the new bytes to the char buffer
		    buffer.copy(this.charBuffer, this.charReceived, 0, available);
		    this.charReceived += available;
		
		    if (this.charReceived < this.charLength) {
		      // still not enough chars in this buffer? wait for more ...
		      return '';
		    }
		
		    // remove bytes belonging to the current character from the buffer
		    buffer = buffer.slice(available, buffer.length);
		
		    // get the character that was split
		    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
		
		    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		    var charCode = charStr.charCodeAt(charStr.length - 1);
		    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		      this.charLength += this.surrogateSize;
		      charStr = '';
		      continue;
		    }
		    this.charReceived = this.charLength = 0;
		
		    // if there are no more bytes in this buffer, just emit our char
		    if (buffer.length === 0) {
		      return charStr;
		    }
		    break;
		  }
		
		  // determine and set charLength / charReceived
		  this.detectIncompleteChar(buffer);
		
		  var end = buffer.length;
		  if (this.charLength) {
		    // buffer the incomplete character bytes we got
		    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
		    end -= this.charReceived;
		  }
		
		  charStr += buffer.toString(this.encoding, 0, end);
		
		  var end = charStr.length - 1;
		  var charCode = charStr.charCodeAt(end);
		  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		    var size = this.surrogateSize;
		    this.charLength += size;
		    this.charReceived += size;
		    this.charBuffer.copy(this.charBuffer, size, 0, size);
		    buffer.copy(this.charBuffer, 0, 0, size);
		    return charStr.substring(0, end);
		  }
		
		  // or just emit the charStr
		  return charStr;
		};
		
		// detectIncompleteChar determines if there is an incomplete UTF-8 character at
		// the end of the given buffer. If so, it sets this.charLength to the byte
		// length that character, and sets this.charReceived to the number of bytes
		// that are available for this character.
		StringDecoder.prototype.detectIncompleteChar = function(buffer) {
		  // determine how many bytes we have to check at the end of this buffer
		  var i = (buffer.length >= 3) ? 3 : buffer.length;
		
		  // Figure out if one of the last i bytes of our buffer announces an
		  // incomplete char.
		  for (; i > 0; i--) {
		    var c = buffer[buffer.length - i];
		
		    // See http://en.wikipedia.org/wiki/UTF-8#Description
		
		    // 110XXXXX
		    if (i == 1 && c >> 5 == 0x06) {
		      this.charLength = 2;
		      break;
		    }
		
		    // 1110XXXX
		    if (i <= 2 && c >> 4 == 0x0E) {
		      this.charLength = 3;
		      break;
		    }
		
		    // 11110XXX
		    if (i <= 3 && c >> 3 == 0x1E) {
		      this.charLength = 4;
		      break;
		    }
		  }
		  this.charReceived = i;
		};
		
		StringDecoder.prototype.end = function(buffer) {
		  var res = '';
		  if (buffer && buffer.length)
		    res = this.write(buffer);
		
		  if (this.charReceived) {
		    var cr = this.charReceived;
		    var buf = this.charBuffer;
		    var enc = this.encoding;
		    res += buf.slice(0, cr).toString(enc);
		  }
		
		  return res;
		};
		
		function passThroughWrite(buffer) {
		  return buffer.toString(this.encoding);
		}
		
		function utf16DetectIncompleteChar(buffer) {
		  this.charReceived = buffer.length % 2;
		  this.charLength = this.charReceived ? 2 : 0;
		}
		
		function base64DetectIncompleteChar(buffer) {
		  this.charReceived = buffer.length % 3;
		  this.charLength = this.charReceived ? 3 : 0;
		}


	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
		
		module.exports = Transform;
		
		var Duplex = __webpack_require__(21);
		
		/*<replacement>*/
		var util = __webpack_require__(18);
		util.inherits = __webpack_require__(12);
		/*</replacement>*/
		
		util.inherits(Transform, Duplex);
		
		function TransformState(stream) {
		  this.afterTransform = function (er, data) {
		    return afterTransform(stream, er, data);
		  };
		
		  this.needTransform = false;
		  this.transforming = false;
		  this.writecb = null;
		  this.writechunk = null;
		  this.writeencoding = null;
		}
		
		function afterTransform(stream, er, data) {
		  var ts = stream._transformState;
		  ts.transforming = false;
		
		  var cb = ts.writecb;
		
		  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
		
		  ts.writechunk = null;
		  ts.writecb = null;
		
		  if (data !== null && data !== undefined) stream.push(data);
		
		  cb(er);
		
		  var rs = stream._readableState;
		  rs.reading = false;
		  if (rs.needReadable || rs.length < rs.highWaterMark) {
		    stream._read(rs.highWaterMark);
		  }
		}
		
		function Transform(options) {
		  if (!(this instanceof Transform)) return new Transform(options);
		
		  Duplex.call(this, options);
		
		  this._transformState = new TransformState(this);
		
		  var stream = this;
		
		  // start out asking for a readable event once data is transformed.
		  this._readableState.needReadable = true;
		
		  // we have implemented the _read method, and done the other things
		  // that Readable wants before the first _read call, so unset the
		  // sync guard flag.
		  this._readableState.sync = false;
		
		  if (options) {
		    if (typeof options.transform === 'function') this._transform = options.transform;
		
		    if (typeof options.flush === 'function') this._flush = options.flush;
		  }
		
		  // When the writable side finishes, then flush out anything remaining.
		  this.once('prefinish', function () {
		    if (typeof this._flush === 'function') this._flush(function (er, data) {
		      done(stream, er, data);
		    });else done(stream);
		  });
		}
		
		Transform.prototype.push = function (chunk, encoding) {
		  this._transformState.needTransform = false;
		  return Duplex.prototype.push.call(this, chunk, encoding);
		};
		
		// This is the part where you do stuff!
		// override this function in implementation classes.
		// 'chunk' is an input chunk.
		//
		// Call `push(newChunk)` to pass along transformed output
		// to the readable side.  You may call 'push' zero or more times.
		//
		// Call `cb(err)` when you are done with this chunk.  If you pass
		// an error, then that'll put the hurt on the whole operation.  If you
		// never call cb(), then you'll never get another chunk.
		Transform.prototype._transform = function (chunk, encoding, cb) {
		  throw new Error('_transform() is not implemented');
		};
		
		Transform.prototype._write = function (chunk, encoding, cb) {
		  var ts = this._transformState;
		  ts.writecb = cb;
		  ts.writechunk = chunk;
		  ts.writeencoding = encoding;
		  if (!ts.transforming) {
		    var rs = this._readableState;
		    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
		  }
		};
		
		// Doesn't matter what the args are here.
		// _transform does all the work.
		// That we got here means that the readable side wants more data.
		Transform.prototype._read = function (n) {
		  var ts = this._transformState;
		
		  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
		    ts.transforming = true;
		    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
		  } else {
		    // mark that we need a transform, so that any data that comes in
		    // will get processed, now that we've asked for it.
		    ts.needTransform = true;
		  }
		};
		
		function done(stream, er, data) {
		  if (er) return stream.emit('error', er);
		
		  if (data !== null && data !== undefined) stream.push(data);
		
		  // if there's nothing in the write buffer, then that means
		  // that nothing more will ever be provided
		  var ws = stream._writableState;
		  var ts = stream._transformState;
		
		  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
		
		  if (ts.transforming) throw new Error('Calling transform done when still transforming');
		
		  return stream.push(null);
		}

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
		
		module.exports = PassThrough;
		
		var Transform = __webpack_require__(25);
		
		/*<replacement>*/
		var util = __webpack_require__(18);
		util.inherits = __webpack_require__(12);
		/*</replacement>*/
		
		util.inherits(PassThrough, Transform);
		
		function PassThrough(options) {
		  if (!(this instanceof PassThrough)) return new PassThrough(options);
		
		  Transform.call(this, options);
		}
		
		PassThrough.prototype._transform = function (chunk, encoding, cb) {
		  cb(null, chunk);
		};

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(22);


	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(21);


	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(25);


	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(26);


	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
		
		
		var zlib_inflate = __webpack_require__(32);
		var utils        = __webpack_require__(33);
		var strings      = __webpack_require__(38);
		var c            = __webpack_require__(39);
		var msg          = __webpack_require__(40);
		var ZStream      = __webpack_require__(41);
		var GZheader     = __webpack_require__(42);
		
		var toString = Object.prototype.toString;
		
		/**
		 * class Inflate
		 *
		 * Generic JS-style wrapper for zlib calls. If you don't need
		 * streaming behaviour - use more simple functions: [[inflate]]
		 * and [[inflateRaw]].
		 **/
		
		/* internal
		 * inflate.chunks -> Array
		 *
		 * Chunks of output data, if [[Inflate#onData]] not overriden.
		 **/
		
		/**
		 * Inflate.result -> Uint8Array|Array|String
		 *
		 * Uncompressed result, generated by default [[Inflate#onData]]
		 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
		 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
		 * push a chunk with explicit flush (call [[Inflate#push]] with
		 * `Z_SYNC_FLUSH` param).
		 **/
		
		/**
		 * Inflate.err -> Number
		 *
		 * Error code after inflate finished. 0 (Z_OK) on success.
		 * Should be checked if broken data possible.
		 **/
		
		/**
		 * Inflate.msg -> String
		 *
		 * Error message, if [[Inflate.err]] != 0
		 **/
		
		
		/**
		 * new Inflate(options)
		 * - options (Object): zlib inflate options.
		 *
		 * Creates new inflator instance with specified params. Throws exception
		 * on bad params. Supported options:
		 *
		 * - `windowBits`
		 * - `dictionary`
		 *
		 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
		 * for more information on these.
		 *
		 * Additional options, for internal needs:
		 *
		 * - `chunkSize` - size of generated data chunks (16K by default)
		 * - `raw` (Boolean) - do raw inflate
		 * - `to` (String) - if equal to 'string', then result will be converted
		 *   from utf8 to utf16 (javascript) string. When string output requested,
		 *   chunk length can differ from `chunkSize`, depending on content.
		 *
		 * By default, when no options set, autodetect deflate/gzip data format via
		 * wrapper header.
		 *
		 * ##### Example:
		 *
		 * ```javascript
		 * var pako = require('pako')
		 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
		 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
		 *
		 * var inflate = new pako.Inflate({ level: 3});
		 *
		 * inflate.push(chunk1, false);
		 * inflate.push(chunk2, true);  // true -> last chunk
		 *
		 * if (inflate.err) { throw new Error(inflate.err); }
		 *
		 * console.log(inflate.result);
		 * ```
		 **/
		function Inflate(options) {
		  if (!(this instanceof Inflate)) return new Inflate(options);
		
		  this.options = utils.assign({
		    chunkSize: 16384,
		    windowBits: 0,
		    to: ''
		  }, options || {});
		
		  var opt = this.options;
		
		  // Force window size for `raw` data, if not set directly,
		  // because we have no header for autodetect.
		  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
		    opt.windowBits = -opt.windowBits;
		    if (opt.windowBits === 0) { opt.windowBits = -15; }
		  }
		
		  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
		  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
		      !(options && options.windowBits)) {
		    opt.windowBits += 32;
		  }
		
		  // Gzip header has no info about windows size, we can do autodetect only
		  // for deflate. So, if window size not set, force it to max when gzip possible
		  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
		    // bit 3 (16) -> gzipped data
		    // bit 4 (32) -> autodetect gzip/deflate
		    if ((opt.windowBits & 15) === 0) {
		      opt.windowBits |= 15;
		    }
		  }
		
		  this.err    = 0;      // error code, if happens (0 = Z_OK)
		  this.msg    = '';     // error message
		  this.ended  = false;  // used to avoid multiple onEnd() calls
		  this.chunks = [];     // chunks of compressed data
		
		  this.strm   = new ZStream();
		  this.strm.avail_out = 0;
		
		  var status  = zlib_inflate.inflateInit2(
		    this.strm,
		    opt.windowBits
		  );
		
		  if (status !== c.Z_OK) {
		    throw new Error(msg[status]);
		  }
		
		  this.header = new GZheader();
		
		  zlib_inflate.inflateGetHeader(this.strm, this.header);
		}
		
		/**
		 * Inflate#push(data[, mode]) -> Boolean
		 * - data (Uint8Array|Array|ArrayBuffer|String): input data
		 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
		 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
		 *
		 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
		 * new output chunks. Returns `true` on success. The last data block must have
		 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
		 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
		 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
		 *
		 * On fail call [[Inflate#onEnd]] with error code and return false.
		 *
		 * We strongly recommend to use `Uint8Array` on input for best speed (output
		 * format is detected automatically). Also, don't skip last param and always
		 * use the same type in your code (boolean or number). That will improve JS speed.
		 *
		 * For regular `Array`-s make sure all elements are [0..255].
		 *
		 * ##### Example
		 *
		 * ```javascript
		 * push(chunk, false); // push one of data chunks
		 * ...
		 * push(chunk, true);  // push last chunk
		 * ```
		 **/
		Inflate.prototype.push = function (data, mode) {
		  var strm = this.strm;
		  var chunkSize = this.options.chunkSize;
		  var dictionary = this.options.dictionary;
		  var status, _mode;
		  var next_out_utf8, tail, utf8str;
		  var dict;
		
		  // Flag to properly process Z_BUF_ERROR on testing inflate call
		  // when we check that all output data was flushed.
		  var allowBufError = false;
		
		  if (this.ended) { return false; }
		  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);
		
		  // Convert data if needed
		  if (typeof data === 'string') {
		    // Only binary strings can be decompressed on practice
		    strm.input = strings.binstring2buf(data);
		  } else if (toString.call(data) === '[object ArrayBuffer]') {
		    strm.input = new Uint8Array(data);
		  } else {
		    strm.input = data;
		  }
		
		  strm.next_in = 0;
		  strm.avail_in = strm.input.length;
		
		  do {
		    if (strm.avail_out === 0) {
		      strm.output = new utils.Buf8(chunkSize);
		      strm.next_out = 0;
		      strm.avail_out = chunkSize;
		    }
		
		    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */
		
		    if (status === c.Z_NEED_DICT && dictionary) {
		      // Convert data if needed
		      if (typeof dictionary === 'string') {
		        dict = strings.string2buf(dictionary);
		      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
		        dict = new Uint8Array(dictionary);
		      } else {
		        dict = dictionary;
		      }
		
		      status = zlib_inflate.inflateSetDictionary(this.strm, dict);
		
		    }
		
		    if (status === c.Z_BUF_ERROR && allowBufError === true) {
		      status = c.Z_OK;
		      allowBufError = false;
		    }
		
		    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
		      this.onEnd(status);
		      this.ended = true;
		      return false;
		    }
		
		    if (strm.next_out) {
		      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {
		
		        if (this.options.to === 'string') {
		
		          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
		
		          tail = strm.next_out - next_out_utf8;
		          utf8str = strings.buf2string(strm.output, next_out_utf8);
		
		          // move tail
		          strm.next_out = tail;
		          strm.avail_out = chunkSize - tail;
		          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }
		
		          this.onData(utf8str);
		
		        } else {
		          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
		        }
		      }
		    }
		
		    // When no more input data, we should check that internal inflate buffers
		    // are flushed. The only way to do it when avail_out = 0 - run one more
		    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
		    // Here we set flag to process this error properly.
		    //
		    // NOTE. Deflate does not return error in this case and does not needs such
		    // logic.
		    if (strm.avail_in === 0 && strm.avail_out === 0) {
		      allowBufError = true;
		    }
		
		  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
		
		  if (status === c.Z_STREAM_END) {
		    _mode = c.Z_FINISH;
		  }
		
		  // Finalize on the last chunk.
		  if (_mode === c.Z_FINISH) {
		    status = zlib_inflate.inflateEnd(this.strm);
		    this.onEnd(status);
		    this.ended = true;
		    return status === c.Z_OK;
		  }
		
		  // callback interim results if Z_SYNC_FLUSH.
		  if (_mode === c.Z_SYNC_FLUSH) {
		    this.onEnd(c.Z_OK);
		    strm.avail_out = 0;
		    return true;
		  }
		
		  return true;
		};
		
		
		/**
		 * Inflate#onData(chunk) -> Void
		 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
		 *   on js engine support. When string output requested, each chunk
		 *   will be string.
		 *
		 * By default, stores data blocks in `chunks[]` property and glue
		 * those in `onEnd`. Override this handler, if you need another behaviour.
		 **/
		Inflate.prototype.onData = function (chunk) {
		  this.chunks.push(chunk);
		};
		
		
		/**
		 * Inflate#onEnd(status) -> Void
		 * - status (Number): inflate status. 0 (Z_OK) on success,
		 *   other if not.
		 *
		 * Called either after you tell inflate that the input stream is
		 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
		 * or if an error happened. By default - join collected chunks,
		 * free memory and fill `results` / `err` properties.
		 **/
		Inflate.prototype.onEnd = function (status) {
		  // On success - join
		  if (status === c.Z_OK) {
		    if (this.options.to === 'string') {
		      // Glue & convert here, until we teach pako to send
		      // utf8 alligned strings to onData
		      this.result = this.chunks.join('');
		    } else {
		      this.result = utils.flattenChunks(this.chunks);
		    }
		  }
		  this.chunks = [];
		  this.err = status;
		  this.msg = this.strm.msg;
		};
		
		
		/**
		 * inflate(data[, options]) -> Uint8Array|Array|String
		 * - data (Uint8Array|Array|String): input data to decompress.
		 * - options (Object): zlib inflate options.
		 *
		 * Decompress `data` with inflate/ungzip and `options`. Autodetect
		 * format via wrapper header by default. That's why we don't provide
		 * separate `ungzip` method.
		 *
		 * Supported options are:
		 *
		 * - windowBits
		 *
		 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
		 * for more information.
		 *
		 * Sugar (options):
		 *
		 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
		 *   negative windowBits implicitly.
		 * - `to` (String) - if equal to 'string', then result will be converted
		 *   from utf8 to utf16 (javascript) string. When string output requested,
		 *   chunk length can differ from `chunkSize`, depending on content.
		 *
		 *
		 * ##### Example:
		 *
		 * ```javascript
		 * var pako = require('pako')
		 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
		 *   , output;
		 *
		 * try {
		 *   output = pako.inflate(input);
		 * } catch (err)
		 *   console.log(err);
		 * }
		 * ```
		 **/
		function inflate(input, options) {
		  var inflator = new Inflate(options);
		
		  inflator.push(input, true);
		
		  // That will never happens, if you don't cheat with options :)
		  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }
		
		  return inflator.result;
		}
		
		
		/**
		 * inflateRaw(data[, options]) -> Uint8Array|Array|String
		 * - data (Uint8Array|Array|String): input data to decompress.
		 * - options (Object): zlib inflate options.
		 *
		 * The same as [[inflate]], but creates raw data, without wrapper
		 * (header and adler32 crc).
		 **/
		function inflateRaw(input, options) {
		  options = options || {};
		  options.raw = true;
		  return inflate(input, options);
		}
		
		
		/**
		 * ungzip(data[, options]) -> Uint8Array|Array|String
		 * - data (Uint8Array|Array|String): input data to decompress.
		 * - options (Object): zlib inflate options.
		 *
		 * Just shortcut to [[inflate]], because it autodetects format
		 * by header.content. Done for convenience.
		 **/
		
		
		exports.Inflate = Inflate;
		exports.inflate = inflate;
		exports.inflateRaw = inflateRaw;
		exports.ungzip  = inflate;


	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
		
		
		var utils         = __webpack_require__(33);
		var adler32       = __webpack_require__(34);
		var crc32         = __webpack_require__(35);
		var inflate_fast  = __webpack_require__(36);
		var inflate_table = __webpack_require__(37);
		
		var CODES = 0;
		var LENS = 1;
		var DISTS = 2;
		
		/* Public constants ==========================================================*/
		/* ===========================================================================*/
		
		
		/* Allowed flush values; see deflate() and inflate() below for details */
		//var Z_NO_FLUSH      = 0;
		//var Z_PARTIAL_FLUSH = 1;
		//var Z_SYNC_FLUSH    = 2;
		//var Z_FULL_FLUSH    = 3;
		var Z_FINISH        = 4;
		var Z_BLOCK         = 5;
		var Z_TREES         = 6;
		
		
		/* Return codes for the compression/decompression functions. Negative values
		 * are errors, positive values are used for special but normal events.
		 */
		var Z_OK            = 0;
		var Z_STREAM_END    = 1;
		var Z_NEED_DICT     = 2;
		//var Z_ERRNO         = -1;
		var Z_STREAM_ERROR  = -2;
		var Z_DATA_ERROR    = -3;
		var Z_MEM_ERROR     = -4;
		var Z_BUF_ERROR     = -5;
		//var Z_VERSION_ERROR = -6;
		
		/* The deflate compression method */
		var Z_DEFLATED  = 8;
		
		
		/* STATES ====================================================================*/
		/* ===========================================================================*/
		
		
		var    HEAD = 1;       /* i: waiting for magic header */
		var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
		var    TIME = 3;       /* i: waiting for modification time (gzip) */
		var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
		var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
		var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
		var    NAME = 7;       /* i: waiting for end of file name (gzip) */
		var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
		var    HCRC = 9;       /* i: waiting for header crc (gzip) */
		var    DICTID = 10;    /* i: waiting for dictionary check value */
		var    DICT = 11;      /* waiting for inflateSetDictionary() call */
		var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
		var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
		var        STORED = 14;    /* i: waiting for stored size (length and complement) */
		var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
		var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
		var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
		var        LENLENS = 18;   /* i: waiting for code length code lengths */
		var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
		var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
		var            LEN = 21;       /* i: waiting for length/lit/eob code */
		var            LENEXT = 22;    /* i: waiting for length extra bits */
		var            DIST = 23;      /* i: waiting for distance code */
		var            DISTEXT = 24;   /* i: waiting for distance extra bits */
		var            MATCH = 25;     /* o: waiting for output space to copy string */
		var            LIT = 26;       /* o: waiting for output space to write literal */
		var    CHECK = 27;     /* i: waiting for 32-bit check value */
		var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
		var    DONE = 29;      /* finished check, done -- remain here until reset */
		var    BAD = 30;       /* got a data error -- remain here until reset */
		var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
		var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
		
		/* ===========================================================================*/
		
		
		
		var ENOUGH_LENS = 852;
		var ENOUGH_DISTS = 592;
		//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
		
		var MAX_WBITS = 15;
		/* 32K LZ77 window */
		var DEF_WBITS = MAX_WBITS;
		
		
		function zswap32(q) {
		  return  (((q >>> 24) & 0xff) +
		          ((q >>> 8) & 0xff00) +
		          ((q & 0xff00) << 8) +
		          ((q & 0xff) << 24));
		}
		
		
		function InflateState() {
		  this.mode = 0;             /* current inflate mode */
		  this.last = false;          /* true if processing last block */
		  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
		  this.havedict = false;      /* true if dictionary provided */
		  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
		  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
		  this.check = 0;             /* protected copy of check value */
		  this.total = 0;             /* protected copy of output count */
		  // TODO: may be {}
		  this.head = null;           /* where to save gzip header information */
		
		  /* sliding window */
		  this.wbits = 0;             /* log base 2 of requested window size */
		  this.wsize = 0;             /* window size or zero if not using window */
		  this.whave = 0;             /* valid bytes in the window */
		  this.wnext = 0;             /* window write index */
		  this.window = null;         /* allocated sliding window, if needed */
		
		  /* bit accumulator */
		  this.hold = 0;              /* input bit accumulator */
		  this.bits = 0;              /* number of bits in "in" */
		
		  /* for string and stored block copying */
		  this.length = 0;            /* literal or length of data to copy */
		  this.offset = 0;            /* distance back to copy string from */
		
		  /* for table and code decoding */
		  this.extra = 0;             /* extra bits needed */
		
		  /* fixed and dynamic code tables */
		  this.lencode = null;          /* starting table for length/literal codes */
		  this.distcode = null;         /* starting table for distance codes */
		  this.lenbits = 0;           /* index bits for lencode */
		  this.distbits = 0;          /* index bits for distcode */
		
		  /* dynamic table building */
		  this.ncode = 0;             /* number of code length code lengths */
		  this.nlen = 0;              /* number of length code lengths */
		  this.ndist = 0;             /* number of distance code lengths */
		  this.have = 0;              /* number of code lengths in lens[] */
		  this.next = null;              /* next available space in codes[] */
		
		  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
		  this.work = new utils.Buf16(288); /* work area for code table building */
		
		  /*
		   because we don't have pointers in js, we use lencode and distcode directly
		   as buffers so we don't need codes
		  */
		  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
		  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
		  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
		  this.sane = 0;                   /* if false, allow invalid distance too far */
		  this.back = 0;                   /* bits back of last unprocessed length/lit */
		  this.was = 0;                    /* initial length of match */
		}
		
		function inflateResetKeep(strm) {
		  var state;
		
		  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
		  state = strm.state;
		  strm.total_in = strm.total_out = state.total = 0;
		  strm.msg = ''; /*Z_NULL*/
		  if (state.wrap) {       /* to support ill-conceived Java test suite */
		    strm.adler = state.wrap & 1;
		  }
		  state.mode = HEAD;
		  state.last = 0;
		  state.havedict = 0;
		  state.dmax = 32768;
		  state.head = null/*Z_NULL*/;
		  state.hold = 0;
		  state.bits = 0;
		  //state.lencode = state.distcode = state.next = state.codes;
		  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
		  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
		
		  state.sane = 1;
		  state.back = -1;
		  //Tracev((stderr, "inflate: reset\n"));
		  return Z_OK;
		}
		
		function inflateReset(strm) {
		  var state;
		
		  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
		  state = strm.state;
		  state.wsize = 0;
		  state.whave = 0;
		  state.wnext = 0;
		  return inflateResetKeep(strm);
		
		}
		
		function inflateReset2(strm, windowBits) {
		  var wrap;
		  var state;
		
		  /* get the state */
		  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
		  state = strm.state;
		
		  /* extract wrap request from windowBits parameter */
		  if (windowBits < 0) {
		    wrap = 0;
		    windowBits = -windowBits;
		  }
		  else {
		    wrap = (windowBits >> 4) + 1;
		    if (windowBits < 48) {
		      windowBits &= 15;
		    }
		  }
		
		  /* set number of window bits, free window if different */
		  if (windowBits && (windowBits < 8 || windowBits > 15)) {
		    return Z_STREAM_ERROR;
		  }
		  if (state.window !== null && state.wbits !== windowBits) {
		    state.window = null;
		  }
		
		  /* update state and reset the rest of it */
		  state.wrap = wrap;
		  state.wbits = windowBits;
		  return inflateReset(strm);
		}
		
		function inflateInit2(strm, windowBits) {
		  var ret;
		  var state;
		
		  if (!strm) { return Z_STREAM_ERROR; }
		  //strm.msg = Z_NULL;                 /* in case we return an error */
		
		  state = new InflateState();
		
		  //if (state === Z_NULL) return Z_MEM_ERROR;
		  //Tracev((stderr, "inflate: allocated\n"));
		  strm.state = state;
		  state.window = null/*Z_NULL*/;
		  ret = inflateReset2(strm, windowBits);
		  if (ret !== Z_OK) {
		    strm.state = null/*Z_NULL*/;
		  }
		  return ret;
		}
		
		function inflateInit(strm) {
		  return inflateInit2(strm, DEF_WBITS);
		}
		
		
		/*
		 Return state with length and distance decoding tables and index sizes set to
		 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
		 If BUILDFIXED is defined, then instead this routine builds the tables the
		 first time it's called, and returns those tables the first time and
		 thereafter.  This reduces the size of the code by about 2K bytes, in
		 exchange for a little execution time.  However, BUILDFIXED should not be
		 used for threaded applications, since the rewriting of the tables and virgin
		 may not be thread-safe.
		 */
		var virgin = true;
		
		var lenfix, distfix; // We have no pointers in JS, so keep tables separate
		
		function fixedtables(state) {
		  /* build fixed huffman tables if first call (may not be thread safe) */
		  if (virgin) {
		    var sym;
		
		    lenfix = new utils.Buf32(512);
		    distfix = new utils.Buf32(32);
		
		    /* literal/length table */
		    sym = 0;
		    while (sym < 144) { state.lens[sym++] = 8; }
		    while (sym < 256) { state.lens[sym++] = 9; }
		    while (sym < 280) { state.lens[sym++] = 7; }
		    while (sym < 288) { state.lens[sym++] = 8; }
		
		    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
		
		    /* distance table */
		    sym = 0;
		    while (sym < 32) { state.lens[sym++] = 5; }
		
		    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
		
		    /* do this just once */
		    virgin = false;
		  }
		
		  state.lencode = lenfix;
		  state.lenbits = 9;
		  state.distcode = distfix;
		  state.distbits = 5;
		}
		
		
		/*
		 Update the window with the last wsize (normally 32K) bytes written before
		 returning.  If window does not exist yet, create it.  This is only called
		 when a window is already in use, or when output has been written during this
		 inflate call, but the end of the deflate stream has not been reached yet.
		 It is also called to create a window for dictionary data when a dictionary
		 is loaded.
		
		 Providing output buffers larger than 32K to inflate() should provide a speed
		 advantage, since only the last 32K of output is copied to the sliding window
		 upon return from inflate(), and since all distances after the first 32K of
		 output will fall in the output data, making match copies simpler and faster.
		 The advantage may be dependent on the size of the processor's data caches.
		 */
		function updatewindow(strm, src, end, copy) {
		  var dist;
		  var state = strm.state;
		
		  /* if it hasn't been done already, allocate space for the window */
		  if (state.window === null) {
		    state.wsize = 1 << state.wbits;
		    state.wnext = 0;
		    state.whave = 0;
		
		    state.window = new utils.Buf8(state.wsize);
		  }
		
		  /* copy state->wsize or less output bytes into the circular window */
		  if (copy >= state.wsize) {
		    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
		    state.wnext = 0;
		    state.whave = state.wsize;
		  }
		  else {
		    dist = state.wsize - state.wnext;
		    if (dist > copy) {
		      dist = copy;
		    }
		    //zmemcpy(state->window + state->wnext, end - copy, dist);
		    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
		    copy -= dist;
		    if (copy) {
		      //zmemcpy(state->window, end - copy, copy);
		      utils.arraySet(state.window, src, end - copy, copy, 0);
		      state.wnext = copy;
		      state.whave = state.wsize;
		    }
		    else {
		      state.wnext += dist;
		      if (state.wnext === state.wsize) { state.wnext = 0; }
		      if (state.whave < state.wsize) { state.whave += dist; }
		    }
		  }
		  return 0;
		}
		
		function inflate(strm, flush) {
		  var state;
		  var input, output;          // input/output buffers
		  var next;                   /* next input INDEX */
		  var put;                    /* next output INDEX */
		  var have, left;             /* available input and output */
		  var hold;                   /* bit buffer */
		  var bits;                   /* bits in bit buffer */
		  var _in, _out;              /* save starting available input and output */
		  var copy;                   /* number of stored or match bytes to copy */
		  var from;                   /* where to copy match bytes from */
		  var from_source;
		  var here = 0;               /* current decoding table entry */
		  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
		  //var last;                   /* parent table entry */
		  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
		  var len;                    /* length to copy for repeats, bits to drop */
		  var ret;                    /* return code */
		  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
		  var opts;
		
		  var n; // temporary var for NEED_BITS
		
		  var order = /* permutation of code lengths */
		    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
		
		
		  if (!strm || !strm.state || !strm.output ||
		      (!strm.input && strm.avail_in !== 0)) {
		    return Z_STREAM_ERROR;
		  }
		
		  state = strm.state;
		  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */
		
		
		  //--- LOAD() ---
		  put = strm.next_out;
		  output = strm.output;
		  left = strm.avail_out;
		  next = strm.next_in;
		  input = strm.input;
		  have = strm.avail_in;
		  hold = state.hold;
		  bits = state.bits;
		  //---
		
		  _in = have;
		  _out = left;
		  ret = Z_OK;
		
		  inf_leave: // goto emulation
		  for (;;) {
		    switch (state.mode) {
		    case HEAD:
		      if (state.wrap === 0) {
		        state.mode = TYPEDO;
		        break;
		      }
		      //=== NEEDBITS(16);
		      while (bits < 16) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
		        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
		        //=== CRC2(state.check, hold);
		        hbuf[0] = hold & 0xff;
		        hbuf[1] = (hold >>> 8) & 0xff;
		        state.check = crc32(state.check, hbuf, 2, 0);
		        //===//
		
		        //=== INITBITS();
		        hold = 0;
		        bits = 0;
		        //===//
		        state.mode = FLAGS;
		        break;
		      }
		      state.flags = 0;           /* expect zlib header */
		      if (state.head) {
		        state.head.done = false;
		      }
		      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
		        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
		        strm.msg = 'incorrect header check';
		        state.mode = BAD;
		        break;
		      }
		      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
		        strm.msg = 'unknown compression method';
		        state.mode = BAD;
		        break;
		      }
		      //--- DROPBITS(4) ---//
		      hold >>>= 4;
		      bits -= 4;
		      //---//
		      len = (hold & 0x0f)/*BITS(4)*/ + 8;
		      if (state.wbits === 0) {
		        state.wbits = len;
		      }
		      else if (len > state.wbits) {
		        strm.msg = 'invalid window size';
		        state.mode = BAD;
		        break;
		      }
		      state.dmax = 1 << len;
		      //Tracev((stderr, "inflate:   zlib header ok\n"));
		      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
		      state.mode = hold & 0x200 ? DICTID : TYPE;
		      //=== INITBITS();
		      hold = 0;
		      bits = 0;
		      //===//
		      break;
		    case FLAGS:
		      //=== NEEDBITS(16); */
		      while (bits < 16) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      state.flags = hold;
		      if ((state.flags & 0xff) !== Z_DEFLATED) {
		        strm.msg = 'unknown compression method';
		        state.mode = BAD;
		        break;
		      }
		      if (state.flags & 0xe000) {
		        strm.msg = 'unknown header flags set';
		        state.mode = BAD;
		        break;
		      }
		      if (state.head) {
		        state.head.text = ((hold >> 8) & 1);
		      }
		      if (state.flags & 0x0200) {
		        //=== CRC2(state.check, hold);
		        hbuf[0] = hold & 0xff;
		        hbuf[1] = (hold >>> 8) & 0xff;
		        state.check = crc32(state.check, hbuf, 2, 0);
		        //===//
		      }
		      //=== INITBITS();
		      hold = 0;
		      bits = 0;
		      //===//
		      state.mode = TIME;
		      /* falls through */
		    case TIME:
		      //=== NEEDBITS(32); */
		      while (bits < 32) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      if (state.head) {
		        state.head.time = hold;
		      }
		      if (state.flags & 0x0200) {
		        //=== CRC4(state.check, hold)
		        hbuf[0] = hold & 0xff;
		        hbuf[1] = (hold >>> 8) & 0xff;
		        hbuf[2] = (hold >>> 16) & 0xff;
		        hbuf[3] = (hold >>> 24) & 0xff;
		        state.check = crc32(state.check, hbuf, 4, 0);
		        //===
		      }
		      //=== INITBITS();
		      hold = 0;
		      bits = 0;
		      //===//
		      state.mode = OS;
		      /* falls through */
		    case OS:
		      //=== NEEDBITS(16); */
		      while (bits < 16) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      if (state.head) {
		        state.head.xflags = (hold & 0xff);
		        state.head.os = (hold >> 8);
		      }
		      if (state.flags & 0x0200) {
		        //=== CRC2(state.check, hold);
		        hbuf[0] = hold & 0xff;
		        hbuf[1] = (hold >>> 8) & 0xff;
		        state.check = crc32(state.check, hbuf, 2, 0);
		        //===//
		      }
		      //=== INITBITS();
		      hold = 0;
		      bits = 0;
		      //===//
		      state.mode = EXLEN;
		      /* falls through */
		    case EXLEN:
		      if (state.flags & 0x0400) {
		        //=== NEEDBITS(16); */
		        while (bits < 16) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        state.length = hold;
		        if (state.head) {
		          state.head.extra_len = hold;
		        }
		        if (state.flags & 0x0200) {
		          //=== CRC2(state.check, hold);
		          hbuf[0] = hold & 0xff;
		          hbuf[1] = (hold >>> 8) & 0xff;
		          state.check = crc32(state.check, hbuf, 2, 0);
		          //===//
		        }
		        //=== INITBITS();
		        hold = 0;
		        bits = 0;
		        //===//
		      }
		      else if (state.head) {
		        state.head.extra = null/*Z_NULL*/;
		      }
		      state.mode = EXTRA;
		      /* falls through */
		    case EXTRA:
		      if (state.flags & 0x0400) {
		        copy = state.length;
		        if (copy > have) { copy = have; }
		        if (copy) {
		          if (state.head) {
		            len = state.head.extra_len - state.length;
		            if (!state.head.extra) {
		              // Use untyped array for more conveniend processing later
		              state.head.extra = new Array(state.head.extra_len);
		            }
		            utils.arraySet(
		              state.head.extra,
		              input,
		              next,
		              // extra field is limited to 65536 bytes
		              // - no need for additional size check
		              copy,
		              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
		              len
		            );
		            //zmemcpy(state.head.extra + len, next,
		            //        len + copy > state.head.extra_max ?
		            //        state.head.extra_max - len : copy);
		          }
		          if (state.flags & 0x0200) {
		            state.check = crc32(state.check, input, copy, next);
		          }
		          have -= copy;
		          next += copy;
		          state.length -= copy;
		        }
		        if (state.length) { break inf_leave; }
		      }
		      state.length = 0;
		      state.mode = NAME;
		      /* falls through */
		    case NAME:
		      if (state.flags & 0x0800) {
		        if (have === 0) { break inf_leave; }
		        copy = 0;
		        do {
		          // TODO: 2 or 1 bytes?
		          len = input[next + copy++];
		          /* use constant limit because in js we should not preallocate memory */
		          if (state.head && len &&
		              (state.length < 65536 /*state.head.name_max*/)) {
		            state.head.name += String.fromCharCode(len);
		          }
		        } while (len && copy < have);
		
		        if (state.flags & 0x0200) {
		          state.check = crc32(state.check, input, copy, next);
		        }
		        have -= copy;
		        next += copy;
		        if (len) { break inf_leave; }
		      }
		      else if (state.head) {
		        state.head.name = null;
		      }
		      state.length = 0;
		      state.mode = COMMENT;
		      /* falls through */
		    case COMMENT:
		      if (state.flags & 0x1000) {
		        if (have === 0) { break inf_leave; }
		        copy = 0;
		        do {
		          len = input[next + copy++];
		          /* use constant limit because in js we should not preallocate memory */
		          if (state.head && len &&
		              (state.length < 65536 /*state.head.comm_max*/)) {
		            state.head.comment += String.fromCharCode(len);
		          }
		        } while (len && copy < have);
		        if (state.flags & 0x0200) {
		          state.check = crc32(state.check, input, copy, next);
		        }
		        have -= copy;
		        next += copy;
		        if (len) { break inf_leave; }
		      }
		      else if (state.head) {
		        state.head.comment = null;
		      }
		      state.mode = HCRC;
		      /* falls through */
		    case HCRC:
		      if (state.flags & 0x0200) {
		        //=== NEEDBITS(16); */
		        while (bits < 16) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        if (hold !== (state.check & 0xffff)) {
		          strm.msg = 'header crc mismatch';
		          state.mode = BAD;
		          break;
		        }
		        //=== INITBITS();
		        hold = 0;
		        bits = 0;
		        //===//
		      }
		      if (state.head) {
		        state.head.hcrc = ((state.flags >> 9) & 1);
		        state.head.done = true;
		      }
		      strm.adler = state.check = 0;
		      state.mode = TYPE;
		      break;
		    case DICTID:
		      //=== NEEDBITS(32); */
		      while (bits < 32) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      strm.adler = state.check = zswap32(hold);
		      //=== INITBITS();
		      hold = 0;
		      bits = 0;
		      //===//
		      state.mode = DICT;
		      /* falls through */
		    case DICT:
		      if (state.havedict === 0) {
		        //--- RESTORE() ---
		        strm.next_out = put;
		        strm.avail_out = left;
		        strm.next_in = next;
		        strm.avail_in = have;
		        state.hold = hold;
		        state.bits = bits;
		        //---
		        return Z_NEED_DICT;
		      }
		      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
		      state.mode = TYPE;
		      /* falls through */
		    case TYPE:
		      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
		      /* falls through */
		    case TYPEDO:
		      if (state.last) {
		        //--- BYTEBITS() ---//
		        hold >>>= bits & 7;
		        bits -= bits & 7;
		        //---//
		        state.mode = CHECK;
		        break;
		      }
		      //=== NEEDBITS(3); */
		      while (bits < 3) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      state.last = (hold & 0x01)/*BITS(1)*/;
		      //--- DROPBITS(1) ---//
		      hold >>>= 1;
		      bits -= 1;
		      //---//
		
		      switch ((hold & 0x03)/*BITS(2)*/) {
		      case 0:                             /* stored block */
		        //Tracev((stderr, "inflate:     stored block%s\n",
		        //        state.last ? " (last)" : ""));
		        state.mode = STORED;
		        break;
		      case 1:                             /* fixed block */
		        fixedtables(state);
		        //Tracev((stderr, "inflate:     fixed codes block%s\n",
		        //        state.last ? " (last)" : ""));
		        state.mode = LEN_;             /* decode codes */
		        if (flush === Z_TREES) {
		          //--- DROPBITS(2) ---//
		          hold >>>= 2;
		          bits -= 2;
		          //---//
		          break inf_leave;
		        }
		        break;
		      case 2:                             /* dynamic block */
		        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
		        //        state.last ? " (last)" : ""));
		        state.mode = TABLE;
		        break;
		      case 3:
		        strm.msg = 'invalid block type';
		        state.mode = BAD;
		      }
		      //--- DROPBITS(2) ---//
		      hold >>>= 2;
		      bits -= 2;
		      //---//
		      break;
		    case STORED:
		      //--- BYTEBITS() ---// /* go to byte boundary */
		      hold >>>= bits & 7;
		      bits -= bits & 7;
		      //---//
		      //=== NEEDBITS(32); */
		      while (bits < 32) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
		        strm.msg = 'invalid stored block lengths';
		        state.mode = BAD;
		        break;
		      }
		      state.length = hold & 0xffff;
		      //Tracev((stderr, "inflate:       stored length %u\n",
		      //        state.length));
		      //=== INITBITS();
		      hold = 0;
		      bits = 0;
		      //===//
		      state.mode = COPY_;
		      if (flush === Z_TREES) { break inf_leave; }
		      /* falls through */
		    case COPY_:
		      state.mode = COPY;
		      /* falls through */
		    case COPY:
		      copy = state.length;
		      if (copy) {
		        if (copy > have) { copy = have; }
		        if (copy > left) { copy = left; }
		        if (copy === 0) { break inf_leave; }
		        //--- zmemcpy(put, next, copy); ---
		        utils.arraySet(output, input, next, copy, put);
		        //---//
		        have -= copy;
		        next += copy;
		        left -= copy;
		        put += copy;
		        state.length -= copy;
		        break;
		      }
		      //Tracev((stderr, "inflate:       stored end\n"));
		      state.mode = TYPE;
		      break;
		    case TABLE:
		      //=== NEEDBITS(14); */
		      while (bits < 14) {
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		      }
		      //===//
		      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
		      //--- DROPBITS(5) ---//
		      hold >>>= 5;
		      bits -= 5;
		      //---//
		      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
		      //--- DROPBITS(5) ---//
		      hold >>>= 5;
		      bits -= 5;
		      //---//
		      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
		      //--- DROPBITS(4) ---//
		      hold >>>= 4;
		      bits -= 4;
		      //---//
		//#ifndef PKZIP_BUG_WORKAROUND
		      if (state.nlen > 286 || state.ndist > 30) {
		        strm.msg = 'too many length or distance symbols';
		        state.mode = BAD;
		        break;
		      }
		//#endif
		      //Tracev((stderr, "inflate:       table sizes ok\n"));
		      state.have = 0;
		      state.mode = LENLENS;
		      /* falls through */
		    case LENLENS:
		      while (state.have < state.ncode) {
		        //=== NEEDBITS(3);
		        while (bits < 3) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
		        //--- DROPBITS(3) ---//
		        hold >>>= 3;
		        bits -= 3;
		        //---//
		      }
		      while (state.have < 19) {
		        state.lens[order[state.have++]] = 0;
		      }
		      // We have separate tables & no pointers. 2 commented lines below not needed.
		      //state.next = state.codes;
		      //state.lencode = state.next;
		      // Switch to use dynamic table
		      state.lencode = state.lendyn;
		      state.lenbits = 7;
		
		      opts = { bits: state.lenbits };
		      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
		      state.lenbits = opts.bits;
		
		      if (ret) {
		        strm.msg = 'invalid code lengths set';
		        state.mode = BAD;
		        break;
		      }
		      //Tracev((stderr, "inflate:       code lengths ok\n"));
		      state.have = 0;
		      state.mode = CODELENS;
		      /* falls through */
		    case CODELENS:
		      while (state.have < state.nlen + state.ndist) {
		        for (;;) {
		          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
		          here_bits = here >>> 24;
		          here_op = (here >>> 16) & 0xff;
		          here_val = here & 0xffff;
		
		          if ((here_bits) <= bits) { break; }
		          //--- PULLBYTE() ---//
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		          //---//
		        }
		        if (here_val < 16) {
		          //--- DROPBITS(here.bits) ---//
		          hold >>>= here_bits;
		          bits -= here_bits;
		          //---//
		          state.lens[state.have++] = here_val;
		        }
		        else {
		          if (here_val === 16) {
		            //=== NEEDBITS(here.bits + 2);
		            n = here_bits + 2;
		            while (bits < n) {
		              if (have === 0) { break inf_leave; }
		              have--;
		              hold += input[next++] << bits;
		              bits += 8;
		            }
		            //===//
		            //--- DROPBITS(here.bits) ---//
		            hold >>>= here_bits;
		            bits -= here_bits;
		            //---//
		            if (state.have === 0) {
		              strm.msg = 'invalid bit length repeat';
		              state.mode = BAD;
		              break;
		            }
		            len = state.lens[state.have - 1];
		            copy = 3 + (hold & 0x03);//BITS(2);
		            //--- DROPBITS(2) ---//
		            hold >>>= 2;
		            bits -= 2;
		            //---//
		          }
		          else if (here_val === 17) {
		            //=== NEEDBITS(here.bits + 3);
		            n = here_bits + 3;
		            while (bits < n) {
		              if (have === 0) { break inf_leave; }
		              have--;
		              hold += input[next++] << bits;
		              bits += 8;
		            }
		            //===//
		            //--- DROPBITS(here.bits) ---//
		            hold >>>= here_bits;
		            bits -= here_bits;
		            //---//
		            len = 0;
		            copy = 3 + (hold & 0x07);//BITS(3);
		            //--- DROPBITS(3) ---//
		            hold >>>= 3;
		            bits -= 3;
		            //---//
		          }
		          else {
		            //=== NEEDBITS(here.bits + 7);
		            n = here_bits + 7;
		            while (bits < n) {
		              if (have === 0) { break inf_leave; }
		              have--;
		              hold += input[next++] << bits;
		              bits += 8;
		            }
		            //===//
		            //--- DROPBITS(here.bits) ---//
		            hold >>>= here_bits;
		            bits -= here_bits;
		            //---//
		            len = 0;
		            copy = 11 + (hold & 0x7f);//BITS(7);
		            //--- DROPBITS(7) ---//
		            hold >>>= 7;
		            bits -= 7;
		            //---//
		          }
		          if (state.have + copy > state.nlen + state.ndist) {
		            strm.msg = 'invalid bit length repeat';
		            state.mode = BAD;
		            break;
		          }
		          while (copy--) {
		            state.lens[state.have++] = len;
		          }
		        }
		      }
		
		      /* handle error breaks in while */
		      if (state.mode === BAD) { break; }
		
		      /* check for end-of-block code (better have one) */
		      if (state.lens[256] === 0) {
		        strm.msg = 'invalid code -- missing end-of-block';
		        state.mode = BAD;
		        break;
		      }
		
		      /* build code tables -- note: do not change the lenbits or distbits
		         values here (9 and 6) without reading the comments in inftrees.h
		         concerning the ENOUGH constants, which depend on those values */
		      state.lenbits = 9;
		
		      opts = { bits: state.lenbits };
		      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
		      // We have separate tables & no pointers. 2 commented lines below not needed.
		      // state.next_index = opts.table_index;
		      state.lenbits = opts.bits;
		      // state.lencode = state.next;
		
		      if (ret) {
		        strm.msg = 'invalid literal/lengths set';
		        state.mode = BAD;
		        break;
		      }
		
		      state.distbits = 6;
		      //state.distcode.copy(state.codes);
		      // Switch to use dynamic table
		      state.distcode = state.distdyn;
		      opts = { bits: state.distbits };
		      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
		      // We have separate tables & no pointers. 2 commented lines below not needed.
		      // state.next_index = opts.table_index;
		      state.distbits = opts.bits;
		      // state.distcode = state.next;
		
		      if (ret) {
		        strm.msg = 'invalid distances set';
		        state.mode = BAD;
		        break;
		      }
		      //Tracev((stderr, 'inflate:       codes ok\n'));
		      state.mode = LEN_;
		      if (flush === Z_TREES) { break inf_leave; }
		      /* falls through */
		    case LEN_:
		      state.mode = LEN;
		      /* falls through */
		    case LEN:
		      if (have >= 6 && left >= 258) {
		        //--- RESTORE() ---
		        strm.next_out = put;
		        strm.avail_out = left;
		        strm.next_in = next;
		        strm.avail_in = have;
		        state.hold = hold;
		        state.bits = bits;
		        //---
		        inflate_fast(strm, _out);
		        //--- LOAD() ---
		        put = strm.next_out;
		        output = strm.output;
		        left = strm.avail_out;
		        next = strm.next_in;
		        input = strm.input;
		        have = strm.avail_in;
		        hold = state.hold;
		        bits = state.bits;
		        //---
		
		        if (state.mode === TYPE) {
		          state.back = -1;
		        }
		        break;
		      }
		      state.back = 0;
		      for (;;) {
		        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
		        here_bits = here >>> 24;
		        here_op = (here >>> 16) & 0xff;
		        here_val = here & 0xffff;
		
		        if (here_bits <= bits) { break; }
		        //--- PULLBYTE() ---//
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		        //---//
		      }
		      if (here_op && (here_op & 0xf0) === 0) {
		        last_bits = here_bits;
		        last_op = here_op;
		        last_val = here_val;
		        for (;;) {
		          here = state.lencode[last_val +
		                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
		          here_bits = here >>> 24;
		          here_op = (here >>> 16) & 0xff;
		          here_val = here & 0xffff;
		
		          if ((last_bits + here_bits) <= bits) { break; }
		          //--- PULLBYTE() ---//
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		          //---//
		        }
		        //--- DROPBITS(last.bits) ---//
		        hold >>>= last_bits;
		        bits -= last_bits;
		        //---//
		        state.back += last_bits;
		      }
		      //--- DROPBITS(here.bits) ---//
		      hold >>>= here_bits;
		      bits -= here_bits;
		      //---//
		      state.back += here_bits;
		      state.length = here_val;
		      if (here_op === 0) {
		        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
		        //        "inflate:         literal '%c'\n" :
		        //        "inflate:         literal 0x%02x\n", here.val));
		        state.mode = LIT;
		        break;
		      }
		      if (here_op & 32) {
		        //Tracevv((stderr, "inflate:         end of block\n"));
		        state.back = -1;
		        state.mode = TYPE;
		        break;
		      }
		      if (here_op & 64) {
		        strm.msg = 'invalid literal/length code';
		        state.mode = BAD;
		        break;
		      }
		      state.extra = here_op & 15;
		      state.mode = LENEXT;
		      /* falls through */
		    case LENEXT:
		      if (state.extra) {
		        //=== NEEDBITS(state.extra);
		        n = state.extra;
		        while (bits < n) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
		        //--- DROPBITS(state.extra) ---//
		        hold >>>= state.extra;
		        bits -= state.extra;
		        //---//
		        state.back += state.extra;
		      }
		      //Tracevv((stderr, "inflate:         length %u\n", state.length));
		      state.was = state.length;
		      state.mode = DIST;
		      /* falls through */
		    case DIST:
		      for (;;) {
		        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
		        here_bits = here >>> 24;
		        here_op = (here >>> 16) & 0xff;
		        here_val = here & 0xffff;
		
		        if ((here_bits) <= bits) { break; }
		        //--- PULLBYTE() ---//
		        if (have === 0) { break inf_leave; }
		        have--;
		        hold += input[next++] << bits;
		        bits += 8;
		        //---//
		      }
		      if ((here_op & 0xf0) === 0) {
		        last_bits = here_bits;
		        last_op = here_op;
		        last_val = here_val;
		        for (;;) {
		          here = state.distcode[last_val +
		                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
		          here_bits = here >>> 24;
		          here_op = (here >>> 16) & 0xff;
		          here_val = here & 0xffff;
		
		          if ((last_bits + here_bits) <= bits) { break; }
		          //--- PULLBYTE() ---//
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		          //---//
		        }
		        //--- DROPBITS(last.bits) ---//
		        hold >>>= last_bits;
		        bits -= last_bits;
		        //---//
		        state.back += last_bits;
		      }
		      //--- DROPBITS(here.bits) ---//
		      hold >>>= here_bits;
		      bits -= here_bits;
		      //---//
		      state.back += here_bits;
		      if (here_op & 64) {
		        strm.msg = 'invalid distance code';
		        state.mode = BAD;
		        break;
		      }
		      state.offset = here_val;
		      state.extra = (here_op) & 15;
		      state.mode = DISTEXT;
		      /* falls through */
		    case DISTEXT:
		      if (state.extra) {
		        //=== NEEDBITS(state.extra);
		        n = state.extra;
		        while (bits < n) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
		        //--- DROPBITS(state.extra) ---//
		        hold >>>= state.extra;
		        bits -= state.extra;
		        //---//
		        state.back += state.extra;
		      }
		//#ifdef INFLATE_STRICT
		      if (state.offset > state.dmax) {
		        strm.msg = 'invalid distance too far back';
		        state.mode = BAD;
		        break;
		      }
		//#endif
		      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
		      state.mode = MATCH;
		      /* falls through */
		    case MATCH:
		      if (left === 0) { break inf_leave; }
		      copy = _out - left;
		      if (state.offset > copy) {         /* copy from window */
		        copy = state.offset - copy;
		        if (copy > state.whave) {
		          if (state.sane) {
		            strm.msg = 'invalid distance too far back';
		            state.mode = BAD;
		            break;
		          }
		// (!) This block is disabled in zlib defailts,
		// don't enable it for binary compatibility
		//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
		//          Trace((stderr, "inflate.c too far\n"));
		//          copy -= state.whave;
		//          if (copy > state.length) { copy = state.length; }
		//          if (copy > left) { copy = left; }
		//          left -= copy;
		//          state.length -= copy;
		//          do {
		//            output[put++] = 0;
		//          } while (--copy);
		//          if (state.length === 0) { state.mode = LEN; }
		//          break;
		//#endif
		        }
		        if (copy > state.wnext) {
		          copy -= state.wnext;
		          from = state.wsize - copy;
		        }
		        else {
		          from = state.wnext - copy;
		        }
		        if (copy > state.length) { copy = state.length; }
		        from_source = state.window;
		      }
		      else {                              /* copy from output */
		        from_source = output;
		        from = put - state.offset;
		        copy = state.length;
		      }
		      if (copy > left) { copy = left; }
		      left -= copy;
		      state.length -= copy;
		      do {
		        output[put++] = from_source[from++];
		      } while (--copy);
		      if (state.length === 0) { state.mode = LEN; }
		      break;
		    case LIT:
		      if (left === 0) { break inf_leave; }
		      output[put++] = state.length;
		      left--;
		      state.mode = LEN;
		      break;
		    case CHECK:
		      if (state.wrap) {
		        //=== NEEDBITS(32);
		        while (bits < 32) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          // Use '|' insdead of '+' to make sure that result is signed
		          hold |= input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        _out -= left;
		        strm.total_out += _out;
		        state.total += _out;
		        if (_out) {
		          strm.adler = state.check =
		              /*UPDATE(state.check, put - _out, _out);*/
		              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
		
		        }
		        _out = left;
		        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
		        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
		          strm.msg = 'incorrect data check';
		          state.mode = BAD;
		          break;
		        }
		        //=== INITBITS();
		        hold = 0;
		        bits = 0;
		        //===//
		        //Tracev((stderr, "inflate:   check matches trailer\n"));
		      }
		      state.mode = LENGTH;
		      /* falls through */
		    case LENGTH:
		      if (state.wrap && state.flags) {
		        //=== NEEDBITS(32);
		        while (bits < 32) {
		          if (have === 0) { break inf_leave; }
		          have--;
		          hold += input[next++] << bits;
		          bits += 8;
		        }
		        //===//
		        if (hold !== (state.total & 0xffffffff)) {
		          strm.msg = 'incorrect length check';
		          state.mode = BAD;
		          break;
		        }
		        //=== INITBITS();
		        hold = 0;
		        bits = 0;
		        //===//
		        //Tracev((stderr, "inflate:   length matches trailer\n"));
		      }
		      state.mode = DONE;
		      /* falls through */
		    case DONE:
		      ret = Z_STREAM_END;
		      break inf_leave;
		    case BAD:
		      ret = Z_DATA_ERROR;
		      break inf_leave;
		    case MEM:
		      return Z_MEM_ERROR;
		    case SYNC:
		      /* falls through */
		    default:
		      return Z_STREAM_ERROR;
		    }
		  }
		
		  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
		
		  /*
		     Return from inflate(), updating the total counts and the check value.
		     If there was no progress during the inflate() call, return a buffer
		     error.  Call updatewindow() to create and/or update the window state.
		     Note: a memory error from inflate() is non-recoverable.
		   */
		
		  //--- RESTORE() ---
		  strm.next_out = put;
		  strm.avail_out = left;
		  strm.next_in = next;
		  strm.avail_in = have;
		  state.hold = hold;
		  state.bits = bits;
		  //---
		
		  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
		                      (state.mode < CHECK || flush !== Z_FINISH))) {
		    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
		  }
		  _in -= strm.avail_in;
		  _out -= strm.avail_out;
		  strm.total_in += _in;
		  strm.total_out += _out;
		  state.total += _out;
		  if (state.wrap && _out) {
		    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
		      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
		  }
		  strm.data_type = state.bits + (state.last ? 64 : 0) +
		                    (state.mode === TYPE ? 128 : 0) +
		                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
		  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
		    ret = Z_BUF_ERROR;
		  }
		  return ret;
		}
		
		function inflateEnd(strm) {
		
		  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
		    return Z_STREAM_ERROR;
		  }
		
		  var state = strm.state;
		  if (state.window) {
		    state.window = null;
		  }
		  strm.state = null;
		  return Z_OK;
		}
		
		function inflateGetHeader(strm, head) {
		  var state;
		
		  /* check state */
		  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
		  state = strm.state;
		  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
		
		  /* save header structure */
		  state.head = head;
		  head.done = false;
		  return Z_OK;
		}
		
		function inflateSetDictionary(strm, dictionary) {
		  var dictLength = dictionary.length;
		
		  var state;
		  var dictid;
		  var ret;
		
		  /* check state */
		  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
		  state = strm.state;
		
		  if (state.wrap !== 0 && state.mode !== DICT) {
		    return Z_STREAM_ERROR;
		  }
		
		  /* check for correct dictionary identifier */
		  if (state.mode === DICT) {
		    dictid = 1; /* adler32(0, null, 0)*/
		    /* dictid = adler32(dictid, dictionary, dictLength); */
		    dictid = adler32(dictid, dictionary, dictLength, 0);
		    if (dictid !== state.check) {
		      return Z_DATA_ERROR;
		    }
		  }
		  /* copy dictionary to window using updatewindow(), which will amend the
		   existing dictionary if appropriate */
		  ret = updatewindow(strm, dictionary, dictLength, dictLength);
		  if (ret) {
		    state.mode = MEM;
		    return Z_MEM_ERROR;
		  }
		  state.havedict = 1;
		  // Tracev((stderr, "inflate:   dictionary set\n"));
		  return Z_OK;
		}
		
		exports.inflateReset = inflateReset;
		exports.inflateReset2 = inflateReset2;
		exports.inflateResetKeep = inflateResetKeep;
		exports.inflateInit = inflateInit;
		exports.inflateInit2 = inflateInit2;
		exports.inflate = inflate;
		exports.inflateEnd = inflateEnd;
		exports.inflateGetHeader = inflateGetHeader;
		exports.inflateSetDictionary = inflateSetDictionary;
		exports.inflateInfo = 'pako inflate (from Nodeca project)';
		
		/* Not implemented
		exports.inflateCopy = inflateCopy;
		exports.inflateGetDictionary = inflateGetDictionary;
		exports.inflateMark = inflateMark;
		exports.inflatePrime = inflatePrime;
		exports.inflateSync = inflateSync;
		exports.inflateSyncPoint = inflateSyncPoint;
		exports.inflateUndermine = inflateUndermine;
		*/


	/***/ },
	/* 33 */
	/***/ function(module, exports) {
		
		
		var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
		                (typeof Uint16Array !== 'undefined') &&
		                (typeof Int32Array !== 'undefined');
		
		
		exports.assign = function (obj /*from1, from2, from3, ...*/) {
		  var sources = Array.prototype.slice.call(arguments, 1);
		  while (sources.length) {
		    var source = sources.shift();
		    if (!source) { continue; }
		
		    if (typeof source !== 'object') {
		      throw new TypeError(source + 'must be non-object');
		    }
		
		    for (var p in source) {
		      if (source.hasOwnProperty(p)) {
		        obj[p] = source[p];
		      }
		    }
		  }
		
		  return obj;
		};
		
		
		// reduce buffer size, avoiding mem copy
		exports.shrinkBuf = function (buf, size) {
		  if (buf.length === size) { return buf; }
		  if (buf.subarray) { return buf.subarray(0, size); }
		  buf.length = size;
		  return buf;
		};
		
		
		var fnTyped = {
		  arraySet: function (dest, src, src_offs, len, dest_offs) {
		    if (src.subarray && dest.subarray) {
		      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
		      return;
		    }
		    // Fallback to ordinary array
		    for (var i = 0; i < len; i++) {
		      dest[dest_offs + i] = src[src_offs + i];
		    }
		  },
		  // Join array of chunks to single array.
		  flattenChunks: function (chunks) {
		    var i, l, len, pos, chunk, result;
		
		    // calculate data length
		    len = 0;
		    for (i = 0, l = chunks.length; i < l; i++) {
		      len += chunks[i].length;
		    }
		
		    // join chunks
		    result = new Uint8Array(len);
		    pos = 0;
		    for (i = 0, l = chunks.length; i < l; i++) {
		      chunk = chunks[i];
		      result.set(chunk, pos);
		      pos += chunk.length;
		    }
		
		    return result;
		  }
		};
		
		var fnUntyped = {
		  arraySet: function (dest, src, src_offs, len, dest_offs) {
		    for (var i = 0; i < len; i++) {
		      dest[dest_offs + i] = src[src_offs + i];
		    }
		  },
		  // Join array of chunks to single array.
		  flattenChunks: function (chunks) {
		    return [].concat.apply([], chunks);
		  }
		};
		
		
		// Enable/Disable typed arrays use, for testing
		//
		exports.setTyped = function (on) {
		  if (on) {
		    exports.Buf8  = Uint8Array;
		    exports.Buf16 = Uint16Array;
		    exports.Buf32 = Int32Array;
		    exports.assign(exports, fnTyped);
		  } else {
		    exports.Buf8  = Array;
		    exports.Buf16 = Array;
		    exports.Buf32 = Array;
		    exports.assign(exports, fnUntyped);
		  }
		};
		
		exports.setTyped(TYPED_OK);


	/***/ },
	/* 34 */
	/***/ function(module, exports) {
		
		// Note: adler32 takes 12% for level 0 and 2% for level 6.
		// It doesn't worth to make additional optimizationa as in original.
		// Small size is preferable.
		
		function adler32(adler, buf, len, pos) {
		  var s1 = (adler & 0xffff) |0,
		      s2 = ((adler >>> 16) & 0xffff) |0,
		      n = 0;
		
		  while (len !== 0) {
		    // Set limit ~ twice less than 5552, to keep
		    // s2 in 31-bits, because we force signed ints.
		    // in other case %= will fail.
		    n = len > 2000 ? 2000 : len;
		    len -= n;
		
		    do {
		      s1 = (s1 + buf[pos++]) |0;
		      s2 = (s2 + s1) |0;
		    } while (--n);
		
		    s1 %= 65521;
		    s2 %= 65521;
		  }
		
		  return (s1 | (s2 << 16)) |0;
		}
		
		
		module.exports = adler32;


	/***/ },
	/* 35 */
	/***/ function(module, exports) {
		
		// Note: we can't get significant speed boost here.
		// So write code to minimize size - no pregenerated tables
		// and array tools dependencies.
		
		
		// Use ordinary array, since untyped makes no boost here
		function makeTable() {
		  var c, table = [];
		
		  for (var n = 0; n < 256; n++) {
		    c = n;
		    for (var k = 0; k < 8; k++) {
		      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
		    }
		    table[n] = c;
		  }
		
		  return table;
		}
		
		// Create table on load. Just 255 signed longs. Not a problem.
		var crcTable = makeTable();
		
		
		function crc32(crc, buf, len, pos) {
		  var t = crcTable,
		      end = pos + len;
		
		  crc ^= -1;
		
		  for (var i = pos; i < end; i++) {
		    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
		  }
		
		  return (crc ^ (-1)); // >>> 0;
		}
		
		
		module.exports = crc32;


	/***/ },
	/* 36 */
	/***/ function(module, exports) {
		
		// See state defs from inflate.js
		var BAD = 30;       /* got a data error -- remain here until reset */
		var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
		
		/*
		   Decode literal, length, and distance codes and write out the resulting
		   literal and match bytes until either not enough input or output is
		   available, an end-of-block is encountered, or a data error is encountered.
		   When large enough input and output buffers are supplied to inflate(), for
		   example, a 16K input buffer and a 64K output buffer, more than 95% of the
		   inflate execution time is spent in this routine.
		
		   Entry assumptions:
		
		        state.mode === LEN
		        strm.avail_in >= 6
		        strm.avail_out >= 258
		        start >= strm.avail_out
		        state.bits < 8
		
		   On return, state.mode is one of:
		
		        LEN -- ran out of enough output space or enough available input
		        TYPE -- reached end of block code, inflate() to interpret next block
		        BAD -- error in block data
		
		   Notes:
		
		    - The maximum input bits used by a length/distance pair is 15 bits for the
		      length code, 5 bits for the length extra, 15 bits for the distance code,
		      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
		      Therefore if strm.avail_in >= 6, then there is enough input to avoid
		      checking for available input while decoding.
		
		    - The maximum bytes that a single length/distance pair can output is 258
		      bytes, which is the maximum length that can be coded.  inflate_fast()
		      requires strm.avail_out >= 258 for each loop to avoid checking for
		      output space.
		 */
		module.exports = function inflate_fast(strm, start) {
		  var state;
		  var _in;                    /* local strm.input */
		  var last;                   /* have enough input while in < last */
		  var _out;                   /* local strm.output */
		  var beg;                    /* inflate()'s initial strm.output */
		  var end;                    /* while out < end, enough space available */
		//#ifdef INFLATE_STRICT
		  var dmax;                   /* maximum distance from zlib header */
		//#endif
		  var wsize;                  /* window size or zero if not using window */
		  var whave;                  /* valid bytes in the window */
		  var wnext;                  /* window write index */
		  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
		  var s_window;               /* allocated sliding window, if wsize != 0 */
		  var hold;                   /* local strm.hold */
		  var bits;                   /* local strm.bits */
		  var lcode;                  /* local strm.lencode */
		  var dcode;                  /* local strm.distcode */
		  var lmask;                  /* mask for first level of length codes */
		  var dmask;                  /* mask for first level of distance codes */
		  var here;                   /* retrieved table entry */
		  var op;                     /* code bits, operation, extra bits, or */
		                              /*  window position, window bytes to copy */
		  var len;                    /* match length, unused bytes */
		  var dist;                   /* match distance */
		  var from;                   /* where to copy match from */
		  var from_source;
		
		
		  var input, output; // JS specific, because we have no pointers
		
		  /* copy state to local variables */
		  state = strm.state;
		  //here = state.here;
		  _in = strm.next_in;
		  input = strm.input;
		  last = _in + (strm.avail_in - 5);
		  _out = strm.next_out;
		  output = strm.output;
		  beg = _out - (start - strm.avail_out);
		  end = _out + (strm.avail_out - 257);
		//#ifdef INFLATE_STRICT
		  dmax = state.dmax;
		//#endif
		  wsize = state.wsize;
		  whave = state.whave;
		  wnext = state.wnext;
		  s_window = state.window;
		  hold = state.hold;
		  bits = state.bits;
		  lcode = state.lencode;
		  dcode = state.distcode;
		  lmask = (1 << state.lenbits) - 1;
		  dmask = (1 << state.distbits) - 1;
		
		
		  /* decode literals and length/distances until end-of-block or not enough
		     input data or output space */
		
		  top:
		  do {
		    if (bits < 15) {
		      hold += input[_in++] << bits;
		      bits += 8;
		      hold += input[_in++] << bits;
		      bits += 8;
		    }
		
		    here = lcode[hold & lmask];
		
		    dolen:
		    for (;;) { // Goto emulation
		      op = here >>> 24/*here.bits*/;
		      hold >>>= op;
		      bits -= op;
		      op = (here >>> 16) & 0xff/*here.op*/;
		      if (op === 0) {                          /* literal */
		        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
		        //        "inflate:         literal '%c'\n" :
		        //        "inflate:         literal 0x%02x\n", here.val));
		        output[_out++] = here & 0xffff/*here.val*/;
		      }
		      else if (op & 16) {                     /* length base */
		        len = here & 0xffff/*here.val*/;
		        op &= 15;                           /* number of extra bits */
		        if (op) {
		          if (bits < op) {
		            hold += input[_in++] << bits;
		            bits += 8;
		          }
		          len += hold & ((1 << op) - 1);
		          hold >>>= op;
		          bits -= op;
		        }
		        //Tracevv((stderr, "inflate:         length %u\n", len));
		        if (bits < 15) {
		          hold += input[_in++] << bits;
		          bits += 8;
		          hold += input[_in++] << bits;
		          bits += 8;
		        }
		        here = dcode[hold & dmask];
		
		        dodist:
		        for (;;) { // goto emulation
		          op = here >>> 24/*here.bits*/;
		          hold >>>= op;
		          bits -= op;
		          op = (here >>> 16) & 0xff/*here.op*/;
		
		          if (op & 16) {                      /* distance base */
		            dist = here & 0xffff/*here.val*/;
		            op &= 15;                       /* number of extra bits */
		            if (bits < op) {
		              hold += input[_in++] << bits;
		              bits += 8;
		              if (bits < op) {
		                hold += input[_in++] << bits;
		                bits += 8;
		              }
		            }
		            dist += hold & ((1 << op) - 1);
		//#ifdef INFLATE_STRICT
		            if (dist > dmax) {
		              strm.msg = 'invalid distance too far back';
		              state.mode = BAD;
		              break top;
		            }
		//#endif
		            hold >>>= op;
		            bits -= op;
		            //Tracevv((stderr, "inflate:         distance %u\n", dist));
		            op = _out - beg;                /* max distance in output */
		            if (dist > op) {                /* see if copy from window */
		              op = dist - op;               /* distance back in window */
		              if (op > whave) {
		                if (state.sane) {
		                  strm.msg = 'invalid distance too far back';
		                  state.mode = BAD;
		                  break top;
		                }
		
		// (!) This block is disabled in zlib defailts,
		// don't enable it for binary compatibility
		//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
		//                if (len <= op - whave) {
		//                  do {
		//                    output[_out++] = 0;
		//                  } while (--len);
		//                  continue top;
		//                }
		//                len -= op - whave;
		//                do {
		//                  output[_out++] = 0;
		//                } while (--op > whave);
		//                if (op === 0) {
		//                  from = _out - dist;
		//                  do {
		//                    output[_out++] = output[from++];
		//                  } while (--len);
		//                  continue top;
		//                }
		//#endif
		              }
		              from = 0; // window index
		              from_source = s_window;
		              if (wnext === 0) {           /* very common case */
		                from += wsize - op;
		                if (op < len) {         /* some from window */
		                  len -= op;
		                  do {
		                    output[_out++] = s_window[from++];
		                  } while (--op);
		                  from = _out - dist;  /* rest from output */
		                  from_source = output;
		                }
		              }
		              else if (wnext < op) {      /* wrap around window */
		                from += wsize + wnext - op;
		                op -= wnext;
		                if (op < len) {         /* some from end of window */
		                  len -= op;
		                  do {
		                    output[_out++] = s_window[from++];
		                  } while (--op);
		                  from = 0;
		                  if (wnext < len) {  /* some from start of window */
		                    op = wnext;
		                    len -= op;
		                    do {
		                      output[_out++] = s_window[from++];
		                    } while (--op);
		                    from = _out - dist;      /* rest from output */
		                    from_source = output;
		                  }
		                }
		              }
		              else {                      /* contiguous in window */
		                from += wnext - op;
		                if (op < len) {         /* some from window */
		                  len -= op;
		                  do {
		                    output[_out++] = s_window[from++];
		                  } while (--op);
		                  from = _out - dist;  /* rest from output */
		                  from_source = output;
		                }
		              }
		              while (len > 2) {
		                output[_out++] = from_source[from++];
		                output[_out++] = from_source[from++];
		                output[_out++] = from_source[from++];
		                len -= 3;
		              }
		              if (len) {
		                output[_out++] = from_source[from++];
		                if (len > 1) {
		                  output[_out++] = from_source[from++];
		                }
		              }
		            }
		            else {
		              from = _out - dist;          /* copy direct from output */
		              do {                        /* minimum length is three */
		                output[_out++] = output[from++];
		                output[_out++] = output[from++];
		                output[_out++] = output[from++];
		                len -= 3;
		              } while (len > 2);
		              if (len) {
		                output[_out++] = output[from++];
		                if (len > 1) {
		                  output[_out++] = output[from++];
		                }
		              }
		            }
		          }
		          else if ((op & 64) === 0) {          /* 2nd level distance code */
		            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
		            continue dodist;
		          }
		          else {
		            strm.msg = 'invalid distance code';
		            state.mode = BAD;
		            break top;
		          }
		
		          break; // need to emulate goto via "continue"
		        }
		      }
		      else if ((op & 64) === 0) {              /* 2nd level length code */
		        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
		        continue dolen;
		      }
		      else if (op & 32) {                     /* end-of-block */
		        //Tracevv((stderr, "inflate:         end of block\n"));
		        state.mode = TYPE;
		        break top;
		      }
		      else {
		        strm.msg = 'invalid literal/length code';
		        state.mode = BAD;
		        break top;
		      }
		
		      break; // need to emulate goto via "continue"
		    }
		  } while (_in < last && _out < end);
		
		  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
		  len = bits >> 3;
		  _in -= len;
		  bits -= len << 3;
		  hold &= (1 << bits) - 1;
		
		  /* update state and return */
		  strm.next_in = _in;
		  strm.next_out = _out;
		  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
		  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
		  state.hold = hold;
		  state.bits = bits;
		  return;
		};


	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
		
		
		var utils = __webpack_require__(33);
		
		var MAXBITS = 15;
		var ENOUGH_LENS = 852;
		var ENOUGH_DISTS = 592;
		//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
		
		var CODES = 0;
		var LENS = 1;
		var DISTS = 2;
		
		var lbase = [ /* Length codes 257..285 base */
		  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
		  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
		];
		
		var lext = [ /* Length codes 257..285 extra */
		  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
		  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
		];
		
		var dbase = [ /* Distance codes 0..29 base */
		  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
		  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
		  8193, 12289, 16385, 24577, 0, 0
		];
		
		var dext = [ /* Distance codes 0..29 extra */
		  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
		  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
		  28, 28, 29, 29, 64, 64
		];
		
		module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
		{
		  var bits = opts.bits;
		      //here = opts.here; /* table entry for duplication */
		
		  var len = 0;               /* a code's length in bits */
		  var sym = 0;               /* index of code symbols */
		  var min = 0, max = 0;          /* minimum and maximum code lengths */
		  var root = 0;              /* number of index bits for root table */
		  var curr = 0;              /* number of index bits for current table */
		  var drop = 0;              /* code bits to drop for sub-table */
		  var left = 0;                   /* number of prefix codes available */
		  var used = 0;              /* code entries in table used */
		  var huff = 0;              /* Huffman code */
		  var incr;              /* for incrementing code, index */
		  var fill;              /* index for replicating entries */
		  var low;               /* low bits for current root entry */
		  var mask;              /* mask for low root bits */
		  var next;             /* next available space in table */
		  var base = null;     /* base value table to use */
		  var base_index = 0;
		//  var shoextra;    /* extra bits table to use */
		  var end;                    /* use base and extra for symbol > end */
		  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
		  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
		  var extra = null;
		  var extra_index = 0;
		
		  var here_bits, here_op, here_val;
		
		  /*
		   Process a set of code lengths to create a canonical Huffman code.  The
		   code lengths are lens[0..codes-1].  Each length corresponds to the
		   symbols 0..codes-1.  The Huffman code is generated by first sorting the
		   symbols by length from short to long, and retaining the symbol order
		   for codes with equal lengths.  Then the code starts with all zero bits
		   for the first code of the shortest length, and the codes are integer
		   increments for the same length, and zeros are appended as the length
		   increases.  For the deflate format, these bits are stored backwards
		   from their more natural integer increment ordering, and so when the
		   decoding tables are built in the large loop below, the integer codes
		   are incremented backwards.
		
		   This routine assumes, but does not check, that all of the entries in
		   lens[] are in the range 0..MAXBITS.  The caller must assure this.
		   1..MAXBITS is interpreted as that code length.  zero means that that
		   symbol does not occur in this code.
		
		   The codes are sorted by computing a count of codes for each length,
		   creating from that a table of starting indices for each length in the
		   sorted table, and then entering the symbols in order in the sorted
		   table.  The sorted table is work[], with that space being provided by
		   the caller.
		
		   The length counts are used for other purposes as well, i.e. finding
		   the minimum and maximum length codes, determining if there are any
		   codes at all, checking for a valid set of lengths, and looking ahead
		   at length counts to determine sub-table sizes when building the
		   decoding tables.
		   */
		
		  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
		  for (len = 0; len <= MAXBITS; len++) {
		    count[len] = 0;
		  }
		  for (sym = 0; sym < codes; sym++) {
		    count[lens[lens_index + sym]]++;
		  }
		
		  /* bound code lengths, force root to be within code lengths */
		  root = bits;
		  for (max = MAXBITS; max >= 1; max--) {
		    if (count[max] !== 0) { break; }
		  }
		  if (root > max) {
		    root = max;
		  }
		  if (max === 0) {                     /* no symbols to code at all */
		    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
		    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
		    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
		    table[table_index++] = (1 << 24) | (64 << 16) | 0;
		
		
		    //table.op[opts.table_index] = 64;
		    //table.bits[opts.table_index] = 1;
		    //table.val[opts.table_index++] = 0;
		    table[table_index++] = (1 << 24) | (64 << 16) | 0;
		
		    opts.bits = 1;
		    return 0;     /* no symbols, but wait for decoding to report error */
		  }
		  for (min = 1; min < max; min++) {
		    if (count[min] !== 0) { break; }
		  }
		  if (root < min) {
		    root = min;
		  }
		
		  /* check for an over-subscribed or incomplete set of lengths */
		  left = 1;
		  for (len = 1; len <= MAXBITS; len++) {
		    left <<= 1;
		    left -= count[len];
		    if (left < 0) {
		      return -1;
		    }        /* over-subscribed */
		  }
		  if (left > 0 && (type === CODES || max !== 1)) {
		    return -1;                      /* incomplete set */
		  }
		
		  /* generate offsets into symbol table for each length for sorting */
		  offs[1] = 0;
		  for (len = 1; len < MAXBITS; len++) {
		    offs[len + 1] = offs[len] + count[len];
		  }
		
		  /* sort symbols by length, by symbol order within each length */
		  for (sym = 0; sym < codes; sym++) {
		    if (lens[lens_index + sym] !== 0) {
		      work[offs[lens[lens_index + sym]]++] = sym;
		    }
		  }
		
		  /*
		   Create and fill in decoding tables.  In this loop, the table being
		   filled is at next and has curr index bits.  The code being used is huff
		   with length len.  That code is converted to an index by dropping drop
		   bits off of the bottom.  For codes where len is less than drop + curr,
		   those top drop + curr - len bits are incremented through all values to
		   fill the table with replicated entries.
		
		   root is the number of index bits for the root table.  When len exceeds
		   root, sub-tables are created pointed to by the root entry with an index
		   of the low root bits of huff.  This is saved in low to check for when a
		   new sub-table should be started.  drop is zero when the root table is
		   being filled, and drop is root when sub-tables are being filled.
		
		   When a new sub-table is needed, it is necessary to look ahead in the
		   code lengths to determine what size sub-table is needed.  The length
		   counts are used for this, and so count[] is decremented as codes are
		   entered in the tables.
		
		   used keeps track of how many table entries have been allocated from the
		   provided *table space.  It is checked for LENS and DIST tables against
		   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
		   the initial root table size constants.  See the comments in inftrees.h
		   for more information.
		
		   sym increments through all symbols, and the loop terminates when
		   all codes of length max, i.e. all codes, have been processed.  This
		   routine permits incomplete codes, so another loop after this one fills
		   in the rest of the decoding tables with invalid code markers.
		   */
		
		  /* set up for code type */
		  // poor man optimization - use if-else instead of switch,
		  // to avoid deopts in old v8
		  if (type === CODES) {
		    base = extra = work;    /* dummy value--not used */
		    end = 19;
		
		  } else if (type === LENS) {
		    base = lbase;
		    base_index -= 257;
		    extra = lext;
		    extra_index -= 257;
		    end = 256;
		
		  } else {                    /* DISTS */
		    base = dbase;
		    extra = dext;
		    end = -1;
		  }
		
		  /* initialize opts for loop */
		  huff = 0;                   /* starting code */
		  sym = 0;                    /* starting code symbol */
		  len = min;                  /* starting code length */
		  next = table_index;              /* current table to fill in */
		  curr = root;                /* current table index bits */
		  drop = 0;                   /* current bits to drop from code for index */
		  low = -1;                   /* trigger new sub-table when len > root */
		  used = 1 << root;          /* use root table entries */
		  mask = used - 1;            /* mask for comparing low */
		
		  /* check available table space */
		  if ((type === LENS && used > ENOUGH_LENS) ||
		    (type === DISTS && used > ENOUGH_DISTS)) {
		    return 1;
		  }
		
		  /* process all codes and make table entries */
		  for (;;) {
		    /* create table entry */
		    here_bits = len - drop;
		    if (work[sym] < end) {
		      here_op = 0;
		      here_val = work[sym];
		    }
		    else if (work[sym] > end) {
		      here_op = extra[extra_index + work[sym]];
		      here_val = base[base_index + work[sym]];
		    }
		    else {
		      here_op = 32 + 64;         /* end of block */
		      here_val = 0;
		    }
		
		    /* replicate for those indices with low len bits equal to huff */
		    incr = 1 << (len - drop);
		    fill = 1 << curr;
		    min = fill;                 /* save offset to next table */
		    do {
		      fill -= incr;
		      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
		    } while (fill !== 0);
		
		    /* backwards increment the len-bit code huff */
		    incr = 1 << (len - 1);
		    while (huff & incr) {
		      incr >>= 1;
		    }
		    if (incr !== 0) {
		      huff &= incr - 1;
		      huff += incr;
		    } else {
		      huff = 0;
		    }
		
		    /* go to next symbol, update count, len */
		    sym++;
		    if (--count[len] === 0) {
		      if (len === max) { break; }
		      len = lens[lens_index + work[sym]];
		    }
		
		    /* create new sub-table if needed */
		    if (len > root && (huff & mask) !== low) {
		      /* if first time, transition to sub-tables */
		      if (drop === 0) {
		        drop = root;
		      }
		
		      /* increment past last table */
		      next += min;            /* here min is 1 << curr */
		
		      /* determine length of next table */
		      curr = len - drop;
		      left = 1 << curr;
		      while (curr + drop < max) {
		        left -= count[curr + drop];
		        if (left <= 0) { break; }
		        curr++;
		        left <<= 1;
		      }
		
		      /* check for enough space */
		      used += 1 << curr;
		      if ((type === LENS && used > ENOUGH_LENS) ||
		        (type === DISTS && used > ENOUGH_DISTS)) {
		        return 1;
		      }
		
		      /* point entry in root table to sub-table */
		      low = huff & mask;
		      /*table.op[low] = curr;
		      table.bits[low] = root;
		      table.val[low] = next - opts.table_index;*/
		      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
		    }
		  }
		
		  /* fill in remaining table entry if code is incomplete (guaranteed to have
		   at most one remaining entry, since if the code is incomplete, the
		   maximum code length that was allowed to get this far is one bit) */
		  if (huff !== 0) {
		    //table.op[next + huff] = 64;            /* invalid code marker */
		    //table.bits[next + huff] = len - drop;
		    //table.val[next + huff] = 0;
		    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
		  }
		
		  /* set return parameters */
		  //opts.table_index += used;
		  opts.bits = root;
		  return 0;
		};


	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
		
		
		var utils = __webpack_require__(33);
		
		
		// Quick check if we can use fast array to bin string conversion
		//
		// - apply(Array) can fail on Android 2.2
		// - apply(Uint8Array) can fail on iOS 5.1 Safary
		//
		var STR_APPLY_OK = true;
		var STR_APPLY_UIA_OK = true;
		
		try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
		try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }
		
		
		// Table with utf8 lengths (calculated by first byte of sequence)
		// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
		// because max possible codepoint is 0x10ffff
		var _utf8len = new utils.Buf8(256);
		for (var q = 0; q < 256; q++) {
		  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
		}
		_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
		
		
		// convert string to array (typed, when possible)
		exports.string2buf = function (str) {
		  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
		
		  // count binary size
		  for (m_pos = 0; m_pos < str_len; m_pos++) {
		    c = str.charCodeAt(m_pos);
		    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
		      c2 = str.charCodeAt(m_pos + 1);
		      if ((c2 & 0xfc00) === 0xdc00) {
		        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
		        m_pos++;
		      }
		    }
		    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
		  }
		
		  // allocate buffer
		  buf = new utils.Buf8(buf_len);
		
		  // convert
		  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
		    c = str.charCodeAt(m_pos);
		    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
		      c2 = str.charCodeAt(m_pos + 1);
		      if ((c2 & 0xfc00) === 0xdc00) {
		        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
		        m_pos++;
		      }
		    }
		    if (c < 0x80) {
		      /* one byte */
		      buf[i++] = c;
		    } else if (c < 0x800) {
		      /* two bytes */
		      buf[i++] = 0xC0 | (c >>> 6);
		      buf[i++] = 0x80 | (c & 0x3f);
		    } else if (c < 0x10000) {
		      /* three bytes */
		      buf[i++] = 0xE0 | (c >>> 12);
		      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
		      buf[i++] = 0x80 | (c & 0x3f);
		    } else {
		      /* four bytes */
		      buf[i++] = 0xf0 | (c >>> 18);
		      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
		      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
		      buf[i++] = 0x80 | (c & 0x3f);
		    }
		  }
		
		  return buf;
		};
		
		// Helper (used in 2 places)
		function buf2binstring(buf, len) {
		  // use fallback for big arrays to avoid stack overflow
		  if (len < 65537) {
		    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
		      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
		    }
		  }
		
		  var result = '';
		  for (var i = 0; i < len; i++) {
		    result += String.fromCharCode(buf[i]);
		  }
		  return result;
		}
		
		
		// Convert byte array to binary string
		exports.buf2binstring = function (buf) {
		  return buf2binstring(buf, buf.length);
		};
		
		
		// Convert binary string (typed, when possible)
		exports.binstring2buf = function (str) {
		  var buf = new utils.Buf8(str.length);
		  for (var i = 0, len = buf.length; i < len; i++) {
		    buf[i] = str.charCodeAt(i);
		  }
		  return buf;
		};
		
		
		// convert array to string
		exports.buf2string = function (buf, max) {
		  var i, out, c, c_len;
		  var len = max || buf.length;
		
		  // Reserve max possible length (2 words per char)
		  // NB: by unknown reasons, Array is significantly faster for
		  //     String.fromCharCode.apply than Uint16Array.
		  var utf16buf = new Array(len * 2);
		
		  for (out = 0, i = 0; i < len;) {
		    c = buf[i++];
		    // quick process ascii
		    if (c < 0x80) { utf16buf[out++] = c; continue; }
		
		    c_len = _utf8len[c];
		    // skip 5 & 6 byte codes
		    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }
		
		    // apply mask on first byte
		    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
		    // join the rest
		    while (c_len > 1 && i < len) {
		      c = (c << 6) | (buf[i++] & 0x3f);
		      c_len--;
		    }
		
		    // terminated by end of string?
		    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
		
		    if (c < 0x10000) {
		      utf16buf[out++] = c;
		    } else {
		      c -= 0x10000;
		      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
		      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
		    }
		  }
		
		  return buf2binstring(utf16buf, out);
		};
		
		
		// Calculate max possible position in utf8 buffer,
		// that will not break sequence. If that's not possible
		// - (very small limits) return max size as is.
		//
		// buf[] - utf8 bytes array
		// max   - length limit (mandatory);
		exports.utf8border = function (buf, max) {
		  var pos;
		
		  max = max || buf.length;
		  if (max > buf.length) { max = buf.length; }
		
		  // go back from last position, until start of sequence found
		  pos = max - 1;
		  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
		
		  // Fuckup - very small and broken sequence,
		  // return max, because we should return something anyway.
		  if (pos < 0) { return max; }
		
		  // If we came to start of buffer - that means vuffer is too small,
		  // return max too.
		  if (pos === 0) { return max; }
		
		  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
		};


	/***/ },
	/* 39 */
	/***/ function(module, exports) {
		
		
		module.exports = {
		
		  /* Allowed flush values; see deflate() and inflate() below for details */
		  Z_NO_FLUSH:         0,
		  Z_PARTIAL_FLUSH:    1,
		  Z_SYNC_FLUSH:       2,
		  Z_FULL_FLUSH:       3,
		  Z_FINISH:           4,
		  Z_BLOCK:            5,
		  Z_TREES:            6,
		
		  /* Return codes for the compression/decompression functions. Negative values
		  * are errors, positive values are used for special but normal events.
		  */
		  Z_OK:               0,
		  Z_STREAM_END:       1,
		  Z_NEED_DICT:        2,
		  Z_ERRNO:           -1,
		  Z_STREAM_ERROR:    -2,
		  Z_DATA_ERROR:      -3,
		  //Z_MEM_ERROR:     -4,
		  Z_BUF_ERROR:       -5,
		  //Z_VERSION_ERROR: -6,
		
		  /* compression levels */
		  Z_NO_COMPRESSION:         0,
		  Z_BEST_SPEED:             1,
		  Z_BEST_COMPRESSION:       9,
		  Z_DEFAULT_COMPRESSION:   -1,
		
		
		  Z_FILTERED:               1,
		  Z_HUFFMAN_ONLY:           2,
		  Z_RLE:                    3,
		  Z_FIXED:                  4,
		  Z_DEFAULT_STRATEGY:       0,
		
		  /* Possible values of the data_type field (though see inflate()) */
		  Z_BINARY:                 0,
		  Z_TEXT:                   1,
		  //Z_ASCII:                1, // = Z_TEXT (deprecated)
		  Z_UNKNOWN:                2,
		
		  /* The deflate compression method */
		  Z_DEFLATED:               8
		  //Z_NULL:                 null // Use -1 or null inline, depending on var type
		};


	/***/ },
	/* 40 */
	/***/ function(module, exports) {
		
		module.exports = {
		  2:      'need dictionary',     /* Z_NEED_DICT       2  */
		  1:      'stream end',          /* Z_STREAM_END      1  */
		  0:      '',                    /* Z_OK              0  */
		  '-1':   'file error',          /* Z_ERRNO         (-1) */
		  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
		  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
		  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
		  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
		  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
		};


	/***/ },
	/* 41 */
	/***/ function(module, exports) {
		
		
		function ZStream() {
		  /* next input byte */
		  this.input = null; // JS specific, because we have no pointers
		  this.next_in = 0;
		  /* number of bytes available at input */
		  this.avail_in = 0;
		  /* total number of input bytes read so far */
		  this.total_in = 0;
		  /* next output byte should be put there */
		  this.output = null; // JS specific, because we have no pointers
		  this.next_out = 0;
		  /* remaining free space at output */
		  this.avail_out = 0;
		  /* total number of bytes output so far */
		  this.total_out = 0;
		  /* last error message, NULL if no error */
		  this.msg = ''/*Z_NULL*/;
		  /* not visible by applications */
		  this.state = null;
		  /* best guess about the data type: binary or text */
		  this.data_type = 2/*Z_UNKNOWN*/;
		  /* adler32 value of the uncompressed data */
		  this.adler = 0;
		}
		
		module.exports = ZStream;


	/***/ },
	/* 42 */
	/***/ function(module, exports) {
		
		
		function GZheader() {
		  /* true if compressed data believed to be text */
		  this.text       = 0;
		  /* modification time */
		  this.time       = 0;
		  /* extra flags (not used when writing a gzip file) */
		  this.xflags     = 0;
		  /* operating system */
		  this.os         = 0;
		  /* pointer to extra field or Z_NULL if none */
		  this.extra      = null;
		  /* extra field length (valid if extra != Z_NULL) */
		  this.extra_len  = 0; // Actually, we don't need it in JS,
		                       // but leave for few code modifications
		
		  //
		  // Setup limits is not necessary because in js we should not preallocate memory
		  // for inflate use constant limit in 65536 bytes
		  //
		
		  /* space at extra (only when reading header) */
		  // this.extra_max  = 0;
		  /* pointer to zero-terminated file name or Z_NULL */
		  this.name       = '';
		  /* space at name (only when reading header) */
		  // this.name_max   = 0;
		  /* pointer to zero-terminated comment or Z_NULL */
		  this.comment    = '';
		  /* space at comment (only when reading header) */
		  // this.comm_max   = 0;
		  /* true if there was or will be a header crc */
		  this.hcrc       = 0;
		  /* true when done reading gzip header (not used when writing a gzip file) */
		  this.done       = false;
		}
		
		module.exports = GZheader;


	/***/ }
	/******/ ])
	});

	}(browserfs));

	var BrowserFS = /*@__PURE__*/getDefaultExportFromCjs(browserfs.exports);

	const fs = browserfs.exports.BFSRequire("fs");
	const { existsSync, mkdirSync, readdirSync, readFileSync, renameSync, rmdirSync, statSync, lstatSync, writeFileSync, unlinkSync } = fs;
	BrowserFS.configure({
	    fs: "LocalStorage",
	    options: {}
	}, function (e) {
	    if (e) {
	        throw e;
	    }
	});

	const log$2 = new Logger("DIDStore");
	class DIDStore {
	    constructor(initialCacheCapacity, maxCacheCapacity, storage) {
	        if (initialCacheCapacity < 0)
	            initialCacheCapacity = 0;
	        if (maxCacheCapacity < 0)
	            maxCacheCapacity = 0;
	        this.cache = new LRUCache({
	            maxItems: maxCacheCapacity
	        });
	        this.storage = storage;
	        log$2.info("DID store opened: {}, cache(init:{}, max:{})", storage.getLocation(), initialCacheCapacity, maxCacheCapacity);
	    }
	    static open(context, initialCacheCapacity = DIDStore.CACHE_INITIAL_CAPACITY, maxCacheCapacity = DIDStore.CACHE_MAX_CAPACITY) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(context != null, "Invalid store context");
	            checkArgument(maxCacheCapacity >= initialCacheCapacity, "Invalid cache capacity spec");
	            let storage = new FileSystemStorage(context);
	            yield storage.init();
	            let store = new DIDStore(initialCacheCapacity, maxCacheCapacity, storage);
	            store.metadata = yield storage.loadMetadata();
	            store.metadata.attachStore(store);
	            return store;
	        });
	    }
	    close() {
	        this.cache.invalidateAll();
	        this.cache = null;
	        this.metadata = null;
	        this.storage = null;
	    }
	    static calcFingerprint(password) {
	        let passwordDigest = md5(buffer$3.Buffer.from(password)).toString();
	        try {
	            let cipher = Aes256cbc.encrypt(buffer$3.Buffer.from(passwordDigest, "hex"), password);
	            return md5(cipher).toString();
	        }
	        catch (e) {
	            throw new DIDStoreCryptoException("Calculate fingerprint error.", e);
	        }
	    }
	    static encryptToBase64(input, passwd) {
	        try {
	            return Aes256cbc.encryptToBase64(input, passwd);
	        }
	        catch (e) {
	            throw new DIDStoreCryptoException("Encrypt data error.", e);
	        }
	    }
	    static decryptFromBase64(input, passwd) {
	        try {
	            return Aes256cbc.decryptFromBase64(input, passwd);
	        }
	        catch (e) {
	            throw new WrongPasswordException("Decrypt private key error.", e);
	        }
	    }
	    static reEncrypt(secret, oldpass, newpass) {
	        let plain = this.decryptFromBase64(secret, oldpass);
	        let newSecret = this.encryptToBase64(plain, newpass);
	        return newSecret;
	    }
	    encrypt(input, passwd) {
	        let fingerprint = this.metadata.getFingerprint();
	        let currentFingerprint = DIDStore.calcFingerprint(passwd);
	        if (fingerprint != null && currentFingerprint !== fingerprint)
	            throw new WrongPasswordException("Password mismatched with previous password.");
	        let result = DIDStore.encryptToBase64(input, passwd);
	        if (fingerprint == null || fingerprint === "")
	            this.metadata.setFingerprint(currentFingerprint);
	        return result;
	    }
	    decrypt(input, passwd) {
	        let fingerprint = this.metadata.getFingerprint();
	        let currentFingerprint = DIDStore.calcFingerprint(passwd);
	        let result = DIDStore.decryptFromBase64(input, passwd);
	        if (fingerprint == null || fingerprint === "")
	            this.metadata.setFingerprint(currentFingerprint);
	        return result;
	    }
	    storeRootIdentity(identity, storepass = undefined) {
	        checkArgument(identity != null, "Invalid identity");
	        if (storepass !== undefined) {
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            let encryptedMnemonic = null;
	            if (identity.getMnemonic() != null)
	                encryptedMnemonic = this.encrypt(buffer$3.Buffer.from(identity.getMnemonic(), 'utf8'), storepass);
	            let encryptedPrivateKey = this.encrypt(identity.getRootPrivateKey().serialize(), storepass);
	            let publicKey = identity.getPreDerivedPublicKey().serializePublicKeyBase58();
	            this.storage.storeRootIdentity(identity.getId(), encryptedMnemonic, encryptedPrivateKey, publicKey, identity.getIndex());
	            if (this.metadata.getDefaultRootIdentity() == null)
	                this.metadata.setDefaultRootIdentity(identity.getId());
	            this.cache.invalidate(DIDStore.Key.forRootIdentity(identity.getId()));
	            this.cache.invalidate(DIDStore.Key.forRootIdentityPrivateKey(identity.getId()));
	        }
	        else {
	            this.storage.updateRootIdentityIndex(identity.getId(), identity.getIndex());
	        }
	    }
	    setDefaultRootIdentity(identity) {
	        checkArgument(identity != null, "Invalid identity");
	        if (!this.containsRootIdentity(identity.getId()))
	            throw new IllegalArgumentException("Invalid identity, not exists in the store");
	        this.metadata.setDefaultRootIdentity(identity.getId());
	    }
	    loadRootIdentity(id = undefined) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (id === undefined) {
	                id = this.metadata.getDefaultRootIdentity();
	                if (id == null || id === "") {
	                    let ids = this.storage.listRootIdentities();
	                    if (ids.length != 1) {
	                        return null;
	                    }
	                    else {
	                        let identity = ids[0];
	                        let identityMetadata = yield this.loadRootIdentityMetadata(identity.getId());
	                        identity.setMetadata(identityMetadata);
	                        this.metadata.setDefaultRootIdentity(identity.getId());
	                        return identity;
	                    }
	                }
	            }
	            checkArgument(id != null && id !== "", "Invalid id");
	            try {
	                let value = yield this.cache.getAsync(DIDStore.Key.forRootIdentity(id), () => __awaiter$9(this, void 0, void 0, function* () {
	                    let identity = this.storage.loadRootIdentity(id);
	                    if (identity != null) {
	                        identity.setMetadata(yield this.loadRootIdentityMetadata(id));
	                        return { value: identity };
	                    }
	                    else {
	                        return { value: DIDStore.NULL };
	                    }
	                }));
	                return value === DIDStore.NULL ? null : value;
	            }
	            catch (e) {
	                throw new DIDStoreException("Load root identity failed: " + id, e);
	            }
	        });
	    }
	    containsRootIdentity(id) {
	        return this.storage.loadRootIdentity(id) != null;
	    }
	    exportRootIdentityMnemonic(id, storepass) {
	        checkArgument(id != null && id !== "", "Invalid id");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let encryptedMnemonic = this.storage.loadRootIdentityMnemonic(id);
	        if (encryptedMnemonic != null)
	            return new String(this.decrypt(encryptedMnemonic, storepass)).valueOf();
	        else
	            return null;
	    }
	    containsRootIdentityMnemonic(id) {
	        checkArgument(id != null && id !== "", "Invalid id");
	        let encryptedMnemonic = this.storage.loadRootIdentityMnemonic(id);
	        return encryptedMnemonic != null;
	    }
	    loadRootIdentityPrivateKey(id, storepass) {
	        try {
	            let value = this.cache.get(DIDStore.Key.forRootIdentityPrivateKey(id), () => {
	                let encryptedKey = this.storage.loadRootIdentityPrivateKey(id);
	                return { value: encryptedKey != null ? encryptedKey : DIDStore.NULL };
	            });
	            if (value !== DIDStore.NULL) {
	                let keyData = this.decrypt(value, storepass);
	                return HDKey.deserialize(keyData);
	            }
	            else {
	                return null;
	            }
	        }
	        catch (e) {
	            if (e instanceof WrongPasswordException)
	                throw e;
	            else
	                throw new DIDStoreException("Load root identity private key failed: " + id, e);
	        }
	    }
	    derive(id, path, storepass) {
	        checkArgument(id != null && id !== "", "Invalid identity");
	        checkArgument(path != null && path !== "", "Invalid path");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let rootPrivateKey = this.loadRootIdentityPrivateKey(id, storepass);
	        if (!rootPrivateKey)
	            throw new DIDStoreCryptoException("Unable to load root private key for id " + id + ". Null private key returned.");
	        let key = rootPrivateKey.deriveWithPath(path);
	        return key;
	    }
	    deleteRootIdentity(id) {
	        checkArgument(id != null && id !== "", "Invalid id");
	        let success = this.storage.deleteRootIdentity(id);
	        if (success) {
	            if (this.metadata.getDefaultRootIdentity() != null && this.metadata.getDefaultRootIdentity() === id)
	                this.metadata.setDefaultRootIdentity(null);
	            this.cache.invalidate(DIDStore.Key.forRootIdentity(id));
	            this.cache.invalidate(DIDStore.Key.forRootIdentityPrivateKey(id));
	        }
	        return success;
	    }
	    listRootIdentities() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let ids = this.storage.listRootIdentities();
	            for (let id of ids) {
	                let identityMetadata = yield this.loadRootIdentityMetadata(id.getId());
	                id.setMetadata(identityMetadata);
	            }
	            return ids;
	        });
	    }
	    containsRootIdentities() {
	        return this.storage.containsRootIdenities();
	    }
	    storeRootIdentityMetadata(id, metadata) {
	        checkArgument(id != null && id !== "", "Invalid id");
	        checkArgument(metadata != null, "Invalid metadata");
	        this.storage.storeRootIdentityMetadata(id, metadata);
	    }
	    loadRootIdentityMetadata(id) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null && id !== "", "Invalid id");
	            let metadata = yield this.storage.loadRootIdentityMetadata(id);
	            if (metadata != null) {
	                metadata.setId(id);
	                metadata.attachStore(this);
	            }
	            else {
	                metadata = new RootIdentity.Metadata(id, this);
	            }
	            return metadata;
	        });
	    }
	    storeDid(doc) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(doc != null, "Invalid doc");
	            this.storage.storeDid(doc);
	            if (doc.getStore() != this) {
	                let metadata = yield this.loadDidMetadata(doc.getSubject());
	                doc.getMetadata().merge(metadata);
	                doc.getMetadata().attachStore(this);
	            }
	            this.storeDidMetadata(doc.getSubject(), doc.getMetadata());
	            for (let vc of doc.getCredentials())
	                yield this.storeCredential(vc);
	            this.cache.put(DIDStore.Key.forDidDocument(doc.getSubject()), doc);
	        });
	    }
	    loadDid(didOrString) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(didOrString != null, "Invalid did");
	            let did;
	            if (!(didOrString instanceof DID))
	                did = DID.from(didOrString);
	            else
	                did = didOrString;
	            try {
	                let value = yield this.cache.getAsync(DIDStore.Key.forDidDocument(did), () => __awaiter$9(this, void 0, void 0, function* () {
	                    let doc = yield this.storage.loadDid(did);
	                    if (doc != null) {
	                        doc.setMetadata(yield this.loadDidMetadata(did));
	                        return { value: doc };
	                    }
	                    else {
	                        return { value: DIDStore.NULL };
	                    }
	                }));
	                return value === DIDStore.NULL ? null : value;
	            }
	            catch (e) {
	                throw new DIDStoreException("Load did document failed: " + did, e);
	            }
	        });
	    }
	    containsDid(did) {
	        checkArgument(did != null, "Invalid did");
	        if (did instanceof DID)
	            return this.loadDid(did) != null;
	        else
	            return this.loadDid(DID.from(did)) != null;
	    }
	    storeDidMetadata(did, metadata) {
	        checkArgument(did != null, "Invalid did");
	        checkArgument(metadata != null, "Invalid metadata");
	        this.storage.storeDidMetadata(did, metadata);
	        metadata.attachStore(this);
	        this.cache.put(DIDStore.Key.forDidMetadata(did), metadata);
	    }
	    loadDidMetadata(did) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(did != null, "Invalid did");
	            try {
	                let value = yield this.cache.getAsync(DIDStore.Key.forDidMetadata(did), () => __awaiter$9(this, void 0, void 0, function* () {
	                    let metadata = yield this.storage.loadDidMetadata(did);
	                    if (metadata != null) {
	                        metadata.setDid(did);
	                        metadata.attachStore(this);
	                    }
	                    else {
	                        metadata = new DIDMetadata(did, this);
	                    }
	                    return { value: metadata };
	                }));
	                return value === DIDStore.NULL ? null : value;
	            }
	            catch (e) {
	                throw new DIDStoreException("Load did metadata failed: " + did, e);
	            }
	        });
	    }
	    deleteDid(didOrString) {
	        checkArgument(didOrString != null, "Invalid did");
	        let did;
	        if (didOrString instanceof DID)
	            did = didOrString;
	        else
	            did = DID.from(didOrString);
	        let success = this.storage.deleteDid(did);
	        if (success) {
	            this.cache.invalidate(DIDStore.Key.forDidDocument(did));
	            this.cache.invalidate(DIDStore.Key.forDidMetadata(did));
	            this.cache.invalidateAll((key) => {
	                return key.id instanceof DIDURL && key.id.getDid() === did;
	            });
	        }
	        return success;
	    }
	    listDids() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let dids = this.storage.listDids();
	            for (let did of dids) {
	                let metadata = yield this.loadDidMetadata(did);
	                if (metadata == null) {
	                    metadata = new DIDMetadata(did, this);
	                }
	                else {
	                    metadata.setDid(did);
	                    metadata.attachStore(this);
	                }
	                did.setMetadata(metadata);
	            }
	            return dids;
	        });
	    }
	    selectDids(filter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let dids = yield this.listDids();
	            if (filter != null) {
	                let dest = [];
	                for (let did of dids) {
	                    if (filter.select(did))
	                        dest.push(did);
	                }
	                dids = dest;
	            }
	            return dids;
	        });
	    }
	    storeCredential(credential) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(credential != null, "Invalid credential");
	            this.storage.storeCredential(credential);
	            if (credential.getMetadata().getStore() != this) {
	                let metadata = yield this.loadCredentialMetadata(credential.getId());
	                credential.getMetadata().merge(metadata);
	                credential.getMetadata().attachStore(this);
	            }
	            this.storeCredentialMetadata(credential.getId(), credential.getMetadata());
	            this.cache.put(DIDStore.Key.forCredential(credential.getId()), credential);
	        });
	    }
	    loadCredential(id) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null, "Invalid credential id");
	            if (typeof id === "string")
	                id = DIDURL.from(id);
	            try {
	                let value = yield this.cache.getAsync(DIDStore.Key.forCredential(id), () => __awaiter$9(this, void 0, void 0, function* () {
	                    let vc = yield this.storage.loadCredential(id);
	                    if (vc != null) {
	                        vc.setMetadata(yield this.loadCredentialMetadata(id));
	                        return { value: vc };
	                    }
	                    else {
	                        return { value: DIDStore.NULL };
	                    }
	                }));
	                return value === DIDStore.NULL ? null : value;
	            }
	            catch (e) {
	                throw new DIDStoreException("Load credential failed: " + id, e);
	            }
	        });
	    }
	    containsCredential(id) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null, "Invalid credential id");
	            return (yield this.loadCredential(id)) != null;
	        });
	    }
	    containsCredentials(did) {
	        checkArgument(did != null, "Invalid did");
	        return this.storage.containsCredentials(did);
	    }
	    storeCredentialMetadata(id, metadata) {
	        checkArgument(id != null, "Invalid credential id");
	        checkArgument(metadata != null, "Invalid credential metadata");
	        this.storage.storeCredentialMetadata(id, metadata);
	        metadata.attachStore(this);
	        this.cache.put(DIDStore.Key.forCredentialMetadata(id), metadata);
	    }
	    loadCredentialMetadata(id) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null, "Invalid credential id");
	            try {
	                let value = yield this.cache.getAsync(DIDStore.Key.forCredentialMetadata(id), () => __awaiter$9(this, void 0, void 0, function* () {
	                    let metadata = yield this.storage.loadCredentialMetadata(id);
	                    if (metadata != null) {
	                        metadata.setId(id);
	                        metadata.attachStore(this);
	                    }
	                    else {
	                        metadata = new CredentialMetadata(id, this);
	                    }
	                    return { value: metadata };
	                }));
	                return value === DIDStore.NULL ? null : value;
	            }
	            catch (e) {
	                throw new DIDStoreException("Load Credential metadata failed: " + id, e);
	            }
	        });
	    }
	    deleteCredential(idOrString) {
	        checkArgument(idOrString != null, "Invalid credential id");
	        let id = DIDURL.from(idOrString);
	        let success = this.storage.deleteCredential(id);
	        if (success) {
	            this.cache.invalidate(DIDStore.Key.forCredential(id));
	            this.cache.invalidate(DIDStore.Key.forCredentialMetadata(id));
	        }
	        return success;
	    }
	    listCredentials(didOrString) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(didOrString != null, "Invalid did");
	            let did;
	            if (didOrString instanceof DID)
	                did = didOrString;
	            else
	                did = DID.from(didOrString);
	            let ids = this.storage.listCredentials(did);
	            for (let id of ids) {
	                let metadata = yield this.loadCredentialMetadata(id);
	                if (metadata == null) {
	                    metadata = new CredentialMetadata(id, this);
	                }
	                else {
	                    metadata.setId(id);
	                    metadata.attachStore(this);
	                }
	                id.setMetadata(metadata);
	            }
	            return ids;
	        });
	    }
	    selectCredentials(didOrString, filter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(didOrString != null, "Invalid did");
	            let did;
	            if (didOrString instanceof DID)
	                did = didOrString;
	            else
	                did = DID.from(didOrString);
	            let vcs = yield this.listCredentials(did);
	            if (filter != null) {
	                let dest = [];
	                for (let id of vcs) {
	                    if (filter.select(id))
	                        dest.push(id);
	                }
	                vcs = dest;
	            }
	            return vcs;
	        });
	    }
	    storePrivateKey(idOrString, privateKey, storepass) {
	        checkArgument(idOrString != null, "Invalid private key id");
	        let id = DIDURL.from(idOrString);
	        checkArgument(privateKey != null && privateKey.length != 0, "Invalid private key");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let encryptedKey = this.encrypt(privateKey, storepass);
	        this.storage.storePrivateKey(id, encryptedKey);
	        this.cache.put(DIDStore.Key.forDidPrivateKey(id), encryptedKey);
	    }
	    storeLazyPrivateKey(id) {
	        checkArgument(id != null, "Invalid private key id");
	        this.storage.storePrivateKey(id, DIDStore.DID_LAZY_PRIVATEKEY);
	        this.cache.put(DIDStore.Key.forDidPrivateKey(id), DIDStore.DID_LAZY_PRIVATEKEY);
	    }
	    loadPrivateKey(id, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null, "Invalid private key id");
	            checkArgument(storepass && storepass != null, "Invalid storepass");
	            let value = this.cache.get(DIDStore.Key.forDidPrivateKey(id), () => {
	                let key = this.storage.loadPrivateKey(id);
	                return {
	                    value: key != null ? key : DIDStore.NULL
	                };
	            });
	            if (value === DIDStore.NULL || !value) {
	                return null;
	            }
	            else {
	                if (value === DIDStore.DID_LAZY_PRIVATEKEY)
	                    return yield RootIdentity.lazyCreateDidPrivateKey(id, this, storepass);
	                else
	                    return this.decrypt(value, storepass);
	            }
	        });
	    }
	    containsPrivateKey(id) {
	        checkArgument(id != null, "Invalid private key id");
	        let keyId = id instanceof DIDURL ? id : DIDURL.from(id);
	        let value = this.cache.get(DIDStore.Key.forDidPrivateKey(keyId), () => {
	            let key = this.storage.loadPrivateKey(keyId);
	            return {
	                value: key != null ? key : DIDStore.NULL
	            };
	        });
	        return value === DIDStore.NULL ? false : true;
	    }
	    containsPrivateKeys(did) {
	        checkArgument(did != null, "Invalid did");
	        if (did instanceof DID)
	            return this.storage.containsPrivateKeys(did);
	        else
	            return this.storage.containsPrivateKeys(DID.from(did));
	    }
	    deletePrivateKey(idOrString) {
	        checkArgument(idOrString != null, "Invalid private key id");
	        let id = DIDURL.from(idOrString);
	        let success = this.storage.deletePrivateKey(id);
	        if (success)
	            this.cache.invalidate(DIDStore.Key.forDidPrivateKey(id));
	        return success;
	    }
	    sign(id, storepass, digest) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(id != null, "Invalid private key id");
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            checkArgument(digest != null && digest.length > 0, "Invalid digest");
	            let key = HDKey.deserialize(yield this.loadPrivateKey(id, storepass));
	            let sig = EcdsaSigner.sign(key.getPrivateKeyBytes(), digest);
	            key = null;
	            return BASE64.fromHex(sig.toString("hex"));
	        });
	    }
	    changePassword(oldPassword, newPassword) {
	        checkArgument(oldPassword != null && oldPassword !== "", "Invalid old password");
	        checkArgument(newPassword != null && newPassword !== "", "Invalid new password");
	        this.storage.changePassword({
	            reEncrypt: (data) => {
	                return DIDStore.reEncrypt(data, oldPassword, newPassword);
	            }
	        });
	        this.metadata.setFingerprint(DIDStore.calcFingerprint(newPassword));
	        this.cache.invalidateAll();
	    }
	    synchronize(handle = null) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (handle == null)
	                handle = DefaultConflictHandle.getInstance();
	            let identities = yield this.listRootIdentities();
	            for (let identity of identities) {
	                yield identity.synchronize(handle);
	            }
	            let dids = this.storage.listDids();
	            for (let did of dids) {
	                let localDoc = yield this.storage.loadDid(did);
	                if (localDoc.isCustomizedDid()) {
	                    let resolvedDoc = yield did.resolve();
	                    if (resolvedDoc == null)
	                        continue;
	                    let finalDoc = resolvedDoc;
	                    localDoc.getMetadata().detachStore();
	                    if (localDoc.getSignature() === resolvedDoc.getSignature() ||
	                        (localDoc.getMetadata().getSignature() != null &&
	                            localDoc.getProof().getSignature() ===
	                                localDoc.getMetadata().getSignature())) {
	                        finalDoc.getMetadata().merge(localDoc.getMetadata());
	                    }
	                    else {
	                        log$2.debug("{} on-chain copy conflict with local copy.", did.toString());
	                        finalDoc = handle.merge(resolvedDoc, localDoc);
	                        if (finalDoc == null || !finalDoc.getSubject().equals(did)) {
	                            log$2.error("Conflict handle merge the DIDDocument error.");
	                            throw new DIDStoreException("deal with local modification error.");
	                        }
	                        else {
	                            log$2.debug("Conflict handle return the final copy.");
	                        }
	                    }
	                    localDoc.getMetadata().attachStore(this);
	                    let metadata = finalDoc.getMetadata();
	                    metadata.setPublished(resolvedDoc.getMetadata().getPublished());
	                    metadata.setSignature(resolvedDoc.getProof().getSignature());
	                    if (resolvedDoc.getMetadata().isDeactivated())
	                        metadata.setDeactivated(true);
	                    metadata.attachStore(this);
	                    this.storage.storeDid(finalDoc);
	                }
	                let vcIds = this.storage.listCredentials(did);
	                for (let vcId of vcIds) {
	                    let localVc = yield this.storage.loadCredential(vcId);
	                    let resolvedVc = yield VerifiableCredential.resolve(vcId, localVc.getIssuer());
	                    if (resolvedVc == null)
	                        continue;
	                    resolvedVc.getMetadata().merge(localVc.getMetadata());
	                    this.storage.storeCredential(resolvedVc);
	                }
	            }
	        });
	    }
	    exportDid(did, password, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(did != null, "Invalid id");
	            checkArgument(password != null && password !== "", "Invalid password");
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            if (typeof did === "string")
	                did = DID.from(did);
	            let doc = yield this.storage.loadDid(did);
	            if (doc == null)
	                throw new DIDStoreException("Export DID " + did + " failed, not exist.");
	            doc.setMetadata(yield this.storage.loadDidMetadata(did));
	            log$2.debug("Exporting {}...", did.toString());
	            let de = new DIDStore.DIDExport(did);
	            de.setDocument(doc);
	            if (this.storage.containsCredentials(did)) {
	                let ids = Array.from(yield this.listCredentials(did));
	                ids.sort();
	                for (let id of ids) {
	                    log$2.debug("Exporting credential {}...", id.toString());
	                    let vc = yield this.storage.loadCredential(id);
	                    vc.setMetadata(yield this.storage.loadCredentialMetadata(id));
	                    de.addCredential(vc);
	                }
	            }
	            if (this.storage.containsPrivateKeys(did)) {
	                let pks = doc.getPublicKeys();
	                for (let pk of pks) {
	                    if (!pk.getController().equals(did))
	                        continue;
	                    let id = pk.getId();
	                    let key = this.storage.loadPrivateKey(id);
	                    if (key != null) {
	                        log$2.debug("Exporting private key {}...", id.toString());
	                        de.addPrivatekey(id, key, storepass, password);
	                    }
	                }
	            }
	            de.seal(password);
	            return de.serialize(true);
	        });
	    }
	    importDid(data, password, storepass) {
	        checkArgument(data != null && data !== "", "Invalid import data");
	        checkArgument(password != null && password !== "", "Invalid password");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let de = DIDStore.DIDExport.parse(data);
	        de.verify(password);
	        let doc = de.getDocument();
	        this.storage.storeDid(doc);
	        this.storage.storeDidMetadata(doc.getSubject(), doc.getMetadata());
	        let vcs = de.getCredentials();
	        for (let vc of vcs) {
	            this.storage.storeCredential(vc);
	            this.storage.storeCredentialMetadata(vc.getId(), vc.getMetadata());
	        }
	        let sks = de.getPrivateKeys();
	        for (let sk of sks)
	            this.storage.storePrivateKey(sk.getId(), sk.getKey(password, storepass));
	        return null;
	    }
	    exportRootIdentity(id, password, storepass) {
	        checkArgument(id != null && id !== "", "Invalid id");
	        checkArgument(password != null && password !== "", "Invalid password");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let rie = new DIDStore.RootIdentityExport();
	        let mnemonic = this.storage.loadRootIdentityMnemonic(id);
	        if (mnemonic !== null)
	            rie.setMnemonic(mnemonic, storepass, password);
	        rie.setPirvateKey(this.storage.loadRootIdentityPrivateKey(id), storepass, password);
	        let rootidentity = this.storage.loadRootIdentity(id);
	        rie.setPublicKey(rootidentity.getPreDerivedPublicKey().serializePublicKeyBase58());
	        rie.setIndex(rootidentity.getIndex());
	        if (rootidentity.getId() == this.metadata.getDefaultRootIdentity())
	            rie.setDefault();
	        rie.seal(password);
	        return rie.serialize(true);
	    }
	    importRootIdentity(data, password, storepass) {
	        checkArgument(data != null && data !== "", "Invalid import data");
	        checkArgument(password != null && password !== "", "Invalid password");
	        checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	        let rie = DIDStore.RootIdentityExport.parse(data);
	        rie.verify(password);
	        let encryptedMnemonic = rie.getMnemonic(password, storepass);
	        let encryptedPrivateKey = rie.getPrivateKey(password, storepass);
	        let publicKey = rie.getPublicKey();
	        let hk = HDKey.deserializeBase58(publicKey);
	        let id = RootIdentity.getId(hk.serializePublicKey());
	        this.storage.storeRootIdentity(id, encryptedMnemonic, encryptedPrivateKey, publicKey, rie.getIndex());
	        if (rie.isDefault() && this.metadata.getDefaultRootIdentity() == null)
	            this.metadata.setDefaultRootIdentity(id);
	        return null;
	    }
	    exportStore(zipFile, password, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(zipFile != null, "Invalid zip file");
	            checkArgument(password != null && password !== "", "Invalid password");
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            let zip = new JSZip();
	            let dids = yield this.listDids();
	            for (let did of dids) {
	                let data = yield this.exportDid(did, password, storepass);
	                zip.file("did-" + did.getMethodSpecificId(), data);
	            }
	            let identities = yield this.listRootIdentities();
	            for (let identity of identities) {
	                let data = yield this.exportRootIdentity(identity.getId(), password, storepass);
	                zip.file("rootIdentity-" + identity.getId(), data);
	            }
	            let file = new File(zipFile);
	            file.createFile();
	            try {
	                let content = yield zip.generateAsync({ type: "nodebuffer", platform: "UNIX" });
	                writeFileSync(zipFile, content, { mode: 0o644, flag: "w+" });
	            }
	            catch (e) {
	                throw new MalformedExportDataException(e);
	            }
	        });
	    }
	    importStore(zipFile, password, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(zipFile != null, "Invalid zip file");
	            checkArgument(password != null && password !== "", "Invalid password");
	            checkArgument(storepass != null && storepass !== "", "Invalid storepass");
	            let fingerprint = this.metadata.getFingerprint();
	            let currentFingerprint = DIDStore.calcFingerprint(storepass);
	            if (fingerprint != null && currentFingerprint !== fingerprint)
	                throw new WrongPasswordException("Password mismatched with previous password.");
	            try {
	                const promises = [];
	                let data = yield readFileSync(zipFile);
	                let zip = yield JSZip.loadAsync(data);
	                zip.forEach((relativePath, zipEntry) => {
	                    let promise = zip.file(relativePath).async("string").then((content) => __awaiter$9(this, void 0, void 0, function* () {
	                        if (relativePath.startsWith("rootIdentity-"))
	                            yield this.importRootIdentity(content, password, storepass);
	                        else if (relativePath.startsWith("did-"))
	                            yield this.importDid(content, password, storepass);
	                        else
	                            console.log("Skip unknow export entry: " + relativePath);
	                    }));
	                    promises.push(promise);
	                });
	                yield Promise.all(promises);
	            }
	            catch (e) {
	                throw new MalformedExportDataException(e);
	            }
	            if (fingerprint == null || fingerprint == "")
	                this.metadata.setFingerprint(currentFingerprint);
	        });
	    }
	}
	DIDStore.CACHE_INITIAL_CAPACITY = 16;
	DIDStore.CACHE_MAX_CAPACITY = 128;
	DIDStore.NULL = null;
	DIDStore.DID_LAZY_PRIVATEKEY = "lazy-private-key";
	(function (DIDStore) {
	    class Key {
	        constructor(type, id) {
	            this.type = type;
	            this.id = id;
	        }
	        hashCode() {
	            return this.type + this.id.hashCode();
	        }
	        equals(obj) {
	            if (obj == this)
	                return true;
	            if (obj instanceof Key) {
	                let key = obj;
	                return this.type == key.type ? this.id.equals(key.id) : false;
	            }
	            return false;
	        }
	        static forRootIdentity(id) {
	            return new Key(DIDStore.Key.TYPE_ROOT_IDENTITY, new class {
	                equals(o) { return o === id; }
	                compareTo(o) { return id.localeCompare(o); }
	                hashCode() { return hashCode(id); }
	            });
	        }
	        static forRootIdentityPrivateKey(id) {
	            return new Key(DIDStore.Key.TYPE_ROOT_IDENTITY_PRIVATEKEY, new class {
	                constructor() {
	                    this.key = id;
	                }
	                equals(o) { return o === this.key; }
	                compareTo(o) {
	                    if (this.key < o)
	                        return -1;
	                    if (this.key > o)
	                        return 1;
	                    return 0;
	                }
	                hashCode() { return hashCode(this.key); }
	            });
	        }
	        static forDidDocument(did) {
	            return new Key(DIDStore.Key.TYPE_DID_DOCUMENT, did);
	        }
	        static forDidMetadata(did) {
	            return new Key(DIDStore.Key.TYPE_DID_METADATA, did);
	        }
	        static forDidPrivateKey(id) {
	            return new Key(DIDStore.Key.TYPE_DID_PRIVATEKEY, id);
	        }
	        static forCredential(id) {
	            return new Key(DIDStore.Key.TYPE_CREDENTIAL, id);
	        }
	        static forCredentialMetadata(id) {
	            return new Key(DIDStore.Key.TYPE_CREDENTIAL_METADATA, id);
	        }
	    }
	    Key.TYPE_ROOT_IDENTITY = 0x00;
	    Key.TYPE_ROOT_IDENTITY_PRIVATEKEY = 0x01;
	    Key.TYPE_DID_DOCUMENT = 0x10;
	    Key.TYPE_DID_METADATA = 0x11;
	    Key.TYPE_DID_PRIVATEKEY = 0x12;
	    Key.TYPE_CREDENTIAL = 0x20;
	    Key.TYPE_CREDENTIAL_METADATA = 0x21;
	    DIDStore.Key = Key;
	    class DIDExport extends DIDEntity {
	        constructor(id = null) {
	            super();
	            this.document = null;
	            this.credentials = [];
	            this.privatekeys = [];
	            this.created = null;
	            this.fingerprint = null;
	            this.type = DIDExport.DID_EXPORT;
	            this.id = id;
	        }
	        getId() {
	            return this.id;
	        }
	        getDocument() {
	            return this.document.content;
	        }
	        setDocument(doc) {
	            this.document = new DIDStore.DIDExport.Document(doc, doc.getMetadata().isEmpty() ? null : doc.getMetadata());
	        }
	        getCredentials() {
	            if (this.credentials == null)
	                return [];
	            let vcs = [];
	            for (let cred of this.credentials)
	                vcs.push(cred.content);
	            return vcs;
	        }
	        addCredential(credential) {
	            if (this.credentials == null)
	                this.credentials = [];
	            this.credentials.push(new DIDExport.Credential(credential, credential.getMetadata().isEmpty() ? null : credential.getMetadata()));
	        }
	        getPrivateKeys() {
	            return this.privatekeys != null ? this.privatekeys : [];
	        }
	        addPrivatekey(id, privatekey, storepass, exportpass) {
	            if (this.privatekeys == null)
	                this.privatekeys = [];
	            let sk = new DIDStore.DIDExport.PrivateKey(id);
	            sk.setKey(privatekey, storepass, exportpass);
	            this.privatekeys.push(sk);
	        }
	        calculateFingerprint(exportpass) {
	            let hash = createHash$6('sha256');
	            hash.update(buffer$3.Buffer.from(exportpass));
	            hash.update(buffer$3.Buffer.from(this.type));
	            hash.update(buffer$3.Buffer.from(this.id.toString()));
	            hash.update(buffer$3.Buffer.from(this.document.content.toString(true)));
	            if (this.document.metadata)
	                hash.update(buffer$3.Buffer.from(this.document.metadata.toString(true)));
	            if (this.credentials) {
	                for (let vc of this.credentials) {
	                    hash.update(buffer$3.Buffer.from(vc.content.toString(true)));
	                    if (vc.metadata)
	                        hash.update(buffer$3.Buffer.from(vc.metadata.toString(true)));
	                }
	            }
	            for (let sk of this.privatekeys) {
	                hash.update(buffer$3.Buffer.from(sk.id.toString()));
	                hash.update(buffer$3.Buffer.from(sk.key));
	            }
	            hash.update(buffer$3.Buffer.from(this.dateToString(this.created)));
	            let digest = hash.digest();
	            return BASE64.toUrlFormat(digest.toString("base64"));
	        }
	        seal(exportpass) {
	            let now = dayjs();
	            now.set("milliseconds", 0);
	            this.created = now.toDate();
	            this.fingerprint = this.calculateFingerprint(exportpass);
	            return this;
	        }
	        verify(password) {
	            if (this.fingerprint !== this.calculateFingerprint(password))
	                throw new MalformedExportDataException("Invalid export data, fingerprint mismatch. " + this.id.toString());
	        }
	        toJSON(key = null) {
	            let json = {};
	            json.type = this.type;
	            json.id = this.id.toString(),
	                json.document = this.document.toJSON();
	            if (this.credentials && this.credentials.length > 0)
	                json.credential = Array.from(this.credentials, (vc) => vc.toJSON());
	            if (this.privatekeys && this.privatekeys.length > 0)
	                json.privateKey = Array.from(this.privatekeys, (sk) => sk.toJSON());
	            json.created = this.dateToString(this.created);
	            json.fingerprint = this.fingerprint;
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("type", json.type, { mandatory: true, nullable: false });
	            if (!this.type || this.type !== DIDExport.DID_EXPORT)
	                throw new MalformedExportDataException("Invalid export data, unknown type.");
	            this.id = this.getDid("id", json.id, { mandatory: true, nullable: false });
	            if (!json.document)
	                throw new MalformedExportDataException("Invalid export data, missing document.");
	            this.document = DIDExport.Document.parse(json.document);
	            if (json.credential) {
	                if (!Array.isArray(json.credential))
	                    throw new MalformedExportDataException("Invalid export data, invalid credentials.");
	                this.credentials = Array.from(json.credential, (o) => DIDExport.Credential.parse(o));
	            }
	            if (json.privateKey) {
	                if (!Array.isArray(json.privateKey))
	                    throw new MalformedExportDataException("Invalid export data, invalid privatekeys.");
	                this.privatekeys = Array.from(json.privateKey, (o) => DIDExport.PrivateKey.parse(o));
	            }
	            this.created = this.getDate("created", json.created, { mandatory: true, nullable: false });
	            this.fingerprint = this.getString("fingerprint", json.fingerprint, { mandatory: true, nullable: false });
	        }
	        static parse(content, context = null) {
	            try {
	                return DIDEntity.deserialize(content, DIDExport, context);
	            }
	            catch (e) {
	                if (e instanceof MalformedExportDataException)
	                    throw e;
	                else
	                    throw new MalformedExportDataException(e);
	            }
	        }
	    }
	    DIDExport.DID_EXPORT = "did.elastos.export/2.0";
	    DIDStore.DIDExport = DIDExport;
	    (function (DIDExport) {
	        class Document extends DIDEntity {
	            constructor(content = null, metadata = null) {
	                super();
	                this.content = content;
	                this.metadata = metadata;
	            }
	            toJSON(key = null) {
	                let json = {};
	                json.content = this.content.toJSON();
	                if (this.metadata)
	                    json.metadata = this.metadata.toJSON();
	                return json;
	            }
	            fromJSON(json, context = null) {
	                if (!json.content)
	                    throw new MalformedExportDataException("Invalid export data, missing document content");
	                this.content = DIDDocument._parseOnly(json.content);
	                if (json.metadata) {
	                    this.metadata = DIDMetadata.parse(json.metadata);
	                    this.content.setMetadata(this.metadata);
	                }
	            }
	            static parse(content, context = null) {
	                try {
	                    return DIDEntity.deserialize(content, Document, context);
	                }
	                catch (e) {
	                    if (e instanceof MalformedExportDataException)
	                        throw e;
	                    else
	                        throw new MalformedExportDataException(e);
	                }
	            }
	        }
	        DIDExport.Document = Document;
	        class Credential extends DIDEntity {
	            constructor(content = null, metadata = null) {
	                super();
	                this.content = content;
	                this.metadata = metadata;
	            }
	            toJSON(key = null) {
	                let json = {};
	                json.content = this.content.toJSON();
	                if (this.metadata)
	                    json.metadata = this.metadata.toJSON();
	                return json;
	            }
	            fromJSON(json, context = null) {
	                return __awaiter$9(this, void 0, void 0, function* () {
	                    if (!json.content)
	                        throw new MalformedExportDataException("Invalid export data, missing credential content");
	                    this.content = VerifiableCredential.parse(json.content);
	                    if (json.metadata) {
	                        this.metadata = CredentialMetadata.parse(json.metadata);
	                        this.content.setMetadata(this.metadata);
	                    }
	                });
	            }
	            static parse(content, context = null) {
	                try {
	                    return DIDEntity.deserialize(content, Credential, context);
	                }
	                catch (e) {
	                    if (e instanceof MalformedExportDataException)
	                        throw e;
	                    else
	                        throw new MalformedExportDataException(e);
	                }
	            }
	        }
	        DIDExport.Credential = Credential;
	        class PrivateKey extends DIDEntity {
	            constructor(id = null) {
	                super();
	                this.id = id;
	            }
	            getId() {
	                return this.id;
	            }
	            setId(id) {
	                this.id = id;
	            }
	            getKey(exportpass, storepass) {
	                return DIDStore.reEncrypt(this.key, exportpass, storepass);
	            }
	            setKey(key, storepass, exportpass) {
	                this.key = DIDStore.reEncrypt(key, storepass, exportpass);
	            }
	            toJSON(key = null) {
	                return {
	                    id: this.id.toString(),
	                    key: this.key
	                };
	            }
	            fromJSON(json, context = null) {
	                this.id = this.getDidUrl("id", json.id, { mandatory: true, nullable: false });
	                this.key = this.getString("key", json.key, { mandatory: true, nullable: false });
	            }
	            static parse(content, context = null) {
	                try {
	                    return DIDEntity.deserialize(content, PrivateKey, context);
	                }
	                catch (e) {
	                    if (e instanceof MalformedExportDataException)
	                        throw e;
	                    else
	                        throw new MalformedExportDataException(e);
	                }
	            }
	        }
	        DIDExport.PrivateKey = PrivateKey;
	    })(DIDExport = DIDStore.DIDExport || (DIDStore.DIDExport = {}));
	    class RootIdentityExport extends DIDEntity {
	        constructor() {
	            super();
	            this.type = RootIdentityExport.DID_EXPORT;
	        }
	        getMnemonic(exportpass, storepass) {
	            return this.mnemonic == null ? null : DIDStore.reEncrypt(this.mnemonic, exportpass, storepass);
	        }
	        setMnemonic(mnemonic, storepass, exportpass) {
	            this.mnemonic = DIDStore.reEncrypt(mnemonic, storepass, exportpass);
	        }
	        getPrivateKey(exportpass, storepass) {
	            return DIDStore.reEncrypt(this.privatekey, exportpass, storepass);
	        }
	        setPirvateKey(privatekey, storepass, exportpass) {
	            this.privatekey = DIDStore.reEncrypt(privatekey, storepass, exportpass);
	        }
	        getPublicKey() {
	            return this.publickey;
	        }
	        setPublicKey(publicKey) {
	            this.publickey = publicKey;
	        }
	        getIndex() {
	            return this.index;
	        }
	        setIndex(index) {
	            this.index = index;
	        }
	        isDefault() {
	            return this.default == true ? true : false;
	        }
	        setDefault() {
	            this.default = true;
	        }
	        calculateFingerprint(exportpass) {
	            let hash = createHash$6("sha256");
	            hash.update(buffer$3.Buffer.from(exportpass));
	            hash.update(buffer$3.Buffer.from(this.type));
	            if (this.mnemonic)
	                hash.update(buffer$3.Buffer.from(this.mnemonic));
	            hash.update(buffer$3.Buffer.from(this.privatekey));
	            hash.update(buffer$3.Buffer.from(this.publickey));
	            hash.update(buffer$3.Buffer.from(this.index.toString()));
	            hash.update(buffer$3.Buffer.from(this.default.toString()));
	            hash.update(buffer$3.Buffer.from(this.dateToString(this.created)));
	            let digest = hash.digest();
	            return BASE64.toUrlFormat(digest.toString("base64"));
	        }
	        seal(exportpass) {
	            let now = dayjs();
	            now.set("milliseconds", 0);
	            this.created = now.toDate();
	            this.fingerprint = this.calculateFingerprint(exportpass);
	            return this;
	        }
	        verify(password) {
	            if (this.fingerprint !== this.calculateFingerprint(password))
	                throw new MalformedExportDataException("Invalid export data, fingerprint mismatch.");
	        }
	        toJSON(key = null) {
	            return {
	                type: this.type,
	                mnemonic: this.mnemonic,
	                privateKey: this.privatekey,
	                publicKey: this.publickey,
	                index: this.index.toString(),
	                default: this.default.toString(),
	                created: this.dateToString(this.created),
	                fingerprint: this.fingerprint
	            };
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("type", json.type, { mandatory: true, nullable: false });
	            if (!this.type || this.type !== RootIdentityExport.DID_EXPORT)
	                throw new MalformedExportDataException("Invalid export data, unknown type.");
	            this.mnemonic = this.getString("mnemonic", json.mnemonic, { mandatory: true, nullable: false });
	            this.privatekey = this.getString("privateKey", json.privateKey, { mandatory: true, nullable: false });
	            this.publickey = this.getString("publicKey", json.publicKey, { mandatory: true, nullable: false });
	            let index = this.getString("index", json.index, { mandatory: true, nullable: false });
	            this.index = index != null ? Number.parseInt(index) : 0;
	            let d = this.getString("default", json.default, { mandatory: true, nullable: false });
	            this.default = (d && d === "true") ? true : false;
	            this.created = this.getDate("created", json.created, { mandatory: true, nullable: false });
	            this.fingerprint = this.getString("fingerprint", json.fingerprint, { mandatory: true, nullable: false });
	        }
	        static parse(content, context = null) {
	            try {
	                return DIDEntity.deserialize(content, RootIdentityExport, context);
	            }
	            catch (e) {
	                if (e instanceof MalformedExportDataException)
	                    throw e;
	                else
	                    throw new MalformedExportDataException(e);
	            }
	        }
	    }
	    RootIdentityExport.DID_EXPORT = "did.elastos.export/2.0";
	    DIDStore.RootIdentityExport = RootIdentityExport;
	})(DIDStore || (DIDStore = {}));

	class Issuer {
	    constructor(doc, signKey) {
	        this.self = doc;
	        if (signKey) {
	            if (!this.self.isAuthenticationKey(signKey))
	                throw new InvalidKeyException(signKey.toString());
	        }
	        else {
	            signKey = this.self.getDefaultPublicKeyId();
	            if (signKey == null)
	                throw new InvalidKeyException("Need explict sign key or effective controller");
	        }
	        if (!doc.hasPrivateKey(signKey))
	            throw new InvalidKeyException("No private key: " + signKey);
	        this.signKey = signKey;
	    }
	    static newWithDocument(doc, signKey) {
	        checkArgument(doc != null, "Invalid document");
	        if (signKey) {
	            if (signKey instanceof DIDURL) {
	                return new Issuer(doc, signKey);
	            }
	            else {
	                return new Issuer(doc, DIDURL.from(signKey, doc.getSubject()));
	            }
	        }
	        else {
	            return new Issuer(doc);
	        }
	    }
	    static newWithDID(did, store, signKey) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            checkArgument(did != null, "Invalid did");
	            checkArgument(store != null, "Invalid store");
	            let didDoc = yield store.loadDid(did);
	            if (signKey) {
	                if (signKey instanceof DIDURL) {
	                    return new Issuer(didDoc, signKey);
	                }
	                else {
	                    return new Issuer(didDoc, DIDURL.from(signKey, did));
	                }
	            }
	            else {
	                return new Issuer(didDoc);
	            }
	        });
	    }
	    getDid() {
	        return this.self.getSubject();
	    }
	    getDocument() {
	        return this.self;
	    }
	    getSignKey() {
	        return this.signKey;
	    }
	    sign(storepass, data) {
	        return this.self.signWithId(this.signKey, storepass, data);
	    }
	    issueFor(did) {
	        checkArgument(did != null, "Invalid did");
	        if (did instanceof DID) {
	            return new VerifiableCredential.Builder(this, did);
	        }
	        return new VerifiableCredential.Builder(this, DID.from(did));
	    }
	}

	class ByteBuffer {
	    constructor(byteArray) {
	        this.buffer = byteArray;
	        this.position = 0;
	    }
	    static wrap(buffer) {
	        let bytes = new Uint8Array(buffer);
	        for (let i = 0; i < buffer.length; ++i) {
	            bytes[i] = buffer[i];
	        }
	        return new ByteBuffer(bytes);
	    }
	    static allocate(size) {
	        return new ByteBuffer(new Uint8Array(size));
	    }
	    hasRemaining() {
	        return this.size() > this.position;
	    }
	    size() {
	        return this.buffer.length;
	    }
	    reallocate() {
	        const new_array = new Uint8Array(this.size() * 2);
	        new_array.set(this.buffer);
	        this.buffer = new_array;
	    }
	    shrink() {
	        this.buffer = this.buffer.subarray(0, this.position);
	        return this.buffer;
	    }
	    put(b) {
	        if (this.buffer.length < this.position + 1) {
	            this.reallocate();
	        }
	        this.buffer[this.position++] = b;
	    }
	    get(index) {
	        if (index == null) {
	            index = this.position;
	            this.position += 1;
	        }
	        if (this.buffer.length < index + 1) {
	            return 0;
	        }
	        return this.buffer[index];
	    }
	    putShort(num) {
	        if (0xFFFF < num) {
	            throw num + " is over short value";
	        }
	        const lower = (0x00FF & num);
	        const upper = (0xFF00 & num) >> 8;
	        this.put(lower);
	        this.put(upper);
	    }
	    getShort(index) {
	        if (index == null) {
	            index = this.position;
	            this.position += 2;
	        }
	        if (this.buffer.length < index + 2) {
	            return 0;
	        }
	        const lower = this.buffer[index];
	        const upper = this.buffer[index + 1];
	        return (upper << 8) + lower;
	    }
	    putInt(num) {
	        if (0xFFFFFFFF < num) {
	            throw num + " is over integer value";
	        }
	        const b0 = (0x000000FF & num);
	        const b1 = (0x0000FF00 & num) >> 8;
	        const b2 = (0x00FF0000 & num) >> 16;
	        const b3 = (0xFF000000 & num) >> 24;
	        this.put(b0);
	        this.put(b1);
	        this.put(b2);
	        this.put(b3);
	    }
	    getInt(index) {
	        if (index > (this.size() + 4)) {
	            throw new OutOfBoundException();
	        }
	        if (index == null) {
	            index = this.position;
	            this.position += 4;
	        }
	        if (this.buffer.length < index + 4) {
	            return 0;
	        }
	        const b0 = this.buffer[index];
	        const b1 = this.buffer[index + 1];
	        const b2 = this.buffer[index + 2];
	        const b3 = this.buffer[index + 3];
	        return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0;
	    }
	    readInt() {
	        if (!this.hasRemaining())
	            throw new OutOfBoundException("Buffer exhausted");
	        const pos = this.position;
	        this.position += 4;
	        return this.getInt(pos);
	    }
	    putString(str) {
	        const bytes = this.stringToUtf8Bytes(str);
	        for (let i = 0; i < bytes.length; i++) {
	            this.put(bytes[i]);
	        }
	        this.put(0);
	    }
	    getString(index) {
	        let buf = [], ch;
	        if (index == null) {
	            index = this.position;
	        }
	        while (true) {
	            if (this.buffer.length < index + 1) {
	                break;
	            }
	            ch = this.get(index++);
	            if (ch === 0) {
	                break;
	            }
	            else {
	                buf.push(ch);
	            }
	        }
	        this.position = index;
	        return this.utf8BytesToString(buf);
	    }
	    stringToUtf8Bytes(str) {
	        const bytes = new Uint8Array(str.length * 4);
	        let i = 0, j = 0;
	        while (i < str.length) {
	            let unicode_code;
	            const utf16_code = str.charCodeAt(i++);
	            if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {
	                const upper = utf16_code;
	                const lower = str.charCodeAt(i++);
	                if (lower >= 0xDC00 && lower <= 0xDFFF) {
	                    unicode_code =
	                        (upper - 0xD800) * (1 << 10) + (1 << 16) +
	                            (lower - 0xDC00);
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                unicode_code = utf16_code;
	            }
	            if (unicode_code < 0x80) {
	                bytes[j++] = unicode_code;
	            }
	            else if (unicode_code < (1 << 11)) {
	                bytes[j++] = (unicode_code >>> 6) | 0xC0;
	                bytes[j++] = (unicode_code & 0x3F) | 0x80;
	            }
	            else if (unicode_code < (1 << 16)) {
	                bytes[j++] = (unicode_code >>> 12) | 0xE0;
	                bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;
	                bytes[j++] = (unicode_code & 0x3F) | 0x80;
	            }
	            else if (unicode_code < (1 << 21)) {
	                bytes[j++] = (unicode_code >>> 18) | 0xF0;
	                bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;
	                bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;
	                bytes[j++] = (unicode_code & 0x3F) | 0x80;
	            }
	            else ;
	        }
	        return bytes.subarray(0, j);
	    }
	    utf8BytesToString(bytes) {
	        let str = "";
	        let code, b1, b2, b3, b4, upper, lower;
	        let i = 0;
	        while (i < bytes.length) {
	            b1 = bytes[i++];
	            if (b1 < 0x80) {
	                code = b1;
	            }
	            else if ((b1 >> 5) === 0x06) {
	                b2 = bytes[i++];
	                code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);
	            }
	            else if ((b1 >> 4) === 0x0e) {
	                b2 = bytes[i++];
	                b3 = bytes[i++];
	                code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);
	            }
	            else {
	                b2 = bytes[i++];
	                b3 = bytes[i++];
	                b4 = bytes[i++];
	                code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);
	            }
	            if (code < 0x10000) {
	                str += String.fromCharCode(code);
	            }
	            else {
	                code -= 0x10000;
	                upper = (0xD800 | (code >> 10));
	                lower = (0xDC00 | (code & 0x3FF));
	                str += String.fromCharCode(upper, lower);
	            }
	        }
	        return str;
	    }
	}

	function md5(data) {
	    return crypto
	        .createHash('md5')
	        .update(data)
	        .digest("hex");
	}

	class SHA256 {
	    static hashTwice(buffer) {
	        let firstHash = createHash$6('sha256').update(buffer).digest();
	        return createHash$6('sha256').update(firstHash).digest();
	    }
	    static sha256ripemd160(buffer) {
	        let firstHash = createHash$6('sha256').update(buffer).digest();
	        return createHash$6('ripemd160').update(firstHash).digest();
	    }
	    static encodeToString(...inputs) {
	        let fullInput = inputs.reduce((acc, curr) => buffer$3.Buffer.concat([acc, curr]), buffer$3.Buffer.from(""));
	        return createHash$6("sha256").update(fullInput).digest().toString();
	    }
	    static encodeToBuffer(...inputs) {
	        let fullInput = inputs.reduce((acc, curr) => buffer$3.Buffer.concat([acc, curr]), buffer$3.Buffer.from(""));
	        return createHash$6("sha256").update(fullInput).digest();
	    }
	}

	class EcdsaSigner {
	    static sign(privateKey, digest) {
	        const ec = new elliptic$2.ec('p256');
	        const key = ec.keyFromPrivate(privateKey, 'hex');
	        const signature = key.sign(digest);
	        return buffer$3.Buffer.from(signature.r.toString("hex", 64) + signature.s.toString("hex", 64), "hex");
	    }
	    static signData(privateKey, ...data) {
	        return this.sign(privateKey, SHA256.encodeToBuffer(...data));
	    }
	    static verify(publicKey, signature, data) {
	        const ec = new elliptic$2.ec('p256');
	        const key = ec.keyFromPublic(publicKey, 'hex');
	        const rs = { r: signature.slice(0, 32).toString("hex"), s: signature.slice(32).toString("hex") };
	        return key.verify(data, rs);
	    }
	    static verifyData(publicKey, sig, ...data) {
	        return this.verify(publicKey, sig, SHA256.encodeToBuffer(...data));
	    }
	    static sha256Digest(...inputs) {
	        return SHA256.encodeToBuffer(...inputs);
	    }
	}

	class BASE64 {
	    static fromString(value) {
	        let base64string = buffer$3.Buffer.from(value, "utf-8").toString("base64");
	        return this.convertToURI(base64string);
	    }
	    static fromHex(hexString) {
	        return this.encode(hexString);
	    }
	    static fromUrlFormat(b64uString) {
	        return this.convertFromURI(b64uString);
	    }
	    static toUrlFormat(b64String) {
	        return this.convertToURI(b64String);
	    }
	    static toHex(b64String) {
	        return this.decode(b64String);
	    }
	    static toString(b64String) {
	        let b64str = b64String;
	        if (!b64str.endsWith("="))
	            b64str = this.convertFromURI(b64str);
	        return buffer$3.Buffer.from(b64str, "base64").toString("utf-8");
	    }
	    static decode(b64uString) {
	        let b64str = b64uString;
	        if (!b64str.endsWith("="))
	            b64str = this.convertFromURI(b64str);
	        return buffer$3.Buffer.from(b64str, "base64").toString("hex");
	    }
	    static encode(hexToBase64) {
	        let b64str = buffer$3.Buffer.from(hexToBase64, "hex").toString("base64");
	        return this.convertToURI(b64str);
	    }
	    static convertToURI(b64str) {
	        return b64str.replace(/[+/]/g, (item) => item == '+' ? '-' : '_').replace(/=+$/m, '');
	    }
	    static convertFromURI(b64ustr) {
	        return b64ustr.replace(/[-_]/g, (item) => item == '-' ? '+' : '/') + '=';
	    }
	}

	var assert$2 = {exports: {}};

	var errors = {};

	var types = {};

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	var shams = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};

	var origSymbol = typeof Symbol !== 'undefined' && Symbol;
	var hasSymbolSham = shams;

	var hasSymbols$4 = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return hasSymbolSham();
	};

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice$1 = Array.prototype.slice;
	var toStr$4 = Object.prototype.toString;
	var funcType = '[object Function]';

	var implementation$8 = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr$4.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice$1.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice$1.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice$1.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	var implementation$7 = implementation$8;

	var functionBind = Function.prototype.bind || implementation$7;

	var bind$4 = functionBind;

	var src$2 = bind$4.call(Function.call, Object.prototype.hasOwnProperty);

	var undefined$1;

	var $SyntaxError = SyntaxError;
	var $Function = Function;
	var $TypeError = TypeError;

	// eslint-disable-next-line consistent-return
	var getEvalledConstructor = function (expressionSyntax) {
		try {
			return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
		} catch (e) {}
	};

	var $gOPD$1 = Object.getOwnPropertyDescriptor;

	var throwTypeError = function () {
		throw new $TypeError();
	};
	var ThrowTypeError = $gOPD$1
		? (function () {
			try {
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD$1(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols$3 = hasSymbols$4();

	var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

	var needsEval = {};

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);

	var INTRINSICS = {
		'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayIteratorPrototype%': hasSymbols$3 ? getProto$1([][Symbol.iterator]()) : undefined$1,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': needsEval,
		'%AsyncGenerator%': needsEval,
		'%AsyncGeneratorFunction%': needsEval,
		'%AsyncIteratorPrototype%': needsEval,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
		'%Boolean%': Boolean,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%Date%': Date,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
		'%Function%': $Function,
		'%GeneratorFunction%': needsEval,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols$3 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
		'%Math%': Math,
		'%Number%': Number,
		'%Object%': Object,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%ReferenceError%': ReferenceError,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols$3 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
		'%Symbol%': hasSymbols$3 ? Symbol : undefined$1,
		'%SyntaxError%': $SyntaxError,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypeError%': $TypeError,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%URIError%': URIError,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
	};

	var doEval = function doEval(name) {
		var value;
		if (name === '%AsyncFunction%') {
			value = getEvalledConstructor('async function () {}');
		} else if (name === '%GeneratorFunction%') {
			value = getEvalledConstructor('function* () {}');
		} else if (name === '%AsyncGeneratorFunction%') {
			value = getEvalledConstructor('async function* () {}');
		} else if (name === '%AsyncGenerator%') {
			var fn = doEval('%AsyncGeneratorFunction%');
			if (fn) {
				value = fn.prototype;
			}
		} else if (name === '%AsyncIteratorPrototype%') {
			var gen = doEval('%AsyncGenerator%');
			if (gen) {
				value = getProto$1(gen.prototype);
			}
		}

		INTRINSICS[name] = value;

		return value;
	};

	var LEGACY_ALIASES = {
		'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
		'%ArrayPrototype%': ['Array', 'prototype'],
		'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
		'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
		'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
		'%ArrayProto_values%': ['Array', 'prototype', 'values'],
		'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
		'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
		'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
		'%BooleanPrototype%': ['Boolean', 'prototype'],
		'%DataViewPrototype%': ['DataView', 'prototype'],
		'%DatePrototype%': ['Date', 'prototype'],
		'%ErrorPrototype%': ['Error', 'prototype'],
		'%EvalErrorPrototype%': ['EvalError', 'prototype'],
		'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
		'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
		'%FunctionPrototype%': ['Function', 'prototype'],
		'%Generator%': ['GeneratorFunction', 'prototype'],
		'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
		'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
		'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
		'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
		'%JSONParse%': ['JSON', 'parse'],
		'%JSONStringify%': ['JSON', 'stringify'],
		'%MapPrototype%': ['Map', 'prototype'],
		'%NumberPrototype%': ['Number', 'prototype'],
		'%ObjectPrototype%': ['Object', 'prototype'],
		'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
		'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
		'%PromisePrototype%': ['Promise', 'prototype'],
		'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
		'%Promise_all%': ['Promise', 'all'],
		'%Promise_reject%': ['Promise', 'reject'],
		'%Promise_resolve%': ['Promise', 'resolve'],
		'%RangeErrorPrototype%': ['RangeError', 'prototype'],
		'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
		'%RegExpPrototype%': ['RegExp', 'prototype'],
		'%SetPrototype%': ['Set', 'prototype'],
		'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
		'%StringPrototype%': ['String', 'prototype'],
		'%SymbolPrototype%': ['Symbol', 'prototype'],
		'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
		'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
		'%TypeErrorPrototype%': ['TypeError', 'prototype'],
		'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
		'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
		'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
		'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
		'%URIErrorPrototype%': ['URIError', 'prototype'],
		'%WeakMapPrototype%': ['WeakMap', 'prototype'],
		'%WeakSetPrototype%': ['WeakSet', 'prototype']
	};

	var bind$3 = functionBind;
	var hasOwn$1 = src$2;
	var $concat = bind$3.call(Function.call, Array.prototype.concat);
	var $spliceApply = bind$3.call(Function.apply, Array.prototype.splice);
	var $replace = bind$3.call(Function.call, String.prototype.replace);
	var $strSlice = bind$3.call(Function.call, String.prototype.slice);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var first = $strSlice(string, 0, 1);
		var last = $strSlice(string, -1);
		if (first === '%' && last !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
		} else if (last === '%' && first !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
		}
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		var intrinsicName = name;
		var alias;
		if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = '%' + alias[0] + '%';
		}

		if (hasOwn$1(INTRINSICS, intrinsicName)) {
			var value = INTRINSICS[intrinsicName];
			if (value === needsEval) {
				value = doEval(intrinsicName);
			}
			if (typeof value === 'undefined' && !allowMissing) {
				throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
			}

			return {
				alias: alias,
				name: intrinsicName,
				value: value
			};
		}

		throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
	};

	var getIntrinsic = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new $TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new $TypeError('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

		var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;

		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat([0, 1], alias));
		}

		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			var first = $strSlice(part, 0, 1);
			var last = $strSlice(part, -1);
			if (
				(
					(first === '"' || first === "'" || first === '`')
					|| (last === '"' || last === "'" || last === '`')
				)
				&& first !== last
			) {
				throw new $SyntaxError('property names with quotes must have matching quotes');
			}
			if (part === 'constructor' || !isOwn) {
				skipFurtherCaching = true;
			}

			intrinsicBaseName += '.' + part;
			intrinsicRealName = '%' + intrinsicBaseName + '%';

			if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
				value = INTRINSICS[intrinsicRealName];
			} else if (value != null) {
				if (!(part in value)) {
					if (!allowMissing) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					return void undefined$1;
				}
				if ($gOPD$1 && (i + 1) >= parts.length) {
					var desc = $gOPD$1(value, part);
					isOwn = !!desc;

					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
						value = desc.get;
					} else {
						value = value[part];
					}
				} else {
					isOwn = hasOwn$1(value, part);
					value = value[part];
				}

				if (isOwn && !skipFurtherCaching) {
					INTRINSICS[intrinsicRealName] = value;
				}
			}
		}
		return value;
	};

	var callBind$3 = {exports: {}};

	(function (module) {

	var bind = functionBind;
	var GetIntrinsic = getIntrinsic;

	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
	var $max = GetIntrinsic('%Math.max%');

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}

	module.exports = function callBind(originalFunction) {
		var func = $reflectApply(bind, $call, arguments);
		if ($gOPD && $defineProperty) {
			var desc = $gOPD(func, 'length');
			if (desc.configurable) {
				// original length, plus the receiver, minus any additional arguments (after the receiver)
				$defineProperty(
					func,
					'length',
					{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
				);
			}
		}
		return func;
	};

	var applyBind = function applyBind() {
		return $reflectApply(bind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	}
	}(callBind$3));

	var GetIntrinsic$1 = getIntrinsic;

	var callBind$2 = callBind$3.exports;

	var $indexOf$1 = callBind$2(GetIntrinsic$1('String.prototype.indexOf'));

	var callBound$3 = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic$1(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
			return callBind$2(intrinsic);
		}
		return intrinsic;
	};

	var hasToStringTag$3 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	var callBound$2 = callBound$3;

	var $toString$2 = callBound$2('Object.prototype.toString');

	var isStandardArguments = function isArguments(value) {
		if (hasToStringTag$3 && value && typeof value === 'object' && Symbol.toStringTag in value) {
			return false;
		}
		return $toString$2(value) === '[object Arguments]';
	};

	var isLegacyArguments = function isArguments(value) {
		if (isStandardArguments(value)) {
			return true;
		}
		return value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			$toString$2(value) !== '[object Array]' &&
			$toString$2(value.callee) === '[object Function]';
	};

	var supportsStandardArguments = (function () {
		return isStandardArguments(arguments);
	}());

	isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

	var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

	var toStr$3 = Object.prototype.toString;
	var fnToStr = Function.prototype.toString;
	var isFnRegex = /^\s*(?:function)?\*/;
	var hasToStringTag$2 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	var getProto = Object.getPrototypeOf;
	var getGeneratorFunc = function () { // eslint-disable-line consistent-return
		if (!hasToStringTag$2) {
			return false;
		}
		try {
			return Function('return function*() {}')();
		} catch (e) {
		}
	};
	var GeneratorFunction;

	var isGeneratorFunction = function isGeneratorFunction(fn) {
		if (typeof fn !== 'function') {
			return false;
		}
		if (isFnRegex.test(fnToStr.call(fn))) {
			return true;
		}
		if (!hasToStringTag$2) {
			var str = toStr$3.call(fn);
			return str === '[object GeneratorFunction]';
		}
		if (!getProto) {
			return false;
		}
		if (typeof GeneratorFunction === 'undefined') {
			var generatorFunc = getGeneratorFunc();
			GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
		}
		return getProto(fn) === GeneratorFunction;
	};

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString$1 = Object.prototype.toString;

	var foreach = function forEach (obj, fn, ctx) {
	    if (toString$1.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};

	var possibleNames = [
		'BigInt64Array',
		'BigUint64Array',
		'Float32Array',
		'Float64Array',
		'Int16Array',
		'Int32Array',
		'Int8Array',
		'Uint16Array',
		'Uint32Array',
		'Uint8Array',
		'Uint8ClampedArray'
	];

	var availableTypedArrays$2 = function availableTypedArrays() {
		var out = [];
		for (var i = 0; i < possibleNames.length; i++) {
			if (typeof commonjsGlobal[possibleNames[i]] === 'function') {
				out[out.length] = possibleNames[i];
			}
		}
		return out;
	};

	var GetIntrinsic = getIntrinsic;

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
	if ($gOPD) {
		try {
			$gOPD([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			$gOPD = null;
		}
	}

	var getOwnPropertyDescriptor = $gOPD;

	var forEach$2 = foreach;
	var availableTypedArrays$1 = availableTypedArrays$2;
	var callBound$1 = callBound$3;

	var $toString$1 = callBound$1('Object.prototype.toString');
	var hasSymbols$2 = hasSymbols$4();
	var hasToStringTag$1 = hasSymbols$2 && typeof Symbol.toStringTag === 'symbol';

	var typedArrays$1 = availableTypedArrays$1();

	var $indexOf = callBound$1('Array.prototype.indexOf', true) || function indexOf(array, value) {
		for (var i = 0; i < array.length; i += 1) {
			if (array[i] === value) {
				return i;
			}
		}
		return -1;
	};
	var $slice$1 = callBound$1('String.prototype.slice');
	var toStrTags$1 = {};
	var gOPD$1 = getOwnPropertyDescriptor;
	var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
	if (hasToStringTag$1 && gOPD$1 && getPrototypeOf$1) {
		forEach$2(typedArrays$1, function (typedArray) {
			var arr = new commonjsGlobal[typedArray]();
			if (!(Symbol.toStringTag in arr)) {
				throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
			}
			var proto = getPrototypeOf$1(arr);
			var descriptor = gOPD$1(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf$1(proto);
				descriptor = gOPD$1(superProto, Symbol.toStringTag);
			}
			toStrTags$1[typedArray] = descriptor.get;
		});
	}

	var tryTypedArrays$1 = function tryAllTypedArrays(value) {
		var anyTrue = false;
		forEach$2(toStrTags$1, function (getter, typedArray) {
			if (!anyTrue) {
				try {
					anyTrue = getter.call(value) === typedArray;
				} catch (e) { /**/ }
			}
		});
		return anyTrue;
	};

	var isTypedArray$1 = function isTypedArray(value) {
		if (!value || typeof value !== 'object') { return false; }
		if (!hasToStringTag$1) {
			var tag = $slice$1($toString$1(value), 8, -1);
			return $indexOf(typedArrays$1, tag) > -1;
		}
		if (!gOPD$1) { return false; }
		return tryTypedArrays$1(value);
	};

	var forEach$1 = foreach;
	var availableTypedArrays = availableTypedArrays$2;
	var callBound = callBound$3;

	var $toString = callBound('Object.prototype.toString');
	var hasSymbols$1 = hasSymbols$4();
	var hasToStringTag = hasSymbols$1 && typeof Symbol.toStringTag === 'symbol';

	var typedArrays = availableTypedArrays();

	var $slice = callBound('String.prototype.slice');
	var toStrTags = {};
	var gOPD = getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
	if (hasToStringTag && gOPD && getPrototypeOf) {
		forEach$1(typedArrays, function (typedArray) {
			if (typeof commonjsGlobal[typedArray] === 'function') {
				var arr = new commonjsGlobal[typedArray]();
				if (!(Symbol.toStringTag in arr)) {
					throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
				}
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		});
	}

	var tryTypedArrays = function tryAllTypedArrays(value) {
		var foundName = false;
		forEach$1(toStrTags, function (getter, typedArray) {
			if (!foundName) {
				try {
					var name = getter.call(value);
					if (name === typedArray) {
						foundName = name;
					}
				} catch (e) {}
			}
		});
		return foundName;
	};

	var isTypedArray = isTypedArray$1;

	var whichTypedArray = function whichTypedArray(value) {
		if (!isTypedArray(value)) { return false; }
		if (!hasToStringTag) { return $slice($toString(value), 8, -1); }
		return tryTypedArrays(value);
	};

	(function (exports) {

	var isArgumentsObject = isArguments$1;
	var isGeneratorFunction$1 = isGeneratorFunction;
	var whichTypedArray$1 = whichTypedArray;
	var isTypedArray = isTypedArray$1;

	function uncurryThis(f) {
	  return f.call.bind(f);
	}

	var BigIntSupported = typeof BigInt !== 'undefined';
	var SymbolSupported = typeof Symbol !== 'undefined';

	var ObjectToString = uncurryThis(Object.prototype.toString);

	var numberValue = uncurryThis(Number.prototype.valueOf);
	var stringValue = uncurryThis(String.prototype.valueOf);
	var booleanValue = uncurryThis(Boolean.prototype.valueOf);

	if (BigIntSupported) {
	  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
	}

	if (SymbolSupported) {
	  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
	}

	function checkBoxedPrimitive(value, prototypeValueOf) {
	  if (typeof value !== 'object') {
	    return false;
	  }
	  try {
	    prototypeValueOf(value);
	    return true;
	  } catch(e) {
	    return false;
	  }
	}

	exports.isArgumentsObject = isArgumentsObject;
	exports.isGeneratorFunction = isGeneratorFunction$1;
	exports.isTypedArray = isTypedArray;

	// Taken from here and modified for better browser support
	// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
	function isPromise(input) {
		return (
			(
				typeof Promise !== 'undefined' &&
				input instanceof Promise
			) ||
			(
				input !== null &&
				typeof input === 'object' &&
				typeof input.then === 'function' &&
				typeof input.catch === 'function'
			)
		);
	}
	exports.isPromise = isPromise;

	function isArrayBufferView(value) {
	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    return ArrayBuffer.isView(value);
	  }

	  return (
	    isTypedArray(value) ||
	    isDataView(value)
	  );
	}
	exports.isArrayBufferView = isArrayBufferView;


	function isUint8Array(value) {
	  return whichTypedArray$1(value) === 'Uint8Array';
	}
	exports.isUint8Array = isUint8Array;

	function isUint8ClampedArray(value) {
	  return whichTypedArray$1(value) === 'Uint8ClampedArray';
	}
	exports.isUint8ClampedArray = isUint8ClampedArray;

	function isUint16Array(value) {
	  return whichTypedArray$1(value) === 'Uint16Array';
	}
	exports.isUint16Array = isUint16Array;

	function isUint32Array(value) {
	  return whichTypedArray$1(value) === 'Uint32Array';
	}
	exports.isUint32Array = isUint32Array;

	function isInt8Array(value) {
	  return whichTypedArray$1(value) === 'Int8Array';
	}
	exports.isInt8Array = isInt8Array;

	function isInt16Array(value) {
	  return whichTypedArray$1(value) === 'Int16Array';
	}
	exports.isInt16Array = isInt16Array;

	function isInt32Array(value) {
	  return whichTypedArray$1(value) === 'Int32Array';
	}
	exports.isInt32Array = isInt32Array;

	function isFloat32Array(value) {
	  return whichTypedArray$1(value) === 'Float32Array';
	}
	exports.isFloat32Array = isFloat32Array;

	function isFloat64Array(value) {
	  return whichTypedArray$1(value) === 'Float64Array';
	}
	exports.isFloat64Array = isFloat64Array;

	function isBigInt64Array(value) {
	  return whichTypedArray$1(value) === 'BigInt64Array';
	}
	exports.isBigInt64Array = isBigInt64Array;

	function isBigUint64Array(value) {
	  return whichTypedArray$1(value) === 'BigUint64Array';
	}
	exports.isBigUint64Array = isBigUint64Array;

	function isMapToString(value) {
	  return ObjectToString(value) === '[object Map]';
	}
	isMapToString.working = (
	  typeof Map !== 'undefined' &&
	  isMapToString(new Map())
	);

	function isMap(value) {
	  if (typeof Map === 'undefined') {
	    return false;
	  }

	  return isMapToString.working
	    ? isMapToString(value)
	    : value instanceof Map;
	}
	exports.isMap = isMap;

	function isSetToString(value) {
	  return ObjectToString(value) === '[object Set]';
	}
	isSetToString.working = (
	  typeof Set !== 'undefined' &&
	  isSetToString(new Set())
	);
	function isSet(value) {
	  if (typeof Set === 'undefined') {
	    return false;
	  }

	  return isSetToString.working
	    ? isSetToString(value)
	    : value instanceof Set;
	}
	exports.isSet = isSet;

	function isWeakMapToString(value) {
	  return ObjectToString(value) === '[object WeakMap]';
	}
	isWeakMapToString.working = (
	  typeof WeakMap !== 'undefined' &&
	  isWeakMapToString(new WeakMap())
	);
	function isWeakMap(value) {
	  if (typeof WeakMap === 'undefined') {
	    return false;
	  }

	  return isWeakMapToString.working
	    ? isWeakMapToString(value)
	    : value instanceof WeakMap;
	}
	exports.isWeakMap = isWeakMap;

	function isWeakSetToString(value) {
	  return ObjectToString(value) === '[object WeakSet]';
	}
	isWeakSetToString.working = (
	  typeof WeakSet !== 'undefined' &&
	  isWeakSetToString(new WeakSet())
	);
	function isWeakSet(value) {
	  return isWeakSetToString(value);
	}
	exports.isWeakSet = isWeakSet;

	function isArrayBufferToString(value) {
	  return ObjectToString(value) === '[object ArrayBuffer]';
	}
	isArrayBufferToString.working = (
	  typeof ArrayBuffer !== 'undefined' &&
	  isArrayBufferToString(new ArrayBuffer())
	);
	function isArrayBuffer(value) {
	  if (typeof ArrayBuffer === 'undefined') {
	    return false;
	  }

	  return isArrayBufferToString.working
	    ? isArrayBufferToString(value)
	    : value instanceof ArrayBuffer;
	}
	exports.isArrayBuffer = isArrayBuffer;

	function isDataViewToString(value) {
	  return ObjectToString(value) === '[object DataView]';
	}
	isDataViewToString.working = (
	  typeof ArrayBuffer !== 'undefined' &&
	  typeof DataView !== 'undefined' &&
	  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
	);
	function isDataView(value) {
	  if (typeof DataView === 'undefined') {
	    return false;
	  }

	  return isDataViewToString.working
	    ? isDataViewToString(value)
	    : value instanceof DataView;
	}
	exports.isDataView = isDataView;

	// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
	var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
	function isSharedArrayBufferToString(value) {
	  return ObjectToString(value) === '[object SharedArrayBuffer]';
	}
	function isSharedArrayBuffer(value) {
	  if (typeof SharedArrayBufferCopy === 'undefined') {
	    return false;
	  }

	  if (typeof isSharedArrayBufferToString.working === 'undefined') {
	    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
	  }

	  return isSharedArrayBufferToString.working
	    ? isSharedArrayBufferToString(value)
	    : value instanceof SharedArrayBufferCopy;
	}
	exports.isSharedArrayBuffer = isSharedArrayBuffer;

	function isAsyncFunction(value) {
	  return ObjectToString(value) === '[object AsyncFunction]';
	}
	exports.isAsyncFunction = isAsyncFunction;

	function isMapIterator(value) {
	  return ObjectToString(value) === '[object Map Iterator]';
	}
	exports.isMapIterator = isMapIterator;

	function isSetIterator(value) {
	  return ObjectToString(value) === '[object Set Iterator]';
	}
	exports.isSetIterator = isSetIterator;

	function isGeneratorObject(value) {
	  return ObjectToString(value) === '[object Generator]';
	}
	exports.isGeneratorObject = isGeneratorObject;

	function isWebAssemblyCompiledModule(value) {
	  return ObjectToString(value) === '[object WebAssembly.Module]';
	}
	exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

	function isNumberObject(value) {
	  return checkBoxedPrimitive(value, numberValue);
	}
	exports.isNumberObject = isNumberObject;

	function isStringObject(value) {
	  return checkBoxedPrimitive(value, stringValue);
	}
	exports.isStringObject = isStringObject;

	function isBooleanObject(value) {
	  return checkBoxedPrimitive(value, booleanValue);
	}
	exports.isBooleanObject = isBooleanObject;

	function isBigIntObject(value) {
	  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
	}
	exports.isBigIntObject = isBigIntObject;

	function isSymbolObject(value) {
	  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
	}
	exports.isSymbolObject = isSymbolObject;

	function isBoxedPrimitive(value) {
	  return (
	    isNumberObject(value) ||
	    isStringObject(value) ||
	    isBooleanObject(value) ||
	    isBigIntObject(value) ||
	    isSymbolObject(value)
	  );
	}
	exports.isBoxedPrimitive = isBoxedPrimitive;

	function isAnyArrayBuffer(value) {
	  return typeof Uint8Array !== 'undefined' && (
	    isArrayBuffer(value) ||
	    isSharedArrayBuffer(value)
	  );
	}
	exports.isAnyArrayBuffer = isAnyArrayBuffer;

	['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
	  Object.defineProperty(exports, method, {
	    enumerable: false,
	    value: function() {
	      throw new Error(method + ' is not supported in userland');
	    }
	  });
	});
	}(types));

	var isBufferBrowser = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	};

	var util$1 = {};

	(function (exports) {
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
	  function getOwnPropertyDescriptors(obj) {
	    var keys = Object.keys(obj);
	    var descriptors = {};
	    for (var i = 0; i < keys.length; i++) {
	      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
	    }
	    return descriptors;
	  };

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  if (typeof process$1 !== 'undefined' && process$1.noDeprecation === true) {
	    return fn;
	  }

	  // Allow for deprecating things in the process of starting up.
	  if (typeof process$1 === 'undefined') {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process$1.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process$1.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnvRegex = /^$/;

	if (process$1.env.NODE_DEBUG) {
	  var debugEnv = process$1.env.NODE_DEBUG;
	  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
	    .replace(/\*/g, '.*')
	    .replace(/,/g, '$|^')
	    .toUpperCase();
	  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
	}
	exports.debuglog = function(set) {
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (debugEnvRegex.test(set)) {
	      var pid = process$1.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	exports.types = types;

	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	exports.types.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	exports.types.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	exports.types.isNativeError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = isBufferBrowser;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = inherits_browser.exports;

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

	exports.promisify = function promisify(original) {
	  if (typeof original !== 'function')
	    throw new TypeError('The "original" argument must be of type Function');

	  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
	    var fn = original[kCustomPromisifiedSymbol];
	    if (typeof fn !== 'function') {
	      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
	    }
	    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	      value: fn, enumerable: false, writable: false, configurable: true
	    });
	    return fn;
	  }

	  function fn() {
	    var promiseResolve, promiseReject;
	    var promise = new Promise(function (resolve, reject) {
	      promiseResolve = resolve;
	      promiseReject = reject;
	    });

	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }
	    args.push(function (err, value) {
	      if (err) {
	        promiseReject(err);
	      } else {
	        promiseResolve(value);
	      }
	    });

	    try {
	      original.apply(this, args);
	    } catch (err) {
	      promiseReject(err);
	    }

	    return promise;
	  }

	  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

	  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	    value: fn, enumerable: false, writable: false, configurable: true
	  });
	  return Object.defineProperties(
	    fn,
	    getOwnPropertyDescriptors(original)
	  );
	};

	exports.promisify.custom = kCustomPromisifiedSymbol;

	function callbackifyOnRejected(reason, cb) {
	  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
	  // Because `null` is a special error value in callbacks which means "no error
	  // occurred", we error-wrap so the callback consumer can distinguish between
	  // "the promise rejected with null" or "the promise fulfilled with undefined".
	  if (!reason) {
	    var newReason = new Error('Promise was rejected with a falsy value');
	    newReason.reason = reason;
	    reason = newReason;
	  }
	  return cb(reason);
	}

	function callbackify(original) {
	  if (typeof original !== 'function') {
	    throw new TypeError('The "original" argument must be of type Function');
	  }

	  // We DO NOT return the promise as it gives the user a false sense that
	  // the promise is actually somehow related to the callback's execution
	  // and that the callback throwing will reject the promise.
	  function callbackified() {
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }

	    var maybeCb = args.pop();
	    if (typeof maybeCb !== 'function') {
	      throw new TypeError('The last argument must be of type Function');
	    }
	    var self = this;
	    var cb = function() {
	      return maybeCb.apply(self, arguments);
	    };
	    // In true node style we process the callback on `nextTick` with all the
	    // implications (stack, `uncaughtException`, `async_hooks`)
	    original.apply(this, args)
	      .then(function(ret) { nextTick$1(cb.bind(null, null, ret)); },
	            function(rej) { nextTick$1(callbackifyOnRejected.bind(null, rej, cb)); });
	  }

	  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
	  Object.defineProperties(callbackified,
	                          getOwnPropertyDescriptors(original));
	  return callbackified;
	}
	exports.callbackify = callbackify;
	}(util$1));

	// longer be forced to treat every error message change as a semver-major
	// change. The NodeError classes here all expose a `code` property whose
	// value statically and permanently identifies the error. While the error
	// message may change, the code should not.

	function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

	function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

	function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

	function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

	function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

	var codes = {}; // Lazy loaded

	var assert$1;
	var util;

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }

	  function getMessage(arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message;
	    } else {
	      return message(arg1, arg2, arg3);
	    }
	  }

	  var NodeError =
	  /*#__PURE__*/
	  function (_Base) {
	    _inherits$1(NodeError, _Base);

	    function NodeError(arg1, arg2, arg3) {
	      var _this;

	      _classCallCheck$2(this, NodeError);

	      _this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(NodeError).call(this, getMessage(arg1, arg2, arg3)));
	      _this.code = code;
	      return _this;
	    }

	    return NodeError;
	  }(Base);

	  codes[code] = NodeError;
	} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    var len = expected.length;
	    expected = expected.map(function (i) {
	      return String(i);
	    });

	    if (len > 2) {
	      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
	    } else if (len === 2) {
	      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
	    } else {
	      return "of ".concat(thing, " ").concat(expected[0]);
	    }
	  } else {
	    return "of ".concat(thing, " ").concat(String(expected));
	  }
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


	function endsWith$1(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }

	  return str.substring(this_len - search.length, this_len) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  if (assert$1 === undefined) assert$1 = null;
	  assert$1(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

	  var determiner;

	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  var msg;

	  if (endsWith$1(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
	    var type = includes(name, '.') ? 'property' : 'argument';
	    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


	  msg += ". Received type ".concat(_typeof$3(actual));
	  return msg;
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
	  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
	  if (util === undefined) util = util$1;
	  var inspected = util.inspect(value);

	  if (inspected.length > 128) {
	    inspected = "".concat(inspected.slice(0, 128), "...");
	  }

	  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
	}, TypeError);
	createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
	  var type;

	  if (value && value.constructor && value.constructor.name) {
	    type = "instance of ".concat(value.constructor.name);
	  } else {
	    type = "type ".concat(_typeof$3(value));
	  }

	  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
	}, TypeError);
	createErrorType('ERR_MISSING_ARGS', function () {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  if (assert$1 === undefined) assert$1 = null;
	  assert$1(args.length > 0, 'At least one arg needs to be specified');
	  var msg = 'The ';
	  var len = args.length;
	  args = args.map(function (a) {
	    return "\"".concat(a, "\"");
	  });

	  switch (len) {
	    case 1:
	      msg += "".concat(args[0], " argument");
	      break;

	    case 2:
	      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
	      break;

	    default:
	      msg += args.slice(0, len - 1).join(', ');
	      msg += ", and ".concat(args[len - 1], " arguments");
	      break;
	  }

	  return "".concat(msg, " must be specified");
	}, TypeError);
	errors.codes = codes;

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

	function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

	function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

	var _require$1 = util$1,
	    inspect$1 = _require$1.inspect;

	var _require2$1 = errors,
	    ERR_INVALID_ARG_TYPE$1 = _require2$1.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }

	  return str.substring(this_len - search.length, this_len) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


	function repeat(str, count) {
	  count = Math.floor(count);
	  if (str.length == 0 || count == 0) return '';
	  var maxCount = str.length * count;
	  count = Math.floor(Math.log(count) / Math.log(2));

	  while (count) {
	    str += str;
	    count--;
	  }

	  str += str.substring(0, maxCount - str.length);
	  return str;
	}

	var blue = '';
	var green = '';
	var red = '';
	var white = '';
	var kReadableOperator = {
	  deepStrictEqual: 'Expected values to be strictly deep-equal:',
	  strictEqual: 'Expected values to be strictly equal:',
	  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
	  deepEqual: 'Expected values to be loosely deep-equal:',
	  equal: 'Expected values to be loosely equal:',
	  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
	  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
	  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
	  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
	  notEqual: 'Expected "actual" to be loosely unequal to:',
	  notIdentical: 'Values identical but not reference-equal:'
	}; // Comparing short primitives should just show === / !== instead of using the
	// diff.

	var kMaxShortLength = 10;

	function copyError(source) {
	  var keys = Object.keys(source);
	  var target = Object.create(Object.getPrototypeOf(source));
	  keys.forEach(function (key) {
	    target[key] = source[key];
	  });
	  Object.defineProperty(target, 'message', {
	    value: source.message
	  });
	  return target;
	}

	function inspectValue(val) {
	  // The util.inspect default values could be changed. This makes sure the
	  // error messages contain the necessary information nevertheless.
	  return inspect$1(val, {
	    compact: false,
	    customInspect: false,
	    depth: 1000,
	    maxArrayLength: Infinity,
	    // Assert compares only enumerable properties (with a few exceptions).
	    showHidden: false,
	    // Having a long line as error is better than wrapping the line for
	    // comparison for now.
	    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
	    // have meta information about the inspected properties (i.e., know where
	    // in what line the property starts and ends).
	    breakLength: Infinity,
	    // Assert does not detect proxies currently.
	    showProxy: false,
	    sorted: true,
	    // Inspect getters as we also check them when comparing entries.
	    getters: true
	  });
	}

	function createErrDiff(actual, expected, operator) {
	  var other = '';
	  var res = '';
	  var lastPos = 0;
	  var end = '';
	  var skipped = false;
	  var actualInspected = inspectValue(actual);
	  var actualLines = actualInspected.split('\n');
	  var expectedLines = inspectValue(expected).split('\n');
	  var i = 0;
	  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
	  // for the `strictEqual` operator.

	  if (operator === 'strictEqual' && _typeof$2(actual) === 'object' && _typeof$2(expected) === 'object' && actual !== null && expected !== null) {
	    operator = 'strictEqualObject';
	  } // If "actual" and "expected" fit on a single line and they are not strictly
	  // equal, check further special handling.


	  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
	    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
	    // kMaxShortLength and if neither is an object and at least one of them is
	    // not `zero`, use the strict equal comparison to visualize the output.

	    if (inputLength <= kMaxShortLength) {
	      if ((_typeof$2(actual) !== 'object' || actual === null) && (_typeof$2(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
	        // -0 === +0
	        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
	      }
	    } else if (operator !== 'strictEqualObject') {
	      // If the stderr is a tty and the input length is lower than the current
	      // columns per line, add a mismatch indicator below the output. If it is
	      // not a tty, use a default value of 80 characters.
	      var maxLength = process$1.stderr && process$1.stderr.isTTY ? process$1.stderr.columns : 80;

	      if (inputLength < maxLength) {
	        while (actualLines[0][i] === expectedLines[0][i]) {
	          i++;
	        } // Ignore the first characters.


	        if (i > 2) {
	          // Add position indicator for the first mismatch in case it is a
	          // single line and the input length is less than the column length.
	          indicator = "\n  ".concat(repeat(' ', i), "^");
	          i = 0;
	        }
	      }
	    }
	  } // Remove all ending lines that match (this optimizes the output for
	  // readability by reducing the number of total changed lines).


	  var a = actualLines[actualLines.length - 1];
	  var b = expectedLines[expectedLines.length - 1];

	  while (a === b) {
	    if (i++ < 2) {
	      end = "\n  ".concat(a).concat(end);
	    } else {
	      other = a;
	    }

	    actualLines.pop();
	    expectedLines.pop();
	    if (actualLines.length === 0 || expectedLines.length === 0) break;
	    a = actualLines[actualLines.length - 1];
	    b = expectedLines[expectedLines.length - 1];
	  }

	  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
	  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

	  if (maxLines === 0) {
	    // We have to get the result again. The lines were all removed before.
	    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
	    // TODO: Accept env to always show the full error.


	    if (_actualLines.length > 30) {
	      _actualLines[26] = "".concat(blue, "...").concat(white);

	      while (_actualLines.length > 27) {
	        _actualLines.pop();
	      }
	    }

	    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
	  }

	  if (i > 3) {
	    end = "\n".concat(blue, "...").concat(white).concat(end);
	    skipped = true;
	  }

	  if (other !== '') {
	    end = "\n  ".concat(other).concat(end);
	    other = '';
	  }

	  var printedLines = 0;
	  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
	  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

	  for (i = 0; i < maxLines; i++) {
	    // Only extra expected lines exist
	    var cur = i - lastPos;

	    if (actualLines.length < i + 1) {
	      // If the last diverging line is more than one line above and the
	      // current line is at least line three, add some of the former lines and
	      // also add dots to indicate skipped entries.
	      if (cur > 1 && i > 2) {
	        if (cur > 4) {
	          res += "\n".concat(blue, "...").concat(white);
	          skipped = true;
	        } else if (cur > 3) {
	          res += "\n  ".concat(expectedLines[i - 2]);
	          printedLines++;
	        }

	        res += "\n  ".concat(expectedLines[i - 1]);
	        printedLines++;
	      } // Mark the current line as the last diverging one.


	      lastPos = i; // Add the expected line to the cache.

	      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
	      printedLines++; // Only extra actual lines exist
	    } else if (expectedLines.length < i + 1) {
	      // If the last diverging line is more than one line above and the
	      // current line is at least line three, add some of the former lines and
	      // also add dots to indicate skipped entries.
	      if (cur > 1 && i > 2) {
	        if (cur > 4) {
	          res += "\n".concat(blue, "...").concat(white);
	          skipped = true;
	        } else if (cur > 3) {
	          res += "\n  ".concat(actualLines[i - 2]);
	          printedLines++;
	        }

	        res += "\n  ".concat(actualLines[i - 1]);
	        printedLines++;
	      } // Mark the current line as the last diverging one.


	      lastPos = i; // Add the actual line to the result.

	      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
	      printedLines++; // Lines diverge
	    } else {
	      var expectedLine = expectedLines[i];
	      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
	      // a trailing comma. In that case it is actually identical and we should
	      // mark it as such.

	      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
	      // add a comma at the end of the actual line. Otherwise the output could
	      // look weird as in:
	      //
	      //   [
	      //     1         // No comma at the end!
	      // +   2
	      //   ]
	      //

	      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
	        divergingLines = false;
	        actualLine += ',';
	      }

	      if (divergingLines) {
	        // If the last diverging line is more than one line above and the
	        // current line is at least line three, add some of the former lines and
	        // also add dots to indicate skipped entries.
	        if (cur > 1 && i > 2) {
	          if (cur > 4) {
	            res += "\n".concat(blue, "...").concat(white);
	            skipped = true;
	          } else if (cur > 3) {
	            res += "\n  ".concat(actualLines[i - 2]);
	            printedLines++;
	          }

	          res += "\n  ".concat(actualLines[i - 1]);
	          printedLines++;
	        } // Mark the current line as the last diverging one.


	        lastPos = i; // Add the actual line to the result and cache the expected diverging
	        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

	        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
	        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
	        printedLines += 2; // Lines are identical
	      } else {
	        // Add all cached information to the result before adding other things
	        // and reset the cache.
	        res += other;
	        other = ''; // If the last diverging line is exactly one line above or if it is the
	        // very first line, add the line to the result.

	        if (cur === 1 || i === 0) {
	          res += "\n  ".concat(actualLine);
	          printedLines++;
	        }
	      }
	    } // Inspected object to big (Show ~20 rows max)


	    if (printedLines > 20 && i < maxLines - 2) {
	      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
	    }
	  }

	  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
	}

	var AssertionError$1 =
	/*#__PURE__*/
	function (_Error) {
	  _inherits(AssertionError, _Error);

	  function AssertionError(options) {
	    var _this;

	    _classCallCheck$1(this, AssertionError);

	    if (_typeof$2(options) !== 'object' || options === null) {
	      throw new ERR_INVALID_ARG_TYPE$1('options', 'Object', options);
	    }

	    var message = options.message,
	        operator = options.operator,
	        stackStartFn = options.stackStartFn;
	    var actual = options.actual,
	        expected = options.expected;
	    var limit = Error.stackTraceLimit;
	    Error.stackTraceLimit = 0;

	    if (message != null) {
	      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
	    } else {
	      if (process$1.stderr && process$1.stderr.isTTY) {
	        // Reset on each call to make sure we handle dynamically set environment
	        // variables correct.
	        if (process$1.stderr && process$1.stderr.getColorDepth && process$1.stderr.getColorDepth() !== 1) {
	          blue = "\x1B[34m";
	          green = "\x1B[32m";
	          white = "\x1B[39m";
	          red = "\x1B[31m";
	        } else {
	          blue = '';
	          green = '';
	          white = '';
	          red = '';
	        }
	      } // Prevent the error stack from being visible by duplicating the error
	      // in a very close way to the original in case both sides are actually
	      // instances of Error.


	      if (_typeof$2(actual) === 'object' && actual !== null && _typeof$2(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
	        actual = copyError(actual);
	        expected = copyError(expected);
	      }

	      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
	        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
	      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
	        // In case the objects are equal but the operator requires unequal, show
	        // the first object and say A equals B
	        var base = kReadableOperator[operator];
	        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

	        if (operator === 'notStrictEqual' && _typeof$2(actual) === 'object' && actual !== null) {
	          base = kReadableOperator.notStrictEqualObject;
	        } // Only remove lines in case it makes sense to collapse those.
	        // TODO: Accept env to always show the full error.


	        if (res.length > 30) {
	          res[26] = "".concat(blue, "...").concat(white);

	          while (res.length > 27) {
	            res.pop();
	          }
	        } // Only print a single input.


	        if (res.length === 1) {
	          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
	        } else {
	          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
	        }
	      } else {
	        var _res = inspectValue(actual);

	        var other = '';
	        var knownOperators = kReadableOperator[operator];

	        if (operator === 'notDeepEqual' || operator === 'notEqual') {
	          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

	          if (_res.length > 1024) {
	            _res = "".concat(_res.slice(0, 1021), "...");
	          }
	        } else {
	          other = "".concat(inspectValue(expected));

	          if (_res.length > 512) {
	            _res = "".concat(_res.slice(0, 509), "...");
	          }

	          if (other.length > 512) {
	            other = "".concat(other.slice(0, 509), "...");
	          }

	          if (operator === 'deepEqual' || operator === 'equal') {
	            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
	          } else {
	            other = " ".concat(operator, " ").concat(other);
	          }
	        }

	        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
	      }
	    }

	    Error.stackTraceLimit = limit;
	    _this.generatedMessage = !message;
	    Object.defineProperty(_assertThisInitialized(_this), 'name', {
	      value: 'AssertionError [ERR_ASSERTION]',
	      enumerable: false,
	      writable: true,
	      configurable: true
	    });
	    _this.code = 'ERR_ASSERTION';
	    _this.actual = actual;
	    _this.expected = expected;
	    _this.operator = operator;

	    if (Error.captureStackTrace) {
	      // eslint-disable-next-line no-restricted-syntax
	      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
	    } // Create error message including the error code in the name.

	    _this.name = 'AssertionError';
	    return _possibleConstructorReturn(_this);
	  }

	  _createClass(AssertionError, [{
	    key: "toString",
	    value: function toString() {
	      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
	    }
	  }, {
	    key: inspect$1.custom,
	    value: function value(recurseTimes, ctx) {
	      // This limits the `actual` and `expected` property default inspection to
	      // the minimum depth. Otherwise those values would be too verbose compared
	      // to the actual error message which contains a combined view of these two
	      // input values.
	      return inspect$1(this, _objectSpread({}, ctx, {
	        customInspect: false,
	        depth: 0
	      }));
	    }
	  }]);

	  return AssertionError;
	}(_wrapNativeSuper(Error));

	var assertion_error = AssertionError$1;

	/**
	 * Code refactored from Mozilla Developer Network:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	 */

	function assign(target, firstSource) {
	  if (target === undefined || target === null) {
	    throw new TypeError('Cannot convert first argument to object');
	  }

	  var to = Object(target);
	  for (var i = 1; i < arguments.length; i++) {
	    var nextSource = arguments[i];
	    if (nextSource === undefined || nextSource === null) {
	      continue;
	    }

	    var keysArray = Object.keys(Object(nextSource));
	    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
	      var nextKey = keysArray[nextIndex];
	      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	      if (desc !== undefined && desc.enumerable) {
	        to[nextKey] = nextSource[nextKey];
	      }
	    }
	  }
	  return to;
	}

	function polyfill$4() {
	  if (!Object.assign) {
	    Object.defineProperty(Object, 'assign', {
	      enumerable: false,
	      configurable: true,
	      writable: true,
	      value: assign
	    });
	  }
	}

	var es6ObjectAssign = {
	  assign: assign,
	  polyfill: polyfill$4
	};

	var toStr$2 = Object.prototype.toString;

	var isArguments = function isArguments(value) {
		var str = toStr$2.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr$2.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim$1;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr$1 = Object.prototype.toString;
		var isArgs$1 = isArguments; // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim$1 = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$1.call(object) === '[object Function]';
			var isArguments = isArgs$1(object);
			var isString = isObject && toStr$1.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation$6 = keysShim$1;

	var slice = Array.prototype.slice;
	var isArgs = isArguments;

	var origKeys = Object.keys;
	var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation$6;

	var originalKeys = Object.keys;

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	var objectKeys = keysShim;

	var keys = objectKeys;
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction$1 = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction$1(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	var defineProperties_1 = defineProperties;

	var numberIsNaN$1 = function (value) {
		return value !== value;
	};

	var implementation$5 = function is(a, b) {
		if (a === 0 && b === 0) {
			return 1 / a === 1 / b;
		}
		if (a === b) {
			return true;
		}
		if (numberIsNaN$1(a) && numberIsNaN$1(b)) {
			return true;
		}
		return false;
	};

	var implementation$4 = implementation$5;

	var polyfill$3 = function getPolyfill() {
		return typeof Object.is === 'function' ? Object.is : implementation$4;
	};

	var getPolyfill$3 = polyfill$3;
	var define$3 = defineProperties_1;

	var shim$3 = function shimObjectIs() {
		var polyfill = getPolyfill$3();
		define$3(Object, { is: polyfill }, {
			is: function testObjectIs() {
				return Object.is !== polyfill;
			}
		});
		return polyfill;
	};

	var define$2 = defineProperties_1;
	var callBind$1 = callBind$3.exports;

	var implementation$3 = implementation$5;
	var getPolyfill$2 = polyfill$3;
	var shim$2 = shim$3;

	var polyfill$2 = callBind$1(getPolyfill$2(), Object);

	define$2(polyfill$2, {
		getPolyfill: getPolyfill$2,
		implementation: implementation$3,
		shim: shim$2
	});

	var objectIs$2 = polyfill$2;

	/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

	var implementation$2 = function isNaN(value) {
		return value !== value;
	};

	var implementation$1 = implementation$2;

	var polyfill$1 = function getPolyfill() {
		if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
			return Number.isNaN;
		}
		return implementation$1;
	};

	var define$1 = defineProperties_1;
	var getPolyfill$1 = polyfill$1;

	/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

	var shim$1 = function shimNumberIsNaN() {
		var polyfill = getPolyfill$1();
		define$1(Number, { isNaN: polyfill }, {
			isNaN: function testIsNaN() {
				return Number.isNaN !== polyfill;
			}
		});
		return polyfill;
	};

	var callBind = callBind$3.exports;
	var define = defineProperties_1;

	var implementation = implementation$2;
	var getPolyfill = polyfill$1;
	var shim = shim$1;

	var polyfill = callBind(getPolyfill(), Number);

	/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

	define(polyfill, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	var isNan = polyfill;

	function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

	function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

	var regexFlagsSupported = /a/g.flags !== undefined;

	var arrayFromSet = function arrayFromSet(set) {
	  var array = [];
	  set.forEach(function (value) {
	    return array.push(value);
	  });
	  return array;
	};

	var arrayFromMap = function arrayFromMap(map) {
	  var array = [];
	  map.forEach(function (value, key) {
	    return array.push([key, value]);
	  });
	  return array;
	};

	var objectIs$1 = Object.is ? Object.is : objectIs$2;
	var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
	  return [];
	};
	var numberIsNaN = Number.isNaN ? Number.isNaN : isNan;

	function uncurryThis(f) {
	  return f.call.bind(f);
	}

	var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
	var objectToString = uncurryThis(Object.prototype.toString);

	var _require$types$1 = util$1.types,
	    isAnyArrayBuffer = _require$types$1.isAnyArrayBuffer,
	    isArrayBufferView$1 = _require$types$1.isArrayBufferView,
	    isDate$1 = _require$types$1.isDate,
	    isMap = _require$types$1.isMap,
	    isRegExp$1 = _require$types$1.isRegExp,
	    isSet = _require$types$1.isSet,
	    isNativeError = _require$types$1.isNativeError,
	    isBoxedPrimitive = _require$types$1.isBoxedPrimitive,
	    isNumberObject = _require$types$1.isNumberObject,
	    isStringObject = _require$types$1.isStringObject,
	    isBooleanObject = _require$types$1.isBooleanObject,
	    isBigIntObject = _require$types$1.isBigIntObject,
	    isSymbolObject = _require$types$1.isSymbolObject,
	    isFloat32Array = _require$types$1.isFloat32Array,
	    isFloat64Array = _require$types$1.isFloat64Array;

	function isNonIndex(key) {
	  if (key.length === 0 || key.length > 10) return true;

	  for (var i = 0; i < key.length; i++) {
	    var code = key.charCodeAt(i);
	    if (code < 48 || code > 57) return true;
	  } // The maximum size for an array is 2 ** 32 -1.


	  return key.length === 10 && key >= Math.pow(2, 32);
	}

	function getOwnNonIndexProperties(value) {
	  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
	} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */


	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }

	  if (y < x) {
	    return 1;
	  }

	  return 0;
	}
	var kStrict = true;
	var kLoose = false;
	var kNoIterator = 0;
	var kIsArray = 1;
	var kIsSet = 2;
	var kIsMap = 3; // Check if they have the same source and flags

	function areSimilarRegExps(a, b) {
	  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
	}

	function areSimilarFloatArrays(a, b) {
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }

	  for (var offset = 0; offset < a.byteLength; offset++) {
	    if (a[offset] !== b[offset]) {
	      return false;
	    }
	  }

	  return true;
	}

	function areSimilarTypedArrays(a, b) {
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }

	  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
	}

	function areEqualArrayBuffers(buf1, buf2) {
	  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
	}

	function isEqualBoxedPrimitive(val1, val2) {
	  if (isNumberObject(val1)) {
	    return isNumberObject(val2) && objectIs$1(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
	  }

	  if (isStringObject(val1)) {
	    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
	  }

	  if (isBooleanObject(val1)) {
	    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
	  }

	  if (isBigIntObject(val1)) {
	    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
	  }

	  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
	} // Notes: Type tags are historical [[Class]] properties that can be set by
	// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
	// and retrieved using Object.prototype.toString.call(obj) in JS
	// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	// for a list of tags pre-defined in the spec.
	// There are some unspecified tags in the wild too (e.g. typed array tags).
	// Since tags can be altered, they only serve fast failures
	//
	// Typed arrays and buffers are checked by comparing the content in their
	// underlying ArrayBuffer. This optimization requires that it's
	// reasonable to interpret their underlying memory in the same way,
	// which is checked by comparing their type tags.
	// (e.g. a Uint8Array and a Uint16Array with the same memory content
	// could still be different because they will be interpreted differently).
	//
	// For strict comparison, objects should have
	// a) The same built-in type tags
	// b) The same prototypes.


	function innerDeepEqual(val1, val2, strict, memos) {
	  // All identical values are equivalent, as determined by ===.
	  if (val1 === val2) {
	    if (val1 !== 0) return true;
	    return strict ? objectIs$1(val1, val2) : true;
	  } // Check more closely if val1 and val2 are equal.


	  if (strict) {
	    if (_typeof$1(val1) !== 'object') {
	      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
	    }

	    if (_typeof$1(val2) !== 'object' || val1 === null || val2 === null) {
	      return false;
	    }

	    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
	      return false;
	    }
	  } else {
	    if (val1 === null || _typeof$1(val1) !== 'object') {
	      if (val2 === null || _typeof$1(val2) !== 'object') {
	        // eslint-disable-next-line eqeqeq
	        return val1 == val2;
	      }

	      return false;
	    }

	    if (val2 === null || _typeof$1(val2) !== 'object') {
	      return false;
	    }
	  }

	  var val1Tag = objectToString(val1);
	  var val2Tag = objectToString(val2);

	  if (val1Tag !== val2Tag) {
	    return false;
	  }

	  if (Array.isArray(val1)) {
	    // Check for sparse arrays and general fast path
	    if (val1.length !== val2.length) {
	      return false;
	    }

	    var keys1 = getOwnNonIndexProperties(val1);
	    var keys2 = getOwnNonIndexProperties(val2);

	    if (keys1.length !== keys2.length) {
	      return false;
	    }

	    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
	  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
	  // wan't to early return out of the rest of the checks. However we can check
	  // if the second value is one of these values and the first isn't.


	  if (val1Tag === '[object Object]') {
	    // return keyCheck(val1, val2, strict, memos, kNoIterator);
	    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
	      return false;
	    }
	  }

	  if (isDate$1(val1)) {
	    if (!isDate$1(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
	      return false;
	    }
	  } else if (isRegExp$1(val1)) {
	    if (!isRegExp$1(val2) || !areSimilarRegExps(val1, val2)) {
	      return false;
	    }
	  } else if (isNativeError(val1) || val1 instanceof Error) {
	    // Do not compare the stack as it might differ even though the error itself
	    // is otherwise identical.
	    if (val1.message !== val2.message || val1.name !== val2.name) {
	      return false;
	    }
	  } else if (isArrayBufferView$1(val1)) {
	    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
	      if (!areSimilarFloatArrays(val1, val2)) {
	        return false;
	      }
	    } else if (!areSimilarTypedArrays(val1, val2)) {
	      return false;
	    } // Buffer.compare returns true, so val1.length === val2.length. If they both
	    // only contain numeric keys, we don't need to exam further than checking
	    // the symbols.


	    var _keys = getOwnNonIndexProperties(val1);

	    var _keys2 = getOwnNonIndexProperties(val2);

	    if (_keys.length !== _keys2.length) {
	      return false;
	    }

	    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
	  } else if (isSet(val1)) {
	    if (!isSet(val2) || val1.size !== val2.size) {
	      return false;
	    }

	    return keyCheck(val1, val2, strict, memos, kIsSet);
	  } else if (isMap(val1)) {
	    if (!isMap(val2) || val1.size !== val2.size) {
	      return false;
	    }

	    return keyCheck(val1, val2, strict, memos, kIsMap);
	  } else if (isAnyArrayBuffer(val1)) {
	    if (!areEqualArrayBuffers(val1, val2)) {
	      return false;
	    }
	  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
	    return false;
	  }

	  return keyCheck(val1, val2, strict, memos, kNoIterator);
	}

	function getEnumerables(val, keys) {
	  return keys.filter(function (k) {
	    return propertyIsEnumerable(val, k);
	  });
	}

	function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
	  // For all remaining Object pairs, including Array, objects and Maps,
	  // equivalence is determined by having:
	  // a) The same number of owned enumerable properties
	  // b) The same set of keys/indexes (although not necessarily the same order)
	  // c) Equivalent values for every corresponding key/index
	  // d) For Sets and Maps, equal contents
	  // Note: this accounts for both named and indexed properties on Arrays.
	  if (arguments.length === 5) {
	    aKeys = Object.keys(val1);
	    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

	    if (aKeys.length !== bKeys.length) {
	      return false;
	    }
	  } // Cheap key test


	  var i = 0;

	  for (; i < aKeys.length; i++) {
	    if (!hasOwnProperty(val2, aKeys[i])) {
	      return false;
	    }
	  }

	  if (strict && arguments.length === 5) {
	    var symbolKeysA = objectGetOwnPropertySymbols(val1);

	    if (symbolKeysA.length !== 0) {
	      var count = 0;

	      for (i = 0; i < symbolKeysA.length; i++) {
	        var key = symbolKeysA[i];

	        if (propertyIsEnumerable(val1, key)) {
	          if (!propertyIsEnumerable(val2, key)) {
	            return false;
	          }

	          aKeys.push(key);
	          count++;
	        } else if (propertyIsEnumerable(val2, key)) {
	          return false;
	        }
	      }

	      var symbolKeysB = objectGetOwnPropertySymbols(val2);

	      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
	        return false;
	      }
	    } else {
	      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

	      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
	        return false;
	      }
	    }
	  }

	  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
	    return true;
	  } // Use memos to handle cycles.


	  if (memos === undefined) {
	    memos = {
	      val1: new Map(),
	      val2: new Map(),
	      position: 0
	    };
	  } else {
	    // We prevent up to two map.has(x) calls by directly retrieving the value
	    // and checking for undefined. The map can only contain numbers, so it is
	    // safe to check for undefined only.
	    var val2MemoA = memos.val1.get(val1);

	    if (val2MemoA !== undefined) {
	      var val2MemoB = memos.val2.get(val2);

	      if (val2MemoB !== undefined) {
	        return val2MemoA === val2MemoB;
	      }
	    }

	    memos.position++;
	  }

	  memos.val1.set(val1, memos.position);
	  memos.val2.set(val2, memos.position);
	  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
	  memos.val1.delete(val1);
	  memos.val2.delete(val2);
	  return areEq;
	}

	function setHasEqualElement(set, val1, strict, memo) {
	  // Go looking.
	  var setValues = arrayFromSet(set);

	  for (var i = 0; i < setValues.length; i++) {
	    var val2 = setValues[i];

	    if (innerDeepEqual(val1, val2, strict, memo)) {
	      // Remove the matching element to make sure we do not check that again.
	      set.delete(val2);
	      return true;
	    }
	  }

	  return false;
	} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
	// Sadly it is not possible to detect corresponding values properly in case the
	// type is a string, number, bigint or boolean. The reason is that those values
	// can match lots of different string values (e.g., 1n == '+00001').


	function findLooseMatchingPrimitives(prim) {
	  switch (_typeof$1(prim)) {
	    case 'undefined':
	      return null;

	    case 'object':
	      // Only pass in null as object!
	      return undefined;

	    case 'symbol':
	      return false;

	    case 'string':
	      prim = +prim;
	    // Loose equal entries exist only if the string is possible to convert to
	    // a regular number and not NaN.
	    // Fall through

	    case 'number':
	      if (numberIsNaN(prim)) {
	        return false;
	      }

	  }

	  return true;
	}

	function setMightHaveLoosePrim(a, b, prim) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) return altValue;
	  return b.has(altValue) && !a.has(altValue);
	}

	function mapMightHaveLoosePrim(a, b, prim, item, memo) {
	  var altValue = findLooseMatchingPrimitives(prim);

	  if (altValue != null) {
	    return altValue;
	  }

	  var curB = b.get(altValue);

	  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
	    return false;
	  }

	  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
	}

	function setEquiv(a, b, strict, memo) {
	  // This is a lazily initiated Set of entries which have to be compared
	  // pairwise.
	  var set = null;
	  var aValues = arrayFromSet(a);

	  for (var i = 0; i < aValues.length; i++) {
	    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
	    // heavy sets but it is a minor slow down for primitives. As they are fast
	    // to check this improves the worst case scenario instead.

	    if (_typeof$1(val) === 'object' && val !== null) {
	      if (set === null) {
	        set = new Set();
	      } // If the specified value doesn't exist in the second set its an not null
	      // object (or non strict only: a not matching primitive) we'll need to go
	      // hunting for something thats deep-(strict-)equal to it. To make this
	      // O(n log n) complexity we have to copy these values in a new set first.


	      set.add(val);
	    } else if (!b.has(val)) {
	      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

	      if (!setMightHaveLoosePrim(a, b, val)) {
	        return false;
	      }

	      if (set === null) {
	        set = new Set();
	      }

	      set.add(val);
	    }
	  }

	  if (set !== null) {
	    var bValues = arrayFromSet(b);

	    for (var _i = 0; _i < bValues.length; _i++) {
	      var _val = bValues[_i]; // We have to check if a primitive value is already
	      // matching and only if it's not, go hunting for it.

	      if (_typeof$1(_val) === 'object' && _val !== null) {
	        if (!setHasEqualElement(set, _val, strict, memo)) return false;
	      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
	        return false;
	      }
	    }

	    return set.size === 0;
	  }

	  return true;
	}

	function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
	  // To be able to handle cases like:
	  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
	  // ... we need to consider *all* matching keys, not just the first we find.
	  var setValues = arrayFromSet(set);

	  for (var i = 0; i < setValues.length; i++) {
	    var key2 = setValues[i];

	    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
	      set.delete(key2);
	      return true;
	    }
	  }

	  return false;
	}

	function mapEquiv(a, b, strict, memo) {
	  var set = null;
	  var aEntries = arrayFromMap(a);

	  for (var i = 0; i < aEntries.length; i++) {
	    var _aEntries$i = _slicedToArray(aEntries[i], 2),
	        key = _aEntries$i[0],
	        item1 = _aEntries$i[1];

	    if (_typeof$1(key) === 'object' && key !== null) {
	      if (set === null) {
	        set = new Set();
	      }

	      set.add(key);
	    } else {
	      // By directly retrieving the value we prevent another b.has(key) check in
	      // almost all possible cases.
	      var item2 = b.get(key);

	      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
	        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
	        // keys.

	        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

	        if (set === null) {
	          set = new Set();
	        }

	        set.add(key);
	      }
	    }
	  }

	  if (set !== null) {
	    var bEntries = arrayFromMap(b);

	    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
	      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
	          key = _bEntries$_i[0],
	          item = _bEntries$_i[1];

	      if (_typeof$1(key) === 'object' && key !== null) {
	        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
	      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
	        return false;
	      }
	    }

	    return set.size === 0;
	  }

	  return true;
	}

	function objEquiv(a, b, strict, keys, memos, iterationType) {
	  // Sets and maps don't have their entries accessible via normal object
	  // properties.
	  var i = 0;

	  if (iterationType === kIsSet) {
	    if (!setEquiv(a, b, strict, memos)) {
	      return false;
	    }
	  } else if (iterationType === kIsMap) {
	    if (!mapEquiv(a, b, strict, memos)) {
	      return false;
	    }
	  } else if (iterationType === kIsArray) {
	    for (; i < a.length; i++) {
	      if (hasOwnProperty(a, i)) {
	        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
	          return false;
	        }
	      } else if (hasOwnProperty(b, i)) {
	        return false;
	      } else {
	        // Array is sparse.
	        var keysA = Object.keys(a);

	        for (; i < keysA.length; i++) {
	          var key = keysA[i];

	          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
	            return false;
	          }
	        }

	        if (keysA.length !== Object.keys(b).length) {
	          return false;
	        }

	        return true;
	      }
	    }
	  } // The pair must have equivalent values for every corresponding key.
	  // Possibly expensive deep test:


	  for (i = 0; i < keys.length; i++) {
	    var _key = keys[i];

	    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
	      return false;
	    }
	  }

	  return true;
	}

	function isDeepEqual$1(val1, val2) {
	  return innerDeepEqual(val1, val2, kLoose);
	}

	function isDeepStrictEqual$1(val1, val2) {
	  return innerDeepEqual(val1, val2, kStrict);
	}

	var comparisons = {
	  isDeepEqual: isDeepEqual$1,
	  isDeepStrictEqual: isDeepStrictEqual$1
	};

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _require = errors,
	    _require$codes = _require.codes,
	    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
	    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
	    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
	    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

	var AssertionError = assertion_error;

	var _require2 = util$1,
	    inspect = _require2.inspect;

	var _require$types = util$1.types,
	    isPromise = _require$types.isPromise,
	    isRegExp = _require$types.isRegExp;

	var objectAssign = Object.assign ? Object.assign : es6ObjectAssign.assign;
	var objectIs = Object.is ? Object.is : objectIs$2;
	var isDeepEqual;
	var isDeepStrictEqual;

	function lazyLoadComparison() {
	  var comparison = comparisons;

	  isDeepEqual = comparison.isDeepEqual;
	  isDeepStrictEqual = comparison.isDeepStrictEqual;
	} // Escape control characters but not \n and \t to keep the line breaks and

	var warned = false; // The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = assert$2.exports = ok;
	var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided. All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function innerFail(obj) {
	  if (obj.message instanceof Error) throw obj.message;
	  throw new AssertionError(obj);
	}

	function fail(actual, expected, message, operator, stackStartFn) {
	  var argsLen = arguments.length;
	  var internalMessage;

	  if (argsLen === 0) {
	    internalMessage = 'Failed';
	  } else if (argsLen === 1) {
	    message = actual;
	    actual = undefined;
	  } else {
	    if (warned === false) {
	      warned = true;
	      var warn = process$1.emitWarning ? process$1.emitWarning : console.warn.bind(console);
	      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
	    }

	    if (argsLen === 2) operator = '!=';
	  }

	  if (message instanceof Error) throw message;
	  var errArgs = {
	    actual: actual,
	    expected: expected,
	    operator: operator === undefined ? 'fail' : operator,
	    stackStartFn: stackStartFn || fail
	  };

	  if (message !== undefined) {
	    errArgs.message = message;
	  }

	  var err = new AssertionError(errArgs);

	  if (internalMessage) {
	    err.message = internalMessage;
	    err.generatedMessage = true;
	  }

	  throw err;
	}

	assert.fail = fail; // The AssertionError is defined in internal/error.

	assert.AssertionError = AssertionError;

	function innerOk(fn, argLen, value, message) {
	  if (!value) {
	    var generatedMessage = false;

	    if (argLen === 0) {
	      generatedMessage = true;
	      message = 'No value argument passed to `assert.ok()`';
	    } else if (message instanceof Error) {
	      throw message;
	    }

	    var err = new AssertionError({
	      actual: value,
	      expected: true,
	      message: message,
	      operator: '==',
	      stackStartFn: fn
	    });
	    err.generatedMessage = generatedMessage;
	    throw err;
	  }
	} // Pure assertion tests whether a value is truthy, as determined
	// by !!value.


	function ok() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  innerOk.apply(void 0, [ok, args.length].concat(args));
	}

	assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

	/* eslint-disable no-restricted-properties */

	assert.equal = function equal(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  } // eslint-disable-next-line eqeqeq


	  if (actual != expected) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: '==',
	      stackStartFn: equal
	    });
	  }
	}; // The non-equality assertion tests for whether two objects are not
	// equal with !=.


	assert.notEqual = function notEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  } // eslint-disable-next-line eqeqeq


	  if (actual == expected) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: '!=',
	      stackStartFn: notEqual
	    });
	  }
	}; // The equivalence assertion tests a deep equality relation.


	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }

	  if (isDeepEqual === undefined) lazyLoadComparison();

	  if (!isDeepEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'deepEqual',
	      stackStartFn: deepEqual
	    });
	  }
	}; // The non-equivalence assertion tests for any deep inequality.


	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }

	  if (isDeepEqual === undefined) lazyLoadComparison();

	  if (isDeepEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'notDeepEqual',
	      stackStartFn: notDeepEqual
	    });
	  }
	};
	/* eslint-enable */


	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }

	  if (isDeepEqual === undefined) lazyLoadComparison();

	  if (!isDeepStrictEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'deepStrictEqual',
	      stackStartFn: deepStrictEqual
	    });
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;

	function notDeepStrictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }

	  if (isDeepEqual === undefined) lazyLoadComparison();

	  if (isDeepStrictEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'notDeepStrictEqual',
	      stackStartFn: notDeepStrictEqual
	    });
	  }
	}

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }

	  if (!objectIs(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'strictEqual',
	      stackStartFn: strictEqual
	    });
	  }
	};

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }

	  if (objectIs(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'notStrictEqual',
	      stackStartFn: notStrictEqual
	    });
	  }
	};

	var Comparison = function Comparison(obj, keys, actual) {
	  var _this = this;

	  _classCallCheck(this, Comparison);

	  keys.forEach(function (key) {
	    if (key in obj) {
	      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
	        _this[key] = actual[key];
	      } else {
	        _this[key] = obj[key];
	      }
	    }
	  });
	};

	function compareExceptionKey(actual, expected, key, message, keys, fn) {
	  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
	    if (!message) {
	      // Create placeholder objects to create a nice output.
	      var a = new Comparison(actual, keys);
	      var b = new Comparison(expected, keys, actual);
	      var err = new AssertionError({
	        actual: a,
	        expected: b,
	        operator: 'deepStrictEqual',
	        stackStartFn: fn
	      });
	      err.actual = actual;
	      err.expected = expected;
	      err.operator = fn.name;
	      throw err;
	    }

	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: fn.name,
	      stackStartFn: fn
	    });
	  }
	}

	function expectedException(actual, expected, msg, fn) {
	  if (typeof expected !== 'function') {
	    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

	    if (arguments.length === 2) {
	      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
	    } // Handle primitives properly.


	    if (_typeof(actual) !== 'object' || actual === null) {
	      var err = new AssertionError({
	        actual: actual,
	        expected: expected,
	        message: msg,
	        operator: 'deepStrictEqual',
	        stackStartFn: fn
	      });
	      err.operator = fn.name;
	      throw err;
	    }

	    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
	    // as well.

	    if (expected instanceof Error) {
	      keys.push('name', 'message');
	    } else if (keys.length === 0) {
	      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
	    }

	    if (isDeepEqual === undefined) lazyLoadComparison();
	    keys.forEach(function (key) {
	      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
	        return;
	      }

	      compareExceptionKey(actual, expected, key, msg, keys, fn);
	    });
	    return true;
	  } // Guard instanceof against arrow functions as they don't have a prototype.


	  if (expected.prototype !== undefined && actual instanceof expected) {
	    return true;
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function getActual(fn) {
	  if (typeof fn !== 'function') {
	    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
	  }

	  try {
	    fn();
	  } catch (e) {
	    return e;
	  }

	  return NO_EXCEPTION_SENTINEL;
	}

	function checkIsPromise(obj) {
	  // Accept native ES6 promises and promises that are implemented in a similar
	  // way. Do not accept thenables that use a function as `obj` and that have no
	  // `catch` handler.
	  // TODO: thenables are checked up until they have the correct methods,
	  // but according to documentation, the `then` method should receive
	  // the `fulfill` and `reject` arguments as well or it may be never resolved.
	  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
	}

	function waitForActual(promiseFn) {
	  return Promise.resolve().then(function () {
	    var resultPromise;

	    if (typeof promiseFn === 'function') {
	      // Return a rejected promise if `promiseFn` throws synchronously.
	      resultPromise = promiseFn(); // Fail in case no promise is returned.

	      if (!checkIsPromise(resultPromise)) {
	        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
	      }
	    } else if (checkIsPromise(promiseFn)) {
	      resultPromise = promiseFn;
	    } else {
	      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
	    }

	    return Promise.resolve().then(function () {
	      return resultPromise;
	    }).then(function () {
	      return NO_EXCEPTION_SENTINEL;
	    }).catch(function (e) {
	      return e;
	    });
	  });
	}

	function expectsError(stackStartFn, actual, error, message) {
	  if (typeof error === 'string') {
	    if (arguments.length === 4) {
	      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
	    }

	    if (_typeof(actual) === 'object' && actual !== null) {
	      if (actual.message === error) {
	        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
	      }
	    } else if (actual === error) {
	      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
	    }

	    message = error;
	    error = undefined;
	  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
	    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
	  }

	  if (actual === NO_EXCEPTION_SENTINEL) {
	    var details = '';

	    if (error && error.name) {
	      details += " (".concat(error.name, ")");
	    }

	    details += message ? ": ".concat(message) : '.';
	    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
	    innerFail({
	      actual: undefined,
	      expected: error,
	      operator: stackStartFn.name,
	      message: "Missing expected ".concat(fnType).concat(details),
	      stackStartFn: stackStartFn
	    });
	  }

	  if (error && !expectedException(actual, error, message, stackStartFn)) {
	    throw actual;
	  }
	}

	function expectsNoError(stackStartFn, actual, error, message) {
	  if (actual === NO_EXCEPTION_SENTINEL) return;

	  if (typeof error === 'string') {
	    message = error;
	    error = undefined;
	  }

	  if (!error || expectedException(actual, error)) {
	    var details = message ? ": ".concat(message) : '.';
	    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
	    innerFail({
	      actual: actual,
	      expected: error,
	      operator: stackStartFn.name,
	      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
	      stackStartFn: stackStartFn
	    });
	  }

	  throw actual;
	}

	assert.throws = function throws(promiseFn) {
	  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    args[_key2 - 1] = arguments[_key2];
	  }

	  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
	};

	assert.rejects = function rejects(promiseFn) {
	  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    args[_key3 - 1] = arguments[_key3];
	  }

	  return waitForActual(promiseFn).then(function (result) {
	    return expectsError.apply(void 0, [rejects, result].concat(args));
	  });
	};

	assert.doesNotThrow = function doesNotThrow(fn) {
	  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	    args[_key4 - 1] = arguments[_key4];
	  }

	  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
	};

	assert.doesNotReject = function doesNotReject(fn) {
	  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	    args[_key5 - 1] = arguments[_key5];
	  }

	  return waitForActual(fn).then(function (result) {
	    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
	  });
	};

	assert.ifError = function ifError(err) {
	  if (err !== null && err !== undefined) {
	    var message = 'ifError got unwanted exception: ';

	    if (_typeof(err) === 'object' && typeof err.message === 'string') {
	      if (err.message.length === 0 && err.constructor) {
	        message += err.constructor.name;
	      } else {
	        message += err.message;
	      }
	    } else {
	      message += inspect(err);
	    }

	    var newErr = new AssertionError({
	      actual: err,
	      expected: null,
	      operator: 'ifError',
	      message: message,
	      stackStartFn: ifError
	    }); // Make sure we actually have a stack trace!

	    var origStack = err.stack;

	    if (typeof origStack === 'string') {
	      // This will remove any duplicated frames from the error frames taken
	      // from within `ifError` and add the original error frames to the newly
	      // created ones.
	      var tmp2 = origStack.split('\n');
	      tmp2.shift(); // Filter all frames existing in err.stack.

	      var tmp1 = newErr.stack.split('\n');

	      for (var i = 0; i < tmp2.length; i++) {
	        // Find the first occurrence of the frame.
	        var pos = tmp1.indexOf(tmp2[i]);

	        if (pos !== -1) {
	          // Only keep new frames.
	          tmp1 = tmp1.slice(0, pos);
	          break;
	        }
	      }

	      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
	    }

	    throw newErr;
	  }
	}; // Expose a strict only variant of assert


	function strict() {
	  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	    args[_key6] = arguments[_key6];
	  }

	  innerOk.apply(void 0, [strict, args.length].concat(args));
	}

	assert.strict = objectAssign(strict, assert, {
	  equal: assert.strictEqual,
	  deepEqual: assert.deepStrictEqual,
	  notEqual: assert.notStrictEqual,
	  notDeepEqual: assert.notDeepStrictEqual
	});
	assert.strict.strict = assert.strict;

	// base-x encoding / decoding
	// Copyright (c) 2018 base-x contributors
	// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
	// Distributed under the MIT software license, see the accompanying
	// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
	// @ts-ignore
	var _Buffer = safeBuffer$1.exports.Buffer;
	function base (ALPHABET) {
	  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
	  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
	  function encode (source) {
	    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
	    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
	    if (source.length === 0) { return '' }
	        // Skip & count leading zeroes.
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	        // Allocate enough space in big-endian base58 representation.
	    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
	    var b58 = new Uint8Array(size);
	        // Process the bytes.
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	            // Apply "b58 = b58 * 256 + ch".
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
	        carry += (256 * b58[it1]) >>> 0;
	        b58[it1] = (carry % BASE) >>> 0;
	        carry = (carry / BASE) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      pbegin++;
	    }
	        // Skip leading zeroes in base58 result.
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	        // Translate the result into a string.
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
	    return str
	  }
	  function decodeUnsafe (source) {
	    if (typeof source !== 'string') { throw new TypeError('Expected String') }
	    if (source.length === 0) { return _Buffer.alloc(0) }
	    var psz = 0;
	        // Skip leading spaces.
	    if (source[psz] === ' ') { return }
	        // Skip and count leading '1's.
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	        // Allocate enough space in big-endian base256 representation.
	    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
	    var b256 = new Uint8Array(size);
	        // Process the characters.
	    while (source[psz]) {
	            // Decode character
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	            // Invalid character
	      if (carry === 255) { return }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
	        carry += (BASE * b256[it3]) >>> 0;
	        b256[it3] = (carry % 256) >>> 0;
	        carry = (carry / 256) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      psz++;
	    }
	        // Skip trailing spaces.
	    if (source[psz] === ' ') { return }
	        // Skip leading zeroes in b256.
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
	    vch.fill(0x00, 0, zeroes);
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch
	  }
	  function decode (string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) { return buffer }
	    throw new Error('Non-base' + BASE + ' character')
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}
	var src$1 = base;

	var basex = src$1;
	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

	var bs58 = basex(ALPHABET);

	var EC_PRIVATE_KEY_TWEAK_ADD_FAIL = "tweak out of range or resulting private key is invalid";
	var EC_PUBLIC_KEY_PARSE_FAIL = "the public key could not be parsed or is invalid";
	var EC_PUBLIC_KEY_CREATE_FAIL = "private was invalid, try again";
	var EC_PUBLIC_KEY_TWEAK_ADD_FAIL = "tweak out of range or resulting public key is invalid";
	var ECDSA_SIGNATURE_PARSE_FAIL = "couldn't parse signature";
	var ECDSA_SIGN_FAIL = "nonce generation function failed or private key is invalid";

	const ec = new elliptic$2.ec('p256');
	const ecparams = ec.curve;
	function loadPublicKey(publicKey) {
	    return ec.keyFromPublic(publicKey);
	}
	function privateKeyVerify(privateKey) {
	    const bn = new BN$i(privateKey);
	    return bn.cmp(ecparams.n) < 0 && !bn.isZero();
	}
	function privateKeyTweakAdd(privateKey, tweak) {
	    const bn = new BN$i(tweak);
	    if (bn.cmp(ecparams.n) >= 0)
	        throw new Error(EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
	    bn.iadd(new BN$i(privateKey));
	    if (bn.cmp(ecparams.n) >= 0)
	        bn.isub(ecparams.n);
	    if (bn.isZero())
	        throw new Error(EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
	    return bn.toArrayLike(buffer$3.Buffer, 'be', 32);
	}
	function publicKeyCreate(privateKey, compressed) {
	    const d = new BN$i(privateKey);
	    if (d.cmp(ecparams.n) >= 0 || d.isZero())
	        throw new Error(EC_PUBLIC_KEY_CREATE_FAIL);
	    return buffer$3.Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, 'true'));
	}
	function publicKeyConvert(publicKey, compressed) {
	    const pair = loadPublicKey(publicKey);
	    if (pair === null)
	        throw new Error(EC_PUBLIC_KEY_PARSE_FAIL);
	    return buffer$3.Buffer.from(pair.getPublic(compressed, 'true'));
	}
	function publicKeyVerify(publicKey) {
	    return loadPublicKey(publicKey) !== null;
	}
	function publicKeyTweakAdd(publicKey, tweak, compressed) {
	    const pair = loadPublicKey(publicKey);
	    if (pair === null)
	        throw new Error(EC_PUBLIC_KEY_PARSE_FAIL);
	    tweak = new BN$i(tweak);
	    if (tweak.cmp(ecparams.n) >= 0)
	        throw new Error(EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
	    return buffer$3.Buffer.from(ecparams.g
	        .mul(tweak)
	        .add(pair.getPublic())
	        .encode(true, compressed));
	}
	function sign(message, privateKey, noncefn, data) {
	    if (typeof noncefn === 'function') {
	        const getNonce = noncefn;
	        noncefn = function (counter) {
	            const nonce = getNonce(message, privateKey, null, data, counter);
	            if (!buffer$3.Buffer.isBuffer(nonce) || nonce.length !== 32)
	                throw new Error(ECDSA_SIGN_FAIL);
	            return new BN$i(nonce);
	        };
	    }
	    const d = new BN$i(privateKey);
	    if (d.cmp(ecparams.n) >= 0 || d.isZero())
	        throw new Error(ECDSA_SIGN_FAIL);
	    const result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data });
	    return {
	        signature: buffer$3.Buffer.concat([result.r.toArrayLike(buffer$3.Buffer, 'be', 32), result.s.toArrayLike(buffer$3.Buffer, 'be', 32)]),
	        recovery: result.recoveryParam
	    };
	}
	function verify(message, signature, publicKey) {
	    if (message.length % 2 !== 0) {
	        throw new Error('Wrong message length');
	    }
	    const sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };
	    const sigr = new BN$i(sigObj.r);
	    const sigs = new BN$i(sigObj.s);
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
	        throw new Error(ECDSA_SIGNATURE_PARSE_FAIL);
	    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero())
	        return false;
	    const pair = loadPublicKey(publicKey);
	    if (pair === null)
	        throw new Error(EC_PUBLIC_KEY_PARSE_FAIL);
	    return ec.verify(message, sigObj, { x: pair.getPublic().x, y: pair.getPublic().y });
	}

	const MASTER_SECRET = buffer$3.Buffer.from('Bitcoin seed', 'utf8');
	const LEN = 78;
	const BITCOIN_VERSIONS = { private: 0x0488ade4, public: 0x0488b21e };
	class HDKey$1 {
	    constructor(versions) {
	        this.versions = versions || BITCOIN_VERSIONS;
	        this.depth = 0;
	        this.index = 0;
	        this._privateKey = null;
	        this._publicKey = null;
	        this.chainCode = null;
	        this._fingerprint = 0;
	        this.parentFingerprint = 0;
	    }
	    static fromMasterSeed(seedBuffer, versions) {
	        const I = createHmac('sha512', MASTER_SECRET)
	            .update(seedBuffer)
	            .digest();
	        const IL = I.slice(0, 32);
	        const IR = I.slice(32);
	        const hdkey = new HDKey$1(versions);
	        hdkey.chainCode = IR;
	        hdkey.privateKey = IL;
	        return hdkey;
	    }
	    static fromExtendedKey(base58key, versions) {
	        versions = versions || BITCOIN_VERSIONS;
	        const hdkey = new HDKey$1(versions);
	        const keyBuffer = bs58.decode(base58key);
	        const version = keyBuffer.readUInt32BE(0);
	        assert$2.exports.ok(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');
	        hdkey.depth = keyBuffer.readUInt8(4);
	        hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);
	        hdkey.index = keyBuffer.readUInt32BE(9);
	        hdkey.chainCode = keyBuffer.slice(13, 45);
	        const key = keyBuffer.slice(45);
	        if (key.readUInt8(0) === 0) {
	            assert$2.exports.ok(version === versions.private, 'Version mismatch: version does not match private');
	            hdkey.privateKey = key.slice(1, 33);
	        }
	        else {
	            assert$2.exports.ok(version === versions.public, 'Version mismatch: version does not match public');
	            hdkey.publicKey = key.slice(0, 33);
	        }
	        return hdkey;
	    }
	    static fromJSON(obj) {
	        return HDKey$1.fromExtendedKey(obj.xpriv);
	    }
	    get fingerprint() {
	        return this._fingerprint;
	    }
	    get identifier() {
	        return this._identifier;
	    }
	    get pubKeyHash() {
	        return this.identifier;
	    }
	    get privateKey() {
	        return this._privateKey;
	    }
	    set privateKey(value) {
	        if (value === null) {
	            throw new Error('Can not directly set privateKey to null.');
	        }
	        assert$2.exports.equal(value.length, 32, 'Private key must be 32 bytes.');
	        assert$2.exports.ok(privateKeyVerify(value) === true, 'Invalid private key');
	        this._privateKey = value;
	        this._publicKey = publicKeyCreate(value, true);
	        this._identifier = hash160(this.publicKey);
	        this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
	    }
	    get publicKey() {
	        return this._publicKey;
	    }
	    set publicKey(value) {
	        if (value === null) {
	            throw new Error('Can not directly set privateKey to null.');
	        }
	        assert$2.exports.ok(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');
	        assert$2.exports.ok(publicKeyVerify(value) === true, 'Invalid public key');
	        this._publicKey = publicKeyConvert(value, true);
	        this._identifier = hash160(this.publicKey);
	        this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
	        this._privateKey = null;
	    }
	    get privateExtendedKey() {
	        if (this._privateKey)
	            return bs58.encode(serialize(this, this.versions.private, buffer$3.Buffer.concat([buffer$3.Buffer.alloc(1, 0), this.privateKey])));
	        else
	            return null;
	    }
	    get publicExtendedKey() {
	        return bs58.encode(serialize(this, this.versions.public, this.publicKey));
	    }
	    derive(path) {
	        if (path === 'm' || path === 'M' || path === "m'" || path === "M'") {
	            return this;
	        }
	        const entries = path.split('/');
	        let hdkey = this;
	        entries.forEach(function (c, i) {
	            if (i === 0) {
	                assert$2.exports.ok(/^[mM]{1}/.test(c), 'Path must start with "m" or "M"');
	                return;
	            }
	            const hardened = c.length > 1 && c[c.length - 1] === "'";
	            let childIndex = parseInt(c, 10);
	            assert$2.exports.ok(childIndex < HDKey$1.HARDENED_OFFSET, 'Invalid index');
	            if (hardened) {
	                childIndex += HDKey$1.HARDENED_OFFSET;
	            }
	            hdkey = hdkey.deriveChild(childIndex);
	        });
	        return hdkey;
	    }
	    deriveChild(index) {
	        const isHardened = index >= HDKey$1.HARDENED_OFFSET;
	        const indexBuffer = buffer$3.Buffer.allocUnsafe(4);
	        indexBuffer.writeUInt32BE(index, 0);
	        let data;
	        if (isHardened) {
	            assert$2.exports.ok(this.privateKey, 'Could not derive hardened child key');
	            let pk = this.privateKey;
	            const zb = buffer$3.Buffer.alloc(1, 0);
	            pk = buffer$3.Buffer.concat([zb, pk]);
	            data = buffer$3.Buffer.concat([pk, indexBuffer]);
	        }
	        else {
	            data = buffer$3.Buffer.concat([this.publicKey, indexBuffer]);
	        }
	        const I = createHmac('sha512', this.chainCode)
	            .update(data)
	            .digest();
	        const IL = I.slice(0, 32);
	        const IR = I.slice(32);
	        const hd = new HDKey$1(this.versions);
	        if (this.privateKey) {
	            try {
	                hd.privateKey = privateKeyTweakAdd(this.privateKey, IL);
	            }
	            catch (err) {
	                return this.deriveChild(index + 1);
	            }
	        }
	        else {
	            try {
	                hd.publicKey = publicKeyTweakAdd(this.publicKey, IL, true);
	            }
	            catch (err) {
	                return this.deriveChild(index + 1);
	            }
	        }
	        hd.chainCode = IR;
	        hd.depth = this.depth + 1;
	        hd.parentFingerprint = this.fingerprint;
	        hd.index = index;
	        return hd;
	    }
	    sign(hash) {
	        return sign(hash, this.privateKey).signature;
	    }
	    verify(hash, signature) {
	        return verify(hash, signature, this.publicKey);
	    }
	    toJSON() {
	        return {
	            xpriv: this.privateExtendedKey,
	            xpub: this.publicExtendedKey
	        };
	    }
	}
	HDKey$1.HARDENED_OFFSET = 0x80000000;
	function serialize(hdkey, version, key) {
	    const buffer = buffer$3.Buffer.allocUnsafe(LEN);
	    buffer.writeUInt32BE(version, 0);
	    buffer.writeUInt8(hdkey.depth, 4);
	    const fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;
	    buffer.writeUInt32BE(fingerprint, 5);
	    buffer.writeUInt32BE(hdkey.index, 9);
	    hdkey.chainCode.copy(buffer, 13);
	    key.copy(buffer, 45);
	    return buffer;
	}
	function hash160(buf) {
	    const sha = createHash$1('sha256')
	        .update(buf)
	        .digest();
	    return createHash$1('rmd160')
	        .update(sha)
	        .digest();
	}

	class Base58 {
	    static decode(base58) {
	        return bs58.decode(base58);
	    }
	    static encode(data) {
	        return bs58.encode(data);
	    }
	}

	class HDKey {
	    constructor(key) {
	        this.key = key;
	    }
	    static newWithMnemonic(mnemonic, passphrase) {
	        let seed = Mnemonic.toSeed(mnemonic, passphrase);
	        return HDKey.newWithSeed(seed);
	    }
	    static newWithSeed(seed) {
	        return HDKey.newWithKey(HDKey$1.fromMasterSeed(seed));
	    }
	    static newWithKey(key) {
	        return new HDKey(key);
	    }
	    getPrivateKeyBytes() {
	        return this.key.privateKey;
	    }
	    getPrivateKeyBase58() {
	        return Base58.encode(this.getPrivateKeyBytes());
	    }
	    getPublicKeyBytes() {
	        return this.key.publicKey;
	    }
	    getPublicKeyBase58() {
	        return Base58.encode(this.getPublicKeyBytes());
	    }
	    serialize() {
	        return Base58.decode(this.serializeBase58());
	    }
	    serializeBase58() {
	        let buffer = Base58.decode(this.key.privateExtendedKey);
	        let base58Buffer = buffer$3.Buffer.alloc(82);
	        buffer.copy(base58Buffer);
	        let hash = SHA256.hashTwice(buffer);
	        hash.copy(base58Buffer, 78, 0, 4);
	        return Base58.encode(base58Buffer);
	    }
	    serializePublicKey() {
	        return Base58.decode(this.serializePublicKeyBase58());
	    }
	    serializePublicKeyBase58() {
	        let buffer = Base58.decode(this.key.publicExtendedKey);
	        let base58Buffer = buffer$3.Buffer.alloc(82);
	        buffer.copy(base58Buffer);
	        let hash = SHA256.hashTwice(buffer);
	        hash.copy(base58Buffer, 78, 0, 4);
	        return Base58.encode(base58Buffer);
	    }
	    static deserialize(keyData) {
	        return this.deserializeBase58(Base58.encode(keyData));
	    }
	    static deserializeBase58(keyData) {
	        return new HDKey(HDKey$1.fromExtendedKey(keyData));
	    }
	    static transformBip32HeaderToBuffer(bip32HeaderValue) {
	        let buffer = buffer$3.Buffer.alloc(4);
	        buffer[0] = ((bip32HeaderValue >> 24) & 0xFF);
	        buffer[1] = ((bip32HeaderValue >> 16) & 0xFF);
	        buffer[2] = ((bip32HeaderValue >> 8) & 0xFF);
	        buffer[3] = (bip32HeaderValue & 0xFF);
	        return buffer;
	    }
	    static paddingToExtendedPrivateKey(pk) {
	        let extendedPrivateKeyBytes = buffer$3.Buffer.alloc(HDKey.EXTENDED_PRIVATEKEY_BYTES);
	        let bip32Header = HDKey.transformBip32HeaderToBuffer(this.bip32HeaderP2PKHpriv);
	        bip32Header.copy(extendedPrivateKeyBytes);
	        pk.copy(extendedPrivateKeyBytes, 46, 0, 32);
	        let buftoHash = buffer$3.Buffer.alloc(78);
	        extendedPrivateKeyBytes.copy(buftoHash, 0, 0, 78);
	        let hash = SHA256.hashTwice(buftoHash);
	        hash.copy(extendedPrivateKeyBytes, 78, 0, 4);
	        return extendedPrivateKeyBytes;
	    }
	    static paddingToExtendedPublicKey(pk) {
	        let extendedPublicKeyBytes = buffer$3.Buffer.alloc(HDKey.EXTENDED_PUBLICKEY_BYTES);
	        let bip32Header = HDKey.transformBip32HeaderToBuffer(this.bip32HeaderP2PKHpub);
	        bip32Header.copy(extendedPublicKeyBytes);
	        pk.copy(extendedPublicKeyBytes, 45, 0, 33);
	        let buftoHash = buffer$3.Buffer.alloc(78);
	        extendedPublicKeyBytes.copy(buftoHash, 0, 0, 78);
	        let hash = SHA256.hashTwice(buftoHash);
	        hash.copy(extendedPublicKeyBytes, 78, 0, 4);
	        return extendedPublicKeyBytes;
	    }
	    deriveWithPath(path) {
	        return new HDKey(this.key.derive(path));
	    }
	    deriveWithIndex(index, hardened = false) {
	        if (hardened)
	            index += HDKey.HARDENED_BIT;
	        return new HDKey(this.key.deriveChild(index));
	    }
	    static getRedeemScript(pk) {
	        let script = buffer$3.Buffer.alloc(35);
	        script[0] = 33;
	        pk.copy(script, 1);
	        script[34] = HDKey.PADDING_STANDARD;
	        return script;
	    }
	    static getBinAddressFromBuffer(pk) {
	        let script = this.getRedeemScript(pk);
	        let hash = SHA256.sha256ripemd160(script);
	        let programHash = buffer$3.Buffer.alloc(hash.length + 1);
	        programHash[0] = HDKey.PADDING_IDENTITY;
	        hash.copy(programHash, 1);
	        hash = SHA256.hashTwice(programHash);
	        let binAddress = buffer$3.Buffer.alloc(programHash.length + 4);
	        programHash.copy(binAddress, 0);
	        hash.copy(binAddress, programHash.length, 0, 4);
	        return binAddress;
	    }
	    getBinAddress() {
	        return HDKey.getBinAddressFromBuffer(this.getPublicKeyBytes());
	    }
	    getAddress() {
	        let binAddress = this.getBinAddress();
	        return Base58.encode(binAddress);
	    }
	    static toAddress(pk) {
	        return Base58.encode(this.getBinAddressFromBuffer(pk));
	    }
	    static isAddressValid(address) {
	        let binAddress = Base58.decode(address);
	        if (binAddress.length != 25)
	            return false;
	        if (binAddress[0] != HDKey.PADDING_IDENTITY)
	            return false;
	        let hash = SHA256.hashTwice(buffer$3.Buffer.from(binAddress.toString("hex").substr(0, 21)));
	        return (hash[0] == binAddress[21] && hash[1] == binAddress[22]
	            && hash[2] == binAddress[23] && hash[3] == binAddress[24]);
	    }
	    wipe() {
	    }
	}
	HDKey.PUBLICKEY_BYTES = 33;
	HDKey.PRIVATEKEY_BYTES = 32;
	HDKey.SEED_BYTES = 64;
	HDKey.EXTENDED_KEY_BYTES = 82;
	HDKey.EXTENDED_PRIVATEKEY_BYTES = HDKey.EXTENDED_KEY_BYTES;
	HDKey.EXTENDED_PUBLICKEY_BYTES = HDKey.EXTENDED_KEY_BYTES;
	HDKey.HARDENED_BIT = 0x80000000;
	HDKey.PADDING_IDENTITY = 0x67;
	HDKey.PADDING_STANDARD = 0xAD;
	HDKey.bip32HeaderP2PKHpub = 0x0488b21e;
	HDKey.bip32HeaderP2PKHpriv = 0x0488ade4;
	HDKey.bip32HeaderP2WPKHpub = 0x04b24746;
	HDKey.bip32HeaderP2WPKHpriv = 0x04b2430c;
	HDKey.DERIVE_PATH_PREFIX = "m/44'/0'/0'/0/";
	HDKey.PRE_DERIVED_PUBLICKEY_PATH = "m/44'/0'/0'";

	class Aes256cbc {
	    static generateKeyAndIv(passwd) {
	        let bufferPassword = buffer$3.Buffer.from(passwd, "utf-8");
	        let first16KeyBytesInHex = crypto
	            .createHash('md5')
	            .update(bufferPassword)
	            .digest();
	        let last16KeyBytesInHex = crypto
	            .createHash('md5')
	            .update(first16KeyBytesInHex)
	            .update(bufferPassword)
	            .digest();
	        let iv = crypto
	            .createHash('md5')
	            .update(last16KeyBytesInHex)
	            .update(bufferPassword)
	            .digest();
	        return {
	            key: buffer$3.Buffer.concat([first16KeyBytesInHex, last16KeyBytesInHex]),
	            iv
	        };
	    }
	    static encrypt(plain, passwd) {
	        let { key, iv } = Aes256cbc.generateKeyAndIv(passwd);
	        let cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
	        return buffer$3.Buffer.concat([cipher.update(plain), cipher.final()]);
	    }
	    static decrypt(secret, passwd) {
	        let { key, iv } = this.generateKeyAndIv(passwd);
	        let decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
	        return buffer$3.Buffer.concat([decipher.update(secret), decipher.final()]);
	    }
	    static encryptToBase64(plain, passwd) {
	        let secret = this.encrypt(plain, passwd);
	        return BASE64.toUrlFormat(secret.toString("base64"));
	    }
	    static decryptFromBase64(base64Secret, passwd) {
	        let secret = buffer$3.Buffer.from(BASE64.fromUrlFormat(base64Secret), "base64");
	        return Aes256cbc.decrypt(secret, passwd);
	    }
	}

	var src = {};

	var _wordlists = {};

	var require$$0$1 = [
	];

	var require$$1 = [
		"的",
		"一",
		"是",
		"在",
		"不",
		"了",
		"有",
		"和",
		"人",
		"这",
		"中",
		"大",
		"为",
		"上",
		"个",
		"国",
		"我",
		"以",
		"要",
		"他",
		"时",
		"来",
		"用",
		"们",
		"生",
		"到",
		"作",
		"地",
		"于",
		"出",
		"就",
		"分",
		"对",
		"成",
		"会",
		"可",
		"主",
		"发",
		"年",
		"动",
		"同",
		"工",
		"也",
		"能",
		"下",
		"过",
		"子",
		"说",
		"产",
		"种",
		"面",
		"而",
		"方",
		"后",
		"多",
		"定",
		"行",
		"学",
		"法",
		"所",
		"民",
		"得",
		"经",
		"十",
		"三",
		"之",
		"进",
		"着",
		"等",
		"部",
		"度",
		"家",
		"电",
		"力",
		"里",
		"如",
		"水",
		"化",
		"高",
		"自",
		"二",
		"理",
		"起",
		"小",
		"物",
		"现",
		"实",
		"加",
		"量",
		"都",
		"两",
		"体",
		"制",
		"机",
		"当",
		"使",
		"点",
		"从",
		"业",
		"本",
		"去",
		"把",
		"性",
		"好",
		"应",
		"开",
		"它",
		"合",
		"还",
		"因",
		"由",
		"其",
		"些",
		"然",
		"前",
		"外",
		"天",
		"政",
		"四",
		"日",
		"那",
		"社",
		"义",
		"事",
		"平",
		"形",
		"相",
		"全",
		"表",
		"间",
		"样",
		"与",
		"关",
		"各",
		"重",
		"新",
		"线",
		"内",
		"数",
		"正",
		"心",
		"反",
		"你",
		"明",
		"看",
		"原",
		"又",
		"么",
		"利",
		"比",
		"或",
		"但",
		"质",
		"气",
		"第",
		"向",
		"道",
		"命",
		"此",
		"变",
		"条",
		"只",
		"没",
		"结",
		"解",
		"问",
		"意",
		"建",
		"月",
		"公",
		"无",
		"系",
		"军",
		"很",
		"情",
		"者",
		"最",
		"立",
		"代",
		"想",
		"已",
		"通",
		"并",
		"提",
		"直",
		"题",
		"党",
		"程",
		"展",
		"五",
		"果",
		"料",
		"象",
		"员",
		"革",
		"位",
		"入",
		"常",
		"文",
		"总",
		"次",
		"品",
		"式",
		"活",
		"设",
		"及",
		"管",
		"特",
		"件",
		"长",
		"求",
		"老",
		"头",
		"基",
		"资",
		"边",
		"流",
		"路",
		"级",
		"少",
		"图",
		"山",
		"统",
		"接",
		"知",
		"较",
		"将",
		"组",
		"见",
		"计",
		"别",
		"她",
		"手",
		"角",
		"期",
		"根",
		"论",
		"运",
		"农",
		"指",
		"几",
		"九",
		"区",
		"强",
		"放",
		"决",
		"西",
		"被",
		"干",
		"做",
		"必",
		"战",
		"先",
		"回",
		"则",
		"任",
		"取",
		"据",
		"处",
		"队",
		"南",
		"给",
		"色",
		"光",
		"门",
		"即",
		"保",
		"治",
		"北",
		"造",
		"百",
		"规",
		"热",
		"领",
		"七",
		"海",
		"口",
		"东",
		"导",
		"器",
		"压",
		"志",
		"世",
		"金",
		"增",
		"争",
		"济",
		"阶",
		"油",
		"思",
		"术",
		"极",
		"交",
		"受",
		"联",
		"什",
		"认",
		"六",
		"共",
		"权",
		"收",
		"证",
		"改",
		"清",
		"美",
		"再",
		"采",
		"转",
		"更",
		"单",
		"风",
		"切",
		"打",
		"白",
		"教",
		"速",
		"花",
		"带",
		"安",
		"场",
		"身",
		"车",
		"例",
		"真",
		"务",
		"具",
		"万",
		"每",
		"目",
		"至",
		"达",
		"走",
		"积",
		"示",
		"议",
		"声",
		"报",
		"斗",
		"完",
		"类",
		"八",
		"离",
		"华",
		"名",
		"确",
		"才",
		"科",
		"张",
		"信",
		"马",
		"节",
		"话",
		"米",
		"整",
		"空",
		"元",
		"况",
		"今",
		"集",
		"温",
		"传",
		"土",
		"许",
		"步",
		"群",
		"广",
		"石",
		"记",
		"需",
		"段",
		"研",
		"界",
		"拉",
		"林",
		"律",
		"叫",
		"且",
		"究",
		"观",
		"越",
		"织",
		"装",
		"影",
		"算",
		"低",
		"持",
		"音",
		"众",
		"书",
		"布",
		"复",
		"容",
		"儿",
		"须",
		"际",
		"商",
		"非",
		"验",
		"连",
		"断",
		"深",
		"难",
		"近",
		"矿",
		"千",
		"周",
		"委",
		"素",
		"技",
		"备",
		"半",
		"办",
		"青",
		"省",
		"列",
		"习",
		"响",
		"约",
		"支",
		"般",
		"史",
		"感",
		"劳",
		"便",
		"团",
		"往",
		"酸",
		"历",
		"市",
		"克",
		"何",
		"除",
		"消",
		"构",
		"府",
		"称",
		"太",
		"准",
		"精",
		"值",
		"号",
		"率",
		"族",
		"维",
		"划",
		"选",
		"标",
		"写",
		"存",
		"候",
		"毛",
		"亲",
		"快",
		"效",
		"斯",
		"院",
		"查",
		"江",
		"型",
		"眼",
		"王",
		"按",
		"格",
		"养",
		"易",
		"置",
		"派",
		"层",
		"片",
		"始",
		"却",
		"专",
		"状",
		"育",
		"厂",
		"京",
		"识",
		"适",
		"属",
		"圆",
		"包",
		"火",
		"住",
		"调",
		"满",
		"县",
		"局",
		"照",
		"参",
		"红",
		"细",
		"引",
		"听",
		"该",
		"铁",
		"价",
		"严",
		"首",
		"底",
		"液",
		"官",
		"德",
		"随",
		"病",
		"苏",
		"失",
		"尔",
		"死",
		"讲",
		"配",
		"女",
		"黄",
		"推",
		"显",
		"谈",
		"罪",
		"神",
		"艺",
		"呢",
		"席",
		"含",
		"企",
		"望",
		"密",
		"批",
		"营",
		"项",
		"防",
		"举",
		"球",
		"英",
		"氧",
		"势",
		"告",
		"李",
		"台",
		"落",
		"木",
		"帮",
		"轮",
		"破",
		"亚",
		"师",
		"围",
		"注",
		"远",
		"字",
		"材",
		"排",
		"供",
		"河",
		"态",
		"封",
		"另",
		"施",
		"减",
		"树",
		"溶",
		"怎",
		"止",
		"案",
		"言",
		"士",
		"均",
		"武",
		"固",
		"叶",
		"鱼",
		"波",
		"视",
		"仅",
		"费",
		"紧",
		"爱",
		"左",
		"章",
		"早",
		"朝",
		"害",
		"续",
		"轻",
		"服",
		"试",
		"食",
		"充",
		"兵",
		"源",
		"判",
		"护",
		"司",
		"足",
		"某",
		"练",
		"差",
		"致",
		"板",
		"田",
		"降",
		"黑",
		"犯",
		"负",
		"击",
		"范",
		"继",
		"兴",
		"似",
		"余",
		"坚",
		"曲",
		"输",
		"修",
		"故",
		"城",
		"夫",
		"够",
		"送",
		"笔",
		"船",
		"占",
		"右",
		"财",
		"吃",
		"富",
		"春",
		"职",
		"觉",
		"汉",
		"画",
		"功",
		"巴",
		"跟",
		"虽",
		"杂",
		"飞",
		"检",
		"吸",
		"助",
		"升",
		"阳",
		"互",
		"初",
		"创",
		"抗",
		"考",
		"投",
		"坏",
		"策",
		"古",
		"径",
		"换",
		"未",
		"跑",
		"留",
		"钢",
		"曾",
		"端",
		"责",
		"站",
		"简",
		"述",
		"钱",
		"副",
		"尽",
		"帝",
		"射",
		"草",
		"冲",
		"承",
		"独",
		"令",
		"限",
		"阿",
		"宣",
		"环",
		"双",
		"请",
		"超",
		"微",
		"让",
		"控",
		"州",
		"良",
		"轴",
		"找",
		"否",
		"纪",
		"益",
		"依",
		"优",
		"顶",
		"础",
		"载",
		"倒",
		"房",
		"突",
		"坐",
		"粉",
		"敌",
		"略",
		"客",
		"袁",
		"冷",
		"胜",
		"绝",
		"析",
		"块",
		"剂",
		"测",
		"丝",
		"协",
		"诉",
		"念",
		"陈",
		"仍",
		"罗",
		"盐",
		"友",
		"洋",
		"错",
		"苦",
		"夜",
		"刑",
		"移",
		"频",
		"逐",
		"靠",
		"混",
		"母",
		"短",
		"皮",
		"终",
		"聚",
		"汽",
		"村",
		"云",
		"哪",
		"既",
		"距",
		"卫",
		"停",
		"烈",
		"央",
		"察",
		"烧",
		"迅",
		"境",
		"若",
		"印",
		"洲",
		"刻",
		"括",
		"激",
		"孔",
		"搞",
		"甚",
		"室",
		"待",
		"核",
		"校",
		"散",
		"侵",
		"吧",
		"甲",
		"游",
		"久",
		"菜",
		"味",
		"旧",
		"模",
		"湖",
		"货",
		"损",
		"预",
		"阻",
		"毫",
		"普",
		"稳",
		"乙",
		"妈",
		"植",
		"息",
		"扩",
		"银",
		"语",
		"挥",
		"酒",
		"守",
		"拿",
		"序",
		"纸",
		"医",
		"缺",
		"雨",
		"吗",
		"针",
		"刘",
		"啊",
		"急",
		"唱",
		"误",
		"训",
		"愿",
		"审",
		"附",
		"获",
		"茶",
		"鲜",
		"粮",
		"斤",
		"孩",
		"脱",
		"硫",
		"肥",
		"善",
		"龙",
		"演",
		"父",
		"渐",
		"血",
		"欢",
		"械",
		"掌",
		"歌",
		"沙",
		"刚",
		"攻",
		"谓",
		"盾",
		"讨",
		"晚",
		"粒",
		"乱",
		"燃",
		"矛",
		"乎",
		"杀",
		"药",
		"宁",
		"鲁",
		"贵",
		"钟",
		"煤",
		"读",
		"班",
		"伯",
		"香",
		"介",
		"迫",
		"句",
		"丰",
		"培",
		"握",
		"兰",
		"担",
		"弦",
		"蛋",
		"沉",
		"假",
		"穿",
		"执",
		"答",
		"乐",
		"谁",
		"顺",
		"烟",
		"缩",
		"征",
		"脸",
		"喜",
		"松",
		"脚",
		"困",
		"异",
		"免",
		"背",
		"星",
		"福",
		"买",
		"染",
		"井",
		"概",
		"慢",
		"怕",
		"磁",
		"倍",
		"祖",
		"皇",
		"促",
		"静",
		"补",
		"评",
		"翻",
		"肉",
		"践",
		"尼",
		"衣",
		"宽",
		"扬",
		"棉",
		"希",
		"伤",
		"操",
		"垂",
		"秋",
		"宜",
		"氢",
		"套",
		"督",
		"振",
		"架",
		"亮",
		"末",
		"宪",
		"庆",
		"编",
		"牛",
		"触",
		"映",
		"雷",
		"销",
		"诗",
		"座",
		"居",
		"抓",
		"裂",
		"胞",
		"呼",
		"娘",
		"景",
		"威",
		"绿",
		"晶",
		"厚",
		"盟",
		"衡",
		"鸡",
		"孙",
		"延",
		"危",
		"胶",
		"屋",
		"乡",
		"临",
		"陆",
		"顾",
		"掉",
		"呀",
		"灯",
		"岁",
		"措",
		"束",
		"耐",
		"剧",
		"玉",
		"赵",
		"跳",
		"哥",
		"季",
		"课",
		"凯",
		"胡",
		"额",
		"款",
		"绍",
		"卷",
		"齐",
		"伟",
		"蒸",
		"殖",
		"永",
		"宗",
		"苗",
		"川",
		"炉",
		"岩",
		"弱",
		"零",
		"杨",
		"奏",
		"沿",
		"露",
		"杆",
		"探",
		"滑",
		"镇",
		"饭",
		"浓",
		"航",
		"怀",
		"赶",
		"库",
		"夺",
		"伊",
		"灵",
		"税",
		"途",
		"灭",
		"赛",
		"归",
		"召",
		"鼓",
		"播",
		"盘",
		"裁",
		"险",
		"康",
		"唯",
		"录",
		"菌",
		"纯",
		"借",
		"糖",
		"盖",
		"横",
		"符",
		"私",
		"努",
		"堂",
		"域",
		"枪",
		"润",
		"幅",
		"哈",
		"竟",
		"熟",
		"虫",
		"泽",
		"脑",
		"壤",
		"碳",
		"欧",
		"遍",
		"侧",
		"寨",
		"敢",
		"彻",
		"虑",
		"斜",
		"薄",
		"庭",
		"纳",
		"弹",
		"饲",
		"伸",
		"折",
		"麦",
		"湿",
		"暗",
		"荷",
		"瓦",
		"塞",
		"床",
		"筑",
		"恶",
		"户",
		"访",
		"塔",
		"奇",
		"透",
		"梁",
		"刀",
		"旋",
		"迹",
		"卡",
		"氯",
		"遇",
		"份",
		"毒",
		"泥",
		"退",
		"洗",
		"摆",
		"灰",
		"彩",
		"卖",
		"耗",
		"夏",
		"择",
		"忙",
		"铜",
		"献",
		"硬",
		"予",
		"繁",
		"圈",
		"雪",
		"函",
		"亦",
		"抽",
		"篇",
		"阵",
		"阴",
		"丁",
		"尺",
		"追",
		"堆",
		"雄",
		"迎",
		"泛",
		"爸",
		"楼",
		"避",
		"谋",
		"吨",
		"野",
		"猪",
		"旗",
		"累",
		"偏",
		"典",
		"馆",
		"索",
		"秦",
		"脂",
		"潮",
		"爷",
		"豆",
		"忽",
		"托",
		"惊",
		"塑",
		"遗",
		"愈",
		"朱",
		"替",
		"纤",
		"粗",
		"倾",
		"尚",
		"痛",
		"楚",
		"谢",
		"奋",
		"购",
		"磨",
		"君",
		"池",
		"旁",
		"碎",
		"骨",
		"监",
		"捕",
		"弟",
		"暴",
		"割",
		"贯",
		"殊",
		"释",
		"词",
		"亡",
		"壁",
		"顿",
		"宝",
		"午",
		"尘",
		"闻",
		"揭",
		"炮",
		"残",
		"冬",
		"桥",
		"妇",
		"警",
		"综",
		"招",
		"吴",
		"付",
		"浮",
		"遭",
		"徐",
		"您",
		"摇",
		"谷",
		"赞",
		"箱",
		"隔",
		"订",
		"男",
		"吹",
		"园",
		"纷",
		"唐",
		"败",
		"宋",
		"玻",
		"巨",
		"耕",
		"坦",
		"荣",
		"闭",
		"湾",
		"键",
		"凡",
		"驻",
		"锅",
		"救",
		"恩",
		"剥",
		"凝",
		"碱",
		"齿",
		"截",
		"炼",
		"麻",
		"纺",
		"禁",
		"废",
		"盛",
		"版",
		"缓",
		"净",
		"睛",
		"昌",
		"婚",
		"涉",
		"筒",
		"嘴",
		"插",
		"岸",
		"朗",
		"庄",
		"街",
		"藏",
		"姑",
		"贸",
		"腐",
		"奴",
		"啦",
		"惯",
		"乘",
		"伙",
		"恢",
		"匀",
		"纱",
		"扎",
		"辩",
		"耳",
		"彪",
		"臣",
		"亿",
		"璃",
		"抵",
		"脉",
		"秀",
		"萨",
		"俄",
		"网",
		"舞",
		"店",
		"喷",
		"纵",
		"寸",
		"汗",
		"挂",
		"洪",
		"贺",
		"闪",
		"柬",
		"爆",
		"烯",
		"津",
		"稻",
		"墙",
		"软",
		"勇",
		"像",
		"滚",
		"厘",
		"蒙",
		"芳",
		"肯",
		"坡",
		"柱",
		"荡",
		"腿",
		"仪",
		"旅",
		"尾",
		"轧",
		"冰",
		"贡",
		"登",
		"黎",
		"削",
		"钻",
		"勒",
		"逃",
		"障",
		"氨",
		"郭",
		"峰",
		"币",
		"港",
		"伏",
		"轨",
		"亩",
		"毕",
		"擦",
		"莫",
		"刺",
		"浪",
		"秘",
		"援",
		"株",
		"健",
		"售",
		"股",
		"岛",
		"甘",
		"泡",
		"睡",
		"童",
		"铸",
		"汤",
		"阀",
		"休",
		"汇",
		"舍",
		"牧",
		"绕",
		"炸",
		"哲",
		"磷",
		"绩",
		"朋",
		"淡",
		"尖",
		"启",
		"陷",
		"柴",
		"呈",
		"徒",
		"颜",
		"泪",
		"稍",
		"忘",
		"泵",
		"蓝",
		"拖",
		"洞",
		"授",
		"镜",
		"辛",
		"壮",
		"锋",
		"贫",
		"虚",
		"弯",
		"摩",
		"泰",
		"幼",
		"廷",
		"尊",
		"窗",
		"纲",
		"弄",
		"隶",
		"疑",
		"氏",
		"宫",
		"姐",
		"震",
		"瑞",
		"怪",
		"尤",
		"琴",
		"循",
		"描",
		"膜",
		"违",
		"夹",
		"腰",
		"缘",
		"珠",
		"穷",
		"森",
		"枝",
		"竹",
		"沟",
		"催",
		"绳",
		"忆",
		"邦",
		"剩",
		"幸",
		"浆",
		"栏",
		"拥",
		"牙",
		"贮",
		"礼",
		"滤",
		"钠",
		"纹",
		"罢",
		"拍",
		"咱",
		"喊",
		"袖",
		"埃",
		"勤",
		"罚",
		"焦",
		"潜",
		"伍",
		"墨",
		"欲",
		"缝",
		"姓",
		"刊",
		"饱",
		"仿",
		"奖",
		"铝",
		"鬼",
		"丽",
		"跨",
		"默",
		"挖",
		"链",
		"扫",
		"喝",
		"袋",
		"炭",
		"污",
		"幕",
		"诸",
		"弧",
		"励",
		"梅",
		"奶",
		"洁",
		"灾",
		"舟",
		"鉴",
		"苯",
		"讼",
		"抱",
		"毁",
		"懂",
		"寒",
		"智",
		"埔",
		"寄",
		"届",
		"跃",
		"渡",
		"挑",
		"丹",
		"艰",
		"贝",
		"碰",
		"拔",
		"爹",
		"戴",
		"码",
		"梦",
		"芽",
		"熔",
		"赤",
		"渔",
		"哭",
		"敬",
		"颗",
		"奔",
		"铅",
		"仲",
		"虎",
		"稀",
		"妹",
		"乏",
		"珍",
		"申",
		"桌",
		"遵",
		"允",
		"隆",
		"螺",
		"仓",
		"魏",
		"锐",
		"晓",
		"氮",
		"兼",
		"隐",
		"碍",
		"赫",
		"拨",
		"忠",
		"肃",
		"缸",
		"牵",
		"抢",
		"博",
		"巧",
		"壳",
		"兄",
		"杜",
		"讯",
		"诚",
		"碧",
		"祥",
		"柯",
		"页",
		"巡",
		"矩",
		"悲",
		"灌",
		"龄",
		"伦",
		"票",
		"寻",
		"桂",
		"铺",
		"圣",
		"恐",
		"恰",
		"郑",
		"趣",
		"抬",
		"荒",
		"腾",
		"贴",
		"柔",
		"滴",
		"猛",
		"阔",
		"辆",
		"妻",
		"填",
		"撤",
		"储",
		"签",
		"闹",
		"扰",
		"紫",
		"砂",
		"递",
		"戏",
		"吊",
		"陶",
		"伐",
		"喂",
		"疗",
		"瓶",
		"婆",
		"抚",
		"臂",
		"摸",
		"忍",
		"虾",
		"蜡",
		"邻",
		"胸",
		"巩",
		"挤",
		"偶",
		"弃",
		"槽",
		"劲",
		"乳",
		"邓",
		"吉",
		"仁",
		"烂",
		"砖",
		"租",
		"乌",
		"舰",
		"伴",
		"瓜",
		"浅",
		"丙",
		"暂",
		"燥",
		"橡",
		"柳",
		"迷",
		"暖",
		"牌",
		"秧",
		"胆",
		"详",
		"簧",
		"踏",
		"瓷",
		"谱",
		"呆",
		"宾",
		"糊",
		"洛",
		"辉",
		"愤",
		"竞",
		"隙",
		"怒",
		"粘",
		"乃",
		"绪",
		"肩",
		"籍",
		"敏",
		"涂",
		"熙",
		"皆",
		"侦",
		"悬",
		"掘",
		"享",
		"纠",
		"醒",
		"狂",
		"锁",
		"淀",
		"恨",
		"牲",
		"霸",
		"爬",
		"赏",
		"逆",
		"玩",
		"陵",
		"祝",
		"秒",
		"浙",
		"貌",
		"役",
		"彼",
		"悉",
		"鸭",
		"趋",
		"凤",
		"晨",
		"畜",
		"辈",
		"秩",
		"卵",
		"署",
		"梯",
		"炎",
		"滩",
		"棋",
		"驱",
		"筛",
		"峡",
		"冒",
		"啥",
		"寿",
		"译",
		"浸",
		"泉",
		"帽",
		"迟",
		"硅",
		"疆",
		"贷",
		"漏",
		"稿",
		"冠",
		"嫩",
		"胁",
		"芯",
		"牢",
		"叛",
		"蚀",
		"奥",
		"鸣",
		"岭",
		"羊",
		"凭",
		"串",
		"塘",
		"绘",
		"酵",
		"融",
		"盆",
		"锡",
		"庙",
		"筹",
		"冻",
		"辅",
		"摄",
		"袭",
		"筋",
		"拒",
		"僚",
		"旱",
		"钾",
		"鸟",
		"漆",
		"沈",
		"眉",
		"疏",
		"添",
		"棒",
		"穗",
		"硝",
		"韩",
		"逼",
		"扭",
		"侨",
		"凉",
		"挺",
		"碗",
		"栽",
		"炒",
		"杯",
		"患",
		"馏",
		"劝",
		"豪",
		"辽",
		"勃",
		"鸿",
		"旦",
		"吏",
		"拜",
		"狗",
		"埋",
		"辊",
		"掩",
		"饮",
		"搬",
		"骂",
		"辞",
		"勾",
		"扣",
		"估",
		"蒋",
		"绒",
		"雾",
		"丈",
		"朵",
		"姆",
		"拟",
		"宇",
		"辑",
		"陕",
		"雕",
		"偿",
		"蓄",
		"崇",
		"剪",
		"倡",
		"厅",
		"咬",
		"驶",
		"薯",
		"刷",
		"斥",
		"番",
		"赋",
		"奉",
		"佛",
		"浇",
		"漫",
		"曼",
		"扇",
		"钙",
		"桃",
		"扶",
		"仔",
		"返",
		"俗",
		"亏",
		"腔",
		"鞋",
		"棱",
		"覆",
		"框",
		"悄",
		"叔",
		"撞",
		"骗",
		"勘",
		"旺",
		"沸",
		"孤",
		"吐",
		"孟",
		"渠",
		"屈",
		"疾",
		"妙",
		"惜",
		"仰",
		"狠",
		"胀",
		"谐",
		"抛",
		"霉",
		"桑",
		"岗",
		"嘛",
		"衰",
		"盗",
		"渗",
		"脏",
		"赖",
		"涌",
		"甜",
		"曹",
		"阅",
		"肌",
		"哩",
		"厉",
		"烃",
		"纬",
		"毅",
		"昨",
		"伪",
		"症",
		"煮",
		"叹",
		"钉",
		"搭",
		"茎",
		"笼",
		"酷",
		"偷",
		"弓",
		"锥",
		"恒",
		"杰",
		"坑",
		"鼻",
		"翼",
		"纶",
		"叙",
		"狱",
		"逮",
		"罐",
		"络",
		"棚",
		"抑",
		"膨",
		"蔬",
		"寺",
		"骤",
		"穆",
		"冶",
		"枯",
		"册",
		"尸",
		"凸",
		"绅",
		"坯",
		"牺",
		"焰",
		"轰",
		"欣",
		"晋",
		"瘦",
		"御",
		"锭",
		"锦",
		"丧",
		"旬",
		"锻",
		"垄",
		"搜",
		"扑",
		"邀",
		"亭",
		"酯",
		"迈",
		"舒",
		"脆",
		"酶",
		"闲",
		"忧",
		"酚",
		"顽",
		"羽",
		"涨",
		"卸",
		"仗",
		"陪",
		"辟",
		"惩",
		"杭",
		"姚",
		"肚",
		"捉",
		"飘",
		"漂",
		"昆",
		"欺",
		"吾",
		"郎",
		"烷",
		"汁",
		"呵",
		"饰",
		"萧",
		"雅",
		"邮",
		"迁",
		"燕",
		"撒",
		"姻",
		"赴",
		"宴",
		"烦",
		"债",
		"帐",
		"斑",
		"铃",
		"旨",
		"醇",
		"董",
		"饼",
		"雏",
		"姿",
		"拌",
		"傅",
		"腹",
		"妥",
		"揉",
		"贤",
		"拆",
		"歪",
		"葡",
		"胺",
		"丢",
		"浩",
		"徽",
		"昂",
		"垫",
		"挡",
		"览",
		"贪",
		"慰",
		"缴",
		"汪",
		"慌",
		"冯",
		"诺",
		"姜",
		"谊",
		"凶",
		"劣",
		"诬",
		"耀",
		"昏",
		"躺",
		"盈",
		"骑",
		"乔",
		"溪",
		"丛",
		"卢",
		"抹",
		"闷",
		"咨",
		"刮",
		"驾",
		"缆",
		"悟",
		"摘",
		"铒",
		"掷",
		"颇",
		"幻",
		"柄",
		"惠",
		"惨",
		"佳",
		"仇",
		"腊",
		"窝",
		"涤",
		"剑",
		"瞧",
		"堡",
		"泼",
		"葱",
		"罩",
		"霍",
		"捞",
		"胎",
		"苍",
		"滨",
		"俩",
		"捅",
		"湘",
		"砍",
		"霞",
		"邵",
		"萄",
		"疯",
		"淮",
		"遂",
		"熊",
		"粪",
		"烘",
		"宿",
		"档",
		"戈",
		"驳",
		"嫂",
		"裕",
		"徙",
		"箭",
		"捐",
		"肠",
		"撑",
		"晒",
		"辨",
		"殿",
		"莲",
		"摊",
		"搅",
		"酱",
		"屏",
		"疫",
		"哀",
		"蔡",
		"堵",
		"沫",
		"皱",
		"畅",
		"叠",
		"阁",
		"莱",
		"敲",
		"辖",
		"钩",
		"痕",
		"坝",
		"巷",
		"饿",
		"祸",
		"丘",
		"玄",
		"溜",
		"曰",
		"逻",
		"彭",
		"尝",
		"卿",
		"妨",
		"艇",
		"吞",
		"韦",
		"怨",
		"矮",
		"歇"
	];

	var require$$2 = [
	];

	var require$$3 = [
	];

	var require$$4 = [
		"abaisser",
		"abandon",
		"abdiquer",
		"abeille",
		"abolir",
		"aborder",
		"aboutir",
		"aboyer",
		"abrasif",
		"abreuver",
		"abriter",
		"abroger",
		"abrupt",
		"absence",
		"absolu",
		"absurde",
		"abusif",
		"abyssal",
		"académie",
		"acajou",
		"acarien",
		"accabler",
		"accepter",
		"acclamer",
		"accolade",
		"accroche",
		"accuser",
		"acerbe",
		"achat",
		"acheter",
		"aciduler",
		"acier",
		"acompte",
		"acquérir",
		"acronyme",
		"acteur",
		"actif",
		"actuel",
		"adepte",
		"adéquat",
		"adhésif",
		"adjectif",
		"adjuger",
		"admettre",
		"admirer",
		"adopter",
		"adorer",
		"adoucir",
		"adresse",
		"adroit",
		"adulte",
		"adverbe",
		"aérer",
		"aéronef",
		"affaire",
		"affecter",
		"affiche",
		"affreux",
		"affubler",
		"agacer",
		"agencer",
		"agile",
		"agiter",
		"agrafer",
		"agréable",
		"agrume",
		"aider",
		"aiguille",
		"ailier",
		"aimable",
		"aisance",
		"ajouter",
		"ajuster",
		"alarmer",
		"alchimie",
		"alerte",
		"algèbre",
		"algue",
		"aliéner",
		"aliment",
		"alléger",
		"alliage",
		"allouer",
		"allumer",
		"alourdir",
		"alpaga",
		"altesse",
		"alvéole",
		"amateur",
		"ambigu",
		"ambre",
		"aménager",
		"amertume",
		"amidon",
		"amiral",
		"amorcer",
		"amour",
		"amovible",
		"amphibie",
		"ampleur",
		"amusant",
		"analyse",
		"anaphore",
		"anarchie",
		"anatomie",
		"ancien",
		"anéantir",
		"angle",
		"angoisse",
		"anguleux",
		"animal",
		"annexer",
		"annonce",
		"annuel",
		"anodin",
		"anomalie",
		"anonyme",
		"anormal",
		"antenne",
		"antidote",
		"anxieux",
		"apaiser",
		"apéritif",
		"aplanir",
		"apologie",
		"appareil",
		"appeler",
		"apporter",
		"appuyer",
		"aquarium",
		"aqueduc",
		"arbitre",
		"arbuste",
		"ardeur",
		"ardoise",
		"argent",
		"arlequin",
		"armature",
		"armement",
		"armoire",
		"armure",
		"arpenter",
		"arracher",
		"arriver",
		"arroser",
		"arsenic",
		"artériel",
		"article",
		"aspect",
		"asphalte",
		"aspirer",
		"assaut",
		"asservir",
		"assiette",
		"associer",
		"assurer",
		"asticot",
		"astre",
		"astuce",
		"atelier",
		"atome",
		"atrium",
		"atroce",
		"attaque",
		"attentif",
		"attirer",
		"attraper",
		"aubaine",
		"auberge",
		"audace",
		"audible",
		"augurer",
		"aurore",
		"automne",
		"autruche",
		"avaler",
		"avancer",
		"avarice",
		"avenir",
		"averse",
		"aveugle",
		"aviateur",
		"avide",
		"avion",
		"aviser",
		"avoine",
		"avouer",
		"avril",
		"axial",
		"axiome",
		"badge",
		"bafouer",
		"bagage",
		"baguette",
		"baignade",
		"balancer",
		"balcon",
		"baleine",
		"balisage",
		"bambin",
		"bancaire",
		"bandage",
		"banlieue",
		"bannière",
		"banquier",
		"barbier",
		"baril",
		"baron",
		"barque",
		"barrage",
		"bassin",
		"bastion",
		"bataille",
		"bateau",
		"batterie",
		"baudrier",
		"bavarder",
		"belette",
		"bélier",
		"belote",
		"bénéfice",
		"berceau",
		"berger",
		"berline",
		"bermuda",
		"besace",
		"besogne",
		"bétail",
		"beurre",
		"biberon",
		"bicycle",
		"bidule",
		"bijou",
		"bilan",
		"bilingue",
		"billard",
		"binaire",
		"biologie",
		"biopsie",
		"biotype",
		"biscuit",
		"bison",
		"bistouri",
		"bitume",
		"bizarre",
		"blafard",
		"blague",
		"blanchir",
		"blessant",
		"blinder",
		"blond",
		"bloquer",
		"blouson",
		"bobard",
		"bobine",
		"boire",
		"boiser",
		"bolide",
		"bonbon",
		"bondir",
		"bonheur",
		"bonifier",
		"bonus",
		"bordure",
		"borne",
		"botte",
		"boucle",
		"boueux",
		"bougie",
		"boulon",
		"bouquin",
		"bourse",
		"boussole",
		"boutique",
		"boxeur",
		"branche",
		"brasier",
		"brave",
		"brebis",
		"brèche",
		"breuvage",
		"bricoler",
		"brigade",
		"brillant",
		"brioche",
		"brique",
		"brochure",
		"broder",
		"bronzer",
		"brousse",
		"broyeur",
		"brume",
		"brusque",
		"brutal",
		"bruyant",
		"buffle",
		"buisson",
		"bulletin",
		"bureau",
		"burin",
		"bustier",
		"butiner",
		"butoir",
		"buvable",
		"buvette",
		"cabanon",
		"cabine",
		"cachette",
		"cadeau",
		"cadre",
		"caféine",
		"caillou",
		"caisson",
		"calculer",
		"calepin",
		"calibre",
		"calmer",
		"calomnie",
		"calvaire",
		"camarade",
		"caméra",
		"camion",
		"campagne",
		"canal",
		"caneton",
		"canon",
		"cantine",
		"canular",
		"capable",
		"caporal",
		"caprice",
		"capsule",
		"capter",
		"capuche",
		"carabine",
		"carbone",
		"caresser",
		"caribou",
		"carnage",
		"carotte",
		"carreau",
		"carton",
		"cascade",
		"casier",
		"casque",
		"cassure",
		"causer",
		"caution",
		"cavalier",
		"caverne",
		"caviar",
		"cédille",
		"ceinture",
		"céleste",
		"cellule",
		"cendrier",
		"censurer",
		"central",
		"cercle",
		"cérébral",
		"cerise",
		"cerner",
		"cerveau",
		"cesser",
		"chagrin",
		"chaise",
		"chaleur",
		"chambre",
		"chance",
		"chapitre",
		"charbon",
		"chasseur",
		"chaton",
		"chausson",
		"chavirer",
		"chemise",
		"chenille",
		"chéquier",
		"chercher",
		"cheval",
		"chien",
		"chiffre",
		"chignon",
		"chimère",
		"chiot",
		"chlorure",
		"chocolat",
		"choisir",
		"chose",
		"chouette",
		"chrome",
		"chute",
		"cigare",
		"cigogne",
		"cimenter",
		"cinéma",
		"cintrer",
		"circuler",
		"cirer",
		"cirque",
		"citerne",
		"citoyen",
		"citron",
		"civil",
		"clairon",
		"clameur",
		"claquer",
		"classe",
		"clavier",
		"client",
		"cligner",
		"climat",
		"clivage",
		"cloche",
		"clonage",
		"cloporte",
		"cobalt",
		"cobra",
		"cocasse",
		"cocotier",
		"coder",
		"codifier",
		"coffre",
		"cogner",
		"cohésion",
		"coiffer",
		"coincer",
		"colère",
		"colibri",
		"colline",
		"colmater",
		"colonel",
		"combat",
		"comédie",
		"commande",
		"compact",
		"concert",
		"conduire",
		"confier",
		"congeler",
		"connoter",
		"consonne",
		"contact",
		"convexe",
		"copain",
		"copie",
		"corail",
		"corbeau",
		"cordage",
		"corniche",
		"corpus",
		"correct",
		"cortège",
		"cosmique",
		"costume",
		"coton",
		"coude",
		"coupure",
		"courage",
		"couteau",
		"couvrir",
		"coyote",
		"crabe",
		"crainte",
		"cravate",
		"crayon",
		"créature",
		"créditer",
		"crémeux",
		"creuser",
		"crevette",
		"cribler",
		"crier",
		"cristal",
		"critère",
		"croire",
		"croquer",
		"crotale",
		"crucial",
		"cruel",
		"crypter",
		"cubique",
		"cueillir",
		"cuillère",
		"cuisine",
		"cuivre",
		"culminer",
		"cultiver",
		"cumuler",
		"cupide",
		"curatif",
		"curseur",
		"cyanure",
		"cycle",
		"cylindre",
		"cynique",
		"daigner",
		"damier",
		"danger",
		"danseur",
		"dauphin",
		"débattre",
		"débiter",
		"déborder",
		"débrider",
		"débutant",
		"décaler",
		"décembre",
		"déchirer",
		"décider",
		"déclarer",
		"décorer",
		"décrire",
		"décupler",
		"dédale",
		"déductif",
		"déesse",
		"défensif",
		"défiler",
		"défrayer",
		"dégager",
		"dégivrer",
		"déglutir",
		"dégrafer",
		"déjeuner",
		"délice",
		"déloger",
		"demander",
		"demeurer",
		"démolir",
		"dénicher",
		"dénouer",
		"dentelle",
		"dénuder",
		"départ",
		"dépenser",
		"déphaser",
		"déplacer",
		"déposer",
		"déranger",
		"dérober",
		"désastre",
		"descente",
		"désert",
		"désigner",
		"désobéir",
		"dessiner",
		"destrier",
		"détacher",
		"détester",
		"détourer",
		"détresse",
		"devancer",
		"devenir",
		"deviner",
		"devoir",
		"diable",
		"dialogue",
		"diamant",
		"dicter",
		"différer",
		"digérer",
		"digital",
		"digne",
		"diluer",
		"dimanche",
		"diminuer",
		"dioxyde",
		"directif",
		"diriger",
		"discuter",
		"disposer",
		"dissiper",
		"distance",
		"divertir",
		"diviser",
		"docile",
		"docteur",
		"dogme",
		"doigt",
		"domaine",
		"domicile",
		"dompter",
		"donateur",
		"donjon",
		"donner",
		"dopamine",
		"dortoir",
		"dorure",
		"dosage",
		"doseur",
		"dossier",
		"dotation",
		"douanier",
		"double",
		"douceur",
		"douter",
		"doyen",
		"dragon",
		"draper",
		"dresser",
		"dribbler",
		"droiture",
		"duperie",
		"duplexe",
		"durable",
		"durcir",
		"dynastie",
		"éblouir",
		"écarter",
		"écharpe",
		"échelle",
		"éclairer",
		"éclipse",
		"éclore",
		"écluse",
		"école",
		"économie",
		"écorce",
		"écouter",
		"écraser",
		"écrémer",
		"écrivain",
		"écrou",
		"écume",
		"écureuil",
		"édifier",
		"éduquer",
		"effacer",
		"effectif",
		"effigie",
		"effort",
		"effrayer",
		"effusion",
		"égaliser",
		"égarer",
		"éjecter",
		"élaborer",
		"élargir",
		"électron",
		"élégant",
		"éléphant",
		"élève",
		"éligible",
		"élitisme",
		"éloge",
		"élucider",
		"éluder",
		"emballer",
		"embellir",
		"embryon",
		"émeraude",
		"émission",
		"emmener",
		"émotion",
		"émouvoir",
		"empereur",
		"employer",
		"emporter",
		"emprise",
		"émulsion",
		"encadrer",
		"enchère",
		"enclave",
		"encoche",
		"endiguer",
		"endosser",
		"endroit",
		"enduire",
		"énergie",
		"enfance",
		"enfermer",
		"enfouir",
		"engager",
		"engin",
		"englober",
		"énigme",
		"enjamber",
		"enjeu",
		"enlever",
		"ennemi",
		"ennuyeux",
		"enrichir",
		"enrobage",
		"enseigne",
		"entasser",
		"entendre",
		"entier",
		"entourer",
		"entraver",
		"énumérer",
		"envahir",
		"enviable",
		"envoyer",
		"enzyme",
		"éolien",
		"épaissir",
		"épargne",
		"épatant",
		"épaule",
		"épicerie",
		"épidémie",
		"épier",
		"épilogue",
		"épine",
		"épisode",
		"épitaphe",
		"époque",
		"épreuve",
		"éprouver",
		"épuisant",
		"équerre",
		"équipe",
		"ériger",
		"érosion",
		"erreur",
		"éruption",
		"escalier",
		"espadon",
		"espèce",
		"espiègle",
		"espoir",
		"esprit",
		"esquiver",
		"essayer",
		"essence",
		"essieu",
		"essorer",
		"estime",
		"estomac",
		"estrade",
		"étagère",
		"étaler",
		"étanche",
		"étatique",
		"éteindre",
		"étendoir",
		"éternel",
		"éthanol",
		"éthique",
		"ethnie",
		"étirer",
		"étoffer",
		"étoile",
		"étonnant",
		"étourdir",
		"étrange",
		"étroit",
		"étude",
		"euphorie",
		"évaluer",
		"évasion",
		"éventail",
		"évidence",
		"éviter",
		"évolutif",
		"évoquer",
		"exact",
		"exagérer",
		"exaucer",
		"exceller",
		"excitant",
		"exclusif",
		"excuse",
		"exécuter",
		"exemple",
		"exercer",
		"exhaler",
		"exhorter",
		"exigence",
		"exiler",
		"exister",
		"exotique",
		"expédier",
		"explorer",
		"exposer",
		"exprimer",
		"exquis",
		"extensif",
		"extraire",
		"exulter",
		"fable",
		"fabuleux",
		"facette",
		"facile",
		"facture",
		"faiblir",
		"falaise",
		"fameux",
		"famille",
		"farceur",
		"farfelu",
		"farine",
		"farouche",
		"fasciner",
		"fatal",
		"fatigue",
		"faucon",
		"fautif",
		"faveur",
		"favori",
		"fébrile",
		"féconder",
		"fédérer",
		"félin",
		"femme",
		"fémur",
		"fendoir",
		"féodal",
		"fermer",
		"féroce",
		"ferveur",
		"festival",
		"feuille",
		"feutre",
		"février",
		"fiasco",
		"ficeler",
		"fictif",
		"fidèle",
		"figure",
		"filature",
		"filetage",
		"filière",
		"filleul",
		"filmer",
		"filou",
		"filtrer",
		"financer",
		"finir",
		"fiole",
		"firme",
		"fissure",
		"fixer",
		"flairer",
		"flamme",
		"flasque",
		"flatteur",
		"fléau",
		"flèche",
		"fleur",
		"flexion",
		"flocon",
		"flore",
		"fluctuer",
		"fluide",
		"fluvial",
		"folie",
		"fonderie",
		"fongible",
		"fontaine",
		"forcer",
		"forgeron",
		"formuler",
		"fortune",
		"fossile",
		"foudre",
		"fougère",
		"fouiller",
		"foulure",
		"fourmi",
		"fragile",
		"fraise",
		"franchir",
		"frapper",
		"frayeur",
		"frégate",
		"freiner",
		"frelon",
		"frémir",
		"frénésie",
		"frère",
		"friable",
		"friction",
		"frisson",
		"frivole",
		"froid",
		"fromage",
		"frontal",
		"frotter",
		"fruit",
		"fugitif",
		"fuite",
		"fureur",
		"furieux",
		"furtif",
		"fusion",
		"futur",
		"gagner",
		"galaxie",
		"galerie",
		"gambader",
		"garantir",
		"gardien",
		"garnir",
		"garrigue",
		"gazelle",
		"gazon",
		"géant",
		"gélatine",
		"gélule",
		"gendarme",
		"général",
		"génie",
		"genou",
		"gentil",
		"géologie",
		"géomètre",
		"géranium",
		"germe",
		"gestuel",
		"geyser",
		"gibier",
		"gicler",
		"girafe",
		"givre",
		"glace",
		"glaive",
		"glisser",
		"globe",
		"gloire",
		"glorieux",
		"golfeur",
		"gomme",
		"gonfler",
		"gorge",
		"gorille",
		"goudron",
		"gouffre",
		"goulot",
		"goupille",
		"gourmand",
		"goutte",
		"graduel",
		"graffiti",
		"graine",
		"grand",
		"grappin",
		"gratuit",
		"gravir",
		"grenat",
		"griffure",
		"griller",
		"grimper",
		"grogner",
		"gronder",
		"grotte",
		"groupe",
		"gruger",
		"grutier",
		"gruyère",
		"guépard",
		"guerrier",
		"guide",
		"guimauve",
		"guitare",
		"gustatif",
		"gymnaste",
		"gyrostat",
		"habitude",
		"hachoir",
		"halte",
		"hameau",
		"hangar",
		"hanneton",
		"haricot",
		"harmonie",
		"harpon",
		"hasard",
		"hélium",
		"hématome",
		"herbe",
		"hérisson",
		"hermine",
		"héron",
		"hésiter",
		"heureux",
		"hiberner",
		"hibou",
		"hilarant",
		"histoire",
		"hiver",
		"homard",
		"hommage",
		"homogène",
		"honneur",
		"honorer",
		"honteux",
		"horde",
		"horizon",
		"horloge",
		"hormone",
		"horrible",
		"houleux",
		"housse",
		"hublot",
		"huileux",
		"humain",
		"humble",
		"humide",
		"humour",
		"hurler",
		"hydromel",
		"hygiène",
		"hymne",
		"hypnose",
		"idylle",
		"ignorer",
		"iguane",
		"illicite",
		"illusion",
		"image",
		"imbiber",
		"imiter",
		"immense",
		"immobile",
		"immuable",
		"impact",
		"impérial",
		"implorer",
		"imposer",
		"imprimer",
		"imputer",
		"incarner",
		"incendie",
		"incident",
		"incliner",
		"incolore",
		"indexer",
		"indice",
		"inductif",
		"inédit",
		"ineptie",
		"inexact",
		"infini",
		"infliger",
		"informer",
		"infusion",
		"ingérer",
		"inhaler",
		"inhiber",
		"injecter",
		"injure",
		"innocent",
		"inoculer",
		"inonder",
		"inscrire",
		"insecte",
		"insigne",
		"insolite",
		"inspirer",
		"instinct",
		"insulter",
		"intact",
		"intense",
		"intime",
		"intrigue",
		"intuitif",
		"inutile",
		"invasion",
		"inventer",
		"inviter",
		"invoquer",
		"ironique",
		"irradier",
		"irréel",
		"irriter",
		"isoler",
		"ivoire",
		"ivresse",
		"jaguar",
		"jaillir",
		"jambe",
		"janvier",
		"jardin",
		"jauger",
		"jaune",
		"javelot",
		"jetable",
		"jeton",
		"jeudi",
		"jeunesse",
		"joindre",
		"joncher",
		"jongler",
		"joueur",
		"jouissif",
		"journal",
		"jovial",
		"joyau",
		"joyeux",
		"jubiler",
		"jugement",
		"junior",
		"jupon",
		"juriste",
		"justice",
		"juteux",
		"juvénile",
		"kayak",
		"kimono",
		"kiosque",
		"label",
		"labial",
		"labourer",
		"lacérer",
		"lactose",
		"lagune",
		"laine",
		"laisser",
		"laitier",
		"lambeau",
		"lamelle",
		"lampe",
		"lanceur",
		"langage",
		"lanterne",
		"lapin",
		"largeur",
		"larme",
		"laurier",
		"lavabo",
		"lavoir",
		"lecture",
		"légal",
		"léger",
		"légume",
		"lessive",
		"lettre",
		"levier",
		"lexique",
		"lézard",
		"liasse",
		"libérer",
		"libre",
		"licence",
		"licorne",
		"liège",
		"lièvre",
		"ligature",
		"ligoter",
		"ligue",
		"limer",
		"limite",
		"limonade",
		"limpide",
		"linéaire",
		"lingot",
		"lionceau",
		"liquide",
		"lisière",
		"lister",
		"lithium",
		"litige",
		"littoral",
		"livreur",
		"logique",
		"lointain",
		"loisir",
		"lombric",
		"loterie",
		"louer",
		"lourd",
		"loutre",
		"louve",
		"loyal",
		"lubie",
		"lucide",
		"lucratif",
		"lueur",
		"lugubre",
		"luisant",
		"lumière",
		"lunaire",
		"lundi",
		"luron",
		"lutter",
		"luxueux",
		"machine",
		"magasin",
		"magenta",
		"magique",
		"maigre",
		"maillon",
		"maintien",
		"mairie",
		"maison",
		"majorer",
		"malaxer",
		"maléfice",
		"malheur",
		"malice",
		"mallette",
		"mammouth",
		"mandater",
		"maniable",
		"manquant",
		"manteau",
		"manuel",
		"marathon",
		"marbre",
		"marchand",
		"mardi",
		"maritime",
		"marqueur",
		"marron",
		"marteler",
		"mascotte",
		"massif",
		"matériel",
		"matière",
		"matraque",
		"maudire",
		"maussade",
		"mauve",
		"maximal",
		"méchant",
		"méconnu",
		"médaille",
		"médecin",
		"méditer",
		"méduse",
		"meilleur",
		"mélange",
		"mélodie",
		"membre",
		"mémoire",
		"menacer",
		"mener",
		"menhir",
		"mensonge",
		"mentor",
		"mercredi",
		"mérite",
		"merle",
		"messager",
		"mesure",
		"métal",
		"météore",
		"méthode",
		"métier",
		"meuble",
		"miauler",
		"microbe",
		"miette",
		"mignon",
		"migrer",
		"milieu",
		"million",
		"mimique",
		"mince",
		"minéral",
		"minimal",
		"minorer",
		"minute",
		"miracle",
		"miroiter",
		"missile",
		"mixte",
		"mobile",
		"moderne",
		"moelleux",
		"mondial",
		"moniteur",
		"monnaie",
		"monotone",
		"monstre",
		"montagne",
		"monument",
		"moqueur",
		"morceau",
		"morsure",
		"mortier",
		"moteur",
		"motif",
		"mouche",
		"moufle",
		"moulin",
		"mousson",
		"mouton",
		"mouvant",
		"multiple",
		"munition",
		"muraille",
		"murène",
		"murmure",
		"muscle",
		"muséum",
		"musicien",
		"mutation",
		"muter",
		"mutuel",
		"myriade",
		"myrtille",
		"mystère",
		"mythique",
		"nageur",
		"nappe",
		"narquois",
		"narrer",
		"natation",
		"nation",
		"nature",
		"naufrage",
		"nautique",
		"navire",
		"nébuleux",
		"nectar",
		"néfaste",
		"négation",
		"négliger",
		"négocier",
		"neige",
		"nerveux",
		"nettoyer",
		"neurone",
		"neutron",
		"neveu",
		"niche",
		"nickel",
		"nitrate",
		"niveau",
		"noble",
		"nocif",
		"nocturne",
		"noirceur",
		"noisette",
		"nomade",
		"nombreux",
		"nommer",
		"normatif",
		"notable",
		"notifier",
		"notoire",
		"nourrir",
		"nouveau",
		"novateur",
		"novembre",
		"novice",
		"nuage",
		"nuancer",
		"nuire",
		"nuisible",
		"numéro",
		"nuptial",
		"nuque",
		"nutritif",
		"obéir",
		"objectif",
		"obliger",
		"obscur",
		"observer",
		"obstacle",
		"obtenir",
		"obturer",
		"occasion",
		"occuper",
		"océan",
		"octobre",
		"octroyer",
		"octupler",
		"oculaire",
		"odeur",
		"odorant",
		"offenser",
		"officier",
		"offrir",
		"ogive",
		"oiseau",
		"oisillon",
		"olfactif",
		"olivier",
		"ombrage",
		"omettre",
		"onctueux",
		"onduler",
		"onéreux",
		"onirique",
		"opale",
		"opaque",
		"opérer",
		"opinion",
		"opportun",
		"opprimer",
		"opter",
		"optique",
		"orageux",
		"orange",
		"orbite",
		"ordonner",
		"oreille",
		"organe",
		"orgueil",
		"orifice",
		"ornement",
		"orque",
		"ortie",
		"osciller",
		"osmose",
		"ossature",
		"otarie",
		"ouragan",
		"ourson",
		"outil",
		"outrager",
		"ouvrage",
		"ovation",
		"oxyde",
		"oxygène",
		"ozone",
		"paisible",
		"palace",
		"palmarès",
		"palourde",
		"palper",
		"panache",
		"panda",
		"pangolin",
		"paniquer",
		"panneau",
		"panorama",
		"pantalon",
		"papaye",
		"papier",
		"papoter",
		"papyrus",
		"paradoxe",
		"parcelle",
		"paresse",
		"parfumer",
		"parler",
		"parole",
		"parrain",
		"parsemer",
		"partager",
		"parure",
		"parvenir",
		"passion",
		"pastèque",
		"paternel",
		"patience",
		"patron",
		"pavillon",
		"pavoiser",
		"payer",
		"paysage",
		"peigne",
		"peintre",
		"pelage",
		"pélican",
		"pelle",
		"pelouse",
		"peluche",
		"pendule",
		"pénétrer",
		"pénible",
		"pensif",
		"pénurie",
		"pépite",
		"péplum",
		"perdrix",
		"perforer",
		"période",
		"permuter",
		"perplexe",
		"persil",
		"perte",
		"peser",
		"pétale",
		"petit",
		"pétrir",
		"peuple",
		"pharaon",
		"phobie",
		"phoque",
		"photon",
		"phrase",
		"physique",
		"piano",
		"pictural",
		"pièce",
		"pierre",
		"pieuvre",
		"pilote",
		"pinceau",
		"pipette",
		"piquer",
		"pirogue",
		"piscine",
		"piston",
		"pivoter",
		"pixel",
		"pizza",
		"placard",
		"plafond",
		"plaisir",
		"planer",
		"plaque",
		"plastron",
		"plateau",
		"pleurer",
		"plexus",
		"pliage",
		"plomb",
		"plonger",
		"pluie",
		"plumage",
		"pochette",
		"poésie",
		"poète",
		"pointe",
		"poirier",
		"poisson",
		"poivre",
		"polaire",
		"policier",
		"pollen",
		"polygone",
		"pommade",
		"pompier",
		"ponctuel",
		"pondérer",
		"poney",
		"portique",
		"position",
		"posséder",
		"posture",
		"potager",
		"poteau",
		"potion",
		"pouce",
		"poulain",
		"poumon",
		"pourpre",
		"poussin",
		"pouvoir",
		"prairie",
		"pratique",
		"précieux",
		"prédire",
		"préfixe",
		"prélude",
		"prénom",
		"présence",
		"prétexte",
		"prévoir",
		"primitif",
		"prince",
		"prison",
		"priver",
		"problème",
		"procéder",
		"prodige",
		"profond",
		"progrès",
		"proie",
		"projeter",
		"prologue",
		"promener",
		"propre",
		"prospère",
		"protéger",
		"prouesse",
		"proverbe",
		"prudence",
		"pruneau",
		"psychose",
		"public",
		"puceron",
		"puiser",
		"pulpe",
		"pulsar",
		"punaise",
		"punitif",
		"pupitre",
		"purifier",
		"puzzle",
		"pyramide",
		"quasar",
		"querelle",
		"question",
		"quiétude",
		"quitter",
		"quotient",
		"racine",
		"raconter",
		"radieux",
		"ragondin",
		"raideur",
		"raisin",
		"ralentir",
		"rallonge",
		"ramasser",
		"rapide",
		"rasage",
		"ratisser",
		"ravager",
		"ravin",
		"rayonner",
		"réactif",
		"réagir",
		"réaliser",
		"réanimer",
		"recevoir",
		"réciter",
		"réclamer",
		"récolter",
		"recruter",
		"reculer",
		"recycler",
		"rédiger",
		"redouter",
		"refaire",
		"réflexe",
		"réformer",
		"refrain",
		"refuge",
		"régalien",
		"région",
		"réglage",
		"régulier",
		"réitérer",
		"rejeter",
		"rejouer",
		"relatif",
		"relever",
		"relief",
		"remarque",
		"remède",
		"remise",
		"remonter",
		"remplir",
		"remuer",
		"renard",
		"renfort",
		"renifler",
		"renoncer",
		"rentrer",
		"renvoi",
		"replier",
		"reporter",
		"reprise",
		"reptile",
		"requin",
		"réserve",
		"résineux",
		"résoudre",
		"respect",
		"rester",
		"résultat",
		"rétablir",
		"retenir",
		"réticule",
		"retomber",
		"retracer",
		"réunion",
		"réussir",
		"revanche",
		"revivre",
		"révolte",
		"révulsif",
		"richesse",
		"rideau",
		"rieur",
		"rigide",
		"rigoler",
		"rincer",
		"riposter",
		"risible",
		"risque",
		"rituel",
		"rival",
		"rivière",
		"rocheux",
		"romance",
		"rompre",
		"ronce",
		"rondin",
		"roseau",
		"rosier",
		"rotatif",
		"rotor",
		"rotule",
		"rouge",
		"rouille",
		"rouleau",
		"routine",
		"royaume",
		"ruban",
		"rubis",
		"ruche",
		"ruelle",
		"rugueux",
		"ruiner",
		"ruisseau",
		"ruser",
		"rustique",
		"rythme",
		"sabler",
		"saboter",
		"sabre",
		"sacoche",
		"safari",
		"sagesse",
		"saisir",
		"salade",
		"salive",
		"salon",
		"saluer",
		"samedi",
		"sanction",
		"sanglier",
		"sarcasme",
		"sardine",
		"saturer",
		"saugrenu",
		"saumon",
		"sauter",
		"sauvage",
		"savant",
		"savonner",
		"scalpel",
		"scandale",
		"scélérat",
		"scénario",
		"sceptre",
		"schéma",
		"science",
		"scinder",
		"score",
		"scrutin",
		"sculpter",
		"séance",
		"sécable",
		"sécher",
		"secouer",
		"sécréter",
		"sédatif",
		"séduire",
		"seigneur",
		"séjour",
		"sélectif",
		"semaine",
		"sembler",
		"semence",
		"séminal",
		"sénateur",
		"sensible",
		"sentence",
		"séparer",
		"séquence",
		"serein",
		"sergent",
		"sérieux",
		"serrure",
		"sérum",
		"service",
		"sésame",
		"sévir",
		"sevrage",
		"sextuple",
		"sidéral",
		"siècle",
		"siéger",
		"siffler",
		"sigle",
		"signal",
		"silence",
		"silicium",
		"simple",
		"sincère",
		"sinistre",
		"siphon",
		"sirop",
		"sismique",
		"situer",
		"skier",
		"social",
		"socle",
		"sodium",
		"soigneux",
		"soldat",
		"soleil",
		"solitude",
		"soluble",
		"sombre",
		"sommeil",
		"somnoler",
		"sonde",
		"songeur",
		"sonnette",
		"sonore",
		"sorcier",
		"sortir",
		"sosie",
		"sottise",
		"soucieux",
		"soudure",
		"souffle",
		"soulever",
		"soupape",
		"source",
		"soutirer",
		"souvenir",
		"spacieux",
		"spatial",
		"spécial",
		"sphère",
		"spiral",
		"stable",
		"station",
		"sternum",
		"stimulus",
		"stipuler",
		"strict",
		"studieux",
		"stupeur",
		"styliste",
		"sublime",
		"substrat",
		"subtil",
		"subvenir",
		"succès",
		"sucre",
		"suffixe",
		"suggérer",
		"suiveur",
		"sulfate",
		"superbe",
		"supplier",
		"surface",
		"suricate",
		"surmener",
		"surprise",
		"sursaut",
		"survie",
		"suspect",
		"syllabe",
		"symbole",
		"symétrie",
		"synapse",
		"syntaxe",
		"système",
		"tabac",
		"tablier",
		"tactile",
		"tailler",
		"talent",
		"talisman",
		"talonner",
		"tambour",
		"tamiser",
		"tangible",
		"tapis",
		"taquiner",
		"tarder",
		"tarif",
		"tartine",
		"tasse",
		"tatami",
		"tatouage",
		"taupe",
		"taureau",
		"taxer",
		"témoin",
		"temporel",
		"tenaille",
		"tendre",
		"teneur",
		"tenir",
		"tension",
		"terminer",
		"terne",
		"terrible",
		"tétine",
		"texte",
		"thème",
		"théorie",
		"thérapie",
		"thorax",
		"tibia",
		"tiède",
		"timide",
		"tirelire",
		"tiroir",
		"tissu",
		"titane",
		"titre",
		"tituber",
		"toboggan",
		"tolérant",
		"tomate",
		"tonique",
		"tonneau",
		"toponyme",
		"torche",
		"tordre",
		"tornade",
		"torpille",
		"torrent",
		"torse",
		"tortue",
		"totem",
		"toucher",
		"tournage",
		"tousser",
		"toxine",
		"traction",
		"trafic",
		"tragique",
		"trahir",
		"train",
		"trancher",
		"travail",
		"trèfle",
		"tremper",
		"trésor",
		"treuil",
		"triage",
		"tribunal",
		"tricoter",
		"trilogie",
		"triomphe",
		"tripler",
		"triturer",
		"trivial",
		"trombone",
		"tronc",
		"tropical",
		"troupeau",
		"tuile",
		"tulipe",
		"tumulte",
		"tunnel",
		"turbine",
		"tuteur",
		"tutoyer",
		"tuyau",
		"tympan",
		"typhon",
		"typique",
		"tyran",
		"ubuesque",
		"ultime",
		"ultrason",
		"unanime",
		"unifier",
		"union",
		"unique",
		"unitaire",
		"univers",
		"uranium",
		"urbain",
		"urticant",
		"usage",
		"usine",
		"usuel",
		"usure",
		"utile",
		"utopie",
		"vacarme",
		"vaccin",
		"vagabond",
		"vague",
		"vaillant",
		"vaincre",
		"vaisseau",
		"valable",
		"valise",
		"vallon",
		"valve",
		"vampire",
		"vanille",
		"vapeur",
		"varier",
		"vaseux",
		"vassal",
		"vaste",
		"vecteur",
		"vedette",
		"végétal",
		"véhicule",
		"veinard",
		"véloce",
		"vendredi",
		"vénérer",
		"venger",
		"venimeux",
		"ventouse",
		"verdure",
		"vérin",
		"vernir",
		"verrou",
		"verser",
		"vertu",
		"veston",
		"vétéran",
		"vétuste",
		"vexant",
		"vexer",
		"viaduc",
		"viande",
		"victoire",
		"vidange",
		"vidéo",
		"vignette",
		"vigueur",
		"vilain",
		"village",
		"vinaigre",
		"violon",
		"vipère",
		"virement",
		"virtuose",
		"virus",
		"visage",
		"viseur",
		"vision",
		"visqueux",
		"visuel",
		"vital",
		"vitesse",
		"viticole",
		"vitrine",
		"vivace",
		"vivipare",
		"vocation",
		"voguer",
		"voile",
		"voisin",
		"voiture",
		"volaille",
		"volcan",
		"voltiger",
		"volume",
		"vorace",
		"vortex",
		"voter",
		"vouloir",
		"voyage",
		"voyelle",
		"wagon",
		"xénon",
		"yacht",
		"zèbre",
		"zénith",
		"zeste",
		"zoologie"
	];

	var require$$5 = [
	];

	var require$$6 = [
	];

	var require$$7 = [
	];

	var require$$8 = [
	];

	var require$$9 = [
		"abandon",
		"ability",
		"able",
		"about",
		"above",
		"absent",
		"absorb",
		"abstract",
		"absurd",
		"abuse",
		"access",
		"accident",
		"account",
		"accuse",
		"achieve",
		"acid",
		"acoustic",
		"acquire",
		"across",
		"act",
		"action",
		"actor",
		"actress",
		"actual",
		"adapt",
		"add",
		"addict",
		"address",
		"adjust",
		"admit",
		"adult",
		"advance",
		"advice",
		"aerobic",
		"affair",
		"afford",
		"afraid",
		"again",
		"age",
		"agent",
		"agree",
		"ahead",
		"aim",
		"air",
		"airport",
		"aisle",
		"alarm",
		"album",
		"alcohol",
		"alert",
		"alien",
		"all",
		"alley",
		"allow",
		"almost",
		"alone",
		"alpha",
		"already",
		"also",
		"alter",
		"always",
		"amateur",
		"amazing",
		"among",
		"amount",
		"amused",
		"analyst",
		"anchor",
		"ancient",
		"anger",
		"angle",
		"angry",
		"animal",
		"ankle",
		"announce",
		"annual",
		"another",
		"answer",
		"antenna",
		"antique",
		"anxiety",
		"any",
		"apart",
		"apology",
		"appear",
		"apple",
		"approve",
		"april",
		"arch",
		"arctic",
		"area",
		"arena",
		"argue",
		"arm",
		"armed",
		"armor",
		"army",
		"around",
		"arrange",
		"arrest",
		"arrive",
		"arrow",
		"art",
		"artefact",
		"artist",
		"artwork",
		"ask",
		"aspect",
		"assault",
		"asset",
		"assist",
		"assume",
		"asthma",
		"athlete",
		"atom",
		"attack",
		"attend",
		"attitude",
		"attract",
		"auction",
		"audit",
		"august",
		"aunt",
		"author",
		"auto",
		"autumn",
		"average",
		"avocado",
		"avoid",
		"awake",
		"aware",
		"away",
		"awesome",
		"awful",
		"awkward",
		"axis",
		"baby",
		"bachelor",
		"bacon",
		"badge",
		"bag",
		"balance",
		"balcony",
		"ball",
		"bamboo",
		"banana",
		"banner",
		"bar",
		"barely",
		"bargain",
		"barrel",
		"base",
		"basic",
		"basket",
		"battle",
		"beach",
		"bean",
		"beauty",
		"because",
		"become",
		"beef",
		"before",
		"begin",
		"behave",
		"behind",
		"believe",
		"below",
		"belt",
		"bench",
		"benefit",
		"best",
		"betray",
		"better",
		"between",
		"beyond",
		"bicycle",
		"bid",
		"bike",
		"bind",
		"biology",
		"bird",
		"birth",
		"bitter",
		"black",
		"blade",
		"blame",
		"blanket",
		"blast",
		"bleak",
		"bless",
		"blind",
		"blood",
		"blossom",
		"blouse",
		"blue",
		"blur",
		"blush",
		"board",
		"boat",
		"body",
		"boil",
		"bomb",
		"bone",
		"bonus",
		"book",
		"boost",
		"border",
		"boring",
		"borrow",
		"boss",
		"bottom",
		"bounce",
		"box",
		"boy",
		"bracket",
		"brain",
		"brand",
		"brass",
		"brave",
		"bread",
		"breeze",
		"brick",
		"bridge",
		"brief",
		"bright",
		"bring",
		"brisk",
		"broccoli",
		"broken",
		"bronze",
		"broom",
		"brother",
		"brown",
		"brush",
		"bubble",
		"buddy",
		"budget",
		"buffalo",
		"build",
		"bulb",
		"bulk",
		"bullet",
		"bundle",
		"bunker",
		"burden",
		"burger",
		"burst",
		"bus",
		"business",
		"busy",
		"butter",
		"buyer",
		"buzz",
		"cabbage",
		"cabin",
		"cable",
		"cactus",
		"cage",
		"cake",
		"call",
		"calm",
		"camera",
		"camp",
		"can",
		"canal",
		"cancel",
		"candy",
		"cannon",
		"canoe",
		"canvas",
		"canyon",
		"capable",
		"capital",
		"captain",
		"car",
		"carbon",
		"card",
		"cargo",
		"carpet",
		"carry",
		"cart",
		"case",
		"cash",
		"casino",
		"castle",
		"casual",
		"cat",
		"catalog",
		"catch",
		"category",
		"cattle",
		"caught",
		"cause",
		"caution",
		"cave",
		"ceiling",
		"celery",
		"cement",
		"census",
		"century",
		"cereal",
		"certain",
		"chair",
		"chalk",
		"champion",
		"change",
		"chaos",
		"chapter",
		"charge",
		"chase",
		"chat",
		"cheap",
		"check",
		"cheese",
		"chef",
		"cherry",
		"chest",
		"chicken",
		"chief",
		"child",
		"chimney",
		"choice",
		"choose",
		"chronic",
		"chuckle",
		"chunk",
		"churn",
		"cigar",
		"cinnamon",
		"circle",
		"citizen",
		"city",
		"civil",
		"claim",
		"clap",
		"clarify",
		"claw",
		"clay",
		"clean",
		"clerk",
		"clever",
		"click",
		"client",
		"cliff",
		"climb",
		"clinic",
		"clip",
		"clock",
		"clog",
		"close",
		"cloth",
		"cloud",
		"clown",
		"club",
		"clump",
		"cluster",
		"clutch",
		"coach",
		"coast",
		"coconut",
		"code",
		"coffee",
		"coil",
		"coin",
		"collect",
		"color",
		"column",
		"combine",
		"come",
		"comfort",
		"comic",
		"common",
		"company",
		"concert",
		"conduct",
		"confirm",
		"congress",
		"connect",
		"consider",
		"control",
		"convince",
		"cook",
		"cool",
		"copper",
		"copy",
		"coral",
		"core",
		"corn",
		"correct",
		"cost",
		"cotton",
		"couch",
		"country",
		"couple",
		"course",
		"cousin",
		"cover",
		"coyote",
		"crack",
		"cradle",
		"craft",
		"cram",
		"crane",
		"crash",
		"crater",
		"crawl",
		"crazy",
		"cream",
		"credit",
		"creek",
		"crew",
		"cricket",
		"crime",
		"crisp",
		"critic",
		"crop",
		"cross",
		"crouch",
		"crowd",
		"crucial",
		"cruel",
		"cruise",
		"crumble",
		"crunch",
		"crush",
		"cry",
		"crystal",
		"cube",
		"culture",
		"cup",
		"cupboard",
		"curious",
		"current",
		"curtain",
		"curve",
		"cushion",
		"custom",
		"cute",
		"cycle",
		"dad",
		"damage",
		"damp",
		"dance",
		"danger",
		"daring",
		"dash",
		"daughter",
		"dawn",
		"day",
		"deal",
		"debate",
		"debris",
		"decade",
		"december",
		"decide",
		"decline",
		"decorate",
		"decrease",
		"deer",
		"defense",
		"define",
		"defy",
		"degree",
		"delay",
		"deliver",
		"demand",
		"demise",
		"denial",
		"dentist",
		"deny",
		"depart",
		"depend",
		"deposit",
		"depth",
		"deputy",
		"derive",
		"describe",
		"desert",
		"design",
		"desk",
		"despair",
		"destroy",
		"detail",
		"detect",
		"develop",
		"device",
		"devote",
		"diagram",
		"dial",
		"diamond",
		"diary",
		"dice",
		"diesel",
		"diet",
		"differ",
		"digital",
		"dignity",
		"dilemma",
		"dinner",
		"dinosaur",
		"direct",
		"dirt",
		"disagree",
		"discover",
		"disease",
		"dish",
		"dismiss",
		"disorder",
		"display",
		"distance",
		"divert",
		"divide",
		"divorce",
		"dizzy",
		"doctor",
		"document",
		"dog",
		"doll",
		"dolphin",
		"domain",
		"donate",
		"donkey",
		"donor",
		"door",
		"dose",
		"double",
		"dove",
		"draft",
		"dragon",
		"drama",
		"drastic",
		"draw",
		"dream",
		"dress",
		"drift",
		"drill",
		"drink",
		"drip",
		"drive",
		"drop",
		"drum",
		"dry",
		"duck",
		"dumb",
		"dune",
		"during",
		"dust",
		"dutch",
		"duty",
		"dwarf",
		"dynamic",
		"eager",
		"eagle",
		"early",
		"earn",
		"earth",
		"easily",
		"east",
		"easy",
		"echo",
		"ecology",
		"economy",
		"edge",
		"edit",
		"educate",
		"effort",
		"egg",
		"eight",
		"either",
		"elbow",
		"elder",
		"electric",
		"elegant",
		"element",
		"elephant",
		"elevator",
		"elite",
		"else",
		"embark",
		"embody",
		"embrace",
		"emerge",
		"emotion",
		"employ",
		"empower",
		"empty",
		"enable",
		"enact",
		"end",
		"endless",
		"endorse",
		"enemy",
		"energy",
		"enforce",
		"engage",
		"engine",
		"enhance",
		"enjoy",
		"enlist",
		"enough",
		"enrich",
		"enroll",
		"ensure",
		"enter",
		"entire",
		"entry",
		"envelope",
		"episode",
		"equal",
		"equip",
		"era",
		"erase",
		"erode",
		"erosion",
		"error",
		"erupt",
		"escape",
		"essay",
		"essence",
		"estate",
		"eternal",
		"ethics",
		"evidence",
		"evil",
		"evoke",
		"evolve",
		"exact",
		"example",
		"excess",
		"exchange",
		"excite",
		"exclude",
		"excuse",
		"execute",
		"exercise",
		"exhaust",
		"exhibit",
		"exile",
		"exist",
		"exit",
		"exotic",
		"expand",
		"expect",
		"expire",
		"explain",
		"expose",
		"express",
		"extend",
		"extra",
		"eye",
		"eyebrow",
		"fabric",
		"face",
		"faculty",
		"fade",
		"faint",
		"faith",
		"fall",
		"false",
		"fame",
		"family",
		"famous",
		"fan",
		"fancy",
		"fantasy",
		"farm",
		"fashion",
		"fat",
		"fatal",
		"father",
		"fatigue",
		"fault",
		"favorite",
		"feature",
		"february",
		"federal",
		"fee",
		"feed",
		"feel",
		"female",
		"fence",
		"festival",
		"fetch",
		"fever",
		"few",
		"fiber",
		"fiction",
		"field",
		"figure",
		"file",
		"film",
		"filter",
		"final",
		"find",
		"fine",
		"finger",
		"finish",
		"fire",
		"firm",
		"first",
		"fiscal",
		"fish",
		"fit",
		"fitness",
		"fix",
		"flag",
		"flame",
		"flash",
		"flat",
		"flavor",
		"flee",
		"flight",
		"flip",
		"float",
		"flock",
		"floor",
		"flower",
		"fluid",
		"flush",
		"fly",
		"foam",
		"focus",
		"fog",
		"foil",
		"fold",
		"follow",
		"food",
		"foot",
		"force",
		"forest",
		"forget",
		"fork",
		"fortune",
		"forum",
		"forward",
		"fossil",
		"foster",
		"found",
		"fox",
		"fragile",
		"frame",
		"frequent",
		"fresh",
		"friend",
		"fringe",
		"frog",
		"front",
		"frost",
		"frown",
		"frozen",
		"fruit",
		"fuel",
		"fun",
		"funny",
		"furnace",
		"fury",
		"future",
		"gadget",
		"gain",
		"galaxy",
		"gallery",
		"game",
		"gap",
		"garage",
		"garbage",
		"garden",
		"garlic",
		"garment",
		"gas",
		"gasp",
		"gate",
		"gather",
		"gauge",
		"gaze",
		"general",
		"genius",
		"genre",
		"gentle",
		"genuine",
		"gesture",
		"ghost",
		"giant",
		"gift",
		"giggle",
		"ginger",
		"giraffe",
		"girl",
		"give",
		"glad",
		"glance",
		"glare",
		"glass",
		"glide",
		"glimpse",
		"globe",
		"gloom",
		"glory",
		"glove",
		"glow",
		"glue",
		"goat",
		"goddess",
		"gold",
		"good",
		"goose",
		"gorilla",
		"gospel",
		"gossip",
		"govern",
		"gown",
		"grab",
		"grace",
		"grain",
		"grant",
		"grape",
		"grass",
		"gravity",
		"great",
		"green",
		"grid",
		"grief",
		"grit",
		"grocery",
		"group",
		"grow",
		"grunt",
		"guard",
		"guess",
		"guide",
		"guilt",
		"guitar",
		"gun",
		"gym",
		"habit",
		"hair",
		"half",
		"hammer",
		"hamster",
		"hand",
		"happy",
		"harbor",
		"hard",
		"harsh",
		"harvest",
		"hat",
		"have",
		"hawk",
		"hazard",
		"head",
		"health",
		"heart",
		"heavy",
		"hedgehog",
		"height",
		"hello",
		"helmet",
		"help",
		"hen",
		"hero",
		"hidden",
		"high",
		"hill",
		"hint",
		"hip",
		"hire",
		"history",
		"hobby",
		"hockey",
		"hold",
		"hole",
		"holiday",
		"hollow",
		"home",
		"honey",
		"hood",
		"hope",
		"horn",
		"horror",
		"horse",
		"hospital",
		"host",
		"hotel",
		"hour",
		"hover",
		"hub",
		"huge",
		"human",
		"humble",
		"humor",
		"hundred",
		"hungry",
		"hunt",
		"hurdle",
		"hurry",
		"hurt",
		"husband",
		"hybrid",
		"ice",
		"icon",
		"idea",
		"identify",
		"idle",
		"ignore",
		"ill",
		"illegal",
		"illness",
		"image",
		"imitate",
		"immense",
		"immune",
		"impact",
		"impose",
		"improve",
		"impulse",
		"inch",
		"include",
		"income",
		"increase",
		"index",
		"indicate",
		"indoor",
		"industry",
		"infant",
		"inflict",
		"inform",
		"inhale",
		"inherit",
		"initial",
		"inject",
		"injury",
		"inmate",
		"inner",
		"innocent",
		"input",
		"inquiry",
		"insane",
		"insect",
		"inside",
		"inspire",
		"install",
		"intact",
		"interest",
		"into",
		"invest",
		"invite",
		"involve",
		"iron",
		"island",
		"isolate",
		"issue",
		"item",
		"ivory",
		"jacket",
		"jaguar",
		"jar",
		"jazz",
		"jealous",
		"jeans",
		"jelly",
		"jewel",
		"job",
		"join",
		"joke",
		"journey",
		"joy",
		"judge",
		"juice",
		"jump",
		"jungle",
		"junior",
		"junk",
		"just",
		"kangaroo",
		"keen",
		"keep",
		"ketchup",
		"key",
		"kick",
		"kid",
		"kidney",
		"kind",
		"kingdom",
		"kiss",
		"kit",
		"kitchen",
		"kite",
		"kitten",
		"kiwi",
		"knee",
		"knife",
		"knock",
		"know",
		"lab",
		"label",
		"labor",
		"ladder",
		"lady",
		"lake",
		"lamp",
		"language",
		"laptop",
		"large",
		"later",
		"latin",
		"laugh",
		"laundry",
		"lava",
		"law",
		"lawn",
		"lawsuit",
		"layer",
		"lazy",
		"leader",
		"leaf",
		"learn",
		"leave",
		"lecture",
		"left",
		"leg",
		"legal",
		"legend",
		"leisure",
		"lemon",
		"lend",
		"length",
		"lens",
		"leopard",
		"lesson",
		"letter",
		"level",
		"liar",
		"liberty",
		"library",
		"license",
		"life",
		"lift",
		"light",
		"like",
		"limb",
		"limit",
		"link",
		"lion",
		"liquid",
		"list",
		"little",
		"live",
		"lizard",
		"load",
		"loan",
		"lobster",
		"local",
		"lock",
		"logic",
		"lonely",
		"long",
		"loop",
		"lottery",
		"loud",
		"lounge",
		"love",
		"loyal",
		"lucky",
		"luggage",
		"lumber",
		"lunar",
		"lunch",
		"luxury",
		"lyrics",
		"machine",
		"mad",
		"magic",
		"magnet",
		"maid",
		"mail",
		"main",
		"major",
		"make",
		"mammal",
		"man",
		"manage",
		"mandate",
		"mango",
		"mansion",
		"manual",
		"maple",
		"marble",
		"march",
		"margin",
		"marine",
		"market",
		"marriage",
		"mask",
		"mass",
		"master",
		"match",
		"material",
		"math",
		"matrix",
		"matter",
		"maximum",
		"maze",
		"meadow",
		"mean",
		"measure",
		"meat",
		"mechanic",
		"medal",
		"media",
		"melody",
		"melt",
		"member",
		"memory",
		"mention",
		"menu",
		"mercy",
		"merge",
		"merit",
		"merry",
		"mesh",
		"message",
		"metal",
		"method",
		"middle",
		"midnight",
		"milk",
		"million",
		"mimic",
		"mind",
		"minimum",
		"minor",
		"minute",
		"miracle",
		"mirror",
		"misery",
		"miss",
		"mistake",
		"mix",
		"mixed",
		"mixture",
		"mobile",
		"model",
		"modify",
		"mom",
		"moment",
		"monitor",
		"monkey",
		"monster",
		"month",
		"moon",
		"moral",
		"more",
		"morning",
		"mosquito",
		"mother",
		"motion",
		"motor",
		"mountain",
		"mouse",
		"move",
		"movie",
		"much",
		"muffin",
		"mule",
		"multiply",
		"muscle",
		"museum",
		"mushroom",
		"music",
		"must",
		"mutual",
		"myself",
		"mystery",
		"myth",
		"naive",
		"name",
		"napkin",
		"narrow",
		"nasty",
		"nation",
		"nature",
		"near",
		"neck",
		"need",
		"negative",
		"neglect",
		"neither",
		"nephew",
		"nerve",
		"nest",
		"net",
		"network",
		"neutral",
		"never",
		"news",
		"next",
		"nice",
		"night",
		"noble",
		"noise",
		"nominee",
		"noodle",
		"normal",
		"north",
		"nose",
		"notable",
		"note",
		"nothing",
		"notice",
		"novel",
		"now",
		"nuclear",
		"number",
		"nurse",
		"nut",
		"oak",
		"obey",
		"object",
		"oblige",
		"obscure",
		"observe",
		"obtain",
		"obvious",
		"occur",
		"ocean",
		"october",
		"odor",
		"off",
		"offer",
		"office",
		"often",
		"oil",
		"okay",
		"old",
		"olive",
		"olympic",
		"omit",
		"once",
		"one",
		"onion",
		"online",
		"only",
		"open",
		"opera",
		"opinion",
		"oppose",
		"option",
		"orange",
		"orbit",
		"orchard",
		"order",
		"ordinary",
		"organ",
		"orient",
		"original",
		"orphan",
		"ostrich",
		"other",
		"outdoor",
		"outer",
		"output",
		"outside",
		"oval",
		"oven",
		"over",
		"own",
		"owner",
		"oxygen",
		"oyster",
		"ozone",
		"pact",
		"paddle",
		"page",
		"pair",
		"palace",
		"palm",
		"panda",
		"panel",
		"panic",
		"panther",
		"paper",
		"parade",
		"parent",
		"park",
		"parrot",
		"party",
		"pass",
		"patch",
		"path",
		"patient",
		"patrol",
		"pattern",
		"pause",
		"pave",
		"payment",
		"peace",
		"peanut",
		"pear",
		"peasant",
		"pelican",
		"pen",
		"penalty",
		"pencil",
		"people",
		"pepper",
		"perfect",
		"permit",
		"person",
		"pet",
		"phone",
		"photo",
		"phrase",
		"physical",
		"piano",
		"picnic",
		"picture",
		"piece",
		"pig",
		"pigeon",
		"pill",
		"pilot",
		"pink",
		"pioneer",
		"pipe",
		"pistol",
		"pitch",
		"pizza",
		"place",
		"planet",
		"plastic",
		"plate",
		"play",
		"please",
		"pledge",
		"pluck",
		"plug",
		"plunge",
		"poem",
		"poet",
		"point",
		"polar",
		"pole",
		"police",
		"pond",
		"pony",
		"pool",
		"popular",
		"portion",
		"position",
		"possible",
		"post",
		"potato",
		"pottery",
		"poverty",
		"powder",
		"power",
		"practice",
		"praise",
		"predict",
		"prefer",
		"prepare",
		"present",
		"pretty",
		"prevent",
		"price",
		"pride",
		"primary",
		"print",
		"priority",
		"prison",
		"private",
		"prize",
		"problem",
		"process",
		"produce",
		"profit",
		"program",
		"project",
		"promote",
		"proof",
		"property",
		"prosper",
		"protect",
		"proud",
		"provide",
		"public",
		"pudding",
		"pull",
		"pulp",
		"pulse",
		"pumpkin",
		"punch",
		"pupil",
		"puppy",
		"purchase",
		"purity",
		"purpose",
		"purse",
		"push",
		"put",
		"puzzle",
		"pyramid",
		"quality",
		"quantum",
		"quarter",
		"question",
		"quick",
		"quit",
		"quiz",
		"quote",
		"rabbit",
		"raccoon",
		"race",
		"rack",
		"radar",
		"radio",
		"rail",
		"rain",
		"raise",
		"rally",
		"ramp",
		"ranch",
		"random",
		"range",
		"rapid",
		"rare",
		"rate",
		"rather",
		"raven",
		"raw",
		"razor",
		"ready",
		"real",
		"reason",
		"rebel",
		"rebuild",
		"recall",
		"receive",
		"recipe",
		"record",
		"recycle",
		"reduce",
		"reflect",
		"reform",
		"refuse",
		"region",
		"regret",
		"regular",
		"reject",
		"relax",
		"release",
		"relief",
		"rely",
		"remain",
		"remember",
		"remind",
		"remove",
		"render",
		"renew",
		"rent",
		"reopen",
		"repair",
		"repeat",
		"replace",
		"report",
		"require",
		"rescue",
		"resemble",
		"resist",
		"resource",
		"response",
		"result",
		"retire",
		"retreat",
		"return",
		"reunion",
		"reveal",
		"review",
		"reward",
		"rhythm",
		"rib",
		"ribbon",
		"rice",
		"rich",
		"ride",
		"ridge",
		"rifle",
		"right",
		"rigid",
		"ring",
		"riot",
		"ripple",
		"risk",
		"ritual",
		"rival",
		"river",
		"road",
		"roast",
		"robot",
		"robust",
		"rocket",
		"romance",
		"roof",
		"rookie",
		"room",
		"rose",
		"rotate",
		"rough",
		"round",
		"route",
		"royal",
		"rubber",
		"rude",
		"rug",
		"rule",
		"run",
		"runway",
		"rural",
		"sad",
		"saddle",
		"sadness",
		"safe",
		"sail",
		"salad",
		"salmon",
		"salon",
		"salt",
		"salute",
		"same",
		"sample",
		"sand",
		"satisfy",
		"satoshi",
		"sauce",
		"sausage",
		"save",
		"say",
		"scale",
		"scan",
		"scare",
		"scatter",
		"scene",
		"scheme",
		"school",
		"science",
		"scissors",
		"scorpion",
		"scout",
		"scrap",
		"screen",
		"script",
		"scrub",
		"sea",
		"search",
		"season",
		"seat",
		"second",
		"secret",
		"section",
		"security",
		"seed",
		"seek",
		"segment",
		"select",
		"sell",
		"seminar",
		"senior",
		"sense",
		"sentence",
		"series",
		"service",
		"session",
		"settle",
		"setup",
		"seven",
		"shadow",
		"shaft",
		"shallow",
		"share",
		"shed",
		"shell",
		"sheriff",
		"shield",
		"shift",
		"shine",
		"ship",
		"shiver",
		"shock",
		"shoe",
		"shoot",
		"shop",
		"short",
		"shoulder",
		"shove",
		"shrimp",
		"shrug",
		"shuffle",
		"shy",
		"sibling",
		"sick",
		"side",
		"siege",
		"sight",
		"sign",
		"silent",
		"silk",
		"silly",
		"silver",
		"similar",
		"simple",
		"since",
		"sing",
		"siren",
		"sister",
		"situate",
		"six",
		"size",
		"skate",
		"sketch",
		"ski",
		"skill",
		"skin",
		"skirt",
		"skull",
		"slab",
		"slam",
		"sleep",
		"slender",
		"slice",
		"slide",
		"slight",
		"slim",
		"slogan",
		"slot",
		"slow",
		"slush",
		"small",
		"smart",
		"smile",
		"smoke",
		"smooth",
		"snack",
		"snake",
		"snap",
		"sniff",
		"snow",
		"soap",
		"soccer",
		"social",
		"sock",
		"soda",
		"soft",
		"solar",
		"soldier",
		"solid",
		"solution",
		"solve",
		"someone",
		"song",
		"soon",
		"sorry",
		"sort",
		"soul",
		"sound",
		"soup",
		"source",
		"south",
		"space",
		"spare",
		"spatial",
		"spawn",
		"speak",
		"special",
		"speed",
		"spell",
		"spend",
		"sphere",
		"spice",
		"spider",
		"spike",
		"spin",
		"spirit",
		"split",
		"spoil",
		"sponsor",
		"spoon",
		"sport",
		"spot",
		"spray",
		"spread",
		"spring",
		"spy",
		"square",
		"squeeze",
		"squirrel",
		"stable",
		"stadium",
		"staff",
		"stage",
		"stairs",
		"stamp",
		"stand",
		"start",
		"state",
		"stay",
		"steak",
		"steel",
		"stem",
		"step",
		"stereo",
		"stick",
		"still",
		"sting",
		"stock",
		"stomach",
		"stone",
		"stool",
		"story",
		"stove",
		"strategy",
		"street",
		"strike",
		"strong",
		"struggle",
		"student",
		"stuff",
		"stumble",
		"style",
		"subject",
		"submit",
		"subway",
		"success",
		"such",
		"sudden",
		"suffer",
		"sugar",
		"suggest",
		"suit",
		"summer",
		"sun",
		"sunny",
		"sunset",
		"super",
		"supply",
		"supreme",
		"sure",
		"surface",
		"surge",
		"surprise",
		"surround",
		"survey",
		"suspect",
		"sustain",
		"swallow",
		"swamp",
		"swap",
		"swarm",
		"swear",
		"sweet",
		"swift",
		"swim",
		"swing",
		"switch",
		"sword",
		"symbol",
		"symptom",
		"syrup",
		"system",
		"table",
		"tackle",
		"tag",
		"tail",
		"talent",
		"talk",
		"tank",
		"tape",
		"target",
		"task",
		"taste",
		"tattoo",
		"taxi",
		"teach",
		"team",
		"tell",
		"ten",
		"tenant",
		"tennis",
		"tent",
		"term",
		"test",
		"text",
		"thank",
		"that",
		"theme",
		"then",
		"theory",
		"there",
		"they",
		"thing",
		"this",
		"thought",
		"three",
		"thrive",
		"throw",
		"thumb",
		"thunder",
		"ticket",
		"tide",
		"tiger",
		"tilt",
		"timber",
		"time",
		"tiny",
		"tip",
		"tired",
		"tissue",
		"title",
		"toast",
		"tobacco",
		"today",
		"toddler",
		"toe",
		"together",
		"toilet",
		"token",
		"tomato",
		"tomorrow",
		"tone",
		"tongue",
		"tonight",
		"tool",
		"tooth",
		"top",
		"topic",
		"topple",
		"torch",
		"tornado",
		"tortoise",
		"toss",
		"total",
		"tourist",
		"toward",
		"tower",
		"town",
		"toy",
		"track",
		"trade",
		"traffic",
		"tragic",
		"train",
		"transfer",
		"trap",
		"trash",
		"travel",
		"tray",
		"treat",
		"tree",
		"trend",
		"trial",
		"tribe",
		"trick",
		"trigger",
		"trim",
		"trip",
		"trophy",
		"trouble",
		"truck",
		"true",
		"truly",
		"trumpet",
		"trust",
		"truth",
		"try",
		"tube",
		"tuition",
		"tumble",
		"tuna",
		"tunnel",
		"turkey",
		"turn",
		"turtle",
		"twelve",
		"twenty",
		"twice",
		"twin",
		"twist",
		"two",
		"type",
		"typical",
		"ugly",
		"umbrella",
		"unable",
		"unaware",
		"uncle",
		"uncover",
		"under",
		"undo",
		"unfair",
		"unfold",
		"unhappy",
		"uniform",
		"unique",
		"unit",
		"universe",
		"unknown",
		"unlock",
		"until",
		"unusual",
		"unveil",
		"update",
		"upgrade",
		"uphold",
		"upon",
		"upper",
		"upset",
		"urban",
		"urge",
		"usage",
		"use",
		"used",
		"useful",
		"useless",
		"usual",
		"utility",
		"vacant",
		"vacuum",
		"vague",
		"valid",
		"valley",
		"valve",
		"van",
		"vanish",
		"vapor",
		"various",
		"vast",
		"vault",
		"vehicle",
		"velvet",
		"vendor",
		"venture",
		"venue",
		"verb",
		"verify",
		"version",
		"very",
		"vessel",
		"veteran",
		"viable",
		"vibrant",
		"vicious",
		"victory",
		"video",
		"view",
		"village",
		"vintage",
		"violin",
		"virtual",
		"virus",
		"visa",
		"visit",
		"visual",
		"vital",
		"vivid",
		"vocal",
		"voice",
		"void",
		"volcano",
		"volume",
		"vote",
		"voyage",
		"wage",
		"wagon",
		"wait",
		"walk",
		"wall",
		"walnut",
		"want",
		"warfare",
		"warm",
		"warrior",
		"wash",
		"wasp",
		"waste",
		"water",
		"wave",
		"way",
		"wealth",
		"weapon",
		"wear",
		"weasel",
		"weather",
		"web",
		"wedding",
		"weekend",
		"weird",
		"welcome",
		"west",
		"wet",
		"whale",
		"what",
		"wheat",
		"wheel",
		"when",
		"where",
		"whip",
		"whisper",
		"wide",
		"width",
		"wife",
		"wild",
		"will",
		"win",
		"window",
		"wine",
		"wing",
		"wink",
		"winner",
		"winter",
		"wire",
		"wisdom",
		"wise",
		"wish",
		"witness",
		"wolf",
		"woman",
		"wonder",
		"wood",
		"wool",
		"word",
		"work",
		"world",
		"worry",
		"worth",
		"wrap",
		"wreck",
		"wrestle",
		"wrist",
		"write",
		"wrong",
		"yard",
		"year",
		"yellow",
		"you",
		"young",
		"youth",
		"zebra",
		"zero",
		"zone",
		"zoo"
	];

	Object.defineProperty(_wordlists, "__esModule", { value: true });
	// browserify by default only pulls in files that are hard coded in requires
	// In order of last to first in this file, the default wordlist will be chosen
	// based on what is present. (Bundles may remove wordlists they don't need)
	const wordlists$1 = {};
	_wordlists.wordlists = wordlists$1;
	let _default;
	_wordlists._default = _default;
	try {
	    _wordlists._default = _default = require$$0$1;
	    wordlists$1.czech = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$1;
	    wordlists$1.chinese_simplified = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$2;
	    wordlists$1.chinese_traditional = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$3;
	    wordlists$1.korean = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$4;
	    wordlists$1.french = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$5;
	    wordlists$1.italian = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$6;
	    wordlists$1.spanish = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$7;
	    wordlists$1.japanese = _default;
	    wordlists$1.JA = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$8;
	    wordlists$1.portuguese = _default;
	}
	catch (err) { }
	try {
	    _wordlists._default = _default = require$$9;
	    wordlists$1.english = _default;
	    wordlists$1.EN = _default;
	}
	catch (err) { }

	Object.defineProperty(src, "__esModule", { value: true });
	const createHash = browser$b;
	const pbkdf2_1 = browser$9;
	const randomBytes = browser$c.exports;
	const _wordlists_1 = _wordlists;
	let DEFAULT_WORDLIST = _wordlists_1._default;
	const INVALID_MNEMONIC = 'Invalid mnemonic';
	const INVALID_ENTROPY = 'Invalid entropy';
	const INVALID_CHECKSUM = 'Invalid mnemonic checksum';
	const WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\n' +
	    'Please pass a 2048 word array explicitly.';
	function pbkdf2Promise(password, saltMixin, iterations, keylen, digest) {
	    return Promise.resolve().then(() => new Promise((resolve, reject) => {
	        const callback = (err, derivedKey) => {
	            if (err) {
	                return reject(err);
	            }
	            else {
	                return resolve(derivedKey);
	            }
	        };
	        pbkdf2_1.pbkdf2(password, saltMixin, iterations, keylen, digest, callback);
	    }));
	}
	function normalize(str) {
	    return (str || '').normalize('NFKD');
	}
	function lpad(str, padString, length) {
	    while (str.length < length) {
	        str = padString + str;
	    }
	    return str;
	}
	function binaryToByte(bin) {
	    return parseInt(bin, 2);
	}
	function bytesToBinary(bytes) {
	    return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');
	}
	function deriveChecksumBits(entropyBuffer) {
	    const ENT = entropyBuffer.length * 8;
	    const CS = ENT / 32;
	    const hash = createHash('sha256')
	        .update(entropyBuffer)
	        .digest();
	    return bytesToBinary(Array.from(hash)).slice(0, CS);
	}
	function salt(password) {
	    return 'mnemonic' + (password || '');
	}
	function mnemonicToSeedSync(mnemonic, password) {
	    const mnemonicBuffer = Buffer$M.from(normalize(mnemonic), 'utf8');
	    const saltBuffer = Buffer$M.from(salt(normalize(password)), 'utf8');
	    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
	}
	var mnemonicToSeedSync_1 = src.mnemonicToSeedSync = mnemonicToSeedSync;
	function mnemonicToSeed(mnemonic, password) {
	    return Promise.resolve().then(() => {
	        const mnemonicBuffer = Buffer$M.from(normalize(mnemonic), 'utf8');
	        const saltBuffer = Buffer$M.from(salt(normalize(password)), 'utf8');
	        return pbkdf2Promise(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
	    });
	}
	src.mnemonicToSeed = mnemonicToSeed;
	function mnemonicToEntropy(mnemonic, wordlist) {
	    wordlist = wordlist || DEFAULT_WORDLIST;
	    if (!wordlist) {
	        throw new Error(WORDLIST_REQUIRED);
	    }
	    const words = normalize(mnemonic).split(' ');
	    if (words.length % 3 !== 0) {
	        throw new Error(INVALID_MNEMONIC);
	    }
	    // convert word indices to 11 bit binary strings
	    const bits = words
	        .map((word) => {
	        const index = wordlist.indexOf(word);
	        if (index === -1) {
	            throw new Error(INVALID_MNEMONIC);
	        }
	        return lpad(index.toString(2), '0', 11);
	    })
	        .join('');
	    // split the binary string into ENT/CS
	    const dividerIndex = Math.floor(bits.length / 33) * 32;
	    const entropyBits = bits.slice(0, dividerIndex);
	    const checksumBits = bits.slice(dividerIndex);
	    // calculate the checksum and compare
	    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
	    if (entropyBytes.length < 16) {
	        throw new Error(INVALID_ENTROPY);
	    }
	    if (entropyBytes.length > 32) {
	        throw new Error(INVALID_ENTROPY);
	    }
	    if (entropyBytes.length % 4 !== 0) {
	        throw new Error(INVALID_ENTROPY);
	    }
	    const entropy = Buffer$M.from(entropyBytes);
	    const newChecksum = deriveChecksumBits(entropy);
	    if (newChecksum !== checksumBits) {
	        throw new Error(INVALID_CHECKSUM);
	    }
	    return entropy.toString('hex');
	}
	src.mnemonicToEntropy = mnemonicToEntropy;
	function entropyToMnemonic(entropy, wordlist) {
	    if (!isBuffer$2(entropy)) {
	        entropy = Buffer$M.from(entropy, 'hex');
	    }
	    wordlist = wordlist || DEFAULT_WORDLIST;
	    if (!wordlist) {
	        throw new Error(WORDLIST_REQUIRED);
	    }
	    // 128 <= ENT <= 256
	    if (entropy.length < 16) {
	        throw new TypeError(INVALID_ENTROPY);
	    }
	    if (entropy.length > 32) {
	        throw new TypeError(INVALID_ENTROPY);
	    }
	    if (entropy.length % 4 !== 0) {
	        throw new TypeError(INVALID_ENTROPY);
	    }
	    const entropyBits = bytesToBinary(Array.from(entropy));
	    const checksumBits = deriveChecksumBits(entropy);
	    const bits = entropyBits + checksumBits;
	    const chunks = bits.match(/(.{1,11})/g);
	    const words = chunks.map((binary) => {
	        const index = binaryToByte(binary);
	        return wordlist[index];
	    });
	    return wordlist[0] === '\u3042\u3044\u3053\u304f\u3057\u3093' // Japanese wordlist
	        ? words.join('\u3000')
	        : words.join(' ');
	}
	var entropyToMnemonic_1 = src.entropyToMnemonic = entropyToMnemonic;
	function generateMnemonic(strength, rng, wordlist) {
	    strength = strength || 128;
	    if (strength % 32 !== 0) {
	        throw new TypeError(INVALID_ENTROPY);
	    }
	    rng = rng || randomBytes;
	    return entropyToMnemonic(rng(strength / 8), wordlist);
	}
	var generateMnemonic_1 = src.generateMnemonic = generateMnemonic;
	function validateMnemonic(mnemonic, wordlist) {
	    try {
	        mnemonicToEntropy(mnemonic, wordlist);
	    }
	    catch (e) {
	        return false;
	    }
	    return true;
	}
	var validateMnemonic_1 = src.validateMnemonic = validateMnemonic;
	function setDefaultWordlist(language) {
	    const result = _wordlists_1.wordlists[language];
	    if (result) {
	        DEFAULT_WORDLIST = result;
	    }
	    else {
	        throw new Error('Could not find wordlist for language "' + language + '"');
	    }
	}
	src.setDefaultWordlist = setDefaultWordlist;
	function getDefaultWordlist() {
	    if (!DEFAULT_WORDLIST) {
	        throw new Error('No Default Wordlist set');
	    }
	    return Object.keys(_wordlists_1.wordlists).filter((lang) => {
	        if (lang === 'JA' || lang === 'EN') {
	            return false;
	        }
	        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);
	    })[0];
	}
	src.getDefaultWordlist = getDefaultWordlist;
	var _wordlists_2 = _wordlists;
	var wordlists = src.wordlists = _wordlists_2.wordlists;

	class Mnemonic {
	    constructor(language = Mnemonic.ENGLISH) {
	        this.language = language;
	        if (!(language in Mnemonic.WORDLISTS))
	            throw new MnemonicException("Unsupported language for mnemonic " + language);
	    }
	    static getInstance(language = Mnemonic.ENGLISH) {
	        if (language === null || language === "")
	            language = Mnemonic.ENGLISH;
	        return new Mnemonic(language);
	    }
	    generate(entropy) {
	        if (entropy)
	            return entropyToMnemonic_1(entropy, Mnemonic.WORDLISTS[this.language]);
	        else
	            return generateMnemonic_1(Mnemonic.TWELVE_WORDS_ENTROPY, null, Mnemonic.WORDLISTS[this.language]);
	    }
	    isValid(mnemonic) {
	        checkArgument(mnemonic != null && mnemonic !== "", "Invalid mnemonic");
	        return validateMnemonic_1(mnemonic, Mnemonic.WORDLISTS[this.language]);
	    }
	    static getLanguage(mnemonic) {
	        checkArgument(mnemonic != null && mnemonic !== "", "Invalid menmonic");
	        for (let lang of Object.keys(Mnemonic.WORDLISTS)) {
	            let m = new Mnemonic(lang);
	            if (m.isValid(mnemonic))
	                return lang;
	        }
	        return null;
	    }
	    static checkIsValid(mnemonic) {
	        checkArgument(mnemonic != null && mnemonic !== "", "Invalid menmonic");
	        let lang = this.getLanguage(mnemonic);
	        return lang != null;
	    }
	    static toSeed(mnemonic, passphrase) {
	        checkArgument(mnemonic != null && mnemonic !== "", "Invalid menmonic");
	        if (passphrase == null)
	            passphrase = "";
	        return mnemonicToSeedSync_1(mnemonic, passphrase);
	    }
	}
	Mnemonic.DEFAULT = null;
	Mnemonic.CHINESE_SIMPLIFIED = "chinese_simplified";
	Mnemonic.CHINESE_TRADITIONAL = "chinese_traditional";
	Mnemonic.CZECH = "czech";
	Mnemonic.ENGLISH = "english";
	Mnemonic.FRENCH = "french";
	Mnemonic.ITALIAN = "italian";
	Mnemonic.JAPANESE = "japanese";
	Mnemonic.KOREAN = "korean";
	Mnemonic.SPANISH = "spanish";
	Mnemonic.TWELVE_WORDS_ENTROPY = 128;
	Mnemonic.WORDLISTS = {
	    "english": wordlists.english,
	    "czech": wordlists.czech,
	    "chinese_simplified": wordlists.chinese_simplified,
	    "chinese_traditional": wordlists.chinese_traditional,
	    "french": wordlists.french,
	    "italian": wordlists.italian,
	    "japanese": wordlists.japanese,
	    "spanish": wordlists.spanish,
	    "korean": wordlists.korean
	};

	function assertPath(path) {
	  if (typeof path !== 'string') {
	    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
	  }
	}

	// Resolves . and .. elements in a path with directory names
	function normalizeStringPosix(path, allowAboveRoot) {
	  var res = '';
	  var lastSegmentLength = 0;
	  var lastSlash = -1;
	  var dots = 0;
	  var code;
	  for (var i = 0; i <= path.length; ++i) {
	    if (i < path.length)
	      code = path.charCodeAt(i);
	    else if (code === 47 /*/*/)
	      break;
	    else
	      code = 47 /*/*/;
	    if (code === 47 /*/*/) {
	      if (lastSlash === i - 1 || dots === 1) ; else if (lastSlash !== i - 1 && dots === 2) {
	        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
	          if (res.length > 2) {
	            var lastSlashIndex = res.lastIndexOf('/');
	            if (lastSlashIndex !== res.length - 1) {
	              if (lastSlashIndex === -1) {
	                res = '';
	                lastSegmentLength = 0;
	              } else {
	                res = res.slice(0, lastSlashIndex);
	                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
	              }
	              lastSlash = i;
	              dots = 0;
	              continue;
	            }
	          } else if (res.length === 2 || res.length === 1) {
	            res = '';
	            lastSegmentLength = 0;
	            lastSlash = i;
	            dots = 0;
	            continue;
	          }
	        }
	        if (allowAboveRoot) {
	          if (res.length > 0)
	            res += '/..';
	          else
	            res = '..';
	          lastSegmentLength = 2;
	        }
	      } else {
	        if (res.length > 0)
	          res += '/' + path.slice(lastSlash + 1, i);
	        else
	          res = path.slice(lastSlash + 1, i);
	        lastSegmentLength = i - lastSlash - 1;
	      }
	      lastSlash = i;
	      dots = 0;
	    } else if (code === 46 /*.*/ && dots !== -1) {
	      ++dots;
	    } else {
	      dots = -1;
	    }
	  }
	  return res;
	}

	function _format(sep, pathObject) {
	  var dir = pathObject.dir || pathObject.root;
	  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
	  if (!dir) {
	    return base;
	  }
	  if (dir === pathObject.root) {
	    return dir + base;
	  }
	  return dir + sep + base;
	}

	var posix = {
	  // path.resolve([from ...], to)
	  resolve: function resolve() {
	    var resolvedPath = '';
	    var resolvedAbsolute = false;
	    var cwd;

	    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	      var path;
	      if (i >= 0)
	        path = arguments[i];
	      else {
	        if (cwd === undefined)
	          cwd = process$1.cwd();
	        path = cwd;
	      }

	      assertPath(path);

	      // Skip empty entries
	      if (path.length === 0) {
	        continue;
	      }

	      resolvedPath = path + '/' + resolvedPath;
	      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
	    }

	    // At this point the path should be resolved to a full absolute path, but
	    // handle relative paths to be safe (might happen when process.cwd() fails)

	    // Normalize the path
	    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

	    if (resolvedAbsolute) {
	      if (resolvedPath.length > 0)
	        return '/' + resolvedPath;
	      else
	        return '/';
	    } else if (resolvedPath.length > 0) {
	      return resolvedPath;
	    } else {
	      return '.';
	    }
	  },

	  normalize: function normalize(path) {
	    assertPath(path);

	    if (path.length === 0) return '.';

	    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
	    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

	    // Normalize the path
	    path = normalizeStringPosix(path, !isAbsolute);

	    if (path.length === 0 && !isAbsolute) path = '.';
	    if (path.length > 0 && trailingSeparator) path += '/';

	    if (isAbsolute) return '/' + path;
	    return path;
	  },

	  isAbsolute: function isAbsolute(path) {
	    assertPath(path);
	    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
	  },

	  join: function join() {
	    if (arguments.length === 0)
	      return '.';
	    var joined;
	    for (var i = 0; i < arguments.length; ++i) {
	      var arg = arguments[i];
	      assertPath(arg);
	      if (arg.length > 0) {
	        if (joined === undefined)
	          joined = arg;
	        else
	          joined += '/' + arg;
	      }
	    }
	    if (joined === undefined)
	      return '.';
	    return posix.normalize(joined);
	  },

	  relative: function relative(from, to) {
	    assertPath(from);
	    assertPath(to);

	    if (from === to) return '';

	    from = posix.resolve(from);
	    to = posix.resolve(to);

	    if (from === to) return '';

	    // Trim any leading backslashes
	    var fromStart = 1;
	    for (; fromStart < from.length; ++fromStart) {
	      if (from.charCodeAt(fromStart) !== 47 /*/*/)
	        break;
	    }
	    var fromEnd = from.length;
	    var fromLen = fromEnd - fromStart;

	    // Trim any leading backslashes
	    var toStart = 1;
	    for (; toStart < to.length; ++toStart) {
	      if (to.charCodeAt(toStart) !== 47 /*/*/)
	        break;
	    }
	    var toEnd = to.length;
	    var toLen = toEnd - toStart;

	    // Compare paths to find the longest common path from root
	    var length = fromLen < toLen ? fromLen : toLen;
	    var lastCommonSep = -1;
	    var i = 0;
	    for (; i <= length; ++i) {
	      if (i === length) {
	        if (toLen > length) {
	          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
	            // We get here if `from` is the exact base path for `to`.
	            // For example: from='/foo/bar'; to='/foo/bar/baz'
	            return to.slice(toStart + i + 1);
	          } else if (i === 0) {
	            // We get here if `from` is the root
	            // For example: from='/'; to='/foo'
	            return to.slice(toStart + i);
	          }
	        } else if (fromLen > length) {
	          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
	            // We get here if `to` is the exact base path for `from`.
	            // For example: from='/foo/bar/baz'; to='/foo/bar'
	            lastCommonSep = i;
	          } else if (i === 0) {
	            // We get here if `to` is the root.
	            // For example: from='/foo'; to='/'
	            lastCommonSep = 0;
	          }
	        }
	        break;
	      }
	      var fromCode = from.charCodeAt(fromStart + i);
	      var toCode = to.charCodeAt(toStart + i);
	      if (fromCode !== toCode)
	        break;
	      else if (fromCode === 47 /*/*/)
	        lastCommonSep = i;
	    }

	    var out = '';
	    // Generate the relative path based on the path difference between `to`
	    // and `from`
	    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
	      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
	        if (out.length === 0)
	          out += '..';
	        else
	          out += '/..';
	      }
	    }

	    // Lastly, append the rest of the destination (`to`) path that comes after
	    // the common path parts
	    if (out.length > 0)
	      return out + to.slice(toStart + lastCommonSep);
	    else {
	      toStart += lastCommonSep;
	      if (to.charCodeAt(toStart) === 47 /*/*/)
	        ++toStart;
	      return to.slice(toStart);
	    }
	  },

	  _makeLong: function _makeLong(path) {
	    return path;
	  },

	  dirname: function dirname(path) {
	    assertPath(path);
	    if (path.length === 0) return '.';
	    var code = path.charCodeAt(0);
	    var hasRoot = code === 47 /*/*/;
	    var end = -1;
	    var matchedSlash = true;
	    for (var i = path.length - 1; i >= 1; --i) {
	      code = path.charCodeAt(i);
	      if (code === 47 /*/*/) {
	          if (!matchedSlash) {
	            end = i;
	            break;
	          }
	        } else {
	        // We saw the first non-path separator
	        matchedSlash = false;
	      }
	    }

	    if (end === -1) return hasRoot ? '/' : '.';
	    if (hasRoot && end === 1) return '//';
	    return path.slice(0, end);
	  },

	  basename: function basename(path, ext) {
	    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
	    assertPath(path);

	    var start = 0;
	    var end = -1;
	    var matchedSlash = true;
	    var i;

	    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
	      if (ext.length === path.length && ext === path) return '';
	      var extIdx = ext.length - 1;
	      var firstNonSlashEnd = -1;
	      for (i = path.length - 1; i >= 0; --i) {
	        var code = path.charCodeAt(i);
	        if (code === 47 /*/*/) {
	            // If we reached a path separator that was not part of a set of path
	            // separators at the end of the string, stop now
	            if (!matchedSlash) {
	              start = i + 1;
	              break;
	            }
	          } else {
	          if (firstNonSlashEnd === -1) {
	            // We saw the first non-path separator, remember this index in case
	            // we need it if the extension ends up not matching
	            matchedSlash = false;
	            firstNonSlashEnd = i + 1;
	          }
	          if (extIdx >= 0) {
	            // Try to match the explicit extension
	            if (code === ext.charCodeAt(extIdx)) {
	              if (--extIdx === -1) {
	                // We matched the extension, so mark this as the end of our path
	                // component
	                end = i;
	              }
	            } else {
	              // Extension does not match, so our result is the entire path
	              // component
	              extIdx = -1;
	              end = firstNonSlashEnd;
	            }
	          }
	        }
	      }

	      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
	      return path.slice(start, end);
	    } else {
	      for (i = path.length - 1; i >= 0; --i) {
	        if (path.charCodeAt(i) === 47 /*/*/) {
	            // If we reached a path separator that was not part of a set of path
	            // separators at the end of the string, stop now
	            if (!matchedSlash) {
	              start = i + 1;
	              break;
	            }
	          } else if (end === -1) {
	          // We saw the first non-path separator, mark this as the end of our
	          // path component
	          matchedSlash = false;
	          end = i + 1;
	        }
	      }

	      if (end === -1) return '';
	      return path.slice(start, end);
	    }
	  },

	  extname: function extname(path) {
	    assertPath(path);
	    var startDot = -1;
	    var startPart = 0;
	    var end = -1;
	    var matchedSlash = true;
	    // Track the state of characters (if any) we see before our first dot and
	    // after any path separator we find
	    var preDotState = 0;
	    for (var i = path.length - 1; i >= 0; --i) {
	      var code = path.charCodeAt(i);
	      if (code === 47 /*/*/) {
	          // If we reached a path separator that was not part of a set of path
	          // separators at the end of the string, stop now
	          if (!matchedSlash) {
	            startPart = i + 1;
	            break;
	          }
	          continue;
	        }
	      if (end === -1) {
	        // We saw the first non-path separator, mark this as the end of our
	        // extension
	        matchedSlash = false;
	        end = i + 1;
	      }
	      if (code === 46 /*.*/) {
	          // If this is our first dot, mark it as the start of our extension
	          if (startDot === -1)
	            startDot = i;
	          else if (preDotState !== 1)
	            preDotState = 1;
	      } else if (startDot !== -1) {
	        // We saw a non-dot and non-path separator before our dot, so we should
	        // have a good chance at having a non-empty extension
	        preDotState = -1;
	      }
	    }

	    if (startDot === -1 || end === -1 ||
	        // We saw a non-dot character immediately before the dot
	        preDotState === 0 ||
	        // The (right-most) trimmed path component is exactly '..'
	        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
	      return '';
	    }
	    return path.slice(startDot, end);
	  },

	  format: function format(pathObject) {
	    if (pathObject === null || typeof pathObject !== 'object') {
	      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
	    }
	    return _format('/', pathObject);
	  },

	  parse: function parse(path) {
	    assertPath(path);

	    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
	    if (path.length === 0) return ret;
	    var code = path.charCodeAt(0);
	    var isAbsolute = code === 47 /*/*/;
	    var start;
	    if (isAbsolute) {
	      ret.root = '/';
	      start = 1;
	    } else {
	      start = 0;
	    }
	    var startDot = -1;
	    var startPart = 0;
	    var end = -1;
	    var matchedSlash = true;
	    var i = path.length - 1;

	    // Track the state of characters (if any) we see before our first dot and
	    // after any path separator we find
	    var preDotState = 0;

	    // Get non-dir info
	    for (; i >= start; --i) {
	      code = path.charCodeAt(i);
	      if (code === 47 /*/*/) {
	          // If we reached a path separator that was not part of a set of path
	          // separators at the end of the string, stop now
	          if (!matchedSlash) {
	            startPart = i + 1;
	            break;
	          }
	          continue;
	        }
	      if (end === -1) {
	        // We saw the first non-path separator, mark this as the end of our
	        // extension
	        matchedSlash = false;
	        end = i + 1;
	      }
	      if (code === 46 /*.*/) {
	          // If this is our first dot, mark it as the start of our extension
	          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
	        } else if (startDot !== -1) {
	        // We saw a non-dot and non-path separator before our dot, so we should
	        // have a good chance at having a non-empty extension
	        preDotState = -1;
	      }
	    }

	    if (startDot === -1 || end === -1 ||
	    // We saw a non-dot character immediately before the dot
	    preDotState === 0 ||
	    // The (right-most) trimmed path component is exactly '..'
	    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
	      if (end !== -1) {
	        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
	      }
	    } else {
	      if (startPart === 0 && isAbsolute) {
	        ret.name = path.slice(1, startDot);
	        ret.base = path.slice(1, end);
	      } else {
	        ret.name = path.slice(startPart, startDot);
	        ret.base = path.slice(startPart, end);
	      }
	      ret.ext = path.slice(startDot, end);
	    }

	    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

	    return ret;
	  },

	  sep: '/',
	  delimiter: ':',
	  win32: null,
	  posix: null
	};

	posix.posix = posix;

	var pathBrowserify = posix;

	var path = pathBrowserify;

	class File {
	    constructor(path, subpath) {
	        let fullPath = path instanceof File ? path.getAbsolutePath() : path;
	        if (subpath)
	            fullPath += (File.SEPARATOR + subpath);
	        this.fullPath = fullPath;
	    }
	    static exists(file) {
	        if (typeof file === "string")
	            file = new File(file);
	        return file.exists();
	    }
	    static isFile(file) {
	        if (typeof file === "string")
	            file = new File(file);
	        return file.isFile();
	    }
	    static isDirectory(file) {
	        if (typeof file === "string")
	            file = new File(file);
	        return file.isDirectory();
	    }
	    getStats() {
	        if (this.fileStats)
	            return this.fileStats;
	        return this.exists() ? statSync(this.fullPath) : null;
	    }
	    exists() {
	        return existsSync(this.fullPath);
	    }
	    length() {
	        return this.exists() ? this.getStats().size : 0;
	    }
	    getAbsolutePath() {
	        return this.fullPath;
	    }
	    getName() {
	        return this.fullPath.includes(File.SEPARATOR) ? this.fullPath.substring(this.fullPath.lastIndexOf(File.SEPARATOR) + 1) : this.fullPath;
	    }
	    getParentDirectory() {
	        let directoryName = this.getParentDirectoryName();
	        if (directoryName) {
	            return new File(directoryName);
	        }
	        return null;
	    }
	    getParentDirectoryName() {
	        if (this.fullPath.includes(File.SEPARATOR))
	            return this.fullPath.substring(0, this.fullPath.lastIndexOf(File.SEPARATOR));
	        if (this.isDirectory)
	            return this.fullPath;
	        return "";
	    }
	    isDirectory() {
	        return this.exists() ? this.getStats().isDirectory() : false;
	    }
	    isFile() {
	        return this.exists() ? this.getStats().isFile() : false;
	    }
	    list() {
	        return this.exists() && this.getStats().isDirectory() ? readdirSync(this.fullPath) : null;
	    }
	    listFiles() {
	        if (!this.exists() || !this.getStats().isDirectory()) {
	            return null;
	        }
	        let files = [];
	        this.list().forEach((fileName) => {
	            files.push(new File(this.getAbsolutePath() + "/" + fileName));
	        });
	        return files;
	    }
	    writeText(content) {
	        if (!this.exists() || this.getStats().isFile()) {
	            writeFileSync(this.fullPath, content, { encoding: "utf-8" });
	        }
	    }
	    readText() {
	        return this.exists() ? readFileSync(this.fullPath, { encoding: "utf-8" }) : null;
	    }
	    rename(newName) {
	        if (this.exists()) {
	            let targetName = this.fullPath.includes(File.SEPARATOR) && !newName.includes(File.SEPARATOR) ? this.getParentDirectoryName + File.SEPARATOR + newName : newName;
	            renameSync(this.fullPath, targetName);
	        }
	    }
	    createFile(overwrite) {
	        let replace = overwrite ? overwrite : false;
	        if (!this.exists() || replace) {
	            writeFileSync(this.fullPath, "", { encoding: "utf-8" });
	            this.fileStats = undefined;
	        }
	    }
	    createDirectory(overwrite) {
	        let replace = overwrite ? overwrite : false;
	        if (!this.exists() || replace) {
	            this.mkdirpath(this.fullPath);
	            this.fileStats = undefined;
	        }
	    }
	    mkdirpath(dirPath) {
	        if (!existsSync(dirPath)) {
	            try {
	                mkdirSync(dirPath);
	            }
	            catch (e) {
	                let dirname = path.dirname(dirPath);
	                if (dirname !== dirPath) {
	                    this.mkdirpath(dirname);
	                    this.mkdirpath(dirPath);
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	    }
	    delete() {
	        if (this.exists()) {
	            if (this.isDirectory())
	                this.deleteDirectory(this.fullPath);
	            else
	                unlinkSync(this.fullPath);
	            this.fileStats = undefined;
	        }
	    }
	    deleteDirectory(directoryPath) {
	        if (existsSync(directoryPath)) {
	            readdirSync(directoryPath).forEach((file, index) => {
	                const curPath = path.join(directoryPath, file);
	                if (lstatSync(curPath).isDirectory()) {
	                    this.deleteDirectory(curPath);
	                }
	                else {
	                    unlinkSync(curPath);
	                }
	            });
	            rmdirSync(directoryPath);
	        }
	    }
	    toString() {
	        return this.fullPath;
	    }
	}
	File.SEPARATOR = "/";

	class DefaultConflictHandle {
	    constructor() { }
	    static getInstance() {
	        if (!DefaultConflictHandle.instance) {
	            DefaultConflictHandle.instance = new DefaultConflictHandle();
	        }
	        return DefaultConflictHandle.instance;
	    }
	    merge(chainDoc, localDoc) {
	        return localDoc;
	    }
	}

	class IDChainRequest extends DIDEntity {
	    constructor() {
	        super();
	    }
	    constructWithOperation(operation) {
	        this.header = IDChainRequest.Header.newWithPreviousTxId(operation, null);
	    }
	    constructWithPreviousTxId(operation, previousTxid) {
	        this.header = IDChainRequest.Header.newWithPreviousTxId(operation, previousTxid);
	    }
	    constructWithTransferTicket(operation, ticket) {
	        this.header = IDChainRequest.Header.newWithTransferTicket(operation, ticket);
	    }
	    constructWithIDChainRequest(request) {
	        this.header = request.header;
	        this.payload = request.payload;
	        this.proof = request.proof;
	    }
	    getHeader() {
	        return this.header;
	    }
	    getOperation() {
	        return this.header.getOperation();
	    }
	    getPayload() {
	        return this.payload;
	    }
	    setPayload(payload) {
	        this.payload = payload;
	    }
	    getProof() {
	        return this.proof;
	    }
	    setProof(proof) {
	        this.proof = proof;
	    }
	    getSigningInputs() {
	        let prevtxid = this.getOperation().equals(IDChainRequest.Operation.UPDATE) ? this.header.getPreviousTxid() : "";
	        let ticket = this.getOperation().equals(IDChainRequest.Operation.TRANSFER) ? this.header.getTicket() : "";
	        let inputs = [
	            buffer$3.Buffer.from(this.header.getSpecification()),
	            buffer$3.Buffer.from(this.header.getOperation().toString()),
	            buffer$3.Buffer.from(prevtxid),
	            buffer$3.Buffer.from(ticket),
	            buffer$3.Buffer.from(this.payload)
	        ];
	        return inputs;
	    }
	    isValid() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let signKey = this.proof.getVerificationMethod();
	            let doc = yield this.getSignerDocument();
	            if (doc == null)
	                return false;
	            if (!doc.isValid())
	                return false;
	            if (!this.getOperation().equals(IDChainRequest.Operation.DEACTIVATE)) {
	                if (!doc.isAuthenticationKey(signKey))
	                    return false;
	            }
	            else {
	                if (!doc.isAuthenticationKey(signKey) && !doc.isAuthorizationKey(signKey))
	                    return false;
	            }
	            return doc.verify(this.proof.getVerificationMethod(), this.proof.getSignature(), ...this.getSigningInputs());
	        });
	    }
	    toJSON(key = null) {
	        return {
	            header: this.header.toJSON(),
	            payload: this.payload,
	            proof: this.proof.toJSON()
	        };
	    }
	    fromJSON(json, context = null) {
	        if (!json.header)
	            throw new MalformedIDChainRequestException("Missing header");
	        this.header = IDChainRequest.Header.parse(json.header);
	        if (!json.payload)
	            throw new MalformedIDChainRequestException("Missing payload");
	        this.payload = this.getString("payload", json.payload, { mandatory: true, nullable: false });
	        if (!json.proof)
	            throw new MalformedIDChainRequestException("Missing proof");
	        this.proof = IDChainRequest.Proof.parse(json.proof);
	        this.sanitize();
	    }
	}
	IDChainRequest.DID_SPECIFICATION = "elastos/did/1.0";
	IDChainRequest.CREDENTIAL_SPECIFICATION = "elastos/credential/1.0";
	(function (IDChainRequest) {
	    class Operation {
	        constructor(name, specification) {
	            this.name = name;
	            this.specification = specification;
	        }
	        getSpecification() {
	            return this.specification;
	        }
	        toString() {
	            return this.name;
	        }
	        static fromString(name) {
	            return Operation[name.toUpperCase()];
	        }
	        equals(operation) {
	            return this.name === operation.name;
	        }
	    }
	    IDChainRequest.Operation = Operation;
	    (function (Operation) {
	        Operation.CREATE = new Operation("create", IDChainRequest.DID_SPECIFICATION);
	        Operation.UPDATE = new Operation("update", IDChainRequest.DID_SPECIFICATION);
	        Operation.TRANSFER = new Operation("transfer", IDChainRequest.DID_SPECIFICATION);
	        Operation.DEACTIVATE = new Operation("deactivate", IDChainRequest.DID_SPECIFICATION);
	        Operation.DECLARE = new Operation("declare", IDChainRequest.CREDENTIAL_SPECIFICATION);
	        Operation.REVOKE = new Operation("revoke", IDChainRequest.CREDENTIAL_SPECIFICATION);
	    })(Operation = IDChainRequest.Operation || (IDChainRequest.Operation = {}));
	    class Header extends DIDEntity {
	        constructor(spec = null) {
	            super();
	            this.specification = spec;
	        }
	        static newWithPreviousTxId(operation, previousTxid) {
	            let header = new Header(operation.getSpecification());
	            header.operation = operation;
	            header.previousTxid = previousTxid;
	            return header;
	        }
	        static newWithTransferTicket(operation, ticket) {
	            checkArgument(ticket != null, "Invalid ticket");
	            let header = new Header(operation.getSpecification());
	            header.operation = operation;
	            let json = ticket.toString(true);
	            header.ticket = BASE64.fromString(json);
	            header.transferTicket = ticket;
	            return header;
	        }
	        getSpecification() {
	            return this.specification;
	        }
	        getOperation() {
	            return this.operation;
	        }
	        getPreviousTxid() {
	            return this.previousTxid;
	        }
	        getTicket() {
	            return this.ticket;
	        }
	        getTransferTicket() {
	            if (this.ticket && !this.transferTicket) {
	                let json = BASE64.toString(this.ticket);
	                try {
	                    this.transferTicket = TransferTicket.parse(json);
	                }
	                catch (e) {
	                    throw new IllegalArgumentException("Invalid ticket", e);
	                }
	            }
	            return this.transferTicket;
	        }
	        toJSON(key = null) {
	            let json = {};
	            json.specification = this.specification;
	            json.operation = this.operation.toString();
	            if (this.previousTxid)
	                json.previousTxid = this.previousTxid;
	            if (this.ticket)
	                json.ticket = this.ticket;
	            return json;
	        }
	        fromJSON(json, context = null) {
	            this.specification = this.getString("specification", json.specification, { mandatory: true, nullable: false });
	            let op = this.getString("operation", json.operation, { mandatory: true, nullable: false });
	            this.operation = Operation.fromString(op);
	            this.previousTxid = this.getString("previousTxid", json.previousTxid, { mandatory: false, nullable: false, defaultValue: null });
	            this.ticket = this.getString("ticket", json.ticket, { mandatory: false, nullable: false, defaultValue: null });
	        }
	        static parse(content, context = null) {
	            try {
	                return DIDEntity.deserialize(content, Header, context);
	            }
	            catch (e) {
	                if (e instanceof MalformedIDChainRequestException)
	                    throw e;
	                else
	                    throw new MalformedIDChainRequestException(e);
	            }
	        }
	    }
	    IDChainRequest.Header = Header;
	    class Proof extends DIDEntity {
	        constructor(verificationMethod = null, signature = null, type = Constants.DEFAULT_PUBLICKEY_TYPE) {
	            super();
	            this.type = type != null ? type : Constants.DEFAULT_PUBLICKEY_TYPE;
	            this.verificationMethod = verificationMethod;
	            this.signature = signature;
	        }
	        getType() {
	            return this.type;
	        }
	        getVerificationMethod() {
	            return this.verificationMethod;
	        }
	        qualifyVerificationMethod(ref) {
	            if (this.verificationMethod.getDid() == null)
	                this.verificationMethod = DIDURL.from(this.verificationMethod, ref);
	        }
	        getSignature() {
	            return this.signature;
	        }
	        toJSON(key = null) {
	            return {
	                type: this.type,
	                verificationMethod: this.verificationMethod.toString(),
	                signature: this.signature
	            };
	        }
	        fromJSON(json, context = null) {
	            this.type = this.getString("type", json.type, { mandatory: true, nullable: false });
	            this.verificationMethod = this.getDidUrl("verificationMethod", json.verificationMethod, { mandatory: true, nullable: false });
	            this.signature = this.getString("signature", json.signature, { mandatory: true, nullable: false });
	        }
	        static parse(content, context = null) {
	            try {
	                return DIDEntity.deserialize(content, Proof, context);
	            }
	            catch (e) {
	                if (e instanceof MalformedIDChainRequestException)
	                    throw e;
	                else
	                    throw new MalformedIDChainRequestException(e);
	            }
	        }
	    }
	    IDChainRequest.Proof = Proof;
	})(IDChainRequest || (IDChainRequest = {}));

	class ResolveRequest extends DIDEntity {
	    constructor(requestId = null, method = null) {
	        super();
	        this.requestId = requestId;
	        this.method = method;
	    }
	    getRequestId() {
	        return this.requestId;
	    }
	    getMethod() {
	        return this.method;
	    }
	    setParameters(params) {
	        this.params = params;
	    }
	    getParameters() {
	        return this.params;
	    }
	    hashCode() {
	        return hashCode(this.method) + this.params.hashCode();
	    }
	    equals(o) {
	        if (!(o instanceof ResolveRequest))
	            return false;
	        let rr = o;
	        if (this.method !== rr.method)
	            return false;
	        return this.params === rr.params;
	    }
	    toJSON(key = null) {
	        return {
	            id: this.requestId,
	            method: this.method,
	            params: [this.params.toJSON(null)]
	        };
	    }
	    fromJSON(json, context = null) {
	        this.requestId = super.getString("id", json.id, { mandatory: false, nullable: true });
	        this.method = this.getString("method", json.method, { mandatory: true, nullable: false });
	        if (!json.params)
	            throw new MalformedResolveRequestException("Missing parameters");
	        if (!Array.isArray(json.params))
	            throw new MalformedResolveRequestException("Invalid parameters");
	        this.params = this.paramsFromJson(json.params[0]);
	    }
	}
	ResolveRequest.ID = "id";
	ResolveRequest.METHOD = "method";
	ResolveRequest.PARAMETERS = "params";
	(function (ResolveRequest) {
	    class Parameters extends DIDEntity {
	    }
	    ResolveRequest.Parameters = Parameters;
	})(ResolveRequest || (ResolveRequest = {}));

	class ResolveError {
	    constructor(code, message) {
	        this.code = code;
	        this.message = message;
	    }
	}

	class ResolveResponse extends DIDEntity {
	    constructor(responseId = null, resultOrError = null) {
	        super();
	        this.jsonrpc = ResolveResponse.JSON_RPC_VERSION;
	        this.id = responseId;
	        if (resultOrError instanceof ResolveError) {
	            this.error = new ResolveResponse.JsonRpcError(resultOrError.code, resultOrError.message);
	        }
	        else if (resultOrError instanceof ResolveResponse.JsonRpcError) {
	            this.error = resultOrError;
	        }
	        else {
	            this.result = resultOrError;
	        }
	    }
	    getResponseId() {
	        return this.id;
	    }
	    getErrorCode() {
	        return this.error.getCode();
	    }
	    getErrorMessage() {
	        return this.error.getMessage();
	    }
	    getResult() {
	        return this.result;
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.id = this.id;
	        json.jsonrpc = this.jsonrpc;
	        if (this.result)
	            json.result = this.result.toJSON(null);
	        if (this.error)
	            json.error = this.error.toJSON();
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.id = this.getString("id", json.id, { mandatory: false, nullable: true, defaultValue: null });
	        this.jsonrpc = this.getString("jsonrpc", json.jsonrpc, { mandatory: true, nullable: false });
	        if (this.jsonrpc == null || this.jsonrpc !== ResolveResponse.JSON_RPC_VERSION)
	            throw new MalformedResolveResponseException("Invalid JsonRPC version");
	        if (!json.result && !json.error)
	            throw new MalformedResolveResponseException("Missing response data");
	        if (json.result)
	            this.result = this.resultFromJson(json.result);
	        if (json.error)
	            this.error = ResolveResponse.JsonRpcError.parse(json.error);
	    }
	}
	ResolveResponse.JSON_RPC_VERSION = "2.0";
	(function (ResolveResponse) {
	    class JsonRpcError extends DIDEntity {
	        constructor(code = 0, message = null, data = null) {
	            super();
	            this.code = code;
	            this.message = message;
	            this.data = data;
	        }
	        getCode() {
	            return this.code;
	        }
	        getMessage() {
	            return this.message;
	        }
	        getData() {
	            return this.data;
	        }
	        toJSON(key = null) {
	            return {
	                code: this.code,
	                message: this.message,
	                data: this.data
	            };
	        }
	        fromJSON(json, context = null) {
	            this.code = this.getNumber("code", json.code, { mandatory: true, nullable: false, defaultValue: 0 });
	            this.message = this.getString("message", json.message, { mandatory: false, nullable: true });
	            this.data = this.getString("data", json.data, { mandatory: false, nullable: true });
	        }
	        static parse(content, context = null) {
	            try {
	                return DIDEntity.deserialize(content, JsonRpcError, context);
	            }
	            catch (e) {
	                if (e instanceof MalformedResolveResponseException)
	                    throw e;
	                else
	                    throw new MalformedResolveResponseException(e);
	            }
	        }
	    }
	    ResolveResponse.JsonRpcError = JsonRpcError;
	    class Result extends DIDEntity {
	    }
	    ResolveResponse.Result = Result;
	})(ResolveResponse || (ResolveResponse = {}));

	class DIDResolveRequest extends ResolveRequest {
	    constructor(requestId = null) {
	        super(requestId, DIDResolveRequest.METHOD_NAME);
	    }
	    setParameters(didOrStringOrParams, all = false) {
	        if (didOrStringOrParams instanceof DID)
	            super.setParameters(new Parameters$2(didOrStringOrParams, all));
	        else if (didOrStringOrParams instanceof Parameters$2)
	            super.setParameters(didOrStringOrParams);
	        else
	            super.setParameters(new Parameters$2(DID.from(didOrStringOrParams), all));
	    }
	    getDid() {
	        return this.getParameters().did;
	    }
	    isResolveAll() {
	        return this.getParameters().all;
	    }
	    toString() {
	        let builder = new DIDURL.Builder(this.getParameters().did);
	        builder.setQueryParameter(DIDResolveRequest.PARAMETER_ALL, this.getParameters().all ? "true" : "false");
	        return builder.build().toString();
	    }
	    paramsFromJson(json) {
	        return Parameters$2.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDResolveRequest, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveRequestException)
	                throw e;
	            else
	                throw new MalformedResolveRequestException(e);
	        }
	    }
	}
	DIDResolveRequest.PARAMETER_DID = "did";
	DIDResolveRequest.PARAMETER_ALL = "all";
	DIDResolveRequest.METHOD_NAME = "did_resolveDID";
	class Parameters$2 extends ResolveRequest.Parameters {
	    constructor(did = null, all = false) {
	        super();
	        this.did = did;
	        this.all = all;
	    }
	    hashCode() {
	        let hash = this.did.hashCode();
	        hash += hashCode(this.all);
	        return hash;
	    }
	    equals(o) {
	        if (!(o instanceof Parameters$2))
	            return false;
	        let p = o;
	        if (!this.did.equals(p.did))
	            return false;
	        return this.all == p.all;
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.did = this.did.toString();
	        if (this.all && this.all === true)
	            json.all = this.all;
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.did = super.getDid("did", json.did, { mandatory: true, nullable: false });
	        this.all = this.getBoolean("all", json.all, { mandatory: false, nullable: false, defaultValue: false });
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, Parameters$2, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveRequestException)
	                throw e;
	            else
	                throw new MalformedResolveRequestException(e);
	        }
	    }
	}

	class CredentialBiographyStatus {
	    constructor(value, name) {
	        this.name = name;
	        this.value = value;
	    }
	    getValue() {
	        return this.value;
	    }
	    static fromValue(value) {
	        switch (String(value)) {
	            case "0":
	                return CredentialBiographyStatus.VALID;
	            case "2":
	                return CredentialBiographyStatus.REVOKED;
	            case "3":
	                return CredentialBiographyStatus.NOT_FOUND;
	            default:
	                throw new IllegalArgumentException("Invalid CredentialBiographyStatus");
	        }
	    }
	    toString() {
	        return this.name.toLowerCase();
	    }
	    equals(status) {
	        return this.value == status.value;
	    }
	}
	(function (CredentialBiographyStatus) {
	    CredentialBiographyStatus.VALID = new CredentialBiographyStatus(0, "valid");
	    CredentialBiographyStatus.REVOKED = new CredentialBiographyStatus(2, "revoked");
	    CredentialBiographyStatus.NOT_FOUND = new CredentialBiographyStatus(3, "not_found");
	})(CredentialBiographyStatus || (CredentialBiographyStatus = {}));
	class CredentialBiography extends ResolveResponse.Result {
	    constructor(id = null, status = null) {
	        super();
	        this.id = id;
	        this.status = status;
	    }
	    getId() {
	        return this.id;
	    }
	    setStatus(status) {
	        this.status = status;
	    }
	    getStatus() {
	        return this.status;
	    }
	    getTransactionCount() {
	        return this.txs != null ? this.txs.length : 0;
	    }
	    getTransaction(index) {
	        return this.txs != null ? this.txs[index] : null;
	    }
	    getAllTransactions() {
	        return this.txs != null ? this.txs : [];
	    }
	    addTransaction(tx) {
	        if (this.txs == null)
	            this.txs = [];
	        this.txs.push(tx);
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.id = this.id.toString();
	        json.status = this.status.toString();
	        if (this.txs && this.txs.length > 0)
	            json.transaction = Array.from(this.txs, (tx) => tx.toJSON());
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.id = this.getDidUrl("id", json.id, { mandatory: true, nullable: false });
	        let s = this.getNumber("status", json.status, { mandatory: true, nullable: false });
	        this.status = CredentialBiographyStatus.fromValue(s);
	        if (!this.status.equals(CredentialBiographyStatus.NOT_FOUND)) {
	            if (!json.transaction)
	                throw new MalformedResolveResultException("Missing transaction");
	            if (!Array.isArray(json.transaction) || json.transaction.length == 0)
	                throw new MalformedResolveResultException("Invalid transaction");
	            this.txs = Array.from(json.transaction, (o) => CredentialTransaction.parse(o));
	        }
	        else {
	            if (json.transaction)
	                throw new MalformedResolveResultException("Should not include transaction");
	        }
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialBiography, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveResultException)
	                throw e;
	            else
	                throw new MalformedResolveResultException(e);
	        }
	    }
	}

	class CredentialResolveResponse extends ResolveResponse {
	    constructor(responseId = null, resultOrError = null) {
	        super(responseId, resultOrError);
	    }
	    resultFromJson(json) {
	        return CredentialBiography.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialResolveResponse, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveResponseException)
	                throw e;
	            else
	                throw new MalformedResolveResponseException(e);
	        }
	    }
	}

	class IDTransaction extends DIDEntity {
	    constructor(txid = null, timestamp = null, request = null) {
	        super();
	        this.txId = txid;
	        this.timestamp = timestamp;
	        this.request = request;
	    }
	    getTransactionId() {
	        return this.txId;
	    }
	    getTimestamp() {
	        return this.timestamp;
	    }
	    getRequest() {
	        return this.request;
	    }
	    toJSON(key = null) {
	        return {
	            txid: this.txId,
	            timestamp: this.dateToString(this.timestamp),
	            operation: this.request.toJSON()
	        };
	    }
	    fromJSON(json, context = null) {
	        this.txId = this.getString("txid", json.txid, { mandatory: true, nullable: false });
	        this.timestamp = this.getDate("timestamp", json.timestamp, { mandatory: true, nullable: false });
	        if (!json.operation)
	            throw new MalformedIDChainTransactionException("Missing request");
	        this.request = this.requestFromJSON(json.operation);
	    }
	}
	IDTransaction.TXID = "txid";
	IDTransaction.TIMESTAMP = "timestamp";
	IDTransaction.OPERATION = "operation";

	class DIDRequest extends IDChainRequest {
	    static newWithOperation(operation) {
	        let didRequest = new DIDRequest();
	        didRequest.constructWithOperation(operation);
	        return didRequest;
	    }
	    static newWithPreviousTxId(operation, previousTxid) {
	        let didRequest = new DIDRequest();
	        didRequest.constructWithPreviousTxId(operation, previousTxid);
	        return didRequest;
	    }
	    static newWithTransferTicket(operation, ticket) {
	        let didRequest = new DIDRequest();
	        didRequest.constructWithTransferTicket(operation, ticket);
	        return didRequest;
	    }
	    static newWithDIDRequest(request) {
	        let didRequest = new DIDRequest();
	        didRequest.constructWithIDChainRequest(request);
	        didRequest.did = request.did;
	        didRequest.doc = request.doc;
	    }
	    static create(doc, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = DIDRequest.newWithOperation(IDChainRequest.Operation.CREATE);
	            request.setPayload(doc);
	            try {
	                yield request.seal(signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    static update(doc, previousTxid, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = DIDRequest.newWithPreviousTxId(IDChainRequest.Operation.UPDATE, previousTxid);
	            request.setPayload(doc);
	            try {
	                yield request.seal(signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    static transfer(doc, ticket, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = DIDRequest.newWithTransferTicket(IDChainRequest.Operation.TRANSFER, ticket);
	            request.setPayload(doc);
	            try {
	                yield request.seal(signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    static deactivate(doc, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = DIDRequest.newWithOperation(IDChainRequest.Operation.DEACTIVATE);
	            request.setPayload(doc);
	            try {
	                yield request.seal(signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    static deactivateTarget(target, targetSignKey, doc, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = DIDRequest.newWithOperation(IDChainRequest.Operation.DEACTIVATE);
	            request.setPayload(target);
	            try {
	                yield request.sealTarget(targetSignKey, doc, signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    getPreviousTxid() {
	        return this.getHeader().getPreviousTxid();
	    }
	    getTransferTicket() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            return this.getHeader().getTransferTicket();
	        });
	    }
	    getDid() {
	        return this.did;
	    }
	    getDocument() {
	        return this.doc;
	    }
	    setPayload(docOrString) {
	        if (docOrString instanceof DIDDocument) {
	            this.doc = docOrString;
	            this.did = this.doc.getSubject();
	            if (!this.getHeader().getOperation().equals(IDChainRequest.Operation.DEACTIVATE)) {
	                let json = this.doc.toString(true);
	                let jsonBuffer = buffer$3.Buffer.from(json, "utf-8");
	                this.setPayload(BASE64.fromString(jsonBuffer.toString()));
	            }
	            else {
	                super.setPayload(this.doc.getSubject().toString());
	            }
	        }
	        else {
	            super.setPayload(docOrString);
	        }
	    }
	    sanitize() {
	        let header = this.getHeader();
	        if (header == null)
	            throw new MalformedIDChainRequestException("Missing header");
	        if (header.getSpecification() == null)
	            throw new MalformedIDChainRequestException("Missing specification");
	        if (header.getSpecification() !== DIDRequest.DID_SPECIFICATION)
	            throw new MalformedIDChainRequestException("Unsupported specification");
	        let operation = header.getOperation();
	        if (operation.equals(IDChainRequest.Operation.CREATE)) ;
	        else if (operation.equals(IDChainRequest.Operation.UPDATE)) {
	            if (header.getPreviousTxid() == null || header.getPreviousTxid() === "")
	                throw new MalformedIDChainRequestException("Missing previousTxid");
	        }
	        else if (operation.equals(IDChainRequest.Operation.TRANSFER)) {
	            if (header.getTicket() == null || header.getTicket() === "")
	                throw new MalformedIDChainRequestException("Missing ticket");
	        }
	        else if (operation.equals(IDChainRequest.Operation.DEACTIVATE)) ;
	        else {
	            throw new MalformedIDChainRequestException("Invalid operation " + header.getOperation().toString());
	        }
	        let payload = this.getPayload();
	        if (payload == null || payload === "")
	            throw new MalformedIDChainRequestException("Missing payload");
	        let proof = this.getProof();
	        if (proof == null)
	            throw new MalformedIDChainRequestException("Missing proof");
	        try {
	            if (!header.getOperation().equals(IDChainRequest.Operation.DEACTIVATE)) {
	                let json = BASE64.toString(payload);
	                this.doc = DIDDocument._parseOnly(json);
	                this.did = this.doc.getSubject();
	            }
	            else {
	                this.did = new DID(payload);
	            }
	        }
	        catch (e) {
	            throw new MalformedIDChainRequestException("Invalid payload", e);
	        }
	        proof.qualifyVerificationMethod(this.did);
	    }
	    seal(signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (!this.doc.isAuthenticationKey(signKey))
	                throw new InvalidKeyException("Not an authentication key.");
	            if (this.getPayload() == null || this.getPayload() === "")
	                throw new MalformedIDChainRequestException("Missing payload");
	            let signature = yield this.doc.signWithId(signKey, storepass, ...this.getSigningInputs());
	            this.setProof(new DIDRequest.Proof(signKey, signature));
	        });
	    }
	    sealTarget(targetSignKey, doc, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (!this.doc.isAuthorizationKey(targetSignKey))
	                throw new InvalidKeyException("Not an authorization key: " + targetSignKey);
	            if (!doc.isAuthenticationKey(signKey))
	                throw new InvalidKeyException("Not an authentication key: " + signKey);
	            if (!this.getPayload() || this.getPayload() == null)
	                throw new MalformedIDChainRequestException("Missing payload");
	            let signature = yield doc.signWithId(signKey, storepass, ...this.getSigningInputs());
	            this.setProof(new DIDRequest.Proof(targetSignKey, signature));
	        });
	    }
	    getSignerDocument() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.doc == null)
	                this.doc = yield this.did.resolve();
	            else {
	                if (this.doc.isCustomizedDid())
	                    yield this.doc.resolveControllers();
	            }
	            return this.doc;
	        });
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDRequest, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedIDChainRequestException)
	                throw e;
	            else
	                throw new MalformedIDChainRequestException(e);
	        }
	    }
	}

	class DIDTransaction extends IDTransaction {
	    constructor(txid = null, timestamp = null, request = null) {
	        super(txid, timestamp, request);
	    }
	    getDid() {
	        return this.getRequest().getDid();
	    }
	    requestFromJSON(json) {
	        return DIDRequest.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDTransaction, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedIDChainTransactionException)
	                throw e;
	            else
	                throw new MalformedIDChainTransactionException(e);
	        }
	    }
	}

	class CredentialResolveRequest extends ResolveRequest {
	    constructor(requestId = null) {
	        super(requestId, CredentialResolveRequest.METHOD_NAME);
	    }
	    setParameters(idOrParameters, issuer = null) {
	        if (idOrParameters instanceof Parameters$1)
	            super.setParameters(idOrParameters);
	        else
	            super.setParameters(new Parameters$1(idOrParameters, issuer));
	    }
	    getId() {
	        return this.getParameters().id;
	    }
	    getIssuer() {
	        return this.getParameters().issuer;
	    }
	    toString() {
	        let builder = new DIDURL.Builder(this.getParameters().id);
	        if (this.getParameters().issuer != null)
	            builder.setQueryParameter(CredentialResolveRequest.PARAMETER_ISSUER, this.getParameters().issuer.toString());
	        return builder.build().toString();
	    }
	    paramsFromJson(json) {
	        return Parameters$1.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialResolveRequest, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveRequestException)
	                throw e;
	            else
	                throw new MalformedResolveRequestException(e);
	        }
	    }
	}
	CredentialResolveRequest.PARAMETER_ID = "id";
	CredentialResolveRequest.PARAMETER_ISSUER = "issuer";
	CredentialResolveRequest.METHOD_NAME = "did_resolveCredential";
	class Parameters$1 extends ResolveRequest.Parameters {
	    constructor(id = null, issuer = null) {
	        super();
	        this.id = id;
	        this.issuer = issuer;
	    }
	    hashCode() {
	        let hash = this.id.hashCode();
	        if (this.issuer != null)
	            hash += this.issuer.hashCode();
	        return hash;
	    }
	    equals(o) {
	        if (!(o instanceof Parameters$1))
	            return false;
	        let p = o;
	        if (!this.id.equals(p.id))
	            return false;
	        let lIssuer = this.issuer != null ? this.issuer : this.id.getDid();
	        let rIssuer = p.issuer != null ? p.issuer : p.id.getDid();
	        return lIssuer.equals(rIssuer);
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.id = this.id.toString();
	        if (this.issuer)
	            json.issuer = this.issuer.toString();
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.id = super.getDidUrl("id", json.id, { mandatory: true, nullable: false });
	        this.issuer = this.getDid("issuer", json.issuer, { mandatory: false, nullable: true, defaultValue: null });
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, Parameters$1, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveRequestException)
	                throw e;
	            else
	                throw new MalformedResolveRequestException(e);
	        }
	    }
	}

	class CredentialRequest extends IDChainRequest {
	    constructor() {
	        super();
	    }
	    static newWithOperation(operation) {
	        let credentialRequest = new CredentialRequest();
	        credentialRequest.constructWithOperation(operation);
	        return credentialRequest;
	    }
	    static newWithCredentialRequest(request) {
	        let credentialRequest = new CredentialRequest();
	        credentialRequest.constructWithIDChainRequest(request);
	        credentialRequest.id = request.id;
	        credentialRequest.vc = request.vc;
	        credentialRequest.signer = request.signer;
	        return credentialRequest;
	    }
	    static declare(vc, signer, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = CredentialRequest.newWithOperation(IDChainRequest.Operation.DECLARE);
	            request.setPayload(vc);
	            request.setSigner(signer);
	            try {
	                yield request.seal(signer, signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    static revoke(vc, doc, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = CredentialRequest.newWithOperation(IDChainRequest.Operation.REVOKE);
	            request.setPayload(vc);
	            request.setSigner(doc);
	            try {
	                yield request.seal(doc, signKey, storepass);
	            }
	            catch (ignore) {
	                throw new UnknownInternalException(ignore);
	            }
	            return request;
	        });
	    }
	    setSigner(initiator) {
	        this.signer = initiator;
	    }
	    getCredentialId() {
	        return this.id;
	    }
	    getCredential() {
	        return this.vc;
	    }
	    setPayload(id) {
	        if (id instanceof VerifiableCredential) {
	            let vc = id;
	            this.id = vc.getId();
	            this.vc = vc;
	            if (this.getHeader().getOperation().equals(IDChainRequest.Operation.DECLARE)) {
	                let json = vc.toString(true);
	                this.setPayload(BASE64.fromString(json));
	            }
	            else if (this.getHeader().getOperation().equals(IDChainRequest.Operation.REVOKE)) {
	                this.setPayload(vc.getId().toString());
	            }
	        }
	        else if (id instanceof DIDURL) {
	            this.id = id;
	            this.vc = null;
	            super.setPayload(id.toString());
	        }
	        else {
	            super.setPayload(id);
	        }
	    }
	    sanitize() {
	        let header = this.getHeader();
	        if (header == null)
	            throw new MalformedIDChainRequestException("Missing header");
	        if (header.getSpecification() == null)
	            throw new MalformedIDChainRequestException("Missing specification");
	        if (header.getSpecification() !== CredentialRequest.CREDENTIAL_SPECIFICATION)
	            throw new MalformedIDChainRequestException("Unsupported specification");
	        if (!header.getOperation().equals(IDChainRequest.Operation.DECLARE) && !header.getOperation().equals(IDChainRequest.Operation.REVOKE)) {
	            throw new MalformedIDChainRequestException("Invalid operation " + header.getOperation());
	        }
	        let payload = this.getPayload();
	        if (payload == null || payload === "")
	            throw new MalformedIDChainRequestException("Missing payload");
	        let proof = this.getProof();
	        if (proof == null)
	            throw new MalformedIDChainRequestException("Missing proof");
	        try {
	            if (header.getOperation().equals(IDChainRequest.Operation.DECLARE)) {
	                let json = BASE64.toString(payload);
	                this.vc = VerifiableCredential.parse(json);
	                this.id = this.vc.getId();
	            }
	            else {
	                this.id = DIDURL.from(payload);
	            }
	        }
	        catch (e) {
	            throw new MalformedIDChainRequestException("Invalid payload", e);
	        }
	        proof.qualifyVerificationMethod(this.id.getDid());
	    }
	    seal(doc, signKey, storepass) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (!doc.isAuthenticationKey(signKey))
	                throw new InvalidKeyException("Not an authentication key.");
	            if (this.getPayload() == null || this.getPayload() === "")
	                throw new MalformedIDChainRequestException("Missing payload");
	            let signature = yield doc.signWithId(signKey, storepass, ...this.getSigningInputs());
	            this.setProof(new IDChainRequest.Proof(signKey, signature));
	        });
	    }
	    getSignerDocument() {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (this.signer != null)
	                return this.signer;
	            if (this.getOperation().equals(IDChainRequest.Operation.DECLARE))
	                this.signer = yield this.getCredential().getSubject().getId().resolve();
	            else {
	                if (this.getCredential() != null)
	                    this.signer = yield this.getCredential().getSubject().getId().resolve();
	                else
	                    this.signer = yield this.getProof().getVerificationMethod().getDid().resolve();
	            }
	            return this.signer;
	        });
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialRequest, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedIDChainRequestException)
	                throw e;
	            else
	                throw new MalformedIDChainRequestException(e);
	        }
	    }
	}

	class CredentialTransaction extends IDTransaction {
	    constructor(txid = null, timestamp = null, request = null) {
	        super(txid, timestamp, request);
	    }
	    getId() {
	        return this.getRequest().getCredentialId();
	    }
	    requestFromJSON(json) {
	        return CredentialRequest.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialTransaction, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedIDChainTransactionException)
	                throw e;
	            else
	                throw new MalformedIDChainTransactionException(e);
	        }
	    }
	}

	class CredentialListRequest extends ResolveRequest {
	    constructor(requestId = null) {
	        super(requestId, CredentialListRequest.METHOD_NAME);
	    }
	    setParameters(didOrParams, skip = 0, limit = 0) {
	        if (didOrParams instanceof DID)
	            super.setParameters(new Parameters(didOrParams, skip, limit));
	        else
	            super.setParameters(didOrParams);
	    }
	    getDid() {
	        return this.getParameters().did;
	    }
	    getSkip() {
	        return this.getParameters().skip;
	    }
	    getLimit() {
	        return this.getParameters().limit;
	    }
	    toString() {
	        let builder = new DIDURL.Builder(this.getParameters().did);
	        builder.setPath("/credentials");
	        builder.setQueryParameter(CredentialListRequest.PARAMETER_SKIP, this.getParameters().skip.toFixed());
	        builder.setQueryParameter(CredentialListRequest.PARAMETER_LIMIT, this.getParameters().limit.toFixed());
	        return builder.build().toString();
	    }
	    paramsFromJson(json) {
	        return Parameters.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialListRequest, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveRequestException)
	                throw e;
	            else
	                throw new MalformedResolveRequestException(e);
	        }
	    }
	}
	CredentialListRequest.PARAMETER_DID = "did";
	CredentialListRequest.PARAMETER_SKIP = "skip";
	CredentialListRequest.PARAMETER_LIMIT = "limit";
	CredentialListRequest.METHOD_NAME = "did_listCredentials";
	class Parameters extends ResolveRequest.Parameters {
	    constructor(did = null, skip = 0, limit = 0) {
	        super();
	        this.did = did;
	        this.skip = skip;
	        this.limit = limit;
	    }
	    hashCode() {
	        let hash = this.did.hashCode();
	        hash += hashCode(this.skip);
	        hash += hashCode(this.limit);
	        return hash;
	    }
	    equals(o) {
	        if (!(o instanceof Parameters))
	            return false;
	        let p = o;
	        if (!this.did.equals(p.did))
	            return false;
	        if (this.skip != p.skip)
	            return false;
	        return this.limit == p.limit;
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.did = this.did.toString();
	        if (this.skip && this.skip != 0)
	            json.skip = this.skip;
	        if (this.limit && this.limit != 0)
	            json.limit = this.limit;
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.did = super.getDid("did", json.did, { mandatory: true, nullable: false });
	        this.skip = this.getNumber("skip", json.skip, { mandatory: false, nullable: false, defaultValue: 0 });
	        this.limit = this.getNumber("limit", json.limit, { mandatory: false, nullable: false, defaultValue: 0 });
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, Parameters, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveRequestException)
	                throw e;
	            else
	                throw new MalformedResolveRequestException(e);
	        }
	    }
	}

	class CredentialList extends ResolveResponse.Result {
	    constructor(did = null) {
	        super();
	        this.did = did;
	    }
	    getDid() {
	        return this.did;
	    }
	    getCredentialIds() {
	        return this.credentialIds != null ? this.credentialIds : [];
	    }
	    size() {
	        return this.credentialIds != null ? this.credentialIds.length : 0;
	    }
	    getCredentialId(index) {
	        return this.credentialIds != null ? this.credentialIds[index] : null;
	    }
	    addCredentialId(id) {
	        if (this.credentialIds == null)
	            this.credentialIds = [];
	        this.credentialIds.push(id);
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.did = this.did.toString();
	        if (this.credentialIds && this.credentialIds.length > 0)
	            json.credentials = Array.from(this.credentialIds, (id) => id.toString());
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.did = super.getDid("did", json.did, { mandatory: true, nullable: false });
	        if (json.credentials) {
	            if (!Array.isArray(json.credentials))
	                throw new MalformedResolveResultException("Invalid credential list");
	            if (json.credentials.length > 0)
	                this.credentialIds = Array.from(json.credentials, (v) => new DIDURL(String(v)));
	        }
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialList, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveResultException)
	                throw e;
	            else
	                throw new MalformedResolveResultException(e);
	        }
	    }
	}
	CredentialList.DEFAULT_SIZE = 128;
	CredentialList.MAX_SIZE = 512;

	class DIDBiographyStatus {
	    constructor(value, name) {
	        this.name = name;
	        this.value = value;
	    }
	    getValue() {
	        return this.value;
	    }
	    static fromValue(value) {
	        switch (String(value)) {
	            case "0":
	                return DIDBiographyStatus.VALID;
	            case "2":
	                return DIDBiographyStatus.DEACTIVATED;
	            case "3":
	                return DIDBiographyStatus.NOT_FOUND;
	            default:
	                throw new IllegalArgumentException("Invalid DIDBiographyStatus");
	        }
	    }
	    toString() {
	        return this.name.toLowerCase();
	    }
	    equals(status) {
	        return this.value == status.value;
	    }
	}
	(function (DIDBiographyStatus) {
	    DIDBiographyStatus.VALID = new DIDBiographyStatus(0, "valid");
	    DIDBiographyStatus.DEACTIVATED = new DIDBiographyStatus(2, "deactivated");
	    DIDBiographyStatus.NOT_FOUND = new DIDBiographyStatus(3, "not_found");
	})(DIDBiographyStatus || (DIDBiographyStatus = {}));
	class DIDBiography extends ResolveResponse.Result {
	    constructor(did = null) {
	        super();
	        this.did = did;
	    }
	    getDid() {
	        return this.did;
	    }
	    setStatus(status) {
	        this.status = status;
	    }
	    getStatus() {
	        return this.status;
	    }
	    getTransactionCount() {
	        return this.txs != null ? this.txs.length : 0;
	    }
	    getTransaction(index) {
	        return this.txs != null ? this.txs[index] : null;
	    }
	    getAllTransactions() {
	        return this.txs != null ? this.txs : [];
	    }
	    addTransaction(tx) {
	        if (this.txs == null)
	            this.txs = [];
	        this.txs.push(tx);
	    }
	    toJSON(key = null) {
	        let json = {};
	        json.did = this.did.toString();
	        json.status = this.status.toString();
	        if (this.txs && this.txs.length > 0)
	            json.transaction = Array.from(this.txs, (tx) => tx.toJSON());
	        return json;
	    }
	    fromJSON(json, context = null) {
	        this.did = super.getDid("did", json.did, { mandatory: true, nullable: false });
	        let s = this.getNumber("status", json.status, { mandatory: true, nullable: false });
	        this.status = DIDBiographyStatus.fromValue(s);
	        if (!this.status.equals(DIDBiographyStatus.NOT_FOUND)) {
	            if (!json.transaction)
	                throw new MalformedResolveResultException("Missing transaction");
	            if (!Array.isArray(json.transaction) || json.transaction.length == 0)
	                throw new MalformedResolveResultException("Invalid transaction");
	            this.txs = Array.from(json.transaction, (o) => DIDTransaction.parse(o));
	        }
	        else {
	            if (json.transaction)
	                throw new MalformedResolveResultException("Should not include transaction");
	        }
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDBiography, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveResultException)
	                throw e;
	            else
	                throw new MalformedResolveResultException(e);
	        }
	    }
	}

	class CredentialListResponse extends ResolveResponse {
	    constructor(responseId = null, resultOrError = null) {
	        super(responseId, resultOrError);
	    }
	    resultFromJson(json) {
	        return CredentialList.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, CredentialListResponse, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveResponseException)
	                throw e;
	            else
	                throw new MalformedResolveResponseException(e);
	        }
	    }
	}

	class DIDResolveResponse extends ResolveResponse {
	    constructor(responseId = null, resultOrError = null) {
	        super(responseId, resultOrError);
	    }
	    resultFromJson(json) {
	        return DIDBiography.parse(json);
	    }
	    static parse(content, context = null) {
	        try {
	            return DIDEntity.deserialize(content, DIDResolveResponse, context);
	        }
	        catch (e) {
	            if (e instanceof MalformedResolveResponseException)
	                throw e;
	            else
	                throw new MalformedResolveResponseException(e);
	        }
	    }
	}

	const log$1 = new Logger("DIDBackend");
	class DIDBackend {
	    constructor(adapter, initialCacheCapacity, maxCacheCapacity, cacheTtl) {
	        if (initialCacheCapacity < 0)
	            initialCacheCapacity = 0;
	        if (maxCacheCapacity < 0)
	            maxCacheCapacity = 0;
	        if (cacheTtl < 0)
	            cacheTtl = 0;
	        this.adapter = adapter;
	        this.cache = new LRUCache({
	            maxItems: maxCacheCapacity,
	            maxAge: cacheTtl / 1000,
	            asyncLoader: (key) => __awaiter$9(this, void 0, void 0, function* () {
	                return {
	                    value: yield this.resolve(key)
	                };
	            })
	        });
	        log$1.info("DID backend initialized, cache(init:{}, max:{}, ttl:{})", initialCacheCapacity, maxCacheCapacity, cacheTtl / 1000);
	    }
	    static initialize(adapter, initialCacheCapacity = DIDBackend.DEFAULT_CACHE_INITIAL_CAPACITY, maxCacheCapacity = DIDBackend.DEFAULT_CACHE_MAX_CAPACITY, cacheTtl = DIDBackend.DEFAULT_CACHE_TTL) {
	        checkArgument(adapter != null, "Invalid adapter");
	        checkArgument(initialCacheCapacity <= maxCacheCapacity, "Invalid cache capacity");
	        initialCacheCapacity = initialCacheCapacity < maxCacheCapacity ?
	            initialCacheCapacity : maxCacheCapacity;
	        this.instance = new DIDBackend(adapter, initialCacheCapacity, maxCacheCapacity, cacheTtl);
	    }
	    static getInstance() {
	        checkArgument(this.instance != null, "The DIDBackend was not initialized. Please call DIDBackend.initialize() with a valid DIDAdapter (i.e. new DefaultDIDAdapter()) first.");
	        return this.instance;
	    }
	    static isInitialized() {
	        return this.instance !== null;
	    }
	    generateRequestId() {
	        return randomBytes$1(16).toString("hex");
	    }
	    getAdapter() {
	        return this.adapter;
	    }
	    setResolveHandle(handle) {
	        this.resolveHandle = handle;
	    }
	    resolve(request) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$1.debug("Resolving request {}...", request);
	            let requestJson = request.serialize(true);
	            let resolvedJson = yield this.getAdapter().resolve(requestJson);
	            if (resolvedJson == null)
	                throw new DIDResolveException("Unknown error, got null result.");
	            let response = null;
	            try {
	                switch (request.getMethod()) {
	                    case DIDResolveRequest.METHOD_NAME:
	                        response = DIDResolveResponse.parse(resolvedJson, DIDResolveResponse);
	                        break;
	                    case CredentialResolveRequest.METHOD_NAME:
	                        response = CredentialResolveResponse.parse(resolvedJson, CredentialResolveResponse);
	                        break;
	                    case CredentialListRequest.METHOD_NAME:
	                        response = CredentialListResponse.parse(resolvedJson, CredentialListResponse);
	                        break;
	                    default:
	                        log$1.error("INTERNAL - unknown resolve method '{}'", request.getMethod());
	                        throw new DIDResolveException("Unknown resolve method: " + request.getMethod());
	                }
	            }
	            catch (e) {
	                throw new DIDResolveException(e);
	            }
	            finally {
	            }
	            if (response.getResponseId() == null || response.getResponseId() !== request.getRequestId())
	                throw new DIDResolveException("Mismatched resolve result with request.");
	            if (response.getResult() != null) {
	                return response.getResult();
	            }
	            else
	                throw new DIDResolveException("Server error(" + response.getErrorCode()
	                    + "): " + response.getErrorMessage());
	        });
	    }
	    resolveDidBiography(did, all = true, force = false) {
	        log$1.info("Resolving DID {}, all={}...", did.toString(), all);
	        let request = new DIDResolveRequest(this.generateRequestId());
	        request.setParameters(did, all);
	        if (force)
	            this.cache.invalidate(request);
	        try {
	            return this.cache.getAsync(request);
	        }
	        catch (e) {
	            throw new DIDResolveException(e);
	        }
	    }
	    resolveDid(did, force = false) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$1.debug("Resolving DID {}...", did.toString());
	            if (this.resolveHandle != null) {
	                let doc = this.resolveHandle.resolve(did);
	                if (doc != null)
	                    return doc;
	            }
	            let bio = yield this.resolveDidBiography(did, false, force);
	            let tx = null;
	            if (bio.getStatus().equals(DIDBiographyStatus.VALID)) {
	                tx = bio.getTransaction(0);
	            }
	            else if (bio.getStatus().equals(DIDBiographyStatus.DEACTIVATED)) {
	                if (bio.getTransactionCount() != 2)
	                    throw new DIDResolveException("Invalid DID biography, wrong transaction count.");
	                tx = bio.getTransaction(0);
	                if (!tx.getRequest().getOperation().equals(IDChainRequest.Operation.DEACTIVATE))
	                    throw new DIDResolveException("Invalid DID biography, wrong status.");
	                let doc = bio.getTransaction(1).getRequest().getDocument();
	                if (doc == null)
	                    throw new DIDResolveException("Invalid DID biography, invalid trancations.");
	                let request = new class extends DIDRequest {
	                    constructor(request) {
	                        super();
	                        this.constructWithIDChainRequest(request);
	                    }
	                    getSignerDocument() {
	                        return __awaiter$9(this, void 0, void 0, function* () {
	                            let sd = this.getDocument() == null ? doc : this.getDocument();
	                            if (sd.isCustomizedDid())
	                                yield sd.resolveControllers();
	                            return sd;
	                        });
	                    }
	                }(tx.getRequest());
	                if (!(yield request.isValid()))
	                    throw new DIDResolveException("Invalid DID biography, transaction signature mismatch.");
	                tx = bio.getTransaction(1);
	            }
	            else if (bio.getStatus().equals(DIDBiographyStatus.NOT_FOUND)) {
	                return null;
	            }
	            if (!tx.getRequest().getOperation().equals(IDChainRequest.Operation.CREATE) &&
	                !tx.getRequest().getOperation().equals(IDChainRequest.Operation.UPDATE) &&
	                !tx.getRequest().getOperation().equals(IDChainRequest.Operation.TRANSFER))
	                throw new DIDResolveException("Invalid ID transaction, unknown operation.");
	            if (!(yield tx.getRequest().isValid()))
	                throw new DIDResolveException("Invalid ID transaction, signature mismatch.");
	            let doc = tx.getRequest().getDocument().clone();
	            yield doc.resolveControllers();
	            let metadata = doc.getMetadata();
	            metadata.setTransactionId(tx.getTransactionId());
	            metadata.setSignature(doc.getProof().getSignature());
	            metadata.setPublished(tx.getTimestamp());
	            if (bio.getStatus().equals(DIDBiographyStatus.DEACTIVATED))
	                metadata.setDeactivated(true);
	            return doc;
	        });
	    }
	    resolveUntrustedDid(did, force) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$1.debug("Resolving untrusted DID {}...", did.toString());
	            if (this.resolveHandle != null) {
	                let doc = this.resolveHandle.resolve(did);
	                if (doc != null)
	                    return doc;
	            }
	            let bio = yield this.resolveDidBiography(did, false, force);
	            let tx = null;
	            switch (bio.getStatus()) {
	                case DIDBiographyStatus.VALID:
	                    tx = bio.getTransaction(0);
	                    break;
	                case DIDBiographyStatus.DEACTIVATED:
	                    if (bio.getTransactionCount() != 2)
	                        throw new DIDResolveException("Invalid DID biography, wrong transaction count.");
	                    tx = bio.getTransaction(0);
	                    if (tx.getRequest().getOperation() != IDChainRequest.Operation.DEACTIVATE)
	                        throw new DIDResolveException("Invalid DID biography, wrong status.");
	                    let doc = bio.getTransaction(1).getRequest().getDocument();
	                    if (doc == null)
	                        throw new DIDResolveException("Invalid DID biography, invalid trancations.");
	                    tx = bio.getTransaction(1);
	                    break;
	                case DIDBiographyStatus.NOT_FOUND:
	                    return null;
	            }
	            if (tx.getRequest().getOperation() != IDChainRequest.Operation.CREATE &&
	                tx.getRequest().getOperation() != IDChainRequest.Operation.UPDATE &&
	                tx.getRequest().getOperation() != IDChainRequest.Operation.TRANSFER)
	                throw new DIDResolveException("Invalid ID transaction, unknown operation.");
	            let doc = tx.getRequest().getDocument().clone();
	            yield doc.resolveControllers();
	            let metadata = doc.getMetadata();
	            metadata.setTransactionId(tx.getTransactionId());
	            metadata.setSignature(doc.getProof().getSignature());
	            metadata.setPublished(tx.getTimestamp());
	            if (bio.getStatus() == DIDBiographyStatus.DEACTIVATED)
	                metadata.setDeactivated(true);
	            return doc;
	        });
	    }
	    resolveCredentialBiography(id, issuer = null, force = false) {
	        log$1.info("Resolving credential {}, issuer={}...", id, issuer);
	        let request = new CredentialResolveRequest(this.generateRequestId());
	        request.setParameters(id, issuer);
	        if (force)
	            this.cache.invalidate(request);
	        try {
	            return this.cache.getAsync(request);
	        }
	        catch (e) {
	            throw new DIDResolveException(e);
	        }
	    }
	    resolveCredential(id, issuer = null, force = false) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$1.debug("Resolving credential {}...", id);
	            let bio = yield this.resolveCredentialBiography(id, issuer, force);
	            let tx = null;
	            if (bio.getStatus().equals(CredentialBiographyStatus.VALID)) {
	                tx = bio.getTransaction(0);
	            }
	            else if (bio.getStatus().equals(CredentialBiographyStatus.REVOKED)) {
	                tx = bio.getTransaction(0);
	                if (!tx.getRequest().getOperation().equals(IDChainRequest.Operation.REVOKE))
	                    throw new DIDResolveException("Invalid credential biography, wrong status.");
	                if (bio.getTransactionCount() < 1 || bio.getTransactionCount() > 2)
	                    throw new DIDResolveException("Invalid credential biography, transaction signature mismatch.");
	                if (bio.getTransactionCount() == 1) {
	                    if (!(yield tx.getRequest().isValid()))
	                        throw new DIDResolveException("Invalid credential biography, transaction signature mismatch.");
	                    return null;
	                }
	                else {
	                    const vc = bio.getTransaction(1).getRequest().getCredential();
	                    let request = new (class extends CredentialRequest {
	                        constructor(request) {
	                            super();
	                            this.constructWithIDChainRequest(request);
	                        }
	                        getCredential() {
	                            return vc;
	                        }
	                    })(tx.getRequest());
	                    if (!(yield request.isValid()))
	                        throw new DIDResolveException("Invalid credential biography, transaction signature mismatch.");
	                }
	                tx = bio.getTransaction(1);
	            }
	            else if (bio.getStatus().equals(CredentialBiographyStatus.NOT_FOUND)) {
	                return null;
	            }
	            if (!tx.getRequest().getOperation().equals(IDChainRequest.Operation.DECLARE))
	                throw new DIDResolveException("Invalid credential transaction, unknown operation.");
	            if (!(yield tx.getRequest().isValid()))
	                throw new DIDResolveException("Invalid credential transaction, signature mismatch.");
	            let vc = tx.getRequest().getCredential();
	            let metadata = new CredentialMetadata(vc.getId());
	            metadata.setTransactionId(tx.getTransactionId());
	            metadata.setPublished(tx.getTimestamp());
	            if (bio.getStatus() == CredentialBiographyStatus.REVOKED)
	                metadata.setRevoked(true);
	            vc.setMetadata(metadata);
	            return vc;
	        });
	    }
	    listCredentials(did, skip, limit) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$1.info("List credentials for {}", did);
	            let request = new CredentialListRequest(this.generateRequestId());
	            request.setParameters(did, skip, limit);
	            let list = yield this.resolve(request);
	            if (list == null || list.size() == 0)
	                return null;
	            return list.getCredentialIds();
	        });
	    }
	    createTransaction(request, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            log$1.info("Create ID transaction...");
	            let payload = request.serialize(true);
	            log$1.trace("Transaction payload: '{}'", payload);
	            if (adapter == null)
	                adapter = this.getAdapter();
	            yield adapter.createIdTransaction(payload, null);
	            log$1.info("ID transaction complete.");
	        });
	    }
	    invalidDidCache(did) {
	        let request = new DIDResolveRequest(this.generateRequestId());
	        request.setParameters(did, true);
	        this.cache.invalidate(request);
	        request.setParameters(did, false);
	        this.cache.invalidate(request);
	    }
	    invalidCredentialCache(id, signer) {
	        let request = new CredentialResolveRequest(this.generateRequestId());
	        request.setParameters(id, signer);
	        this.cache.invalidate(request);
	        if (signer != null) {
	            request.setParameters(id, null);
	            this.cache.invalidate(request);
	        }
	    }
	    clearCache() {
	        this.cache.invalidateAll();
	    }
	    createDid(doc, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = yield DIDRequest.create(doc, signKey, storepass);
	            yield this.createTransaction(request, adapter);
	            this.invalidDidCache(doc.getSubject());
	        });
	    }
	    updateDid(doc, previousTxid, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = yield DIDRequest.update(doc, previousTxid, signKey, storepass);
	            yield this.createTransaction(request, adapter);
	            this.invalidDidCache(doc.getSubject());
	        });
	    }
	    transferDid(doc, ticket, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = yield DIDRequest.transfer(doc, ticket, signKey, storepass);
	            yield this.createTransaction(request, adapter);
	            this.invalidDidCache(doc.getSubject());
	        });
	    }
	    deactivateDid(doc, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = yield DIDRequest.deactivate(doc, signKey, storepass);
	            yield this.createTransaction(request, adapter);
	            this.invalidDidCache(doc.getSubject());
	        });
	    }
	    deactivateTargetDid(target, targetSignKey, signer, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = yield DIDRequest.deactivateTarget(target, targetSignKey, signer, signKey, storepass);
	            yield this.createTransaction(request, adapter);
	            this.invalidDidCache(target.getSubject());
	        });
	    }
	    declareCredential(vc, signer, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let request = yield CredentialRequest.declare(vc, signer, signKey, storepass);
	            yield this.createTransaction(request, adapter);
	            this.invalidCredentialCache(vc.getId(), null);
	            this.invalidCredentialCache(vc.getId(), vc.getIssuer());
	        });
	    }
	    revokeCredential(vc, signer, signKey, storepass, adapter) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            if (vc instanceof VerifiableCredential) {
	                let request = yield CredentialRequest.revoke(vc, signer, signKey, storepass);
	                yield this.createTransaction(request, adapter);
	                this.invalidCredentialCache(vc.getId(), null);
	                this.invalidCredentialCache(vc.getId(), vc.getIssuer());
	            }
	            else {
	                let request = yield CredentialRequest.revoke(vc, signer, signKey, storepass);
	                yield this.createTransaction(request, adapter);
	                this.invalidCredentialCache(vc, null);
	                this.invalidCredentialCache(vc, signer.getSubject());
	            }
	        });
	    }
	}
	DIDBackend.DEFAULT_CACHE_INITIAL_CAPACITY = 16;
	DIDBackend.DEFAULT_CACHE_MAX_CAPACITY = 64;
	DIDBackend.DEFAULT_CACHE_TTL = 10 * 60 * 1000;
	DIDBackend.instance = null;

	var axios$3 = {exports: {}};

	var bind$2 = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};

	var bind$1 = bind$2;

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {Object} val The value to test
	 * @return {boolean} True if value is a plain Object, otherwise false
	 */
	function isPlainObject(val) {
	  if (toString.call(val) !== '[object Object]') {
	    return false;
	  }

	  var prototype = Object.getPrototypeOf(val);
	  return prototype === null || prototype === Object.prototype;
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
	                                           navigator.product === 'NativeScript' ||
	                                           navigator.product === 'NS')) {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (isPlainObject(result[key]) && isPlainObject(val)) {
	      result[key] = merge(result[key], val);
	    } else if (isPlainObject(val)) {
	      result[key] = merge({}, val);
	    } else if (isArray(val)) {
	      result[key] = val.slice();
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind$1(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 * @return {string} content value without BOM
	 */
	function stripBOM(content) {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	}

	var utils$d = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isPlainObject: isPlainObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim,
	  stripBOM: stripBOM
	};

	var utils$c = utils$d;

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	var buildURL$2 = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils$c.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils$c.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils$c.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils$c.forEach(val, function parseValue(v) {
	        if (utils$c.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils$c.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');
	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }

	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	var utils$b = utils$d;

	function InterceptorManager$1() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected,
	    synchronous: options ? options.synchronous : false,
	    runWhen: options ? options.runWhen : null
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager$1.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager$1.prototype.forEach = function forEach(fn) {
	  utils$b.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager$1;

	var utils$a = utils$d;

	var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
	  utils$a.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	var enhanceError$2 = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }

	  error.request = request;
	  error.response = response;
	  error.isAxiosError = true;

	  error.toJSON = function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: this.config,
	      code: this.code
	    };
	  };
	  return error;
	};

	var enhanceError$1 = enhanceError$2;

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	var createError$2 = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError$1(error, config, code, request, response);
	};

	var createError$1 = createError$2;

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	var settle$1 = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError$1(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};

	var utils$9 = utils$d;

	var cookies$1 = (
	  utils$9.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	    (function standardBrowserEnv() {
	      return {
	        write: function write(name, value, expires, path, domain, secure) {
	          var cookie = [];
	          cookie.push(name + '=' + encodeURIComponent(value));

	          if (utils$9.isNumber(expires)) {
	            cookie.push('expires=' + new Date(expires).toGMTString());
	          }

	          if (utils$9.isString(path)) {
	            cookie.push('path=' + path);
	          }

	          if (utils$9.isString(domain)) {
	            cookie.push('domain=' + domain);
	          }

	          if (secure === true) {
	            cookie.push('secure');
	          }

	          document.cookie = cookie.join('; ');
	        },

	        read: function read(name) {
	          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	          return (match ? decodeURIComponent(match[3]) : null);
	        },

	        remove: function remove(name) {
	          this.write(name, '', Date.now() - 86400000);
	        }
	      };
	    })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return {
	        write: function write() {},
	        read: function read() { return null; },
	        remove: function remove() {}
	      };
	    })()
	);

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	var isAbsoluteURL$1 = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};

	var isAbsoluteURL = isAbsoluteURL$1;
	var combineURLs = combineURLs$1;

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */
	var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	};

	var utils$8 = utils$d;

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	var parseHeaders$1 = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils$8.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils$8.trim(line.substr(0, i)).toLowerCase();
	    val = utils$8.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};

	var utils$7 = utils$d;

	var isURLSameOrigin$1 = (
	  utils$7.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	    (function standardBrowserEnv() {
	      var msie = /(msie|trident)/i.test(navigator.userAgent);
	      var urlParsingNode = document.createElement('a');
	      var originURL;

	      /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	      function resolveURL(url) {
	        var href = url;

	        if (msie) {
	        // IE needs attribute set twice to normalize properties
	          urlParsingNode.setAttribute('href', href);
	          href = urlParsingNode.href;
	        }

	        urlParsingNode.setAttribute('href', href);

	        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	        return {
	          href: urlParsingNode.href,
	          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	          host: urlParsingNode.host,
	          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	          hostname: urlParsingNode.hostname,
	          port: urlParsingNode.port,
	          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	            urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname
	        };
	      }

	      originURL = resolveURL(window.location.href);

	      /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	      return function isURLSameOrigin(requestURL) {
	        var parsed = (utils$7.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	        return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	      };
	    })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return function isURLSameOrigin() {
	        return true;
	      };
	    })()
	);

	var utils$6 = utils$d;
	var settle = settle$1;
	var cookies = cookies$1;
	var buildURL$1 = buildURL$2;
	var buildFullPath = buildFullPath$1;
	var parseHeaders = parseHeaders$1;
	var isURLSameOrigin = isURLSameOrigin$1;
	var createError = createError$2;

	var xhr = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	    var responseType = config.responseType;

	    if (utils$6.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    var fullPath = buildFullPath(config.baseURL, config.url);
	    request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
	        request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(createError('Request aborted', config, 'ECONNABORTED', request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }
	      reject(createError(
	        timeoutErrorMessage,
	        config,
	        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils$6.isStandardBrowserEnv()) {
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils$6.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils$6.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = config.responseType;
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (!requestData) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	var utils$5 = utils$d;
	var normalizeHeaderName = normalizeHeaderName$1;
	var enhanceError = enhanceError$2;

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = xhr;
	  } else if (typeof process$1 !== 'undefined' && Object.prototype.toString.call(process$1) === '[object process]') {
	    // For node use HTTP adapter
	    adapter = xhr;
	  }
	  return adapter;
	}

	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$5.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$5.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (encoder || JSON.stringify)(rawValue);
	}

	var defaults$3 = {

	  transitional: {
	    silentJSONParsing: true,
	    forcedJSONParsing: true,
	    clarifyTimeoutError: false
	  },

	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Accept');
	    normalizeHeaderName(headers, 'Content-Type');

	    if (utils$5.isFormData(data) ||
	      utils$5.isArrayBuffer(data) ||
	      utils$5.isBuffer(data) ||
	      utils$5.isStream(data) ||
	      utils$5.isFile(data) ||
	      utils$5.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils$5.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$5.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils$5.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
	      setContentTypeIfUnset(headers, 'application/json');
	      return stringifySafely(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    var transitional = this.transitional;
	    var silentJSONParsing = transitional && transitional.silentJSONParsing;
	    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

	    if (strictJSONParsing || (forcedJSONParsing && utils$5.isString(data) && data.length)) {
	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw enhanceError(e, this, 'E_JSON_PARSE');
	          }
	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,
	  maxBodyLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults$3.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils$5.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults$3.headers[method] = {};
	});

	utils$5.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults$3.headers[method] = utils$5.merge(DEFAULT_CONTENT_TYPE);
	});

	var defaults_1 = defaults$3;

	var utils$4 = utils$d;
	var defaults$2 = defaults_1;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	var transformData$1 = function transformData(data, headers, fns) {
	  var context = this || defaults$2;
	  /*eslint no-param-reassign:0*/
	  utils$4.forEach(fns, function transform(fn) {
	    data = fn.call(context, data, headers);
	  });

	  return data;
	};

	var isCancel$1 = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

	var utils$3 = utils$d;
	var transformData = transformData$1;
	var isCancel = isCancel$1;
	var defaults$1 = defaults_1;

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	var dispatchRequest$1 = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData.call(
	    config,
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils$3.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers
	  );

	  utils$3.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults$1.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(
	      config,
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(
	          config,
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};

	var utils$2 = utils$d;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	var mergeConfig$2 = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};

	  var valueFromConfig2Keys = ['url', 'method', 'data'];
	  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
	  var defaultToConfig2Keys = [
	    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
	    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
	    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
	    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
	    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
	  ];
	  var directMergeKeys = ['validateStatus'];

	  function getMergedValue(target, source) {
	    if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
	      return utils$2.merge(target, source);
	    } else if (utils$2.isPlainObject(source)) {
	      return utils$2.merge({}, source);
	    } else if (utils$2.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  function mergeDeepProperties(prop) {
	    if (!utils$2.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(config1[prop], config2[prop]);
	    } else if (!utils$2.isUndefined(config1[prop])) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  }

	  utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
	    if (!utils$2.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(undefined, config2[prop]);
	    }
	  });

	  utils$2.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

	  utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
	    if (!utils$2.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(undefined, config2[prop]);
	    } else if (!utils$2.isUndefined(config1[prop])) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  });

	  utils$2.forEach(directMergeKeys, function merge(prop) {
	    if (prop in config2) {
	      config[prop] = getMergedValue(config1[prop], config2[prop]);
	    } else if (prop in config1) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  });

	  var axiosKeys = valueFromConfig2Keys
	    .concat(mergeDeepPropertiesKeys)
	    .concat(defaultToConfig2Keys)
	    .concat(directMergeKeys);

	  var otherKeys = Object
	    .keys(config1)
	    .concat(Object.keys(config2))
	    .filter(function filterAxiosKeys(key) {
	      return axiosKeys.indexOf(key) === -1;
	    });

	  utils$2.forEach(otherKeys, mergeDeepProperties);

	  return config;
	};

	var name = "axios";
	var version = "0.21.4";
	var description = "Promise based HTTP client for the browser and node.js";
	var main = "index.js";
	var scripts = {
		test: "grunt test",
		start: "node ./sandbox/server.js",
		build: "NODE_ENV=production grunt build",
		preversion: "npm test",
		version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
		postversion: "git push && git push --tags",
		examples: "node ./examples/server.js",
		coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
		fix: "eslint --fix lib/**/*.js"
	};
	var repository = {
		type: "git",
		url: "https://github.com/axios/axios.git"
	};
	var keywords = [
		"xhr",
		"http",
		"ajax",
		"promise",
		"node"
	];
	var author = "Matt Zabriskie";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/axios/axios/issues"
	};
	var homepage = "https://axios-http.com";
	var devDependencies = {
		coveralls: "^3.0.0",
		"es6-promise": "^4.2.4",
		grunt: "^1.3.0",
		"grunt-banner": "^0.6.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-clean": "^1.1.0",
		"grunt-contrib-watch": "^1.0.0",
		"grunt-eslint": "^23.0.0",
		"grunt-karma": "^4.0.0",
		"grunt-mocha-test": "^0.13.3",
		"grunt-ts": "^6.0.0-beta.19",
		"grunt-webpack": "^4.0.2",
		"istanbul-instrumenter-loader": "^1.0.0",
		"jasmine-core": "^2.4.1",
		karma: "^6.3.2",
		"karma-chrome-launcher": "^3.1.0",
		"karma-firefox-launcher": "^2.1.0",
		"karma-jasmine": "^1.1.1",
		"karma-jasmine-ajax": "^0.1.13",
		"karma-safari-launcher": "^1.0.0",
		"karma-sauce-launcher": "^4.3.6",
		"karma-sinon": "^1.0.5",
		"karma-sourcemap-loader": "^0.3.8",
		"karma-webpack": "^4.0.2",
		"load-grunt-tasks": "^3.5.2",
		minimist: "^1.2.0",
		mocha: "^8.2.1",
		sinon: "^4.5.0",
		"terser-webpack-plugin": "^4.2.3",
		typescript: "^4.0.5",
		"url-search-params": "^0.10.0",
		webpack: "^4.44.2",
		"webpack-dev-server": "^3.11.0"
	};
	var browser = {
		"./lib/adapters/http.js": "./lib/adapters/xhr.js"
	};
	var jsdelivr = "dist/axios.min.js";
	var unpkg = "dist/axios.min.js";
	var typings = "./index.d.ts";
	var dependencies = {
		"follow-redirects": "^1.14.0"
	};
	var bundlesize = [
		{
			path: "./dist/axios.min.js",
			threshold: "5kB"
		}
	];
	var require$$0 = {
		name: name,
		version: version,
		description: description,
		main: main,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		browser: browser,
		jsdelivr: jsdelivr,
		unpkg: unpkg,
		typings: typings,
		dependencies: dependencies,
		bundlesize: bundlesize
	};

	var pkg = require$$0;

	var validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	var deprecatedWarnings = {};
	var currentVerArr = pkg.version.split('.');

	/**
	 * Compare package versions
	 * @param {string} version
	 * @param {string?} thanVersion
	 * @returns {boolean}
	 */
	function isOlderVersion(version, thanVersion) {
	  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
	  var destVer = version.split('.');
	  for (var i = 0; i < 3; i++) {
	    if (pkgVersionArr[i] > destVer[i]) {
	      return true;
	    } else if (pkgVersionArr[i] < destVer[i]) {
	      return false;
	    }
	  }
	  return false;
	}

	/**
	 * Transitional option validator
	 * @param {function|boolean?} validator
	 * @param {string?} version
	 * @param {string} message
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  var isDeprecated = version && isOlderVersion(version);

	  function formatMessage(opt, desc) {
	    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return function(value, opt, opts) {
	    if (validator === false) {
	      throw new Error(formatMessage(opt, ' has been removed in ' + version));
	    }

	    if (isDeprecated && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new TypeError('options must be an object');
	  }
	  var keys = Object.keys(options);
	  var i = keys.length;
	  while (i-- > 0) {
	    var opt = keys[i];
	    var validator = schema[opt];
	    if (validator) {
	      var value = options[opt];
	      var result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new TypeError('option ' + opt + ' must be ' + result);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw Error('Unknown option ' + opt);
	    }
	  }
	}

	var validator$1 = {
	  isOlderVersion: isOlderVersion,
	  assertOptions: assertOptions,
	  validators: validators$1
	};

	var utils$1 = utils$d;
	var buildURL = buildURL$2;
	var InterceptorManager = InterceptorManager_1;
	var dispatchRequest = dispatchRequest$1;
	var mergeConfig$1 = mergeConfig$2;
	var validator = validator$1;

	var validators = validator.validators;
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios$1(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios$1.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = arguments[1] || {};
	    config.url = arguments[0];
	  } else {
	    config = config || {};
	  }

	  config = mergeConfig$1(this.defaults, config);

	  // Set config.method
	  if (config.method) {
	    config.method = config.method.toLowerCase();
	  } else if (this.defaults.method) {
	    config.method = this.defaults.method.toLowerCase();
	  } else {
	    config.method = 'get';
	  }

	  var transitional = config.transitional;

	  if (transitional !== undefined) {
	    validator.assertOptions(transitional, {
	      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
	      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
	      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
	    }, false);
	  }

	  // filter out skipped interceptors
	  var requestInterceptorChain = [];
	  var synchronousRequestInterceptors = true;
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	      return;
	    }

	    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  var responseInterceptorChain = [];
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  var promise;

	  if (!synchronousRequestInterceptors) {
	    var chain = [dispatchRequest, undefined];

	    Array.prototype.unshift.apply(chain, requestInterceptorChain);
	    chain = chain.concat(responseInterceptorChain);

	    promise = Promise.resolve(config);
	    while (chain.length) {
	      promise = promise.then(chain.shift(), chain.shift());
	    }

	    return promise;
	  }


	  var newConfig = config;
	  while (requestInterceptorChain.length) {
	    var onFulfilled = requestInterceptorChain.shift();
	    var onRejected = requestInterceptorChain.shift();
	    try {
	      newConfig = onFulfilled(newConfig);
	    } catch (error) {
	      onRejected(error);
	      break;
	    }
	  }

	  try {
	    promise = dispatchRequest(newConfig);
	  } catch (error) {
	    return Promise.reject(error);
	  }

	  while (responseInterceptorChain.length) {
	    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
	  }

	  return promise;
	};

	Axios$1.prototype.getUri = function getUri(config) {
	  config = mergeConfig$1(this.defaults, config);
	  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
	};

	// Provide aliases for supported request methods
	utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, data, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	var Axios_1 = Axios$1;

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel$1(message) {
	  this.message = message;
	}

	Cancel$1.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel$1.prototype.__CANCEL__ = true;

	var Cancel_1 = Cancel$1;

	var Cancel = Cancel_1;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	var CancelToken_1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	var spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	var isAxiosError = function isAxiosError(payload) {
	  return (typeof payload === 'object') && (payload.isAxiosError === true);
	};

	var utils = utils$d;
	var bind = bind$2;
	var Axios = Axios_1;
	var mergeConfig = mergeConfig$2;
	var defaults = defaults_1;

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios$2 = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios$2.Axios = Axios;

	// Factory for creating new instances
	axios$2.create = function create(instanceConfig) {
	  return createInstance(mergeConfig(axios$2.defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios$2.Cancel = Cancel_1;
	axios$2.CancelToken = CancelToken_1;
	axios$2.isCancel = isCancel$1;

	// Expose all/spread
	axios$2.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios$2.spread = spread;

	// Expose isAxiosError
	axios$2.isAxiosError = isAxiosError;

	axios$3.exports = axios$2;

	// Allow use of default import syntax in TypeScript
	axios$3.exports.default = axios$2;

	var axios = axios$3.exports;

	var axios$1 = axios;

	function request$1() {
	    throw new Error("http request() should not be called! Use Axios instead");
	}

	function request() {
	    throw new Error("https request() should not be called! Use Axios instead");
	}

	const log = new Logger("DefaultDIDAdapter");
	class DefaultDIDAdapter {
	    constructor(resolver) {
	        checkArgument(resolver && resolver != null, "Invalid resolver URL");
	        let endpoints = null;
	        switch (resolver.toLowerCase()) {
	            case "mainnet":
	                resolver = DefaultDIDAdapter.MAINNET_RESOLVERS[0];
	                endpoints = DefaultDIDAdapter.MAINNET_RESOLVERS;
	                break;
	            case "testnet":
	                resolver = DefaultDIDAdapter.TESTNET_RESOLVERS[0];
	                endpoints = DefaultDIDAdapter.TESTNET_RESOLVERS;
	                break;
	        }
	        try {
	            this.resolver = new URL(resolver);
	        }
	        catch (e) {
	            throw new IllegalArgumentException("Invalid resolver URL", e);
	        }
	        if (endpoints)
	            this.checkNetwork(endpoints);
	    }
	    checkEndpoint(endpoint) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let json = {};
	            let id = Date.now();
	            json.id = id;
	            json.jsonrpc = "2.0";
	            json.method = "eth_blockNumber";
	            let body = JSON.stringify(json);
	            let start = Date.now();
	            let response;
	            try {
	                response = yield this.performRequest(endpoint, body);
	                let latency = Date.now() - start;
	                if (response.id != id)
	                    throw new IOException("Invalid JSON RPC id.");
	                let n = response.result;
	                if (n.startsWith("0x"))
	                    n = n.substring(2);
	                let blockNumber = parseInt(n, 16);
	                return new DefaultDIDAdapter.CheckResult(endpoint, latency, blockNumber);
	            }
	            catch (e) {
	                log.info("Checking the resolver {}...error", endpoint);
	                return DefaultDIDAdapter.CheckResult.from(endpoint);
	            }
	        });
	    }
	    checkNetwork(endpoints) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let results = [];
	            let ps = [];
	            for (let endpoint of endpoints) {
	                let p = this.checkEndpoint(new URL(endpoint)).then((result) => {
	                    results.push(result);
	                });
	                ps.push(p);
	            }
	            try {
	                yield Promise.all(ps);
	            }
	            catch (ignore) {
	            }
	            if (results.length > 0)
	                Collections.sort(results);
	            let best = results[0];
	            if (best.available())
	                this.resolver = best.endpoint;
	        });
	    }
	    performRequest(url, body) {
	        return new Promise((resolve, reject) => {
	            if (runningInBrowser()) {
	                void axios$1({
	                    method: "post",
	                    url: url.toString(),
	                    headers: {
	                        "Content-Type": "application/json",
	                        "Accept": "application/json"
	                    },
	                    data: body
	                }).then((response) => {
	                    if (response.status >= 200 && response.status < 400) {
	                        resolve(response.data);
	                    }
	                    else {
	                        reject(new ResolveException("HTTP error: " + response.statusText));
	                    }
	                });
	            }
	            else {
	                let requestMethod = (url.protocol.indexOf("https") === 0 ? request : request$1);
	                let req = requestMethod();
	                req.on('error', error => {
	                    reject(new ResolveException("HTTP error", error));
	                });
	                if (body)
	                    req.write(body);
	                req.end();
	            }
	        });
	    }
	    resolve(request) {
	        checkArgument(request && request != null, "Invalid request");
	        try {
	            return this.performRequest(this.resolver, request);
	        }
	        catch (e) {
	            throw new NetworkException("Network error.", e);
	        }
	    }
	    createIdTransaction(payload, memo) {
	        throw new UnsupportedOperationException("Not implemented");
	    }
	}
	DefaultDIDAdapter.MAINNET_RESOLVERS = [
	    "https://api.elastos.io/eid",
	    "https://api.trinity-tech.io/eid"
	];
	DefaultDIDAdapter.TESTNET_RESOLVERS = [
	    "https://api-testnet.elastos.io/eid",
	    "https://api-testnet.trinity-tech.io/eid",
	];
	(function (DefaultDIDAdapter) {
	    class CheckResult {
	        constructor(endpoint, latency, lastBlock) {
	            this.endpoint = endpoint;
	            this.latency = latency;
	            this.lastBlock = lastBlock;
	        }
	        static from(endpoint) {
	            return new CheckResult(endpoint, -1, -1);
	        }
	        equals(o) {
	            return this.compareTo(o) == 0 ? true : false;
	        }
	        compareTo(o) {
	            if (o == null)
	                return -1;
	            if (o.latency < 0 && this.latency < 0)
	                return 0;
	            if (o.latency < 0 || this.latency < 0)
	                return this.latency < 0 ? 1 : -1;
	            let diff = o.lastBlock.valueOf() - this.lastBlock.valueOf();
	            if (Math.abs(diff) - CheckResult.MAX_DIFF > 0)
	                return diff > 0 ? 1 : -1;
	            if (this.latency == o.latency) {
	                return diff > 0 ? 1 : -1;
	            }
	            else {
	                return this.latency - o.latency;
	            }
	        }
	        available() {
	            return this.latency >= 0;
	        }
	    }
	    CheckResult.MAX_DIFF = 10;
	    DefaultDIDAdapter.CheckResult = CheckResult;
	})(DefaultDIDAdapter || (DefaultDIDAdapter = {}));

	class LRUCache {
	    constructor(options = {}) {
	        this.count = 0;
	        this.items = new Map();
	        this.first = null;
	        this.last = null;
	        this.options = Object.assign({
	            maxItems: undefined,
	            maxAge: undefined,
	            loader: undefined
	        }, options);
	        this.invalidateAll();
	    }
	    put(key, value, meta) {
	        this.putInternal(key, value, meta);
	    }
	    putInternal(key, value, meta) {
	        let hash = this.getHash(key);
	        let item = this.items.get(hash);
	        if (item) {
	            item.value = value;
	        }
	        else {
	            let k = this.getHash(key);
	            item = {
	                key: key,
	                value: value,
	                prev: null,
	                next: null,
	                meta: meta
	            };
	            this.items.set(k, item);
	            this.count++;
	        }
	        if (this.options.maxAge)
	            item.expires = (Date.now() / 1000) + this.options.maxAge;
	        this.promote(item);
	        if (this.options.maxItems && (this.count > this.options.maxItems)) {
	            this.invalidate(this.last.key);
	        }
	        return item;
	    }
	    getHash(key) {
	        if (typeof key === "string") {
	            return key;
	        }
	        return key.hashCode().toString();
	    }
	    get(key, localLoader) {
	        let hash = this.getHash(key);
	        let item = this.items.get(hash);
	        if (item && item.expires && (Date.now() / 1000 >= item.expires)) {
	            this.invalidate(key);
	            item = null;
	        }
	        if (!item) {
	            let loader = null;
	            if (localLoader)
	                loader = localLoader;
	            else if (this.options.loader)
	                loader = this.options.loader;
	            if (loader) {
	                let { value, meta } = loader(key);
	                if (value !== undefined && value !== null) {
	                    item = this.putInternal(key, value, meta);
	                }
	            }
	            if (!item)
	                return null;
	        }
	        this.promote(item);
	        return item.value;
	    }
	    getAsync(key, asyncLocalLoader) {
	        return __awaiter$9(this, void 0, void 0, function* () {
	            let hash = this.getHash(key);
	            let item = this.items.get(hash);
	            if (item && item.expires && (Date.now() / 1000 >= item.expires)) {
	                this.invalidate(key);
	                item = null;
	            }
	            if (!item) {
	                let loader = null;
	                if (asyncLocalLoader)
	                    loader = asyncLocalLoader;
	                else if (this.options.asyncLoader)
	                    loader = this.options.asyncLoader;
	                if (loader) {
	                    let { value, meta } = yield loader(key);
	                    if (value !== undefined && value !== null) {
	                        item = this.putInternal(key, value, meta);
	                    }
	                }
	                if (!item)
	                    return null;
	            }
	            this.promote(item);
	            return item.value;
	        });
	    }
	    invalidateAll(invalidationFilter) {
	        if (invalidationFilter) {
	            this.items.forEach((v, k, map) => {
	                if (invalidationFilter(v.key))
	                    this.invalidate(v.key);
	            });
	        }
	        else {
	            this.items.clear();
	            this.first = null;
	            this.last = null;
	            this.count = 0;
	        }
	    }
	    invalidate(key) {
	        let hash = this.getHash(key);
	        let item = this.items.get(hash);
	        if (!item)
	            return false;
	        this.count--;
	        this.items.delete(hash);
	        if (item.prev)
	            item.prev.next = item.next;
	        if (item.next)
	            item.next.prev = item.prev;
	        if (item === this.first)
	            this.first = item.next;
	        if (item === this.last)
	            this.last = item.prev;
	        return true;
	    }
	    has(key) {
	        let hash = this.getHash(key);
	        let item = this.items.get(hash);
	        if (!item)
	            return false;
	        if (item.expires && (Date.now() / 1000 >= item.expires)) {
	            return false;
	        }
	        return true;
	    }
	    promote(item) {
	        if (item !== this.first) {
	            if (item.prev)
	                item.prev.next = item.next;
	            if (item.next)
	                item.next.prev = item.prev;
	            if (item === this.last)
	                this.last = item.prev;
	            item.prev = null;
	            item.next = this.first;
	            if (this.first)
	                this.first.prev = item;
	            this.first = item;
	            if (!this.last)
	                this.last = item;
	        }
	    }
	    getMeta(key) {
	        let hash = this.getHash(key);
	        let item = this.items.get(hash);
	        if (!item)
	            return null;
	        if (item.expires && (Date.now() / 1000 >= item.expires)) {
	            this.invalidate(key);
	            return null;
	        }
	        this.promote(item);
	        return item.meta;
	    }
	}

	Logger.setLevel(Logger.TRACE);

	class EssentialsBridge {
	    constructor() {
	        this.callbacks = new Map();
	    }
	    /**
	     * Internal js -> native message handler.
	     *
	     * Returns a promise that is resolved when the native code (essentials) sends the command
	     * response.
	     */
	    postMessage(handler, data) {
	        let id = Date.now() + Math.floor(Math.random() * 100000);
	        console.log("EssentialsBridge: postMessage", handler, id, data);
	        return new Promise((resolve, reject) => {
	            this.callbacks.set(id, { resolve, reject });
	            let object = {
	                id: id,
	                name: handler,
	                object: data,
	            };
	            window.webkit.messageHandlers.essentialsExtractor.postMessage(JSON.stringify(object));
	        });
	    }
	    /**
	     * Internal native result -> js
	     */
	    sendResponse(id, result) {
	        console.log("EssentialsBridge: sendResponse", id, result);
	        this.callbacks.get(id).resolve(result);
	    }
	    /**
	    * Internal native error -> js
	    */
	    sendError(id, error) {
	        console.log("EssentialsBridge: sendError", id, error);
	        let callback = this.callbacks.get(id);
	        if (callback) {
	            this.callbacks.get(id).reject(error);
	            this.callbacks.delete(id);
	        }
	    }
	}
	const essentialsBridge = new EssentialsBridge();

	class DIDOperations {
	    static async getCredentials(query) {
	        console.log("getCredentials request received", query);
	        let response = await essentialsBridge.postMessage("elastos_getCredentials", query);
	        console.log("getCredentials response received", response);
	        return VerifiablePresentation.parse(JSON.stringify(response));
	    }
	    static async requestCredentials(query) {
	        console.log("requestCredentials request received", query);
	        let response = await essentialsBridge.postMessage("elastos_requestCredentials", query);
	        console.log("requestCredentials response received", response);
	        return VerifiablePresentation.parse(JSON.stringify(response));
	    }
	    static async importCredentials(credentials, options) {
	        console.log("importCredentials request received", credentials, options);
	        let response = await essentialsBridge.postMessage("elastos_importCredentials", {
	            credentials: credentials.map(c => c.toString()),
	            options
	        });
	        console.log("importCredentials response received", response);
	        return response;
	    }
	    static async signData(data, jwtExtra, signatureFieldName) {
	        console.log("signData request received", data, jwtExtra, signatureFieldName);
	        let response = await essentialsBridge.postMessage("elastos_signData", {
	            data, jwtExtra, signatureFieldName
	        });
	        console.log("signData response received", response);
	        return response;
	    }
	}

	/**
	 * Connector generated as a standalone JS file that can be injected into dApps opened from the
	 * Essentials dApp browser. This connector is normally injected as a global window.elastos and can then
	 * be found by the connectivity SDK as one of the available connectors for elastos operations.
	 */
	class EssentialsDABConnector {
	    constructor() {
	        this.name = "essentialsiab";
	    }
	    async getDisplayName() {
	        return "Elastos Essentials In App Browser";
	    }
	    /**
	     * DID API
	     */
	    getCredentials(query) {
	        return DIDOperations.getCredentials(query);
	    }
	    requestCredentials(query) {
	        return DIDOperations.requestCredentials(query);
	    }
	    issueCredential(holder, types, subject, identifier, expirationDate) {
	        throw new Error("Method not implemented.");
	    }
	    importCredentials(credentials, options) {
	        return DIDOperations.importCredentials(credentials, options);
	    }
	    signData(data, jwtExtra, signatureFieldName) {
	        return DIDOperations.signData(data, jwtExtra, signatureFieldName);
	    }
	    deleteCredentials(credentialIds, options) {
	        throw new Error("Method not implemented.");
	    }
	    requestPublish() {
	        throw new Error("Method not implemented.");
	    }
	    generateAppIdCredential(appInstanceDID, appDID) {
	        throw new Error("Method not implemented.");
	    }
	    pay(query) {
	        throw new Error("Method not implemented.");
	    }
	    voteForDPoS() {
	        throw new Error("Method not implemented.");
	    }
	    voteForCRCouncil() {
	        throw new Error("Method not implemented.");
	    }
	    voteForCRProposal() {
	        throw new Error("Method not implemented.");
	    }
	    sendSmartContractTransaction(payload) {
	        throw new Error("Method not implemented.");
	    }
	    sendResponse(id, result) {
	        essentialsBridge.sendResponse(id, result);
	    }
	    sendError(id, error) {
	        essentialsBridge.sendError(id, error);
	    }
	}
	// Expose this class globally to be able to create instances from the browser dApp.
	window["EssentialsDABConnector"] = EssentialsDABConnector;

})();
//# sourceMappingURL=essentialsiabconnector.js.map
